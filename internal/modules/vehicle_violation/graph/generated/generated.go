// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/vehicle_violation/graph/model"
	model1 "VehicleSupervision/internal/modules/vehicle_violation/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AppEnforcement struct {
		Coordinate          func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		CreatedBy           func(childComplexity int) int
		DeletedAt           func(childComplexity int) int
		DeletedBy           func(childComplexity int) int
		EditText            func(childComplexity int) int
		EnterpriseType      func(childComplexity int) int
		ID                  func(childComplexity int) int
		IllegalPhotoID      func(childComplexity int) int
		LocationDescription func(childComplexity int) int
		OperationUser       func(childComplexity int) int
		PicketStatus        func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UpdatedBy           func(childComplexity int) int
		VehicleID           func(childComplexity int) int
	}

	AppEnforcementAggregate struct {
		Aggregate func(childComplexity int) int
	}

	AppEnforcementAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	AppEnforcementAvgFields struct {
		ID           func(childComplexity int) int
		PicketStatus func(childComplexity int) int
	}

	AppEnforcementMaxFields struct {
		Coordinate          func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		CreatedBy           func(childComplexity int) int
		DeletedAt           func(childComplexity int) int
		DeletedBy           func(childComplexity int) int
		EditText            func(childComplexity int) int
		EnterpriseType      func(childComplexity int) int
		ID                  func(childComplexity int) int
		IllegalPhotoID      func(childComplexity int) int
		LocationDescription func(childComplexity int) int
		OperationUser       func(childComplexity int) int
		PicketStatus        func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UpdatedBy           func(childComplexity int) int
		VehicleID           func(childComplexity int) int
	}

	AppEnforcementMinFields struct {
		Coordinate          func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		CreatedBy           func(childComplexity int) int
		DeletedAt           func(childComplexity int) int
		DeletedBy           func(childComplexity int) int
		EditText            func(childComplexity int) int
		EnterpriseType      func(childComplexity int) int
		ID                  func(childComplexity int) int
		IllegalPhotoID      func(childComplexity int) int
		LocationDescription func(childComplexity int) int
		OperationUser       func(childComplexity int) int
		PicketStatus        func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UpdatedBy           func(childComplexity int) int
		VehicleID           func(childComplexity int) int
	}

	AppEnforcementMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	AppEnforcementStddevFields struct {
		ID           func(childComplexity int) int
		PicketStatus func(childComplexity int) int
	}

	AppEnforcementStddevPopFields struct {
		ID           func(childComplexity int) int
		PicketStatus func(childComplexity int) int
	}

	AppEnforcementStddevSampFields struct {
		ID           func(childComplexity int) int
		PicketStatus func(childComplexity int) int
	}

	AppEnforcementSumFields struct {
		ID           func(childComplexity int) int
		PicketStatus func(childComplexity int) int
	}

	AppEnforcementVarPopFields struct {
		ID           func(childComplexity int) int
		PicketStatus func(childComplexity int) int
	}

	AppEnforcementVarSampFields struct {
		ID           func(childComplexity int) int
		PicketStatus func(childComplexity int) int
	}

	AppEnforcementVarianceFields struct {
		ID           func(childComplexity int) int
		PicketStatus func(childComplexity int) int
	}

	DeductionReport struct {
		AreaID            func(childComplexity int) int
		Cause             func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		Date              func(childComplexity int) int
		DeductionReportID func(childComplexity int) int
		DeletedAt         func(childComplexity int) int
		DeletedBy         func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
		InputPerson       func(childComplexity int) int
		InputTime         func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
	}

	DeductionReportAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DeductionReportAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DeductionReportAvgFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	DeductionReportMaxFields struct {
		AreaID            func(childComplexity int) int
		Cause             func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		Date              func(childComplexity int) int
		DeductionReportID func(childComplexity int) int
		DeletedAt         func(childComplexity int) int
		DeletedBy         func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
		InputPerson       func(childComplexity int) int
		InputTime         func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
	}

	DeductionReportMinFields struct {
		AreaID            func(childComplexity int) int
		Cause             func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		Date              func(childComplexity int) int
		DeductionReportID func(childComplexity int) int
		DeletedAt         func(childComplexity int) int
		DeletedBy         func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
		InputPerson       func(childComplexity int) int
		InputTime         func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
	}

	DeductionReportMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DeductionReportStddevFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	DeductionReportStddevPopFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	DeductionReportStddevSampFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	DeductionReportSumFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	DeductionReportVarPopFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	DeductionReportVarSampFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	DeductionReportVarianceFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	DriverPeccancyCheck struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		DriverID     func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		ID           func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		VehicleID    func(childComplexity int) int
	}

	DriverPeccancyCheckAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DriverPeccancyCheckAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DriverPeccancyCheckAvgFields struct {
		ID func(childComplexity int) int
	}

	DriverPeccancyCheckMaxFields struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		DriverID     func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		ID           func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		VehicleID    func(childComplexity int) int
	}

	DriverPeccancyCheckMinFields struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		DriverID     func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		ID           func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		VehicleID    func(childComplexity int) int
	}

	DriverPeccancyCheckMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DriverPeccancyCheckStddevFields struct {
		ID func(childComplexity int) int
	}

	DriverPeccancyCheckStddevPopFields struct {
		ID func(childComplexity int) int
	}

	DriverPeccancyCheckStddevSampFields struct {
		ID func(childComplexity int) int
	}

	DriverPeccancyCheckSumFields struct {
		ID func(childComplexity int) int
	}

	DriverPeccancyCheckVarPopFields struct {
		ID func(childComplexity int) int
	}

	DriverPeccancyCheckVarSampFields struct {
		ID func(childComplexity int) int
	}

	DriverPeccancyCheckVarianceFields struct {
		ID func(childComplexity int) int
	}

	IllegalPhoto struct {
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		DeletedBy      func(childComplexity int) int
		ID             func(childComplexity int) int
		IllegalPhotoID func(childComplexity int) int
		IsDeleted      func(childComplexity int) int
		IsSynchronized func(childComplexity int) int
		PictureAddress func(childComplexity int) int
		PictureName    func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
	}

	IllegalPhotoAggregate struct {
		Aggregate func(childComplexity int) int
	}

	IllegalPhotoAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	IllegalPhotoAvgFields struct {
		ID func(childComplexity int) int
	}

	IllegalPhotoMaxFields struct {
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		DeletedBy      func(childComplexity int) int
		ID             func(childComplexity int) int
		IllegalPhotoID func(childComplexity int) int
		IsDeleted      func(childComplexity int) int
		IsSynchronized func(childComplexity int) int
		PictureAddress func(childComplexity int) int
		PictureName    func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
	}

	IllegalPhotoMinFields struct {
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		DeletedBy      func(childComplexity int) int
		ID             func(childComplexity int) int
		IllegalPhotoID func(childComplexity int) int
		IsDeleted      func(childComplexity int) int
		IsSynchronized func(childComplexity int) int
		PictureAddress func(childComplexity int) int
		PictureName    func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
	}

	IllegalPhotoMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	IllegalPhotoStddevFields struct {
		ID func(childComplexity int) int
	}

	IllegalPhotoStddevPopFields struct {
		ID func(childComplexity int) int
	}

	IllegalPhotoStddevSampFields struct {
		ID func(childComplexity int) int
	}

	IllegalPhotoSumFields struct {
		ID func(childComplexity int) int
	}

	IllegalPhotoVarPopFields struct {
		ID func(childComplexity int) int
	}

	IllegalPhotoVarSampFields struct {
		ID func(childComplexity int) int
	}

	IllegalPhotoVarianceFields struct {
		ID func(childComplexity int) int
	}

	Mutation struct {
		DeleteAppEnforcement                    func(childComplexity int, where model.AppEnforcementBoolExp) int
		DeleteAppEnforcementByPk                func(childComplexity int, id int64) int
		DeleteDeductionReport                   func(childComplexity int, where model.DeductionReportBoolExp) int
		DeleteDeductionReportByPk               func(childComplexity int, id int64) int
		DeleteDriverPeccancyCheck               func(childComplexity int, where model.DriverPeccancyCheckBoolExp) int
		DeleteDriverPeccancyCheckByPk           func(childComplexity int, id int64) int
		DeleteIllegalPhoto                      func(childComplexity int, where model.IllegalPhotoBoolExp) int
		DeleteIllegalPhotoByPk                  func(childComplexity int, id int64) int
		DeleteRegionalViolationRegister         func(childComplexity int, where model.RegionalViolationRegisterBoolExp) int
		DeleteRegionalViolationRegisterByPk     func(childComplexity int, id int64) int
		DeleteSeriousTrafficViolation           func(childComplexity int, where model.SeriousTrafficViolationBoolExp) int
		DeleteSeriousTrafficViolationByPk       func(childComplexity int, id int64) int
		DeleteVehicleViolationDetails           func(childComplexity int, where model.VehicleViolationDetailsBoolExp) int
		DeleteVehicleViolationDetailsByPk       func(childComplexity int, id int64) int
		DeleteVehicleViolationScoringItems      func(childComplexity int, where model.VehicleViolationScoringItemsBoolExp) int
		DeleteVehicleViolationScoringItemsByPk  func(childComplexity int, id int64) int
		DeleteVehicleViolationScoringRecord     func(childComplexity int, where model.VehicleViolationScoringRecordBoolExp) int
		DeleteVehicleViolationScoringRecordByPk func(childComplexity int, id int64) int
		DeleteVioCodewfdm                       func(childComplexity int, where model.VioCodewfdmBoolExp) int
		DeleteVioCodewfdmByPk                   func(childComplexity int, id string) int
		DeleteViolationRegistration             func(childComplexity int, where model.ViolationRegistrationBoolExp) int
		DeleteViolationRegistrationByPk         func(childComplexity int, id int64) int
		InsertAppEnforcement                    func(childComplexity int, objects []*model.AppEnforcementInsertInput) int
		InsertAppEnforcementOne                 func(childComplexity int, objects model.AppEnforcementInsertInput) int
		InsertDeductionReport                   func(childComplexity int, objects []*model.DeductionReportInsertInput) int
		InsertDeductionReportOne                func(childComplexity int, objects model.DeductionReportInsertInput) int
		InsertDriverPeccancyCheck               func(childComplexity int, objects []*model.DriverPeccancyCheckInsertInput) int
		InsertDriverPeccancyCheckOne            func(childComplexity int, objects model.DriverPeccancyCheckInsertInput) int
		InsertIllegalPhoto                      func(childComplexity int, objects []*model.IllegalPhotoInsertInput) int
		InsertIllegalPhotoOne                   func(childComplexity int, objects model.IllegalPhotoInsertInput) int
		InsertRegionalViolationRegister         func(childComplexity int, objects []*model.RegionalViolationRegisterInsertInput) int
		InsertRegionalViolationRegisterOne      func(childComplexity int, objects model.RegionalViolationRegisterInsertInput) int
		InsertSeriousTrafficViolation           func(childComplexity int, objects []*model.SeriousTrafficViolationInsertInput) int
		InsertSeriousTrafficViolationOne        func(childComplexity int, objects model.SeriousTrafficViolationInsertInput) int
		InsertVehicleViolationDetails           func(childComplexity int, objects []*model.VehicleViolationDetailsInsertInput) int
		InsertVehicleViolationDetailsOne        func(childComplexity int, objects model.VehicleViolationDetailsInsertInput) int
		InsertVehicleViolationScoringItems      func(childComplexity int, objects []*model.VehicleViolationScoringItemsInsertInput) int
		InsertVehicleViolationScoringItemsOne   func(childComplexity int, objects model.VehicleViolationScoringItemsInsertInput) int
		InsertVehicleViolationScoringRecord     func(childComplexity int, objects []*model.VehicleViolationScoringRecordInsertInput) int
		InsertVehicleViolationScoringRecordOne  func(childComplexity int, objects model.VehicleViolationScoringRecordInsertInput) int
		InsertVioCodewfdm                       func(childComplexity int, objects []*model.VioCodewfdmInsertInput) int
		InsertVioCodewfdmOne                    func(childComplexity int, objects model.VioCodewfdmInsertInput) int
		InsertViolationRegistration             func(childComplexity int, objects []*model.ViolationRegistrationInsertInput) int
		InsertViolationRegistrationOne          func(childComplexity int, objects model.ViolationRegistrationInsertInput) int
		UpdateAppEnforcement                    func(childComplexity int, inc *model.AppEnforcementIncInput, set *model.AppEnforcementSetInput, where model.AppEnforcementBoolExp) int
		UpdateAppEnforcementByPk                func(childComplexity int, inc *model.AppEnforcementIncInput, set *model.AppEnforcementSetInput, id int64) int
		UpdateDeductionReport                   func(childComplexity int, inc *model.DeductionReportIncInput, set *model.DeductionReportSetInput, where model.DeductionReportBoolExp) int
		UpdateDeductionReportByPk               func(childComplexity int, inc *model.DeductionReportIncInput, set *model.DeductionReportSetInput, id int64) int
		UpdateDriverPeccancyCheck               func(childComplexity int, inc *model.DriverPeccancyCheckIncInput, set *model.DriverPeccancyCheckSetInput, where model.DriverPeccancyCheckBoolExp) int
		UpdateDriverPeccancyCheckByPk           func(childComplexity int, inc *model.DriverPeccancyCheckIncInput, set *model.DriverPeccancyCheckSetInput, id int64) int
		UpdateIllegalPhoto                      func(childComplexity int, inc *model.IllegalPhotoIncInput, set *model.IllegalPhotoSetInput, where model.IllegalPhotoBoolExp) int
		UpdateIllegalPhotoByPk                  func(childComplexity int, inc *model.IllegalPhotoIncInput, set *model.IllegalPhotoSetInput, id int64) int
		UpdateRegionalViolationRegister         func(childComplexity int, inc *model.RegionalViolationRegisterIncInput, set *model.RegionalViolationRegisterSetInput, where model.RegionalViolationRegisterBoolExp) int
		UpdateRegionalViolationRegisterByPk     func(childComplexity int, inc *model.RegionalViolationRegisterIncInput, set *model.RegionalViolationRegisterSetInput, id int64) int
		UpdateSeriousTrafficViolation           func(childComplexity int, inc *model.SeriousTrafficViolationIncInput, set *model.SeriousTrafficViolationSetInput, where model.SeriousTrafficViolationBoolExp) int
		UpdateSeriousTrafficViolationByPk       func(childComplexity int, inc *model.SeriousTrafficViolationIncInput, set *model.SeriousTrafficViolationSetInput, id int64) int
		UpdateVehicleViolationDetails           func(childComplexity int, inc *model.VehicleViolationDetailsIncInput, set *model.VehicleViolationDetailsSetInput, where model.VehicleViolationDetailsBoolExp) int
		UpdateVehicleViolationDetailsByPk       func(childComplexity int, inc *model.VehicleViolationDetailsIncInput, set *model.VehicleViolationDetailsSetInput, id int64) int
		UpdateVehicleViolationScoringItems      func(childComplexity int, inc *model.VehicleViolationScoringItemsIncInput, set *model.VehicleViolationScoringItemsSetInput, where model.VehicleViolationScoringItemsBoolExp) int
		UpdateVehicleViolationScoringItemsByPk  func(childComplexity int, inc *model.VehicleViolationScoringItemsIncInput, set *model.VehicleViolationScoringItemsSetInput, id int64) int
		UpdateVehicleViolationScoringRecord     func(childComplexity int, inc *model.VehicleViolationScoringRecordIncInput, set *model.VehicleViolationScoringRecordSetInput, where model.VehicleViolationScoringRecordBoolExp) int
		UpdateVehicleViolationScoringRecordByPk func(childComplexity int, inc *model.VehicleViolationScoringRecordIncInput, set *model.VehicleViolationScoringRecordSetInput, id int64) int
		UpdateVioCodewfdm                       func(childComplexity int, inc *model.VioCodewfdmIncInput, set *model.VioCodewfdmSetInput, where model.VioCodewfdmBoolExp) int
		UpdateVioCodewfdmByPk                   func(childComplexity int, inc *model.VioCodewfdmIncInput, set *model.VioCodewfdmSetInput, id string) int
		UpdateViolationRegistration             func(childComplexity int, inc *model.ViolationRegistrationIncInput, set *model.ViolationRegistrationSetInput, where model.ViolationRegistrationBoolExp) int
		UpdateViolationRegistrationByPk         func(childComplexity int, inc *model.ViolationRegistrationIncInput, set *model.ViolationRegistrationSetInput, id int64) int
	}

	Query struct {
		AppEnforcement                         func(childComplexity int, distinctOn []model.AppEnforcementSelectColumn, limit *int, offset *int, orderBy []*model.AppEnforcementOrderBy, where *model.AppEnforcementBoolExp) int
		AppEnforcementAggregate                func(childComplexity int, distinctOn []model.AppEnforcementSelectColumn, limit *int, offset *int, orderBy []*model.AppEnforcementOrderBy, where *model.AppEnforcementBoolExp) int
		AppEnforcementByPk                     func(childComplexity int, id int64) int
		DeductionReport                        func(childComplexity int, distinctOn []model.DeductionReportSelectColumn, limit *int, offset *int, orderBy []*model.DeductionReportOrderBy, where *model.DeductionReportBoolExp) int
		DeductionReportAggregate               func(childComplexity int, distinctOn []model.DeductionReportSelectColumn, limit *int, offset *int, orderBy []*model.DeductionReportOrderBy, where *model.DeductionReportBoolExp) int
		DeductionReportByPk                    func(childComplexity int, id int64) int
		DriverPeccancyCheck                    func(childComplexity int, distinctOn []model.DriverPeccancyCheckSelectColumn, limit *int, offset *int, orderBy []*model.DriverPeccancyCheckOrderBy, where *model.DriverPeccancyCheckBoolExp) int
		DriverPeccancyCheckAggregate           func(childComplexity int, distinctOn []model.DriverPeccancyCheckSelectColumn, limit *int, offset *int, orderBy []*model.DriverPeccancyCheckOrderBy, where *model.DriverPeccancyCheckBoolExp) int
		DriverPeccancyCheckByPk                func(childComplexity int, id int64) int
		IllegalPhoto                           func(childComplexity int, distinctOn []model.IllegalPhotoSelectColumn, limit *int, offset *int, orderBy []*model.IllegalPhotoOrderBy, where *model.IllegalPhotoBoolExp) int
		IllegalPhotoAggregate                  func(childComplexity int, distinctOn []model.IllegalPhotoSelectColumn, limit *int, offset *int, orderBy []*model.IllegalPhotoOrderBy, where *model.IllegalPhotoBoolExp) int
		IllegalPhotoByPk                       func(childComplexity int, id int64) int
		RegionalViolationRegister              func(childComplexity int, distinctOn []model.RegionalViolationRegisterSelectColumn, limit *int, offset *int, orderBy []*model.RegionalViolationRegisterOrderBy, where *model.RegionalViolationRegisterBoolExp) int
		RegionalViolationRegisterAggregate     func(childComplexity int, distinctOn []model.RegionalViolationRegisterSelectColumn, limit *int, offset *int, orderBy []*model.RegionalViolationRegisterOrderBy, where *model.RegionalViolationRegisterBoolExp) int
		RegionalViolationRegisterByPk          func(childComplexity int, id int64) int
		SeriousTrafficViolation                func(childComplexity int, distinctOn []model.SeriousTrafficViolationSelectColumn, limit *int, offset *int, orderBy []*model.SeriousTrafficViolationOrderBy, where *model.SeriousTrafficViolationBoolExp) int
		SeriousTrafficViolationAggregate       func(childComplexity int, distinctOn []model.SeriousTrafficViolationSelectColumn, limit *int, offset *int, orderBy []*model.SeriousTrafficViolationOrderBy, where *model.SeriousTrafficViolationBoolExp) int
		SeriousTrafficViolationByPk            func(childComplexity int, id int64) int
		VehicleViolationDetails                func(childComplexity int, distinctOn []model.VehicleViolationDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationDetailsOrderBy, where *model.VehicleViolationDetailsBoolExp) int
		VehicleViolationDetailsAggregate       func(childComplexity int, distinctOn []model.VehicleViolationDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationDetailsOrderBy, where *model.VehicleViolationDetailsBoolExp) int
		VehicleViolationDetailsByPk            func(childComplexity int, id int64) int
		VehicleViolationScoringItems           func(childComplexity int, distinctOn []model.VehicleViolationScoringItemsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringItemsOrderBy, where *model.VehicleViolationScoringItemsBoolExp) int
		VehicleViolationScoringItemsAggregate  func(childComplexity int, distinctOn []model.VehicleViolationScoringItemsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringItemsOrderBy, where *model.VehicleViolationScoringItemsBoolExp) int
		VehicleViolationScoringItemsByPk       func(childComplexity int, id int64) int
		VehicleViolationScoringRecord          func(childComplexity int, distinctOn []model.VehicleViolationScoringRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringRecordOrderBy, where *model.VehicleViolationScoringRecordBoolExp) int
		VehicleViolationScoringRecordAggregate func(childComplexity int, distinctOn []model.VehicleViolationScoringRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringRecordOrderBy, where *model.VehicleViolationScoringRecordBoolExp) int
		VehicleViolationScoringRecordByPk      func(childComplexity int, id int64) int
		VioCodewfdm                            func(childComplexity int, distinctOn []model.VioCodewfdmSelectColumn, limit *int, offset *int, orderBy []*model.VioCodewfdmOrderBy, where *model.VioCodewfdmBoolExp) int
		VioCodewfdmAggregate                   func(childComplexity int, distinctOn []model.VioCodewfdmSelectColumn, limit *int, offset *int, orderBy []*model.VioCodewfdmOrderBy, where *model.VioCodewfdmBoolExp) int
		VioCodewfdmByPk                        func(childComplexity int, id string) int
		ViolationRegistration                  func(childComplexity int, distinctOn []model.ViolationRegistrationSelectColumn, limit *int, offset *int, orderBy []*model.ViolationRegistrationOrderBy, where *model.ViolationRegistrationBoolExp) int
		ViolationRegistrationAggregate         func(childComplexity int, distinctOn []model.ViolationRegistrationSelectColumn, limit *int, offset *int, orderBy []*model.ViolationRegistrationOrderBy, where *model.ViolationRegistrationBoolExp) int
		ViolationRegistrationByPk              func(childComplexity int, id int64) int
	}

	RegionalViolationRegister struct {
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		DriverID                    func(childComplexity int) int
		ID                          func(childComplexity int) int
		IllegalCode                 func(childComplexity int) int
		IllegalTime                 func(childComplexity int) int
		IllegalType                 func(childComplexity int) int
		IsDeleted                   func(childComplexity int) int
		IsRegister                  func(childComplexity int) int
		Operator                    func(childComplexity int) int
		ProcessingAgency            func(childComplexity int) int
		RegionalViolationRegisterID func(childComplexity int) int
		RegisterTime                func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
		VehicleID                   func(childComplexity int) int
		ViolationDetailID           func(childComplexity int) int
	}

	RegionalViolationRegisterAggregate struct {
		Aggregate func(childComplexity int) int
	}

	RegionalViolationRegisterAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	RegionalViolationRegisterAvgFields struct {
		ID          func(childComplexity int) int
		IllegalCode func(childComplexity int) int
		IllegalType func(childComplexity int) int
	}

	RegionalViolationRegisterMaxFields struct {
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		DriverID                    func(childComplexity int) int
		ID                          func(childComplexity int) int
		IllegalCode                 func(childComplexity int) int
		IllegalTime                 func(childComplexity int) int
		IllegalType                 func(childComplexity int) int
		IsDeleted                   func(childComplexity int) int
		IsRegister                  func(childComplexity int) int
		Operator                    func(childComplexity int) int
		ProcessingAgency            func(childComplexity int) int
		RegionalViolationRegisterID func(childComplexity int) int
		RegisterTime                func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
		VehicleID                   func(childComplexity int) int
		ViolationDetailID           func(childComplexity int) int
	}

	RegionalViolationRegisterMinFields struct {
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		DriverID                    func(childComplexity int) int
		ID                          func(childComplexity int) int
		IllegalCode                 func(childComplexity int) int
		IllegalTime                 func(childComplexity int) int
		IllegalType                 func(childComplexity int) int
		IsDeleted                   func(childComplexity int) int
		IsRegister                  func(childComplexity int) int
		Operator                    func(childComplexity int) int
		ProcessingAgency            func(childComplexity int) int
		RegionalViolationRegisterID func(childComplexity int) int
		RegisterTime                func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
		VehicleID                   func(childComplexity int) int
		ViolationDetailID           func(childComplexity int) int
	}

	RegionalViolationRegisterMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	RegionalViolationRegisterStddevFields struct {
		ID          func(childComplexity int) int
		IllegalCode func(childComplexity int) int
		IllegalType func(childComplexity int) int
	}

	RegionalViolationRegisterStddevPopFields struct {
		ID          func(childComplexity int) int
		IllegalCode func(childComplexity int) int
		IllegalType func(childComplexity int) int
	}

	RegionalViolationRegisterStddevSampFields struct {
		ID          func(childComplexity int) int
		IllegalCode func(childComplexity int) int
		IllegalType func(childComplexity int) int
	}

	RegionalViolationRegisterSumFields struct {
		ID          func(childComplexity int) int
		IllegalCode func(childComplexity int) int
		IllegalType func(childComplexity int) int
	}

	RegionalViolationRegisterVarPopFields struct {
		ID          func(childComplexity int) int
		IllegalCode func(childComplexity int) int
		IllegalType func(childComplexity int) int
	}

	RegionalViolationRegisterVarSampFields struct {
		ID          func(childComplexity int) int
		IllegalCode func(childComplexity int) int
		IllegalType func(childComplexity int) int
	}

	RegionalViolationRegisterVarianceFields struct {
		ID          func(childComplexity int) int
		IllegalCode func(childComplexity int) int
		IllegalType func(childComplexity int) int
	}

	SeriousTrafficViolation struct {
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		DeletedBy                 func(childComplexity int) int
		ID                        func(childComplexity int) int
		IllegalCode               func(childComplexity int) int
		IllegalTime               func(childComplexity int) int
		SeriousTrafficViolationID func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		UpdatedBy                 func(childComplexity int) int
		VehicleID                 func(childComplexity int) int
	}

	SeriousTrafficViolationAggregate struct {
		Aggregate func(childComplexity int) int
	}

	SeriousTrafficViolationAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	SeriousTrafficViolationAvgFields struct {
		ID func(childComplexity int) int
	}

	SeriousTrafficViolationMaxFields struct {
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		DeletedBy                 func(childComplexity int) int
		ID                        func(childComplexity int) int
		IllegalCode               func(childComplexity int) int
		IllegalTime               func(childComplexity int) int
		SeriousTrafficViolationID func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		UpdatedBy                 func(childComplexity int) int
		VehicleID                 func(childComplexity int) int
	}

	SeriousTrafficViolationMinFields struct {
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		DeletedBy                 func(childComplexity int) int
		ID                        func(childComplexity int) int
		IllegalCode               func(childComplexity int) int
		IllegalTime               func(childComplexity int) int
		SeriousTrafficViolationID func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		UpdatedBy                 func(childComplexity int) int
		VehicleID                 func(childComplexity int) int
	}

	SeriousTrafficViolationMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	SeriousTrafficViolationStddevFields struct {
		ID func(childComplexity int) int
	}

	SeriousTrafficViolationStddevPopFields struct {
		ID func(childComplexity int) int
	}

	SeriousTrafficViolationStddevSampFields struct {
		ID func(childComplexity int) int
	}

	SeriousTrafficViolationSumFields struct {
		ID func(childComplexity int) int
	}

	SeriousTrafficViolationVarPopFields struct {
		ID func(childComplexity int) int
	}

	SeriousTrafficViolationVarSampFields struct {
		ID func(childComplexity int) int
	}

	SeriousTrafficViolationVarianceFields struct {
		ID func(childComplexity int) int
	}

	VehicleViolationDetails struct {
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		DecisionNumber        func(childComplexity int) int
		DeletedAt             func(childComplexity int) int
		DeletedBy             func(childComplexity int) int
		DiscoveryAgency       func(childComplexity int) int
		DriverID              func(childComplexity int) int
		EnterpriseID          func(childComplexity int) int
		HandleAt              func(childComplexity int) int
		HandleBy              func(childComplexity int) int
		ID                    func(childComplexity int) int
		IllegalCode           func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		IllegalLocation       func(childComplexity int) int
		IllegalPhoto          func(childComplexity int) int
		IllegalTime           func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		IsDeleted             func(childComplexity int) int
		IsHandle              func(childComplexity int) int
		IsNoticeDriver        func(childComplexity int) int
		IsSend                func(childComplexity int) int
		MeasuredValue         func(childComplexity int) int
		NoticeTime            func(childComplexity int) int
		PartyName             func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
		StandardValue         func(childComplexity int) int
		UpdateTimeIn          func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		UpdatedBy             func(childComplexity int) int
		VehicleID             func(childComplexity int) int
		VehicleInformation    func(childComplexity int) int
		ViolationDetailID     func(childComplexity int) int
	}

	VehicleViolationDetailsAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VehicleViolationDetailsAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleViolationDetailsAvgFields struct {
		ID                    func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
	}

	VehicleViolationDetailsMaxFields struct {
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		DecisionNumber        func(childComplexity int) int
		DeletedAt             func(childComplexity int) int
		DeletedBy             func(childComplexity int) int
		DiscoveryAgency       func(childComplexity int) int
		DriverID              func(childComplexity int) int
		EnterpriseID          func(childComplexity int) int
		HandleAt              func(childComplexity int) int
		HandleBy              func(childComplexity int) int
		ID                    func(childComplexity int) int
		IllegalCode           func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		IllegalLocation       func(childComplexity int) int
		IllegalPhoto          func(childComplexity int) int
		IllegalTime           func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		IsDeleted             func(childComplexity int) int
		IsHandle              func(childComplexity int) int
		IsNoticeDriver        func(childComplexity int) int
		IsSend                func(childComplexity int) int
		MeasuredValue         func(childComplexity int) int
		NoticeTime            func(childComplexity int) int
		PartyName             func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
		StandardValue         func(childComplexity int) int
		UpdateTimeIn          func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		UpdatedBy             func(childComplexity int) int
		VehicleID             func(childComplexity int) int
		VehicleInformation    func(childComplexity int) int
		ViolationDetailID     func(childComplexity int) int
	}

	VehicleViolationDetailsMinFields struct {
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		DecisionNumber        func(childComplexity int) int
		DeletedAt             func(childComplexity int) int
		DeletedBy             func(childComplexity int) int
		DiscoveryAgency       func(childComplexity int) int
		DriverID              func(childComplexity int) int
		EnterpriseID          func(childComplexity int) int
		HandleAt              func(childComplexity int) int
		HandleBy              func(childComplexity int) int
		ID                    func(childComplexity int) int
		IllegalCode           func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		IllegalLocation       func(childComplexity int) int
		IllegalPhoto          func(childComplexity int) int
		IllegalTime           func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		IsDeleted             func(childComplexity int) int
		IsHandle              func(childComplexity int) int
		IsNoticeDriver        func(childComplexity int) int
		IsSend                func(childComplexity int) int
		MeasuredValue         func(childComplexity int) int
		NoticeTime            func(childComplexity int) int
		PartyName             func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
		StandardValue         func(childComplexity int) int
		UpdateTimeIn          func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		UpdatedBy             func(childComplexity int) int
		VehicleID             func(childComplexity int) int
		VehicleInformation    func(childComplexity int) int
		ViolationDetailID     func(childComplexity int) int
	}

	VehicleViolationDetailsMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleViolationDetailsStddevFields struct {
		ID                    func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
	}

	VehicleViolationDetailsStddevPopFields struct {
		ID                    func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
	}

	VehicleViolationDetailsStddevSampFields struct {
		ID                    func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
	}

	VehicleViolationDetailsSumFields struct {
		ID                    func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
	}

	VehicleViolationDetailsVarPopFields struct {
		ID                    func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
	}

	VehicleViolationDetailsVarSampFields struct {
		ID                    func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
	}

	VehicleViolationDetailsVarianceFields struct {
		ID                    func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
	}

	VehicleViolationScoringItems struct {
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		DeductionCategory        func(childComplexity int) int
		DeductionItemDescription func(childComplexity int) int
		DeletedAt                func(childComplexity int) int
		DeletedBy                func(childComplexity int) int
		DemeritPoints            func(childComplexity int) int
		ID                       func(childComplexity int) int
		IsDeleted                func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
		ViolationScoringItemID   func(childComplexity int) int
	}

	VehicleViolationScoringItemsAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VehicleViolationScoringItemsAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleViolationScoringItemsAvgFields struct {
		DeductionCategory func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	VehicleViolationScoringItemsMaxFields struct {
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		DeductionCategory        func(childComplexity int) int
		DeductionItemDescription func(childComplexity int) int
		DeletedAt                func(childComplexity int) int
		DeletedBy                func(childComplexity int) int
		DemeritPoints            func(childComplexity int) int
		ID                       func(childComplexity int) int
		IsDeleted                func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
		ViolationScoringItemID   func(childComplexity int) int
	}

	VehicleViolationScoringItemsMinFields struct {
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		DeductionCategory        func(childComplexity int) int
		DeductionItemDescription func(childComplexity int) int
		DeletedAt                func(childComplexity int) int
		DeletedBy                func(childComplexity int) int
		DemeritPoints            func(childComplexity int) int
		ID                       func(childComplexity int) int
		IsDeleted                func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
		ViolationScoringItemID   func(childComplexity int) int
	}

	VehicleViolationScoringItemsMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleViolationScoringItemsStddevFields struct {
		DeductionCategory func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	VehicleViolationScoringItemsStddevPopFields struct {
		DeductionCategory func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	VehicleViolationScoringItemsStddevSampFields struct {
		DeductionCategory func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	VehicleViolationScoringItemsSumFields struct {
		DeductionCategory func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	VehicleViolationScoringItemsVarPopFields struct {
		DeductionCategory func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	VehicleViolationScoringItemsVarSampFields struct {
		DeductionCategory func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	VehicleViolationScoringItemsVarianceFields struct {
		DeductionCategory func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	VehicleViolationScoringRecord struct {
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DeletedBy              func(childComplexity int) int
		DemeritPoints          func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsDeleted              func(childComplexity int) int
		Remarks                func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		VehicleID              func(childComplexity int) int
		ViolationScoringID     func(childComplexity int) int
		ViolationScoringItemID func(childComplexity int) int
	}

	VehicleViolationScoringRecordAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VehicleViolationScoringRecordAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleViolationScoringRecordAvgFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	VehicleViolationScoringRecordMaxFields struct {
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DeletedBy              func(childComplexity int) int
		DemeritPoints          func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsDeleted              func(childComplexity int) int
		Remarks                func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		VehicleID              func(childComplexity int) int
		ViolationScoringID     func(childComplexity int) int
		ViolationScoringItemID func(childComplexity int) int
	}

	VehicleViolationScoringRecordMinFields struct {
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DeletedBy              func(childComplexity int) int
		DemeritPoints          func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsDeleted              func(childComplexity int) int
		Remarks                func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		VehicleID              func(childComplexity int) int
		ViolationScoringID     func(childComplexity int) int
		ViolationScoringItemID func(childComplexity int) int
	}

	VehicleViolationScoringRecordMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleViolationScoringRecordStddevFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	VehicleViolationScoringRecordStddevPopFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	VehicleViolationScoringRecordStddevSampFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	VehicleViolationScoringRecordSumFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	VehicleViolationScoringRecordVarPopFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	VehicleViolationScoringRecordVarSampFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	VehicleViolationScoringRecordVarianceFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	VioCodewfdm struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
		Wfms    func(childComplexity int) int
		Wfxw    func(childComplexity int) int
		Xh      func(childComplexity int) int
	}

	VioCodewfdmAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VioCodewfdmAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VioCodewfdmAvgFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
	}

	VioCodewfdmMaxFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
		Wfms    func(childComplexity int) int
		Wfxw    func(childComplexity int) int
		Xh      func(childComplexity int) int
	}

	VioCodewfdmMinFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
		Wfms    func(childComplexity int) int
		Wfxw    func(childComplexity int) int
		Xh      func(childComplexity int) int
	}

	VioCodewfdmMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VioCodewfdmStddevFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
	}

	VioCodewfdmStddevPopFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
	}

	VioCodewfdmStddevSampFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
	}

	VioCodewfdmSumFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
	}

	VioCodewfdmVarPopFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
	}

	VioCodewfdmVarSampFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
	}

	VioCodewfdmVarianceFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
	}

	ViolationRegistration struct {
		Cause                   func(childComplexity int) int
		CityID                  func(childComplexity int) int
		CreatedAt               func(childComplexity int) int
		CreatedBy               func(childComplexity int) int
		DeletedAt               func(childComplexity int) int
		DeletedBy               func(childComplexity int) int
		DistrictID              func(childComplexity int) int
		ID                      func(childComplexity int) int
		IDCardNum               func(childComplexity int) int
		IllegalArea             func(childComplexity int) int
		IllegalCode             func(childComplexity int) int
		IllegalTime             func(childComplexity int) int
		IsAccident              func(childComplexity int) int
		IsDeleted               func(childComplexity int) int
		IsSupervised            func(childComplexity int) int
		LicensePlateNumber      func(childComplexity int) int
		Location                func(childComplexity int) int
		Name                    func(childComplexity int) int
		Operator                func(childComplexity int) int
		ProvinceID              func(childComplexity int) int
		SepervisionRemarks      func(childComplexity int) int
		SupervisionTime         func(childComplexity int) int
		Supervisor              func(childComplexity int) int
		UpdatedAt               func(childComplexity int) int
		UpdatedBy               func(childComplexity int) int
		VehicleArea             func(childComplexity int) int
		VehicleEnterprise       func(childComplexity int) int
		VehicleID               func(childComplexity int) int
		ViolationRegistrationID func(childComplexity int) int
	}

	ViolationRegistrationAggregate struct {
		Aggregate func(childComplexity int) int
	}

	ViolationRegistrationAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	ViolationRegistrationAvgFields struct {
		ID func(childComplexity int) int
	}

	ViolationRegistrationMaxFields struct {
		Cause                   func(childComplexity int) int
		CityID                  func(childComplexity int) int
		CreatedAt               func(childComplexity int) int
		CreatedBy               func(childComplexity int) int
		DeletedAt               func(childComplexity int) int
		DeletedBy               func(childComplexity int) int
		DistrictID              func(childComplexity int) int
		ID                      func(childComplexity int) int
		IDCardNum               func(childComplexity int) int
		IllegalArea             func(childComplexity int) int
		IllegalCode             func(childComplexity int) int
		IllegalTime             func(childComplexity int) int
		IsAccident              func(childComplexity int) int
		IsDeleted               func(childComplexity int) int
		IsSupervised            func(childComplexity int) int
		LicensePlateNumber      func(childComplexity int) int
		Location                func(childComplexity int) int
		Name                    func(childComplexity int) int
		Operator                func(childComplexity int) int
		ProvinceID              func(childComplexity int) int
		SepervisionRemarks      func(childComplexity int) int
		SupervisionTime         func(childComplexity int) int
		Supervisor              func(childComplexity int) int
		UpdatedAt               func(childComplexity int) int
		UpdatedBy               func(childComplexity int) int
		VehicleArea             func(childComplexity int) int
		VehicleEnterprise       func(childComplexity int) int
		VehicleID               func(childComplexity int) int
		ViolationRegistrationID func(childComplexity int) int
	}

	ViolationRegistrationMinFields struct {
		Cause                   func(childComplexity int) int
		CityID                  func(childComplexity int) int
		CreatedAt               func(childComplexity int) int
		CreatedBy               func(childComplexity int) int
		DeletedAt               func(childComplexity int) int
		DeletedBy               func(childComplexity int) int
		DistrictID              func(childComplexity int) int
		ID                      func(childComplexity int) int
		IDCardNum               func(childComplexity int) int
		IllegalArea             func(childComplexity int) int
		IllegalCode             func(childComplexity int) int
		IllegalTime             func(childComplexity int) int
		IsAccident              func(childComplexity int) int
		IsDeleted               func(childComplexity int) int
		IsSupervised            func(childComplexity int) int
		LicensePlateNumber      func(childComplexity int) int
		Location                func(childComplexity int) int
		Name                    func(childComplexity int) int
		Operator                func(childComplexity int) int
		ProvinceID              func(childComplexity int) int
		SepervisionRemarks      func(childComplexity int) int
		SupervisionTime         func(childComplexity int) int
		Supervisor              func(childComplexity int) int
		UpdatedAt               func(childComplexity int) int
		UpdatedBy               func(childComplexity int) int
		VehicleArea             func(childComplexity int) int
		VehicleEnterprise       func(childComplexity int) int
		VehicleID               func(childComplexity int) int
		ViolationRegistrationID func(childComplexity int) int
	}

	ViolationRegistrationMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	ViolationRegistrationStddevFields struct {
		ID func(childComplexity int) int
	}

	ViolationRegistrationStddevPopFields struct {
		ID func(childComplexity int) int
	}

	ViolationRegistrationStddevSampFields struct {
		ID func(childComplexity int) int
	}

	ViolationRegistrationSumFields struct {
		ID func(childComplexity int) int
	}

	ViolationRegistrationVarPopFields struct {
		ID func(childComplexity int) int
	}

	ViolationRegistrationVarSampFields struct {
		ID func(childComplexity int) int
	}

	ViolationRegistrationVarianceFields struct {
		ID func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteAppEnforcement(ctx context.Context, where model.AppEnforcementBoolExp) (*model.AppEnforcementMutationResponse, error)
	DeleteAppEnforcementByPk(ctx context.Context, id int64) (*model1.AppEnforcement, error)
	InsertAppEnforcement(ctx context.Context, objects []*model.AppEnforcementInsertInput) (*model.AppEnforcementMutationResponse, error)
	InsertAppEnforcementOne(ctx context.Context, objects model.AppEnforcementInsertInput) (*model1.AppEnforcement, error)
	UpdateAppEnforcement(ctx context.Context, inc *model.AppEnforcementIncInput, set *model.AppEnforcementSetInput, where model.AppEnforcementBoolExp) (*model.AppEnforcementMutationResponse, error)
	UpdateAppEnforcementByPk(ctx context.Context, inc *model.AppEnforcementIncInput, set *model.AppEnforcementSetInput, id int64) (*model1.AppEnforcement, error)
	DeleteDeductionReport(ctx context.Context, where model.DeductionReportBoolExp) (*model.DeductionReportMutationResponse, error)
	DeleteDeductionReportByPk(ctx context.Context, id int64) (*model1.DeductionReport, error)
	InsertDeductionReport(ctx context.Context, objects []*model.DeductionReportInsertInput) (*model.DeductionReportMutationResponse, error)
	InsertDeductionReportOne(ctx context.Context, objects model.DeductionReportInsertInput) (*model1.DeductionReport, error)
	UpdateDeductionReport(ctx context.Context, inc *model.DeductionReportIncInput, set *model.DeductionReportSetInput, where model.DeductionReportBoolExp) (*model.DeductionReportMutationResponse, error)
	UpdateDeductionReportByPk(ctx context.Context, inc *model.DeductionReportIncInput, set *model.DeductionReportSetInput, id int64) (*model1.DeductionReport, error)
	DeleteDriverPeccancyCheck(ctx context.Context, where model.DriverPeccancyCheckBoolExp) (*model.DriverPeccancyCheckMutationResponse, error)
	DeleteDriverPeccancyCheckByPk(ctx context.Context, id int64) (*model1.DriverPeccancyCheck, error)
	InsertDriverPeccancyCheck(ctx context.Context, objects []*model.DriverPeccancyCheckInsertInput) (*model.DriverPeccancyCheckMutationResponse, error)
	InsertDriverPeccancyCheckOne(ctx context.Context, objects model.DriverPeccancyCheckInsertInput) (*model1.DriverPeccancyCheck, error)
	UpdateDriverPeccancyCheck(ctx context.Context, inc *model.DriverPeccancyCheckIncInput, set *model.DriverPeccancyCheckSetInput, where model.DriverPeccancyCheckBoolExp) (*model.DriverPeccancyCheckMutationResponse, error)
	UpdateDriverPeccancyCheckByPk(ctx context.Context, inc *model.DriverPeccancyCheckIncInput, set *model.DriverPeccancyCheckSetInput, id int64) (*model1.DriverPeccancyCheck, error)
	DeleteIllegalPhoto(ctx context.Context, where model.IllegalPhotoBoolExp) (*model.IllegalPhotoMutationResponse, error)
	DeleteIllegalPhotoByPk(ctx context.Context, id int64) (*model1.IllegalPhoto, error)
	InsertIllegalPhoto(ctx context.Context, objects []*model.IllegalPhotoInsertInput) (*model.IllegalPhotoMutationResponse, error)
	InsertIllegalPhotoOne(ctx context.Context, objects model.IllegalPhotoInsertInput) (*model1.IllegalPhoto, error)
	UpdateIllegalPhoto(ctx context.Context, inc *model.IllegalPhotoIncInput, set *model.IllegalPhotoSetInput, where model.IllegalPhotoBoolExp) (*model.IllegalPhotoMutationResponse, error)
	UpdateIllegalPhotoByPk(ctx context.Context, inc *model.IllegalPhotoIncInput, set *model.IllegalPhotoSetInput, id int64) (*model1.IllegalPhoto, error)
	DeleteRegionalViolationRegister(ctx context.Context, where model.RegionalViolationRegisterBoolExp) (*model.RegionalViolationRegisterMutationResponse, error)
	DeleteRegionalViolationRegisterByPk(ctx context.Context, id int64) (*model1.RegionalViolationRegister, error)
	InsertRegionalViolationRegister(ctx context.Context, objects []*model.RegionalViolationRegisterInsertInput) (*model.RegionalViolationRegisterMutationResponse, error)
	InsertRegionalViolationRegisterOne(ctx context.Context, objects model.RegionalViolationRegisterInsertInput) (*model1.RegionalViolationRegister, error)
	UpdateRegionalViolationRegister(ctx context.Context, inc *model.RegionalViolationRegisterIncInput, set *model.RegionalViolationRegisterSetInput, where model.RegionalViolationRegisterBoolExp) (*model.RegionalViolationRegisterMutationResponse, error)
	UpdateRegionalViolationRegisterByPk(ctx context.Context, inc *model.RegionalViolationRegisterIncInput, set *model.RegionalViolationRegisterSetInput, id int64) (*model1.RegionalViolationRegister, error)
	DeleteSeriousTrafficViolation(ctx context.Context, where model.SeriousTrafficViolationBoolExp) (*model.SeriousTrafficViolationMutationResponse, error)
	DeleteSeriousTrafficViolationByPk(ctx context.Context, id int64) (*model1.SeriousTrafficViolation, error)
	InsertSeriousTrafficViolation(ctx context.Context, objects []*model.SeriousTrafficViolationInsertInput) (*model.SeriousTrafficViolationMutationResponse, error)
	InsertSeriousTrafficViolationOne(ctx context.Context, objects model.SeriousTrafficViolationInsertInput) (*model1.SeriousTrafficViolation, error)
	UpdateSeriousTrafficViolation(ctx context.Context, inc *model.SeriousTrafficViolationIncInput, set *model.SeriousTrafficViolationSetInput, where model.SeriousTrafficViolationBoolExp) (*model.SeriousTrafficViolationMutationResponse, error)
	UpdateSeriousTrafficViolationByPk(ctx context.Context, inc *model.SeriousTrafficViolationIncInput, set *model.SeriousTrafficViolationSetInput, id int64) (*model1.SeriousTrafficViolation, error)
	DeleteVehicleViolationDetails(ctx context.Context, where model.VehicleViolationDetailsBoolExp) (*model.VehicleViolationDetailsMutationResponse, error)
	DeleteVehicleViolationDetailsByPk(ctx context.Context, id int64) (*model1.VehicleViolationDetails, error)
	InsertVehicleViolationDetails(ctx context.Context, objects []*model.VehicleViolationDetailsInsertInput) (*model.VehicleViolationDetailsMutationResponse, error)
	InsertVehicleViolationDetailsOne(ctx context.Context, objects model.VehicleViolationDetailsInsertInput) (*model1.VehicleViolationDetails, error)
	UpdateVehicleViolationDetails(ctx context.Context, inc *model.VehicleViolationDetailsIncInput, set *model.VehicleViolationDetailsSetInput, where model.VehicleViolationDetailsBoolExp) (*model.VehicleViolationDetailsMutationResponse, error)
	UpdateVehicleViolationDetailsByPk(ctx context.Context, inc *model.VehicleViolationDetailsIncInput, set *model.VehicleViolationDetailsSetInput, id int64) (*model1.VehicleViolationDetails, error)
	DeleteVehicleViolationScoringItems(ctx context.Context, where model.VehicleViolationScoringItemsBoolExp) (*model.VehicleViolationScoringItemsMutationResponse, error)
	DeleteVehicleViolationScoringItemsByPk(ctx context.Context, id int64) (*model1.VehicleViolationScoringItems, error)
	InsertVehicleViolationScoringItems(ctx context.Context, objects []*model.VehicleViolationScoringItemsInsertInput) (*model.VehicleViolationScoringItemsMutationResponse, error)
	InsertVehicleViolationScoringItemsOne(ctx context.Context, objects model.VehicleViolationScoringItemsInsertInput) (*model1.VehicleViolationScoringItems, error)
	UpdateVehicleViolationScoringItems(ctx context.Context, inc *model.VehicleViolationScoringItemsIncInput, set *model.VehicleViolationScoringItemsSetInput, where model.VehicleViolationScoringItemsBoolExp) (*model.VehicleViolationScoringItemsMutationResponse, error)
	UpdateVehicleViolationScoringItemsByPk(ctx context.Context, inc *model.VehicleViolationScoringItemsIncInput, set *model.VehicleViolationScoringItemsSetInput, id int64) (*model1.VehicleViolationScoringItems, error)
	DeleteVehicleViolationScoringRecord(ctx context.Context, where model.VehicleViolationScoringRecordBoolExp) (*model.VehicleViolationScoringRecordMutationResponse, error)
	DeleteVehicleViolationScoringRecordByPk(ctx context.Context, id int64) (*model1.VehicleViolationScoringRecord, error)
	InsertVehicleViolationScoringRecord(ctx context.Context, objects []*model.VehicleViolationScoringRecordInsertInput) (*model.VehicleViolationScoringRecordMutationResponse, error)
	InsertVehicleViolationScoringRecordOne(ctx context.Context, objects model.VehicleViolationScoringRecordInsertInput) (*model1.VehicleViolationScoringRecord, error)
	UpdateVehicleViolationScoringRecord(ctx context.Context, inc *model.VehicleViolationScoringRecordIncInput, set *model.VehicleViolationScoringRecordSetInput, where model.VehicleViolationScoringRecordBoolExp) (*model.VehicleViolationScoringRecordMutationResponse, error)
	UpdateVehicleViolationScoringRecordByPk(ctx context.Context, inc *model.VehicleViolationScoringRecordIncInput, set *model.VehicleViolationScoringRecordSetInput, id int64) (*model1.VehicleViolationScoringRecord, error)
	DeleteVioCodewfdm(ctx context.Context, where model.VioCodewfdmBoolExp) (*model.VioCodewfdmMutationResponse, error)
	DeleteVioCodewfdmByPk(ctx context.Context, id string) (*model1.VioCodewfdm, error)
	InsertVioCodewfdm(ctx context.Context, objects []*model.VioCodewfdmInsertInput) (*model.VioCodewfdmMutationResponse, error)
	InsertVioCodewfdmOne(ctx context.Context, objects model.VioCodewfdmInsertInput) (*model1.VioCodewfdm, error)
	UpdateVioCodewfdm(ctx context.Context, inc *model.VioCodewfdmIncInput, set *model.VioCodewfdmSetInput, where model.VioCodewfdmBoolExp) (*model.VioCodewfdmMutationResponse, error)
	UpdateVioCodewfdmByPk(ctx context.Context, inc *model.VioCodewfdmIncInput, set *model.VioCodewfdmSetInput, id string) (*model1.VioCodewfdm, error)
	DeleteViolationRegistration(ctx context.Context, where model.ViolationRegistrationBoolExp) (*model.ViolationRegistrationMutationResponse, error)
	DeleteViolationRegistrationByPk(ctx context.Context, id int64) (*model1.ViolationRegistration, error)
	InsertViolationRegistration(ctx context.Context, objects []*model.ViolationRegistrationInsertInput) (*model.ViolationRegistrationMutationResponse, error)
	InsertViolationRegistrationOne(ctx context.Context, objects model.ViolationRegistrationInsertInput) (*model1.ViolationRegistration, error)
	UpdateViolationRegistration(ctx context.Context, inc *model.ViolationRegistrationIncInput, set *model.ViolationRegistrationSetInput, where model.ViolationRegistrationBoolExp) (*model.ViolationRegistrationMutationResponse, error)
	UpdateViolationRegistrationByPk(ctx context.Context, inc *model.ViolationRegistrationIncInput, set *model.ViolationRegistrationSetInput, id int64) (*model1.ViolationRegistration, error)
}
type QueryResolver interface {
	AppEnforcement(ctx context.Context, distinctOn []model.AppEnforcementSelectColumn, limit *int, offset *int, orderBy []*model.AppEnforcementOrderBy, where *model.AppEnforcementBoolExp) ([]*model1.AppEnforcement, error)
	AppEnforcementAggregate(ctx context.Context, distinctOn []model.AppEnforcementSelectColumn, limit *int, offset *int, orderBy []*model.AppEnforcementOrderBy, where *model.AppEnforcementBoolExp) (*model.AppEnforcementAggregate, error)
	AppEnforcementByPk(ctx context.Context, id int64) (*model1.AppEnforcement, error)
	DeductionReport(ctx context.Context, distinctOn []model.DeductionReportSelectColumn, limit *int, offset *int, orderBy []*model.DeductionReportOrderBy, where *model.DeductionReportBoolExp) ([]*model1.DeductionReport, error)
	DeductionReportAggregate(ctx context.Context, distinctOn []model.DeductionReportSelectColumn, limit *int, offset *int, orderBy []*model.DeductionReportOrderBy, where *model.DeductionReportBoolExp) (*model.DeductionReportAggregate, error)
	DeductionReportByPk(ctx context.Context, id int64) (*model1.DeductionReport, error)
	DriverPeccancyCheck(ctx context.Context, distinctOn []model.DriverPeccancyCheckSelectColumn, limit *int, offset *int, orderBy []*model.DriverPeccancyCheckOrderBy, where *model.DriverPeccancyCheckBoolExp) ([]*model1.DriverPeccancyCheck, error)
	DriverPeccancyCheckAggregate(ctx context.Context, distinctOn []model.DriverPeccancyCheckSelectColumn, limit *int, offset *int, orderBy []*model.DriverPeccancyCheckOrderBy, where *model.DriverPeccancyCheckBoolExp) (*model.DriverPeccancyCheckAggregate, error)
	DriverPeccancyCheckByPk(ctx context.Context, id int64) (*model1.DriverPeccancyCheck, error)
	IllegalPhoto(ctx context.Context, distinctOn []model.IllegalPhotoSelectColumn, limit *int, offset *int, orderBy []*model.IllegalPhotoOrderBy, where *model.IllegalPhotoBoolExp) ([]*model1.IllegalPhoto, error)
	IllegalPhotoAggregate(ctx context.Context, distinctOn []model.IllegalPhotoSelectColumn, limit *int, offset *int, orderBy []*model.IllegalPhotoOrderBy, where *model.IllegalPhotoBoolExp) (*model.IllegalPhotoAggregate, error)
	IllegalPhotoByPk(ctx context.Context, id int64) (*model1.IllegalPhoto, error)
	RegionalViolationRegister(ctx context.Context, distinctOn []model.RegionalViolationRegisterSelectColumn, limit *int, offset *int, orderBy []*model.RegionalViolationRegisterOrderBy, where *model.RegionalViolationRegisterBoolExp) ([]*model1.RegionalViolationRegister, error)
	RegionalViolationRegisterAggregate(ctx context.Context, distinctOn []model.RegionalViolationRegisterSelectColumn, limit *int, offset *int, orderBy []*model.RegionalViolationRegisterOrderBy, where *model.RegionalViolationRegisterBoolExp) (*model.RegionalViolationRegisterAggregate, error)
	RegionalViolationRegisterByPk(ctx context.Context, id int64) (*model1.RegionalViolationRegister, error)
	SeriousTrafficViolation(ctx context.Context, distinctOn []model.SeriousTrafficViolationSelectColumn, limit *int, offset *int, orderBy []*model.SeriousTrafficViolationOrderBy, where *model.SeriousTrafficViolationBoolExp) ([]*model1.SeriousTrafficViolation, error)
	SeriousTrafficViolationAggregate(ctx context.Context, distinctOn []model.SeriousTrafficViolationSelectColumn, limit *int, offset *int, orderBy []*model.SeriousTrafficViolationOrderBy, where *model.SeriousTrafficViolationBoolExp) (*model.SeriousTrafficViolationAggregate, error)
	SeriousTrafficViolationByPk(ctx context.Context, id int64) (*model1.SeriousTrafficViolation, error)
	VehicleViolationDetails(ctx context.Context, distinctOn []model.VehicleViolationDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationDetailsOrderBy, where *model.VehicleViolationDetailsBoolExp) ([]*model1.VehicleViolationDetails, error)
	VehicleViolationDetailsAggregate(ctx context.Context, distinctOn []model.VehicleViolationDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationDetailsOrderBy, where *model.VehicleViolationDetailsBoolExp) (*model.VehicleViolationDetailsAggregate, error)
	VehicleViolationDetailsByPk(ctx context.Context, id int64) (*model1.VehicleViolationDetails, error)
	VehicleViolationScoringItems(ctx context.Context, distinctOn []model.VehicleViolationScoringItemsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringItemsOrderBy, where *model.VehicleViolationScoringItemsBoolExp) ([]*model1.VehicleViolationScoringItems, error)
	VehicleViolationScoringItemsAggregate(ctx context.Context, distinctOn []model.VehicleViolationScoringItemsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringItemsOrderBy, where *model.VehicleViolationScoringItemsBoolExp) (*model.VehicleViolationScoringItemsAggregate, error)
	VehicleViolationScoringItemsByPk(ctx context.Context, id int64) (*model1.VehicleViolationScoringItems, error)
	VehicleViolationScoringRecord(ctx context.Context, distinctOn []model.VehicleViolationScoringRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringRecordOrderBy, where *model.VehicleViolationScoringRecordBoolExp) ([]*model1.VehicleViolationScoringRecord, error)
	VehicleViolationScoringRecordAggregate(ctx context.Context, distinctOn []model.VehicleViolationScoringRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringRecordOrderBy, where *model.VehicleViolationScoringRecordBoolExp) (*model.VehicleViolationScoringRecordAggregate, error)
	VehicleViolationScoringRecordByPk(ctx context.Context, id int64) (*model1.VehicleViolationScoringRecord, error)
	VioCodewfdm(ctx context.Context, distinctOn []model.VioCodewfdmSelectColumn, limit *int, offset *int, orderBy []*model.VioCodewfdmOrderBy, where *model.VioCodewfdmBoolExp) ([]*model1.VioCodewfdm, error)
	VioCodewfdmAggregate(ctx context.Context, distinctOn []model.VioCodewfdmSelectColumn, limit *int, offset *int, orderBy []*model.VioCodewfdmOrderBy, where *model.VioCodewfdmBoolExp) (*model.VioCodewfdmAggregate, error)
	VioCodewfdmByPk(ctx context.Context, id string) (*model1.VioCodewfdm, error)
	ViolationRegistration(ctx context.Context, distinctOn []model.ViolationRegistrationSelectColumn, limit *int, offset *int, orderBy []*model.ViolationRegistrationOrderBy, where *model.ViolationRegistrationBoolExp) ([]*model1.ViolationRegistration, error)
	ViolationRegistrationAggregate(ctx context.Context, distinctOn []model.ViolationRegistrationSelectColumn, limit *int, offset *int, orderBy []*model.ViolationRegistrationOrderBy, where *model.ViolationRegistrationBoolExp) (*model.ViolationRegistrationAggregate, error)
	ViolationRegistrationByPk(ctx context.Context, id int64) (*model1.ViolationRegistration, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "AppEnforcement.coordinate":
		if e.complexity.AppEnforcement.Coordinate == nil {
			break
		}

		return e.complexity.AppEnforcement.Coordinate(childComplexity), true

	case "AppEnforcement.created_at":
		if e.complexity.AppEnforcement.CreatedAt == nil {
			break
		}

		return e.complexity.AppEnforcement.CreatedAt(childComplexity), true

	case "AppEnforcement.created_by":
		if e.complexity.AppEnforcement.CreatedBy == nil {
			break
		}

		return e.complexity.AppEnforcement.CreatedBy(childComplexity), true

	case "AppEnforcement.deleted_at":
		if e.complexity.AppEnforcement.DeletedAt == nil {
			break
		}

		return e.complexity.AppEnforcement.DeletedAt(childComplexity), true

	case "AppEnforcement.deleted_by":
		if e.complexity.AppEnforcement.DeletedBy == nil {
			break
		}

		return e.complexity.AppEnforcement.DeletedBy(childComplexity), true

	case "AppEnforcement.edit_text":
		if e.complexity.AppEnforcement.EditText == nil {
			break
		}

		return e.complexity.AppEnforcement.EditText(childComplexity), true

	case "AppEnforcement.enterprise_type":
		if e.complexity.AppEnforcement.EnterpriseType == nil {
			break
		}

		return e.complexity.AppEnforcement.EnterpriseType(childComplexity), true

	case "AppEnforcement.id":
		if e.complexity.AppEnforcement.ID == nil {
			break
		}

		return e.complexity.AppEnforcement.ID(childComplexity), true

	case "AppEnforcement.illegal_photo_id":
		if e.complexity.AppEnforcement.IllegalPhotoID == nil {
			break
		}

		return e.complexity.AppEnforcement.IllegalPhotoID(childComplexity), true

	case "AppEnforcement.location_description":
		if e.complexity.AppEnforcement.LocationDescription == nil {
			break
		}

		return e.complexity.AppEnforcement.LocationDescription(childComplexity), true

	case "AppEnforcement.operation_user":
		if e.complexity.AppEnforcement.OperationUser == nil {
			break
		}

		return e.complexity.AppEnforcement.OperationUser(childComplexity), true

	case "AppEnforcement.picket_status":
		if e.complexity.AppEnforcement.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcement.PicketStatus(childComplexity), true

	case "AppEnforcement.updated_at":
		if e.complexity.AppEnforcement.UpdatedAt == nil {
			break
		}

		return e.complexity.AppEnforcement.UpdatedAt(childComplexity), true

	case "AppEnforcement.updated_by":
		if e.complexity.AppEnforcement.UpdatedBy == nil {
			break
		}

		return e.complexity.AppEnforcement.UpdatedBy(childComplexity), true

	case "AppEnforcement.vehicle_id":
		if e.complexity.AppEnforcement.VehicleID == nil {
			break
		}

		return e.complexity.AppEnforcement.VehicleID(childComplexity), true

	case "AppEnforcementAggregate.aggregate":
		if e.complexity.AppEnforcementAggregate.Aggregate == nil {
			break
		}

		return e.complexity.AppEnforcementAggregate.Aggregate(childComplexity), true

	case "AppEnforcementAggregateFields.avg":
		if e.complexity.AppEnforcementAggregateFields.Avg == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.Avg(childComplexity), true

	case "AppEnforcementAggregateFields.count":
		if e.complexity.AppEnforcementAggregateFields.Count == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.Count(childComplexity), true

	case "AppEnforcementAggregateFields.max":
		if e.complexity.AppEnforcementAggregateFields.Max == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.Max(childComplexity), true

	case "AppEnforcementAggregateFields.min":
		if e.complexity.AppEnforcementAggregateFields.Min == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.Min(childComplexity), true

	case "AppEnforcementAggregateFields.stddev":
		if e.complexity.AppEnforcementAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.Stddev(childComplexity), true

	case "AppEnforcementAggregateFields.stddev_pop":
		if e.complexity.AppEnforcementAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.StddevPop(childComplexity), true

	case "AppEnforcementAggregateFields.stddev_samp":
		if e.complexity.AppEnforcementAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.StddevSamp(childComplexity), true

	case "AppEnforcementAggregateFields.sum":
		if e.complexity.AppEnforcementAggregateFields.Sum == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.Sum(childComplexity), true

	case "AppEnforcementAggregateFields.var_pop":
		if e.complexity.AppEnforcementAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.VarPop(childComplexity), true

	case "AppEnforcementAggregateFields.var_samp":
		if e.complexity.AppEnforcementAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.VarSamp(childComplexity), true

	case "AppEnforcementAggregateFields.variance":
		if e.complexity.AppEnforcementAggregateFields.Variance == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.Variance(childComplexity), true

	case "AppEnforcementAvgFields.id":
		if e.complexity.AppEnforcementAvgFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementAvgFields.ID(childComplexity), true

	case "AppEnforcementAvgFields.picket_status":
		if e.complexity.AppEnforcementAvgFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementAvgFields.PicketStatus(childComplexity), true

	case "AppEnforcementMaxFields.coordinate":
		if e.complexity.AppEnforcementMaxFields.Coordinate == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.Coordinate(childComplexity), true

	case "AppEnforcementMaxFields.created_at":
		if e.complexity.AppEnforcementMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.CreatedAt(childComplexity), true

	case "AppEnforcementMaxFields.created_by":
		if e.complexity.AppEnforcementMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.CreatedBy(childComplexity), true

	case "AppEnforcementMaxFields.deleted_at":
		if e.complexity.AppEnforcementMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.DeletedAt(childComplexity), true

	case "AppEnforcementMaxFields.deleted_by":
		if e.complexity.AppEnforcementMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.DeletedBy(childComplexity), true

	case "AppEnforcementMaxFields.edit_text":
		if e.complexity.AppEnforcementMaxFields.EditText == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.EditText(childComplexity), true

	case "AppEnforcementMaxFields.enterprise_type":
		if e.complexity.AppEnforcementMaxFields.EnterpriseType == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.EnterpriseType(childComplexity), true

	case "AppEnforcementMaxFields.id":
		if e.complexity.AppEnforcementMaxFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.ID(childComplexity), true

	case "AppEnforcementMaxFields.illegal_photo_id":
		if e.complexity.AppEnforcementMaxFields.IllegalPhotoID == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.IllegalPhotoID(childComplexity), true

	case "AppEnforcementMaxFields.location_description":
		if e.complexity.AppEnforcementMaxFields.LocationDescription == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.LocationDescription(childComplexity), true

	case "AppEnforcementMaxFields.operation_user":
		if e.complexity.AppEnforcementMaxFields.OperationUser == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.OperationUser(childComplexity), true

	case "AppEnforcementMaxFields.picket_status":
		if e.complexity.AppEnforcementMaxFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.PicketStatus(childComplexity), true

	case "AppEnforcementMaxFields.updated_at":
		if e.complexity.AppEnforcementMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.UpdatedAt(childComplexity), true

	case "AppEnforcementMaxFields.updated_by":
		if e.complexity.AppEnforcementMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.UpdatedBy(childComplexity), true

	case "AppEnforcementMaxFields.vehicle_id":
		if e.complexity.AppEnforcementMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.VehicleID(childComplexity), true

	case "AppEnforcementMinFields.coordinate":
		if e.complexity.AppEnforcementMinFields.Coordinate == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.Coordinate(childComplexity), true

	case "AppEnforcementMinFields.created_at":
		if e.complexity.AppEnforcementMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.CreatedAt(childComplexity), true

	case "AppEnforcementMinFields.created_by":
		if e.complexity.AppEnforcementMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.CreatedBy(childComplexity), true

	case "AppEnforcementMinFields.deleted_at":
		if e.complexity.AppEnforcementMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.DeletedAt(childComplexity), true

	case "AppEnforcementMinFields.deleted_by":
		if e.complexity.AppEnforcementMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.DeletedBy(childComplexity), true

	case "AppEnforcementMinFields.edit_text":
		if e.complexity.AppEnforcementMinFields.EditText == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.EditText(childComplexity), true

	case "AppEnforcementMinFields.enterprise_type":
		if e.complexity.AppEnforcementMinFields.EnterpriseType == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.EnterpriseType(childComplexity), true

	case "AppEnforcementMinFields.id":
		if e.complexity.AppEnforcementMinFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.ID(childComplexity), true

	case "AppEnforcementMinFields.illegal_photo_id":
		if e.complexity.AppEnforcementMinFields.IllegalPhotoID == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.IllegalPhotoID(childComplexity), true

	case "AppEnforcementMinFields.location_description":
		if e.complexity.AppEnforcementMinFields.LocationDescription == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.LocationDescription(childComplexity), true

	case "AppEnforcementMinFields.operation_user":
		if e.complexity.AppEnforcementMinFields.OperationUser == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.OperationUser(childComplexity), true

	case "AppEnforcementMinFields.picket_status":
		if e.complexity.AppEnforcementMinFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.PicketStatus(childComplexity), true

	case "AppEnforcementMinFields.updated_at":
		if e.complexity.AppEnforcementMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.UpdatedAt(childComplexity), true

	case "AppEnforcementMinFields.updated_by":
		if e.complexity.AppEnforcementMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.UpdatedBy(childComplexity), true

	case "AppEnforcementMinFields.vehicle_id":
		if e.complexity.AppEnforcementMinFields.VehicleID == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.VehicleID(childComplexity), true

	case "AppEnforcementMutationResponse.affected_rows":
		if e.complexity.AppEnforcementMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.AppEnforcementMutationResponse.AffectedRows(childComplexity), true

	case "AppEnforcementMutationResponse.returning":
		if e.complexity.AppEnforcementMutationResponse.Returning == nil {
			break
		}

		return e.complexity.AppEnforcementMutationResponse.Returning(childComplexity), true

	case "AppEnforcementStddevFields.id":
		if e.complexity.AppEnforcementStddevFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementStddevFields.ID(childComplexity), true

	case "AppEnforcementStddevFields.picket_status":
		if e.complexity.AppEnforcementStddevFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementStddevFields.PicketStatus(childComplexity), true

	case "AppEnforcementStddevPopFields.id":
		if e.complexity.AppEnforcementStddevPopFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementStddevPopFields.ID(childComplexity), true

	case "AppEnforcementStddevPopFields.picket_status":
		if e.complexity.AppEnforcementStddevPopFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementStddevPopFields.PicketStatus(childComplexity), true

	case "AppEnforcementStddevSampFields.id":
		if e.complexity.AppEnforcementStddevSampFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementStddevSampFields.ID(childComplexity), true

	case "AppEnforcementStddevSampFields.picket_status":
		if e.complexity.AppEnforcementStddevSampFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementStddevSampFields.PicketStatus(childComplexity), true

	case "AppEnforcementSumFields.id":
		if e.complexity.AppEnforcementSumFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementSumFields.ID(childComplexity), true

	case "AppEnforcementSumFields.picket_status":
		if e.complexity.AppEnforcementSumFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementSumFields.PicketStatus(childComplexity), true

	case "AppEnforcementVarPopFields.id":
		if e.complexity.AppEnforcementVarPopFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementVarPopFields.ID(childComplexity), true

	case "AppEnforcementVarPopFields.picket_status":
		if e.complexity.AppEnforcementVarPopFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementVarPopFields.PicketStatus(childComplexity), true

	case "AppEnforcementVarSampFields.id":
		if e.complexity.AppEnforcementVarSampFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementVarSampFields.ID(childComplexity), true

	case "AppEnforcementVarSampFields.picket_status":
		if e.complexity.AppEnforcementVarSampFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementVarSampFields.PicketStatus(childComplexity), true

	case "AppEnforcementVarianceFields.id":
		if e.complexity.AppEnforcementVarianceFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementVarianceFields.ID(childComplexity), true

	case "AppEnforcementVarianceFields.picket_status":
		if e.complexity.AppEnforcementVarianceFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementVarianceFields.PicketStatus(childComplexity), true

	case "DeductionReport.area_id":
		if e.complexity.DeductionReport.AreaID == nil {
			break
		}

		return e.complexity.DeductionReport.AreaID(childComplexity), true

	case "DeductionReport.cause":
		if e.complexity.DeductionReport.Cause == nil {
			break
		}

		return e.complexity.DeductionReport.Cause(childComplexity), true

	case "DeductionReport.created_at":
		if e.complexity.DeductionReport.CreatedAt == nil {
			break
		}

		return e.complexity.DeductionReport.CreatedAt(childComplexity), true

	case "DeductionReport.created_by":
		if e.complexity.DeductionReport.CreatedBy == nil {
			break
		}

		return e.complexity.DeductionReport.CreatedBy(childComplexity), true

	case "DeductionReport.date":
		if e.complexity.DeductionReport.Date == nil {
			break
		}

		return e.complexity.DeductionReport.Date(childComplexity), true

	case "DeductionReport.deduction_report_id":
		if e.complexity.DeductionReport.DeductionReportID == nil {
			break
		}

		return e.complexity.DeductionReport.DeductionReportID(childComplexity), true

	case "DeductionReport.deleted_at":
		if e.complexity.DeductionReport.DeletedAt == nil {
			break
		}

		return e.complexity.DeductionReport.DeletedAt(childComplexity), true

	case "DeductionReport.deleted_by":
		if e.complexity.DeductionReport.DeletedBy == nil {
			break
		}

		return e.complexity.DeductionReport.DeletedBy(childComplexity), true

	case "DeductionReport.demerit_points":
		if e.complexity.DeductionReport.DemeritPoints == nil {
			break
		}

		return e.complexity.DeductionReport.DemeritPoints(childComplexity), true

	case "DeductionReport.id":
		if e.complexity.DeductionReport.ID == nil {
			break
		}

		return e.complexity.DeductionReport.ID(childComplexity), true

	case "DeductionReport.input_person":
		if e.complexity.DeductionReport.InputPerson == nil {
			break
		}

		return e.complexity.DeductionReport.InputPerson(childComplexity), true

	case "DeductionReport.input_time":
		if e.complexity.DeductionReport.InputTime == nil {
			break
		}

		return e.complexity.DeductionReport.InputTime(childComplexity), true

	case "DeductionReport.updated_at":
		if e.complexity.DeductionReport.UpdatedAt == nil {
			break
		}

		return e.complexity.DeductionReport.UpdatedAt(childComplexity), true

	case "DeductionReport.updated_by":
		if e.complexity.DeductionReport.UpdatedBy == nil {
			break
		}

		return e.complexity.DeductionReport.UpdatedBy(childComplexity), true

	case "DeductionReportAggregate.aggregate":
		if e.complexity.DeductionReportAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DeductionReportAggregate.Aggregate(childComplexity), true

	case "DeductionReportAggregateFields.avg":
		if e.complexity.DeductionReportAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DeductionReportAggregateFields.Avg(childComplexity), true

	case "DeductionReportAggregateFields.count":
		if e.complexity.DeductionReportAggregateFields.Count == nil {
			break
		}

		return e.complexity.DeductionReportAggregateFields.Count(childComplexity), true

	case "DeductionReportAggregateFields.max":
		if e.complexity.DeductionReportAggregateFields.Max == nil {
			break
		}

		return e.complexity.DeductionReportAggregateFields.Max(childComplexity), true

	case "DeductionReportAggregateFields.min":
		if e.complexity.DeductionReportAggregateFields.Min == nil {
			break
		}

		return e.complexity.DeductionReportAggregateFields.Min(childComplexity), true

	case "DeductionReportAggregateFields.stddev":
		if e.complexity.DeductionReportAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DeductionReportAggregateFields.Stddev(childComplexity), true

	case "DeductionReportAggregateFields.stddev_pop":
		if e.complexity.DeductionReportAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DeductionReportAggregateFields.StddevPop(childComplexity), true

	case "DeductionReportAggregateFields.stddev_samp":
		if e.complexity.DeductionReportAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DeductionReportAggregateFields.StddevSamp(childComplexity), true

	case "DeductionReportAggregateFields.sum":
		if e.complexity.DeductionReportAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DeductionReportAggregateFields.Sum(childComplexity), true

	case "DeductionReportAggregateFields.var_pop":
		if e.complexity.DeductionReportAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DeductionReportAggregateFields.VarPop(childComplexity), true

	case "DeductionReportAggregateFields.var_samp":
		if e.complexity.DeductionReportAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DeductionReportAggregateFields.VarSamp(childComplexity), true

	case "DeductionReportAggregateFields.variance":
		if e.complexity.DeductionReportAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DeductionReportAggregateFields.Variance(childComplexity), true

	case "DeductionReportAvgFields.demerit_points":
		if e.complexity.DeductionReportAvgFields.DemeritPoints == nil {
			break
		}

		return e.complexity.DeductionReportAvgFields.DemeritPoints(childComplexity), true

	case "DeductionReportAvgFields.id":
		if e.complexity.DeductionReportAvgFields.ID == nil {
			break
		}

		return e.complexity.DeductionReportAvgFields.ID(childComplexity), true

	case "DeductionReportMaxFields.area_id":
		if e.complexity.DeductionReportMaxFields.AreaID == nil {
			break
		}

		return e.complexity.DeductionReportMaxFields.AreaID(childComplexity), true

	case "DeductionReportMaxFields.cause":
		if e.complexity.DeductionReportMaxFields.Cause == nil {
			break
		}

		return e.complexity.DeductionReportMaxFields.Cause(childComplexity), true

	case "DeductionReportMaxFields.created_at":
		if e.complexity.DeductionReportMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DeductionReportMaxFields.CreatedAt(childComplexity), true

	case "DeductionReportMaxFields.created_by":
		if e.complexity.DeductionReportMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DeductionReportMaxFields.CreatedBy(childComplexity), true

	case "DeductionReportMaxFields.date":
		if e.complexity.DeductionReportMaxFields.Date == nil {
			break
		}

		return e.complexity.DeductionReportMaxFields.Date(childComplexity), true

	case "DeductionReportMaxFields.deduction_report_id":
		if e.complexity.DeductionReportMaxFields.DeductionReportID == nil {
			break
		}

		return e.complexity.DeductionReportMaxFields.DeductionReportID(childComplexity), true

	case "DeductionReportMaxFields.deleted_at":
		if e.complexity.DeductionReportMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DeductionReportMaxFields.DeletedAt(childComplexity), true

	case "DeductionReportMaxFields.deleted_by":
		if e.complexity.DeductionReportMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DeductionReportMaxFields.DeletedBy(childComplexity), true

	case "DeductionReportMaxFields.demerit_points":
		if e.complexity.DeductionReportMaxFields.DemeritPoints == nil {
			break
		}

		return e.complexity.DeductionReportMaxFields.DemeritPoints(childComplexity), true

	case "DeductionReportMaxFields.id":
		if e.complexity.DeductionReportMaxFields.ID == nil {
			break
		}

		return e.complexity.DeductionReportMaxFields.ID(childComplexity), true

	case "DeductionReportMaxFields.input_person":
		if e.complexity.DeductionReportMaxFields.InputPerson == nil {
			break
		}

		return e.complexity.DeductionReportMaxFields.InputPerson(childComplexity), true

	case "DeductionReportMaxFields.input_time":
		if e.complexity.DeductionReportMaxFields.InputTime == nil {
			break
		}

		return e.complexity.DeductionReportMaxFields.InputTime(childComplexity), true

	case "DeductionReportMaxFields.updated_at":
		if e.complexity.DeductionReportMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DeductionReportMaxFields.UpdatedAt(childComplexity), true

	case "DeductionReportMaxFields.updated_by":
		if e.complexity.DeductionReportMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DeductionReportMaxFields.UpdatedBy(childComplexity), true

	case "DeductionReportMinFields.area_id":
		if e.complexity.DeductionReportMinFields.AreaID == nil {
			break
		}

		return e.complexity.DeductionReportMinFields.AreaID(childComplexity), true

	case "DeductionReportMinFields.cause":
		if e.complexity.DeductionReportMinFields.Cause == nil {
			break
		}

		return e.complexity.DeductionReportMinFields.Cause(childComplexity), true

	case "DeductionReportMinFields.created_at":
		if e.complexity.DeductionReportMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DeductionReportMinFields.CreatedAt(childComplexity), true

	case "DeductionReportMinFields.created_by":
		if e.complexity.DeductionReportMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DeductionReportMinFields.CreatedBy(childComplexity), true

	case "DeductionReportMinFields.date":
		if e.complexity.DeductionReportMinFields.Date == nil {
			break
		}

		return e.complexity.DeductionReportMinFields.Date(childComplexity), true

	case "DeductionReportMinFields.deduction_report_id":
		if e.complexity.DeductionReportMinFields.DeductionReportID == nil {
			break
		}

		return e.complexity.DeductionReportMinFields.DeductionReportID(childComplexity), true

	case "DeductionReportMinFields.deleted_at":
		if e.complexity.DeductionReportMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DeductionReportMinFields.DeletedAt(childComplexity), true

	case "DeductionReportMinFields.deleted_by":
		if e.complexity.DeductionReportMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DeductionReportMinFields.DeletedBy(childComplexity), true

	case "DeductionReportMinFields.demerit_points":
		if e.complexity.DeductionReportMinFields.DemeritPoints == nil {
			break
		}

		return e.complexity.DeductionReportMinFields.DemeritPoints(childComplexity), true

	case "DeductionReportMinFields.id":
		if e.complexity.DeductionReportMinFields.ID == nil {
			break
		}

		return e.complexity.DeductionReportMinFields.ID(childComplexity), true

	case "DeductionReportMinFields.input_person":
		if e.complexity.DeductionReportMinFields.InputPerson == nil {
			break
		}

		return e.complexity.DeductionReportMinFields.InputPerson(childComplexity), true

	case "DeductionReportMinFields.input_time":
		if e.complexity.DeductionReportMinFields.InputTime == nil {
			break
		}

		return e.complexity.DeductionReportMinFields.InputTime(childComplexity), true

	case "DeductionReportMinFields.updated_at":
		if e.complexity.DeductionReportMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DeductionReportMinFields.UpdatedAt(childComplexity), true

	case "DeductionReportMinFields.updated_by":
		if e.complexity.DeductionReportMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DeductionReportMinFields.UpdatedBy(childComplexity), true

	case "DeductionReportMutationResponse.affected_rows":
		if e.complexity.DeductionReportMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DeductionReportMutationResponse.AffectedRows(childComplexity), true

	case "DeductionReportMutationResponse.returning":
		if e.complexity.DeductionReportMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DeductionReportMutationResponse.Returning(childComplexity), true

	case "DeductionReportStddevFields.demerit_points":
		if e.complexity.DeductionReportStddevFields.DemeritPoints == nil {
			break
		}

		return e.complexity.DeductionReportStddevFields.DemeritPoints(childComplexity), true

	case "DeductionReportStddevFields.id":
		if e.complexity.DeductionReportStddevFields.ID == nil {
			break
		}

		return e.complexity.DeductionReportStddevFields.ID(childComplexity), true

	case "DeductionReportStddevPopFields.demerit_points":
		if e.complexity.DeductionReportStddevPopFields.DemeritPoints == nil {
			break
		}

		return e.complexity.DeductionReportStddevPopFields.DemeritPoints(childComplexity), true

	case "DeductionReportStddevPopFields.id":
		if e.complexity.DeductionReportStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DeductionReportStddevPopFields.ID(childComplexity), true

	case "DeductionReportStddevSampFields.demerit_points":
		if e.complexity.DeductionReportStddevSampFields.DemeritPoints == nil {
			break
		}

		return e.complexity.DeductionReportStddevSampFields.DemeritPoints(childComplexity), true

	case "DeductionReportStddevSampFields.id":
		if e.complexity.DeductionReportStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DeductionReportStddevSampFields.ID(childComplexity), true

	case "DeductionReportSumFields.demerit_points":
		if e.complexity.DeductionReportSumFields.DemeritPoints == nil {
			break
		}

		return e.complexity.DeductionReportSumFields.DemeritPoints(childComplexity), true

	case "DeductionReportSumFields.id":
		if e.complexity.DeductionReportSumFields.ID == nil {
			break
		}

		return e.complexity.DeductionReportSumFields.ID(childComplexity), true

	case "DeductionReportVarPopFields.demerit_points":
		if e.complexity.DeductionReportVarPopFields.DemeritPoints == nil {
			break
		}

		return e.complexity.DeductionReportVarPopFields.DemeritPoints(childComplexity), true

	case "DeductionReportVarPopFields.id":
		if e.complexity.DeductionReportVarPopFields.ID == nil {
			break
		}

		return e.complexity.DeductionReportVarPopFields.ID(childComplexity), true

	case "DeductionReportVarSampFields.demerit_points":
		if e.complexity.DeductionReportVarSampFields.DemeritPoints == nil {
			break
		}

		return e.complexity.DeductionReportVarSampFields.DemeritPoints(childComplexity), true

	case "DeductionReportVarSampFields.id":
		if e.complexity.DeductionReportVarSampFields.ID == nil {
			break
		}

		return e.complexity.DeductionReportVarSampFields.ID(childComplexity), true

	case "DeductionReportVarianceFields.demerit_points":
		if e.complexity.DeductionReportVarianceFields.DemeritPoints == nil {
			break
		}

		return e.complexity.DeductionReportVarianceFields.DemeritPoints(childComplexity), true

	case "DeductionReportVarianceFields.id":
		if e.complexity.DeductionReportVarianceFields.ID == nil {
			break
		}

		return e.complexity.DeductionReportVarianceFields.ID(childComplexity), true

	case "DriverPeccancyCheck.created_at":
		if e.complexity.DriverPeccancyCheck.CreatedAt == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.CreatedAt(childComplexity), true

	case "DriverPeccancyCheck.created_by":
		if e.complexity.DriverPeccancyCheck.CreatedBy == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.CreatedBy(childComplexity), true

	case "DriverPeccancyCheck.deleted_at":
		if e.complexity.DriverPeccancyCheck.DeletedAt == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.DeletedAt(childComplexity), true

	case "DriverPeccancyCheck.deleted_by":
		if e.complexity.DriverPeccancyCheck.DeletedBy == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.DeletedBy(childComplexity), true

	case "DriverPeccancyCheck.driver_id":
		if e.complexity.DriverPeccancyCheck.DriverID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.DriverID(childComplexity), true

	case "DriverPeccancyCheck.enterprise_id":
		if e.complexity.DriverPeccancyCheck.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.EnterpriseID(childComplexity), true

	case "DriverPeccancyCheck.id":
		if e.complexity.DriverPeccancyCheck.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.ID(childComplexity), true

	case "DriverPeccancyCheck.updated_at":
		if e.complexity.DriverPeccancyCheck.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.UpdatedAt(childComplexity), true

	case "DriverPeccancyCheck.updated_by":
		if e.complexity.DriverPeccancyCheck.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.UpdatedBy(childComplexity), true

	case "DriverPeccancyCheck.vehicle_id":
		if e.complexity.DriverPeccancyCheck.VehicleID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.VehicleID(childComplexity), true

	case "DriverPeccancyCheckAggregate.aggregate":
		if e.complexity.DriverPeccancyCheckAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregate.Aggregate(childComplexity), true

	case "DriverPeccancyCheckAggregateFields.avg":
		if e.complexity.DriverPeccancyCheckAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.Avg(childComplexity), true

	case "DriverPeccancyCheckAggregateFields.count":
		if e.complexity.DriverPeccancyCheckAggregateFields.Count == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.Count(childComplexity), true

	case "DriverPeccancyCheckAggregateFields.max":
		if e.complexity.DriverPeccancyCheckAggregateFields.Max == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.Max(childComplexity), true

	case "DriverPeccancyCheckAggregateFields.min":
		if e.complexity.DriverPeccancyCheckAggregateFields.Min == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.Min(childComplexity), true

	case "DriverPeccancyCheckAggregateFields.stddev":
		if e.complexity.DriverPeccancyCheckAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.Stddev(childComplexity), true

	case "DriverPeccancyCheckAggregateFields.stddev_pop":
		if e.complexity.DriverPeccancyCheckAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.StddevPop(childComplexity), true

	case "DriverPeccancyCheckAggregateFields.stddev_samp":
		if e.complexity.DriverPeccancyCheckAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.StddevSamp(childComplexity), true

	case "DriverPeccancyCheckAggregateFields.sum":
		if e.complexity.DriverPeccancyCheckAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.Sum(childComplexity), true

	case "DriverPeccancyCheckAggregateFields.var_pop":
		if e.complexity.DriverPeccancyCheckAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.VarPop(childComplexity), true

	case "DriverPeccancyCheckAggregateFields.var_samp":
		if e.complexity.DriverPeccancyCheckAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.VarSamp(childComplexity), true

	case "DriverPeccancyCheckAggregateFields.variance":
		if e.complexity.DriverPeccancyCheckAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.Variance(childComplexity), true

	case "DriverPeccancyCheckAvgFields.id":
		if e.complexity.DriverPeccancyCheckAvgFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAvgFields.ID(childComplexity), true

	case "DriverPeccancyCheckMaxFields.created_at":
		if e.complexity.DriverPeccancyCheckMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.CreatedAt(childComplexity), true

	case "DriverPeccancyCheckMaxFields.created_by":
		if e.complexity.DriverPeccancyCheckMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.CreatedBy(childComplexity), true

	case "DriverPeccancyCheckMaxFields.deleted_at":
		if e.complexity.DriverPeccancyCheckMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.DeletedAt(childComplexity), true

	case "DriverPeccancyCheckMaxFields.deleted_by":
		if e.complexity.DriverPeccancyCheckMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.DeletedBy(childComplexity), true

	case "DriverPeccancyCheckMaxFields.driver_id":
		if e.complexity.DriverPeccancyCheckMaxFields.DriverID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.DriverID(childComplexity), true

	case "DriverPeccancyCheckMaxFields.enterprise_id":
		if e.complexity.DriverPeccancyCheckMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.EnterpriseID(childComplexity), true

	case "DriverPeccancyCheckMaxFields.id":
		if e.complexity.DriverPeccancyCheckMaxFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.ID(childComplexity), true

	case "DriverPeccancyCheckMaxFields.updated_at":
		if e.complexity.DriverPeccancyCheckMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.UpdatedAt(childComplexity), true

	case "DriverPeccancyCheckMaxFields.updated_by":
		if e.complexity.DriverPeccancyCheckMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.UpdatedBy(childComplexity), true

	case "DriverPeccancyCheckMaxFields.vehicle_id":
		if e.complexity.DriverPeccancyCheckMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.VehicleID(childComplexity), true

	case "DriverPeccancyCheckMinFields.created_at":
		if e.complexity.DriverPeccancyCheckMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.CreatedAt(childComplexity), true

	case "DriverPeccancyCheckMinFields.created_by":
		if e.complexity.DriverPeccancyCheckMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.CreatedBy(childComplexity), true

	case "DriverPeccancyCheckMinFields.deleted_at":
		if e.complexity.DriverPeccancyCheckMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.DeletedAt(childComplexity), true

	case "DriverPeccancyCheckMinFields.deleted_by":
		if e.complexity.DriverPeccancyCheckMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.DeletedBy(childComplexity), true

	case "DriverPeccancyCheckMinFields.driver_id":
		if e.complexity.DriverPeccancyCheckMinFields.DriverID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.DriverID(childComplexity), true

	case "DriverPeccancyCheckMinFields.enterprise_id":
		if e.complexity.DriverPeccancyCheckMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.EnterpriseID(childComplexity), true

	case "DriverPeccancyCheckMinFields.id":
		if e.complexity.DriverPeccancyCheckMinFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.ID(childComplexity), true

	case "DriverPeccancyCheckMinFields.updated_at":
		if e.complexity.DriverPeccancyCheckMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.UpdatedAt(childComplexity), true

	case "DriverPeccancyCheckMinFields.updated_by":
		if e.complexity.DriverPeccancyCheckMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.UpdatedBy(childComplexity), true

	case "DriverPeccancyCheckMinFields.vehicle_id":
		if e.complexity.DriverPeccancyCheckMinFields.VehicleID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.VehicleID(childComplexity), true

	case "DriverPeccancyCheckMutationResponse.affected_rows":
		if e.complexity.DriverPeccancyCheckMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMutationResponse.AffectedRows(childComplexity), true

	case "DriverPeccancyCheckMutationResponse.returning":
		if e.complexity.DriverPeccancyCheckMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMutationResponse.Returning(childComplexity), true

	case "DriverPeccancyCheckStddevFields.id":
		if e.complexity.DriverPeccancyCheckStddevFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckStddevFields.ID(childComplexity), true

	case "DriverPeccancyCheckStddevPopFields.id":
		if e.complexity.DriverPeccancyCheckStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckStddevPopFields.ID(childComplexity), true

	case "DriverPeccancyCheckStddevSampFields.id":
		if e.complexity.DriverPeccancyCheckStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckStddevSampFields.ID(childComplexity), true

	case "DriverPeccancyCheckSumFields.id":
		if e.complexity.DriverPeccancyCheckSumFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckSumFields.ID(childComplexity), true

	case "DriverPeccancyCheckVarPopFields.id":
		if e.complexity.DriverPeccancyCheckVarPopFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckVarPopFields.ID(childComplexity), true

	case "DriverPeccancyCheckVarSampFields.id":
		if e.complexity.DriverPeccancyCheckVarSampFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckVarSampFields.ID(childComplexity), true

	case "DriverPeccancyCheckVarianceFields.id":
		if e.complexity.DriverPeccancyCheckVarianceFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckVarianceFields.ID(childComplexity), true

	case "IllegalPhoto.created_at":
		if e.complexity.IllegalPhoto.CreatedAt == nil {
			break
		}

		return e.complexity.IllegalPhoto.CreatedAt(childComplexity), true

	case "IllegalPhoto.created_by":
		if e.complexity.IllegalPhoto.CreatedBy == nil {
			break
		}

		return e.complexity.IllegalPhoto.CreatedBy(childComplexity), true

	case "IllegalPhoto.deleted_at":
		if e.complexity.IllegalPhoto.DeletedAt == nil {
			break
		}

		return e.complexity.IllegalPhoto.DeletedAt(childComplexity), true

	case "IllegalPhoto.deleted_by":
		if e.complexity.IllegalPhoto.DeletedBy == nil {
			break
		}

		return e.complexity.IllegalPhoto.DeletedBy(childComplexity), true

	case "IllegalPhoto.id":
		if e.complexity.IllegalPhoto.ID == nil {
			break
		}

		return e.complexity.IllegalPhoto.ID(childComplexity), true

	case "IllegalPhoto.illegal_photo_id":
		if e.complexity.IllegalPhoto.IllegalPhotoID == nil {
			break
		}

		return e.complexity.IllegalPhoto.IllegalPhotoID(childComplexity), true

	case "IllegalPhoto.is_deleted":
		if e.complexity.IllegalPhoto.IsDeleted == nil {
			break
		}

		return e.complexity.IllegalPhoto.IsDeleted(childComplexity), true

	case "IllegalPhoto.is_synchronized":
		if e.complexity.IllegalPhoto.IsSynchronized == nil {
			break
		}

		return e.complexity.IllegalPhoto.IsSynchronized(childComplexity), true

	case "IllegalPhoto.picture_address":
		if e.complexity.IllegalPhoto.PictureAddress == nil {
			break
		}

		return e.complexity.IllegalPhoto.PictureAddress(childComplexity), true

	case "IllegalPhoto.picture_name":
		if e.complexity.IllegalPhoto.PictureName == nil {
			break
		}

		return e.complexity.IllegalPhoto.PictureName(childComplexity), true

	case "IllegalPhoto.updated_at":
		if e.complexity.IllegalPhoto.UpdatedAt == nil {
			break
		}

		return e.complexity.IllegalPhoto.UpdatedAt(childComplexity), true

	case "IllegalPhoto.updated_by":
		if e.complexity.IllegalPhoto.UpdatedBy == nil {
			break
		}

		return e.complexity.IllegalPhoto.UpdatedBy(childComplexity), true

	case "IllegalPhotoAggregate.aggregate":
		if e.complexity.IllegalPhotoAggregate.Aggregate == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregate.Aggregate(childComplexity), true

	case "IllegalPhotoAggregateFields.avg":
		if e.complexity.IllegalPhotoAggregateFields.Avg == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.Avg(childComplexity), true

	case "IllegalPhotoAggregateFields.count":
		if e.complexity.IllegalPhotoAggregateFields.Count == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.Count(childComplexity), true

	case "IllegalPhotoAggregateFields.max":
		if e.complexity.IllegalPhotoAggregateFields.Max == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.Max(childComplexity), true

	case "IllegalPhotoAggregateFields.min":
		if e.complexity.IllegalPhotoAggregateFields.Min == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.Min(childComplexity), true

	case "IllegalPhotoAggregateFields.stddev":
		if e.complexity.IllegalPhotoAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.Stddev(childComplexity), true

	case "IllegalPhotoAggregateFields.stddev_pop":
		if e.complexity.IllegalPhotoAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.StddevPop(childComplexity), true

	case "IllegalPhotoAggregateFields.stddev_samp":
		if e.complexity.IllegalPhotoAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.StddevSamp(childComplexity), true

	case "IllegalPhotoAggregateFields.sum":
		if e.complexity.IllegalPhotoAggregateFields.Sum == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.Sum(childComplexity), true

	case "IllegalPhotoAggregateFields.var_pop":
		if e.complexity.IllegalPhotoAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.VarPop(childComplexity), true

	case "IllegalPhotoAggregateFields.var_samp":
		if e.complexity.IllegalPhotoAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.VarSamp(childComplexity), true

	case "IllegalPhotoAggregateFields.variance":
		if e.complexity.IllegalPhotoAggregateFields.Variance == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.Variance(childComplexity), true

	case "IllegalPhotoAvgFields.id":
		if e.complexity.IllegalPhotoAvgFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoAvgFields.ID(childComplexity), true

	case "IllegalPhotoMaxFields.created_at":
		if e.complexity.IllegalPhotoMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.CreatedAt(childComplexity), true

	case "IllegalPhotoMaxFields.created_by":
		if e.complexity.IllegalPhotoMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.CreatedBy(childComplexity), true

	case "IllegalPhotoMaxFields.deleted_at":
		if e.complexity.IllegalPhotoMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.DeletedAt(childComplexity), true

	case "IllegalPhotoMaxFields.deleted_by":
		if e.complexity.IllegalPhotoMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.DeletedBy(childComplexity), true

	case "IllegalPhotoMaxFields.id":
		if e.complexity.IllegalPhotoMaxFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.ID(childComplexity), true

	case "IllegalPhotoMaxFields.illegal_photo_id":
		if e.complexity.IllegalPhotoMaxFields.IllegalPhotoID == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.IllegalPhotoID(childComplexity), true

	case "IllegalPhotoMaxFields.is_deleted":
		if e.complexity.IllegalPhotoMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.IsDeleted(childComplexity), true

	case "IllegalPhotoMaxFields.is_synchronized":
		if e.complexity.IllegalPhotoMaxFields.IsSynchronized == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.IsSynchronized(childComplexity), true

	case "IllegalPhotoMaxFields.picture_address":
		if e.complexity.IllegalPhotoMaxFields.PictureAddress == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.PictureAddress(childComplexity), true

	case "IllegalPhotoMaxFields.picture_name":
		if e.complexity.IllegalPhotoMaxFields.PictureName == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.PictureName(childComplexity), true

	case "IllegalPhotoMaxFields.updated_at":
		if e.complexity.IllegalPhotoMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.UpdatedAt(childComplexity), true

	case "IllegalPhotoMaxFields.updated_by":
		if e.complexity.IllegalPhotoMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.UpdatedBy(childComplexity), true

	case "IllegalPhotoMinFields.created_at":
		if e.complexity.IllegalPhotoMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.CreatedAt(childComplexity), true

	case "IllegalPhotoMinFields.created_by":
		if e.complexity.IllegalPhotoMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.CreatedBy(childComplexity), true

	case "IllegalPhotoMinFields.deleted_at":
		if e.complexity.IllegalPhotoMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.DeletedAt(childComplexity), true

	case "IllegalPhotoMinFields.deleted_by":
		if e.complexity.IllegalPhotoMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.DeletedBy(childComplexity), true

	case "IllegalPhotoMinFields.id":
		if e.complexity.IllegalPhotoMinFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.ID(childComplexity), true

	case "IllegalPhotoMinFields.illegal_photo_id":
		if e.complexity.IllegalPhotoMinFields.IllegalPhotoID == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.IllegalPhotoID(childComplexity), true

	case "IllegalPhotoMinFields.is_deleted":
		if e.complexity.IllegalPhotoMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.IsDeleted(childComplexity), true

	case "IllegalPhotoMinFields.is_synchronized":
		if e.complexity.IllegalPhotoMinFields.IsSynchronized == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.IsSynchronized(childComplexity), true

	case "IllegalPhotoMinFields.picture_address":
		if e.complexity.IllegalPhotoMinFields.PictureAddress == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.PictureAddress(childComplexity), true

	case "IllegalPhotoMinFields.picture_name":
		if e.complexity.IllegalPhotoMinFields.PictureName == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.PictureName(childComplexity), true

	case "IllegalPhotoMinFields.updated_at":
		if e.complexity.IllegalPhotoMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.UpdatedAt(childComplexity), true

	case "IllegalPhotoMinFields.updated_by":
		if e.complexity.IllegalPhotoMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.UpdatedBy(childComplexity), true

	case "IllegalPhotoMutationResponse.affected_rows":
		if e.complexity.IllegalPhotoMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.IllegalPhotoMutationResponse.AffectedRows(childComplexity), true

	case "IllegalPhotoMutationResponse.returning":
		if e.complexity.IllegalPhotoMutationResponse.Returning == nil {
			break
		}

		return e.complexity.IllegalPhotoMutationResponse.Returning(childComplexity), true

	case "IllegalPhotoStddevFields.id":
		if e.complexity.IllegalPhotoStddevFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoStddevFields.ID(childComplexity), true

	case "IllegalPhotoStddevPopFields.id":
		if e.complexity.IllegalPhotoStddevPopFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoStddevPopFields.ID(childComplexity), true

	case "IllegalPhotoStddevSampFields.id":
		if e.complexity.IllegalPhotoStddevSampFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoStddevSampFields.ID(childComplexity), true

	case "IllegalPhotoSumFields.id":
		if e.complexity.IllegalPhotoSumFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoSumFields.ID(childComplexity), true

	case "IllegalPhotoVarPopFields.id":
		if e.complexity.IllegalPhotoVarPopFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoVarPopFields.ID(childComplexity), true

	case "IllegalPhotoVarSampFields.id":
		if e.complexity.IllegalPhotoVarSampFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoVarSampFields.ID(childComplexity), true

	case "IllegalPhotoVarianceFields.id":
		if e.complexity.IllegalPhotoVarianceFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoVarianceFields.ID(childComplexity), true

	case "Mutation.delete_app_enforcement":
		if e.complexity.Mutation.DeleteAppEnforcement == nil {
			break
		}

		args, err := ec.field_Mutation_delete_app_enforcement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAppEnforcement(childComplexity, args["where"].(model.AppEnforcementBoolExp)), true

	case "Mutation.delete_app_enforcement_by_pk":
		if e.complexity.Mutation.DeleteAppEnforcementByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_app_enforcement_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAppEnforcementByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_deduction_report":
		if e.complexity.Mutation.DeleteDeductionReport == nil {
			break
		}

		args, err := ec.field_Mutation_delete_deduction_report_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDeductionReport(childComplexity, args["where"].(model.DeductionReportBoolExp)), true

	case "Mutation.delete_deduction_report_by_pk":
		if e.complexity.Mutation.DeleteDeductionReportByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_deduction_report_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDeductionReportByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_driver_peccancy_check":
		if e.complexity.Mutation.DeleteDriverPeccancyCheck == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_peccancy_check_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverPeccancyCheck(childComplexity, args["where"].(model.DriverPeccancyCheckBoolExp)), true

	case "Mutation.delete_driver_peccancy_check_by_pk":
		if e.complexity.Mutation.DeleteDriverPeccancyCheckByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_peccancy_check_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverPeccancyCheckByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_illegal_photo":
		if e.complexity.Mutation.DeleteIllegalPhoto == nil {
			break
		}

		args, err := ec.field_Mutation_delete_illegal_photo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIllegalPhoto(childComplexity, args["where"].(model.IllegalPhotoBoolExp)), true

	case "Mutation.delete_illegal_photo_by_pk":
		if e.complexity.Mutation.DeleteIllegalPhotoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_illegal_photo_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIllegalPhotoByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_regional_violation_register":
		if e.complexity.Mutation.DeleteRegionalViolationRegister == nil {
			break
		}

		args, err := ec.field_Mutation_delete_regional_violation_register_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRegionalViolationRegister(childComplexity, args["where"].(model.RegionalViolationRegisterBoolExp)), true

	case "Mutation.delete_regional_violation_register_by_pk":
		if e.complexity.Mutation.DeleteRegionalViolationRegisterByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_regional_violation_register_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRegionalViolationRegisterByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_serious_traffic_violation":
		if e.complexity.Mutation.DeleteSeriousTrafficViolation == nil {
			break
		}

		args, err := ec.field_Mutation_delete_serious_traffic_violation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSeriousTrafficViolation(childComplexity, args["where"].(model.SeriousTrafficViolationBoolExp)), true

	case "Mutation.delete_serious_traffic_violation_by_pk":
		if e.complexity.Mutation.DeleteSeriousTrafficViolationByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_serious_traffic_violation_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSeriousTrafficViolationByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_violation_details":
		if e.complexity.Mutation.DeleteVehicleViolationDetails == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_violation_details_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleViolationDetails(childComplexity, args["where"].(model.VehicleViolationDetailsBoolExp)), true

	case "Mutation.delete_vehicle_violation_details_by_pk":
		if e.complexity.Mutation.DeleteVehicleViolationDetailsByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_violation_details_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleViolationDetailsByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_violation_scoring_items":
		if e.complexity.Mutation.DeleteVehicleViolationScoringItems == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_violation_scoring_items_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleViolationScoringItems(childComplexity, args["where"].(model.VehicleViolationScoringItemsBoolExp)), true

	case "Mutation.delete_vehicle_violation_scoring_items_by_pk":
		if e.complexity.Mutation.DeleteVehicleViolationScoringItemsByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_violation_scoring_items_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleViolationScoringItemsByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_violation_scoring_record":
		if e.complexity.Mutation.DeleteVehicleViolationScoringRecord == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_violation_scoring_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleViolationScoringRecord(childComplexity, args["where"].(model.VehicleViolationScoringRecordBoolExp)), true

	case "Mutation.delete_vehicle_violation_scoring_record_by_pk":
		if e.complexity.Mutation.DeleteVehicleViolationScoringRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_violation_scoring_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleViolationScoringRecordByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vio_codewfdm":
		if e.complexity.Mutation.DeleteVioCodewfdm == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vio_codewfdm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVioCodewfdm(childComplexity, args["where"].(model.VioCodewfdmBoolExp)), true

	case "Mutation.delete_vio_codewfdm_by_pk":
		if e.complexity.Mutation.DeleteVioCodewfdmByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vio_codewfdm_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVioCodewfdmByPk(childComplexity, args["id"].(string)), true

	case "Mutation.delete_violation_registration":
		if e.complexity.Mutation.DeleteViolationRegistration == nil {
			break
		}

		args, err := ec.field_Mutation_delete_violation_registration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteViolationRegistration(childComplexity, args["where"].(model.ViolationRegistrationBoolExp)), true

	case "Mutation.delete_violation_registration_by_pk":
		if e.complexity.Mutation.DeleteViolationRegistrationByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_violation_registration_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteViolationRegistrationByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.insert_app_enforcement":
		if e.complexity.Mutation.InsertAppEnforcement == nil {
			break
		}

		args, err := ec.field_Mutation_insert_app_enforcement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertAppEnforcement(childComplexity, args["objects"].([]*model.AppEnforcementInsertInput)), true

	case "Mutation.insert_app_enforcement_one":
		if e.complexity.Mutation.InsertAppEnforcementOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_app_enforcement_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertAppEnforcementOne(childComplexity, args["objects"].(model.AppEnforcementInsertInput)), true

	case "Mutation.insert_deduction_report":
		if e.complexity.Mutation.InsertDeductionReport == nil {
			break
		}

		args, err := ec.field_Mutation_insert_deduction_report_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDeductionReport(childComplexity, args["objects"].([]*model.DeductionReportInsertInput)), true

	case "Mutation.insert_deduction_report_one":
		if e.complexity.Mutation.InsertDeductionReportOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_deduction_report_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDeductionReportOne(childComplexity, args["objects"].(model.DeductionReportInsertInput)), true

	case "Mutation.insert_driver_peccancy_check":
		if e.complexity.Mutation.InsertDriverPeccancyCheck == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_peccancy_check_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverPeccancyCheck(childComplexity, args["objects"].([]*model.DriverPeccancyCheckInsertInput)), true

	case "Mutation.insert_driver_peccancy_check_one":
		if e.complexity.Mutation.InsertDriverPeccancyCheckOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_peccancy_check_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverPeccancyCheckOne(childComplexity, args["objects"].(model.DriverPeccancyCheckInsertInput)), true

	case "Mutation.insert_illegal_photo":
		if e.complexity.Mutation.InsertIllegalPhoto == nil {
			break
		}

		args, err := ec.field_Mutation_insert_illegal_photo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertIllegalPhoto(childComplexity, args["objects"].([]*model.IllegalPhotoInsertInput)), true

	case "Mutation.insert_illegal_photo_one":
		if e.complexity.Mutation.InsertIllegalPhotoOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_illegal_photo_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertIllegalPhotoOne(childComplexity, args["objects"].(model.IllegalPhotoInsertInput)), true

	case "Mutation.insert_regional_violation_register":
		if e.complexity.Mutation.InsertRegionalViolationRegister == nil {
			break
		}

		args, err := ec.field_Mutation_insert_regional_violation_register_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertRegionalViolationRegister(childComplexity, args["objects"].([]*model.RegionalViolationRegisterInsertInput)), true

	case "Mutation.insert_regional_violation_register_one":
		if e.complexity.Mutation.InsertRegionalViolationRegisterOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_regional_violation_register_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertRegionalViolationRegisterOne(childComplexity, args["objects"].(model.RegionalViolationRegisterInsertInput)), true

	case "Mutation.insert_serious_traffic_violation":
		if e.complexity.Mutation.InsertSeriousTrafficViolation == nil {
			break
		}

		args, err := ec.field_Mutation_insert_serious_traffic_violation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertSeriousTrafficViolation(childComplexity, args["objects"].([]*model.SeriousTrafficViolationInsertInput)), true

	case "Mutation.insert_serious_traffic_violation_one":
		if e.complexity.Mutation.InsertSeriousTrafficViolationOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_serious_traffic_violation_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertSeriousTrafficViolationOne(childComplexity, args["objects"].(model.SeriousTrafficViolationInsertInput)), true

	case "Mutation.insert_vehicle_violation_details":
		if e.complexity.Mutation.InsertVehicleViolationDetails == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_violation_details_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleViolationDetails(childComplexity, args["objects"].([]*model.VehicleViolationDetailsInsertInput)), true

	case "Mutation.insert_vehicle_violation_details_one":
		if e.complexity.Mutation.InsertVehicleViolationDetailsOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_violation_details_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleViolationDetailsOne(childComplexity, args["objects"].(model.VehicleViolationDetailsInsertInput)), true

	case "Mutation.insert_vehicle_violation_scoring_items":
		if e.complexity.Mutation.InsertVehicleViolationScoringItems == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_violation_scoring_items_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleViolationScoringItems(childComplexity, args["objects"].([]*model.VehicleViolationScoringItemsInsertInput)), true

	case "Mutation.insert_vehicle_violation_scoring_items_one":
		if e.complexity.Mutation.InsertVehicleViolationScoringItemsOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_violation_scoring_items_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleViolationScoringItemsOne(childComplexity, args["objects"].(model.VehicleViolationScoringItemsInsertInput)), true

	case "Mutation.insert_vehicle_violation_scoring_record":
		if e.complexity.Mutation.InsertVehicleViolationScoringRecord == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_violation_scoring_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleViolationScoringRecord(childComplexity, args["objects"].([]*model.VehicleViolationScoringRecordInsertInput)), true

	case "Mutation.insert_vehicle_violation_scoring_record_one":
		if e.complexity.Mutation.InsertVehicleViolationScoringRecordOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_violation_scoring_record_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleViolationScoringRecordOne(childComplexity, args["objects"].(model.VehicleViolationScoringRecordInsertInput)), true

	case "Mutation.insert_vio_codewfdm":
		if e.complexity.Mutation.InsertVioCodewfdm == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vio_codewfdm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVioCodewfdm(childComplexity, args["objects"].([]*model.VioCodewfdmInsertInput)), true

	case "Mutation.insert_vio_codewfdm_one":
		if e.complexity.Mutation.InsertVioCodewfdmOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vio_codewfdm_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVioCodewfdmOne(childComplexity, args["objects"].(model.VioCodewfdmInsertInput)), true

	case "Mutation.insert_violation_registration":
		if e.complexity.Mutation.InsertViolationRegistration == nil {
			break
		}

		args, err := ec.field_Mutation_insert_violation_registration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertViolationRegistration(childComplexity, args["objects"].([]*model.ViolationRegistrationInsertInput)), true

	case "Mutation.insert_violation_registration_one":
		if e.complexity.Mutation.InsertViolationRegistrationOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_violation_registration_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertViolationRegistrationOne(childComplexity, args["objects"].(model.ViolationRegistrationInsertInput)), true

	case "Mutation.update_app_enforcement":
		if e.complexity.Mutation.UpdateAppEnforcement == nil {
			break
		}

		args, err := ec.field_Mutation_update_app_enforcement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAppEnforcement(childComplexity, args["_inc"].(*model.AppEnforcementIncInput), args["_set"].(*model.AppEnforcementSetInput), args["where"].(model.AppEnforcementBoolExp)), true

	case "Mutation.update_app_enforcement_by_pk":
		if e.complexity.Mutation.UpdateAppEnforcementByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_app_enforcement_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAppEnforcementByPk(childComplexity, args["_inc"].(*model.AppEnforcementIncInput), args["_set"].(*model.AppEnforcementSetInput), args["id"].(int64)), true

	case "Mutation.update_deduction_report":
		if e.complexity.Mutation.UpdateDeductionReport == nil {
			break
		}

		args, err := ec.field_Mutation_update_deduction_report_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeductionReport(childComplexity, args["_inc"].(*model.DeductionReportIncInput), args["_set"].(*model.DeductionReportSetInput), args["where"].(model.DeductionReportBoolExp)), true

	case "Mutation.update_deduction_report_by_pk":
		if e.complexity.Mutation.UpdateDeductionReportByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_deduction_report_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeductionReportByPk(childComplexity, args["_inc"].(*model.DeductionReportIncInput), args["_set"].(*model.DeductionReportSetInput), args["id"].(int64)), true

	case "Mutation.update_driver_peccancy_check":
		if e.complexity.Mutation.UpdateDriverPeccancyCheck == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_peccancy_check_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverPeccancyCheck(childComplexity, args["_inc"].(*model.DriverPeccancyCheckIncInput), args["_set"].(*model.DriverPeccancyCheckSetInput), args["where"].(model.DriverPeccancyCheckBoolExp)), true

	case "Mutation.update_driver_peccancy_check_by_pk":
		if e.complexity.Mutation.UpdateDriverPeccancyCheckByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_peccancy_check_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverPeccancyCheckByPk(childComplexity, args["_inc"].(*model.DriverPeccancyCheckIncInput), args["_set"].(*model.DriverPeccancyCheckSetInput), args["id"].(int64)), true

	case "Mutation.update_illegal_photo":
		if e.complexity.Mutation.UpdateIllegalPhoto == nil {
			break
		}

		args, err := ec.field_Mutation_update_illegal_photo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIllegalPhoto(childComplexity, args["_inc"].(*model.IllegalPhotoIncInput), args["_set"].(*model.IllegalPhotoSetInput), args["where"].(model.IllegalPhotoBoolExp)), true

	case "Mutation.update_illegal_photo_by_pk":
		if e.complexity.Mutation.UpdateIllegalPhotoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_illegal_photo_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIllegalPhotoByPk(childComplexity, args["_inc"].(*model.IllegalPhotoIncInput), args["_set"].(*model.IllegalPhotoSetInput), args["id"].(int64)), true

	case "Mutation.update_regional_violation_register":
		if e.complexity.Mutation.UpdateRegionalViolationRegister == nil {
			break
		}

		args, err := ec.field_Mutation_update_regional_violation_register_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRegionalViolationRegister(childComplexity, args["_inc"].(*model.RegionalViolationRegisterIncInput), args["_set"].(*model.RegionalViolationRegisterSetInput), args["where"].(model.RegionalViolationRegisterBoolExp)), true

	case "Mutation.update_regional_violation_register_by_pk":
		if e.complexity.Mutation.UpdateRegionalViolationRegisterByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_regional_violation_register_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRegionalViolationRegisterByPk(childComplexity, args["_inc"].(*model.RegionalViolationRegisterIncInput), args["_set"].(*model.RegionalViolationRegisterSetInput), args["id"].(int64)), true

	case "Mutation.update_serious_traffic_violation":
		if e.complexity.Mutation.UpdateSeriousTrafficViolation == nil {
			break
		}

		args, err := ec.field_Mutation_update_serious_traffic_violation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSeriousTrafficViolation(childComplexity, args["_inc"].(*model.SeriousTrafficViolationIncInput), args["_set"].(*model.SeriousTrafficViolationSetInput), args["where"].(model.SeriousTrafficViolationBoolExp)), true

	case "Mutation.update_serious_traffic_violation_by_pk":
		if e.complexity.Mutation.UpdateSeriousTrafficViolationByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_serious_traffic_violation_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSeriousTrafficViolationByPk(childComplexity, args["_inc"].(*model.SeriousTrafficViolationIncInput), args["_set"].(*model.SeriousTrafficViolationSetInput), args["id"].(int64)), true

	case "Mutation.update_vehicle_violation_details":
		if e.complexity.Mutation.UpdateVehicleViolationDetails == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_violation_details_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleViolationDetails(childComplexity, args["_inc"].(*model.VehicleViolationDetailsIncInput), args["_set"].(*model.VehicleViolationDetailsSetInput), args["where"].(model.VehicleViolationDetailsBoolExp)), true

	case "Mutation.update_vehicle_violation_details_by_pk":
		if e.complexity.Mutation.UpdateVehicleViolationDetailsByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_violation_details_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleViolationDetailsByPk(childComplexity, args["_inc"].(*model.VehicleViolationDetailsIncInput), args["_set"].(*model.VehicleViolationDetailsSetInput), args["id"].(int64)), true

	case "Mutation.update_vehicle_violation_scoring_items":
		if e.complexity.Mutation.UpdateVehicleViolationScoringItems == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_violation_scoring_items_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleViolationScoringItems(childComplexity, args["_inc"].(*model.VehicleViolationScoringItemsIncInput), args["_set"].(*model.VehicleViolationScoringItemsSetInput), args["where"].(model.VehicleViolationScoringItemsBoolExp)), true

	case "Mutation.update_vehicle_violation_scoring_items_by_pk":
		if e.complexity.Mutation.UpdateVehicleViolationScoringItemsByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_violation_scoring_items_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleViolationScoringItemsByPk(childComplexity, args["_inc"].(*model.VehicleViolationScoringItemsIncInput), args["_set"].(*model.VehicleViolationScoringItemsSetInput), args["id"].(int64)), true

	case "Mutation.update_vehicle_violation_scoring_record":
		if e.complexity.Mutation.UpdateVehicleViolationScoringRecord == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_violation_scoring_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleViolationScoringRecord(childComplexity, args["_inc"].(*model.VehicleViolationScoringRecordIncInput), args["_set"].(*model.VehicleViolationScoringRecordSetInput), args["where"].(model.VehicleViolationScoringRecordBoolExp)), true

	case "Mutation.update_vehicle_violation_scoring_record_by_pk":
		if e.complexity.Mutation.UpdateVehicleViolationScoringRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_violation_scoring_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleViolationScoringRecordByPk(childComplexity, args["_inc"].(*model.VehicleViolationScoringRecordIncInput), args["_set"].(*model.VehicleViolationScoringRecordSetInput), args["id"].(int64)), true

	case "Mutation.update_vio_codewfdm":
		if e.complexity.Mutation.UpdateVioCodewfdm == nil {
			break
		}

		args, err := ec.field_Mutation_update_vio_codewfdm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVioCodewfdm(childComplexity, args["_inc"].(*model.VioCodewfdmIncInput), args["_set"].(*model.VioCodewfdmSetInput), args["where"].(model.VioCodewfdmBoolExp)), true

	case "Mutation.update_vio_codewfdm_by_pk":
		if e.complexity.Mutation.UpdateVioCodewfdmByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vio_codewfdm_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVioCodewfdmByPk(childComplexity, args["_inc"].(*model.VioCodewfdmIncInput), args["_set"].(*model.VioCodewfdmSetInput), args["id"].(string)), true

	case "Mutation.update_violation_registration":
		if e.complexity.Mutation.UpdateViolationRegistration == nil {
			break
		}

		args, err := ec.field_Mutation_update_violation_registration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateViolationRegistration(childComplexity, args["_inc"].(*model.ViolationRegistrationIncInput), args["_set"].(*model.ViolationRegistrationSetInput), args["where"].(model.ViolationRegistrationBoolExp)), true

	case "Mutation.update_violation_registration_by_pk":
		if e.complexity.Mutation.UpdateViolationRegistrationByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_violation_registration_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateViolationRegistrationByPk(childComplexity, args["_inc"].(*model.ViolationRegistrationIncInput), args["_set"].(*model.ViolationRegistrationSetInput), args["id"].(int64)), true

	case "Query.app_enforcement":
		if e.complexity.Query.AppEnforcement == nil {
			break
		}

		args, err := ec.field_Query_app_enforcement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppEnforcement(childComplexity, args["distinct_on"].([]model.AppEnforcementSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AppEnforcementOrderBy), args["where"].(*model.AppEnforcementBoolExp)), true

	case "Query.app_enforcement_aggregate":
		if e.complexity.Query.AppEnforcementAggregate == nil {
			break
		}

		args, err := ec.field_Query_app_enforcement_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppEnforcementAggregate(childComplexity, args["distinct_on"].([]model.AppEnforcementSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AppEnforcementOrderBy), args["where"].(*model.AppEnforcementBoolExp)), true

	case "Query.app_enforcement_by_pk":
		if e.complexity.Query.AppEnforcementByPk == nil {
			break
		}

		args, err := ec.field_Query_app_enforcement_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppEnforcementByPk(childComplexity, args["id"].(int64)), true

	case "Query.deduction_report":
		if e.complexity.Query.DeductionReport == nil {
			break
		}

		args, err := ec.field_Query_deduction_report_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeductionReport(childComplexity, args["distinct_on"].([]model.DeductionReportSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DeductionReportOrderBy), args["where"].(*model.DeductionReportBoolExp)), true

	case "Query.deduction_report_aggregate":
		if e.complexity.Query.DeductionReportAggregate == nil {
			break
		}

		args, err := ec.field_Query_deduction_report_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeductionReportAggregate(childComplexity, args["distinct_on"].([]model.DeductionReportSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DeductionReportOrderBy), args["where"].(*model.DeductionReportBoolExp)), true

	case "Query.deduction_report_by_pk":
		if e.complexity.Query.DeductionReportByPk == nil {
			break
		}

		args, err := ec.field_Query_deduction_report_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeductionReportByPk(childComplexity, args["id"].(int64)), true

	case "Query.driver_peccancy_check":
		if e.complexity.Query.DriverPeccancyCheck == nil {
			break
		}

		args, err := ec.field_Query_driver_peccancy_check_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverPeccancyCheck(childComplexity, args["distinct_on"].([]model.DriverPeccancyCheckSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverPeccancyCheckOrderBy), args["where"].(*model.DriverPeccancyCheckBoolExp)), true

	case "Query.driver_peccancy_check_aggregate":
		if e.complexity.Query.DriverPeccancyCheckAggregate == nil {
			break
		}

		args, err := ec.field_Query_driver_peccancy_check_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverPeccancyCheckAggregate(childComplexity, args["distinct_on"].([]model.DriverPeccancyCheckSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverPeccancyCheckOrderBy), args["where"].(*model.DriverPeccancyCheckBoolExp)), true

	case "Query.driver_peccancy_check_by_pk":
		if e.complexity.Query.DriverPeccancyCheckByPk == nil {
			break
		}

		args, err := ec.field_Query_driver_peccancy_check_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverPeccancyCheckByPk(childComplexity, args["id"].(int64)), true

	case "Query.illegal_photo":
		if e.complexity.Query.IllegalPhoto == nil {
			break
		}

		args, err := ec.field_Query_illegal_photo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IllegalPhoto(childComplexity, args["distinct_on"].([]model.IllegalPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.IllegalPhotoOrderBy), args["where"].(*model.IllegalPhotoBoolExp)), true

	case "Query.illegal_photo_aggregate":
		if e.complexity.Query.IllegalPhotoAggregate == nil {
			break
		}

		args, err := ec.field_Query_illegal_photo_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IllegalPhotoAggregate(childComplexity, args["distinct_on"].([]model.IllegalPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.IllegalPhotoOrderBy), args["where"].(*model.IllegalPhotoBoolExp)), true

	case "Query.illegal_photo_by_pk":
		if e.complexity.Query.IllegalPhotoByPk == nil {
			break
		}

		args, err := ec.field_Query_illegal_photo_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IllegalPhotoByPk(childComplexity, args["id"].(int64)), true

	case "Query.regional_violation_register":
		if e.complexity.Query.RegionalViolationRegister == nil {
			break
		}

		args, err := ec.field_Query_regional_violation_register_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RegionalViolationRegister(childComplexity, args["distinct_on"].([]model.RegionalViolationRegisterSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionalViolationRegisterOrderBy), args["where"].(*model.RegionalViolationRegisterBoolExp)), true

	case "Query.regional_violation_register_aggregate":
		if e.complexity.Query.RegionalViolationRegisterAggregate == nil {
			break
		}

		args, err := ec.field_Query_regional_violation_register_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RegionalViolationRegisterAggregate(childComplexity, args["distinct_on"].([]model.RegionalViolationRegisterSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionalViolationRegisterOrderBy), args["where"].(*model.RegionalViolationRegisterBoolExp)), true

	case "Query.regional_violation_register_by_pk":
		if e.complexity.Query.RegionalViolationRegisterByPk == nil {
			break
		}

		args, err := ec.field_Query_regional_violation_register_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RegionalViolationRegisterByPk(childComplexity, args["id"].(int64)), true

	case "Query.serious_traffic_violation":
		if e.complexity.Query.SeriousTrafficViolation == nil {
			break
		}

		args, err := ec.field_Query_serious_traffic_violation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SeriousTrafficViolation(childComplexity, args["distinct_on"].([]model.SeriousTrafficViolationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SeriousTrafficViolationOrderBy), args["where"].(*model.SeriousTrafficViolationBoolExp)), true

	case "Query.serious_traffic_violation_aggregate":
		if e.complexity.Query.SeriousTrafficViolationAggregate == nil {
			break
		}

		args, err := ec.field_Query_serious_traffic_violation_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SeriousTrafficViolationAggregate(childComplexity, args["distinct_on"].([]model.SeriousTrafficViolationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SeriousTrafficViolationOrderBy), args["where"].(*model.SeriousTrafficViolationBoolExp)), true

	case "Query.serious_traffic_violation_by_pk":
		if e.complexity.Query.SeriousTrafficViolationByPk == nil {
			break
		}

		args, err := ec.field_Query_serious_traffic_violation_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SeriousTrafficViolationByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_violation_details":
		if e.complexity.Query.VehicleViolationDetails == nil {
			break
		}

		args, err := ec.field_Query_vehicle_violation_details_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleViolationDetails(childComplexity, args["distinct_on"].([]model.VehicleViolationDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationDetailsOrderBy), args["where"].(*model.VehicleViolationDetailsBoolExp)), true

	case "Query.vehicle_violation_details_aggregate":
		if e.complexity.Query.VehicleViolationDetailsAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_violation_details_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleViolationDetailsAggregate(childComplexity, args["distinct_on"].([]model.VehicleViolationDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationDetailsOrderBy), args["where"].(*model.VehicleViolationDetailsBoolExp)), true

	case "Query.vehicle_violation_details_by_pk":
		if e.complexity.Query.VehicleViolationDetailsByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_violation_details_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleViolationDetailsByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_violation_scoring_items":
		if e.complexity.Query.VehicleViolationScoringItems == nil {
			break
		}

		args, err := ec.field_Query_vehicle_violation_scoring_items_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleViolationScoringItems(childComplexity, args["distinct_on"].([]model.VehicleViolationScoringItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringItemsOrderBy), args["where"].(*model.VehicleViolationScoringItemsBoolExp)), true

	case "Query.vehicle_violation_scoring_items_aggregate":
		if e.complexity.Query.VehicleViolationScoringItemsAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_violation_scoring_items_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleViolationScoringItemsAggregate(childComplexity, args["distinct_on"].([]model.VehicleViolationScoringItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringItemsOrderBy), args["where"].(*model.VehicleViolationScoringItemsBoolExp)), true

	case "Query.vehicle_violation_scoring_items_by_pk":
		if e.complexity.Query.VehicleViolationScoringItemsByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_violation_scoring_items_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleViolationScoringItemsByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_violation_scoring_record":
		if e.complexity.Query.VehicleViolationScoringRecord == nil {
			break
		}

		args, err := ec.field_Query_vehicle_violation_scoring_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleViolationScoringRecord(childComplexity, args["distinct_on"].([]model.VehicleViolationScoringRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringRecordOrderBy), args["where"].(*model.VehicleViolationScoringRecordBoolExp)), true

	case "Query.vehicle_violation_scoring_record_aggregate":
		if e.complexity.Query.VehicleViolationScoringRecordAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_violation_scoring_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleViolationScoringRecordAggregate(childComplexity, args["distinct_on"].([]model.VehicleViolationScoringRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringRecordOrderBy), args["where"].(*model.VehicleViolationScoringRecordBoolExp)), true

	case "Query.vehicle_violation_scoring_record_by_pk":
		if e.complexity.Query.VehicleViolationScoringRecordByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_violation_scoring_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleViolationScoringRecordByPk(childComplexity, args["id"].(int64)), true

	case "Query.vio_codewfdm":
		if e.complexity.Query.VioCodewfdm == nil {
			break
		}

		args, err := ec.field_Query_vio_codewfdm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VioCodewfdm(childComplexity, args["distinct_on"].([]model.VioCodewfdmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VioCodewfdmOrderBy), args["where"].(*model.VioCodewfdmBoolExp)), true

	case "Query.vio_codewfdm_aggregate":
		if e.complexity.Query.VioCodewfdmAggregate == nil {
			break
		}

		args, err := ec.field_Query_vio_codewfdm_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VioCodewfdmAggregate(childComplexity, args["distinct_on"].([]model.VioCodewfdmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VioCodewfdmOrderBy), args["where"].(*model.VioCodewfdmBoolExp)), true

	case "Query.vio_codewfdm_by_pk":
		if e.complexity.Query.VioCodewfdmByPk == nil {
			break
		}

		args, err := ec.field_Query_vio_codewfdm_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VioCodewfdmByPk(childComplexity, args["id"].(string)), true

	case "Query.violation_registration":
		if e.complexity.Query.ViolationRegistration == nil {
			break
		}

		args, err := ec.field_Query_violation_registration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ViolationRegistration(childComplexity, args["distinct_on"].([]model.ViolationRegistrationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ViolationRegistrationOrderBy), args["where"].(*model.ViolationRegistrationBoolExp)), true

	case "Query.violation_registration_aggregate":
		if e.complexity.Query.ViolationRegistrationAggregate == nil {
			break
		}

		args, err := ec.field_Query_violation_registration_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ViolationRegistrationAggregate(childComplexity, args["distinct_on"].([]model.ViolationRegistrationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ViolationRegistrationOrderBy), args["where"].(*model.ViolationRegistrationBoolExp)), true

	case "Query.violation_registration_by_pk":
		if e.complexity.Query.ViolationRegistrationByPk == nil {
			break
		}

		args, err := ec.field_Query_violation_registration_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ViolationRegistrationByPk(childComplexity, args["id"].(int64)), true

	case "RegionalViolationRegister.created_at":
		if e.complexity.RegionalViolationRegister.CreatedAt == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.CreatedAt(childComplexity), true

	case "RegionalViolationRegister.created_by":
		if e.complexity.RegionalViolationRegister.CreatedBy == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.CreatedBy(childComplexity), true

	case "RegionalViolationRegister.deleted_at":
		if e.complexity.RegionalViolationRegister.DeletedAt == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.DeletedAt(childComplexity), true

	case "RegionalViolationRegister.deleted_by":
		if e.complexity.RegionalViolationRegister.DeletedBy == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.DeletedBy(childComplexity), true

	case "RegionalViolationRegister.driver_id":
		if e.complexity.RegionalViolationRegister.DriverID == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.DriverID(childComplexity), true

	case "RegionalViolationRegister.id":
		if e.complexity.RegionalViolationRegister.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.ID(childComplexity), true

	case "RegionalViolationRegister.illegal_code":
		if e.complexity.RegionalViolationRegister.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.IllegalCode(childComplexity), true

	case "RegionalViolationRegister.illegal_time":
		if e.complexity.RegionalViolationRegister.IllegalTime == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.IllegalTime(childComplexity), true

	case "RegionalViolationRegister.illegal_type":
		if e.complexity.RegionalViolationRegister.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.IllegalType(childComplexity), true

	case "RegionalViolationRegister.is_deleted":
		if e.complexity.RegionalViolationRegister.IsDeleted == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.IsDeleted(childComplexity), true

	case "RegionalViolationRegister.is_register":
		if e.complexity.RegionalViolationRegister.IsRegister == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.IsRegister(childComplexity), true

	case "RegionalViolationRegister.operator":
		if e.complexity.RegionalViolationRegister.Operator == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.Operator(childComplexity), true

	case "RegionalViolationRegister.processing_agency":
		if e.complexity.RegionalViolationRegister.ProcessingAgency == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.ProcessingAgency(childComplexity), true

	case "RegionalViolationRegister.regional_violation_register_id":
		if e.complexity.RegionalViolationRegister.RegionalViolationRegisterID == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.RegionalViolationRegisterID(childComplexity), true

	case "RegionalViolationRegister.register_time":
		if e.complexity.RegionalViolationRegister.RegisterTime == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.RegisterTime(childComplexity), true

	case "RegionalViolationRegister.updated_at":
		if e.complexity.RegionalViolationRegister.UpdatedAt == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.UpdatedAt(childComplexity), true

	case "RegionalViolationRegister.updated_by":
		if e.complexity.RegionalViolationRegister.UpdatedBy == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.UpdatedBy(childComplexity), true

	case "RegionalViolationRegister.vehicle_id":
		if e.complexity.RegionalViolationRegister.VehicleID == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.VehicleID(childComplexity), true

	case "RegionalViolationRegister.violation_detail_id":
		if e.complexity.RegionalViolationRegister.ViolationDetailID == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.ViolationDetailID(childComplexity), true

	case "RegionalViolationRegisterAggregate.aggregate":
		if e.complexity.RegionalViolationRegisterAggregate.Aggregate == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregate.Aggregate(childComplexity), true

	case "RegionalViolationRegisterAggregateFields.avg":
		if e.complexity.RegionalViolationRegisterAggregateFields.Avg == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.Avg(childComplexity), true

	case "RegionalViolationRegisterAggregateFields.count":
		if e.complexity.RegionalViolationRegisterAggregateFields.Count == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.Count(childComplexity), true

	case "RegionalViolationRegisterAggregateFields.max":
		if e.complexity.RegionalViolationRegisterAggregateFields.Max == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.Max(childComplexity), true

	case "RegionalViolationRegisterAggregateFields.min":
		if e.complexity.RegionalViolationRegisterAggregateFields.Min == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.Min(childComplexity), true

	case "RegionalViolationRegisterAggregateFields.stddev":
		if e.complexity.RegionalViolationRegisterAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.Stddev(childComplexity), true

	case "RegionalViolationRegisterAggregateFields.stddev_pop":
		if e.complexity.RegionalViolationRegisterAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.StddevPop(childComplexity), true

	case "RegionalViolationRegisterAggregateFields.stddev_samp":
		if e.complexity.RegionalViolationRegisterAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.StddevSamp(childComplexity), true

	case "RegionalViolationRegisterAggregateFields.sum":
		if e.complexity.RegionalViolationRegisterAggregateFields.Sum == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.Sum(childComplexity), true

	case "RegionalViolationRegisterAggregateFields.var_pop":
		if e.complexity.RegionalViolationRegisterAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.VarPop(childComplexity), true

	case "RegionalViolationRegisterAggregateFields.var_samp":
		if e.complexity.RegionalViolationRegisterAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.VarSamp(childComplexity), true

	case "RegionalViolationRegisterAggregateFields.variance":
		if e.complexity.RegionalViolationRegisterAggregateFields.Variance == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.Variance(childComplexity), true

	case "RegionalViolationRegisterAvgFields.id":
		if e.complexity.RegionalViolationRegisterAvgFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAvgFields.ID(childComplexity), true

	case "RegionalViolationRegisterAvgFields.illegal_code":
		if e.complexity.RegionalViolationRegisterAvgFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAvgFields.IllegalCode(childComplexity), true

	case "RegionalViolationRegisterAvgFields.illegal_type":
		if e.complexity.RegionalViolationRegisterAvgFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAvgFields.IllegalType(childComplexity), true

	case "RegionalViolationRegisterMaxFields.created_at":
		if e.complexity.RegionalViolationRegisterMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.CreatedAt(childComplexity), true

	case "RegionalViolationRegisterMaxFields.created_by":
		if e.complexity.RegionalViolationRegisterMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.CreatedBy(childComplexity), true

	case "RegionalViolationRegisterMaxFields.deleted_at":
		if e.complexity.RegionalViolationRegisterMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.DeletedAt(childComplexity), true

	case "RegionalViolationRegisterMaxFields.deleted_by":
		if e.complexity.RegionalViolationRegisterMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.DeletedBy(childComplexity), true

	case "RegionalViolationRegisterMaxFields.driver_id":
		if e.complexity.RegionalViolationRegisterMaxFields.DriverID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.DriverID(childComplexity), true

	case "RegionalViolationRegisterMaxFields.id":
		if e.complexity.RegionalViolationRegisterMaxFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.ID(childComplexity), true

	case "RegionalViolationRegisterMaxFields.illegal_code":
		if e.complexity.RegionalViolationRegisterMaxFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.IllegalCode(childComplexity), true

	case "RegionalViolationRegisterMaxFields.illegal_time":
		if e.complexity.RegionalViolationRegisterMaxFields.IllegalTime == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.IllegalTime(childComplexity), true

	case "RegionalViolationRegisterMaxFields.illegal_type":
		if e.complexity.RegionalViolationRegisterMaxFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.IllegalType(childComplexity), true

	case "RegionalViolationRegisterMaxFields.is_deleted":
		if e.complexity.RegionalViolationRegisterMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.IsDeleted(childComplexity), true

	case "RegionalViolationRegisterMaxFields.is_register":
		if e.complexity.RegionalViolationRegisterMaxFields.IsRegister == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.IsRegister(childComplexity), true

	case "RegionalViolationRegisterMaxFields.operator":
		if e.complexity.RegionalViolationRegisterMaxFields.Operator == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.Operator(childComplexity), true

	case "RegionalViolationRegisterMaxFields.processing_agency":
		if e.complexity.RegionalViolationRegisterMaxFields.ProcessingAgency == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.ProcessingAgency(childComplexity), true

	case "RegionalViolationRegisterMaxFields.regional_violation_register_id":
		if e.complexity.RegionalViolationRegisterMaxFields.RegionalViolationRegisterID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.RegionalViolationRegisterID(childComplexity), true

	case "RegionalViolationRegisterMaxFields.register_time":
		if e.complexity.RegionalViolationRegisterMaxFields.RegisterTime == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.RegisterTime(childComplexity), true

	case "RegionalViolationRegisterMaxFields.updated_at":
		if e.complexity.RegionalViolationRegisterMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.UpdatedAt(childComplexity), true

	case "RegionalViolationRegisterMaxFields.updated_by":
		if e.complexity.RegionalViolationRegisterMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.UpdatedBy(childComplexity), true

	case "RegionalViolationRegisterMaxFields.vehicle_id":
		if e.complexity.RegionalViolationRegisterMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.VehicleID(childComplexity), true

	case "RegionalViolationRegisterMaxFields.violation_detail_id":
		if e.complexity.RegionalViolationRegisterMaxFields.ViolationDetailID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.ViolationDetailID(childComplexity), true

	case "RegionalViolationRegisterMinFields.created_at":
		if e.complexity.RegionalViolationRegisterMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.CreatedAt(childComplexity), true

	case "RegionalViolationRegisterMinFields.created_by":
		if e.complexity.RegionalViolationRegisterMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.CreatedBy(childComplexity), true

	case "RegionalViolationRegisterMinFields.deleted_at":
		if e.complexity.RegionalViolationRegisterMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.DeletedAt(childComplexity), true

	case "RegionalViolationRegisterMinFields.deleted_by":
		if e.complexity.RegionalViolationRegisterMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.DeletedBy(childComplexity), true

	case "RegionalViolationRegisterMinFields.driver_id":
		if e.complexity.RegionalViolationRegisterMinFields.DriverID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.DriverID(childComplexity), true

	case "RegionalViolationRegisterMinFields.id":
		if e.complexity.RegionalViolationRegisterMinFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.ID(childComplexity), true

	case "RegionalViolationRegisterMinFields.illegal_code":
		if e.complexity.RegionalViolationRegisterMinFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.IllegalCode(childComplexity), true

	case "RegionalViolationRegisterMinFields.illegal_time":
		if e.complexity.RegionalViolationRegisterMinFields.IllegalTime == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.IllegalTime(childComplexity), true

	case "RegionalViolationRegisterMinFields.illegal_type":
		if e.complexity.RegionalViolationRegisterMinFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.IllegalType(childComplexity), true

	case "RegionalViolationRegisterMinFields.is_deleted":
		if e.complexity.RegionalViolationRegisterMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.IsDeleted(childComplexity), true

	case "RegionalViolationRegisterMinFields.is_register":
		if e.complexity.RegionalViolationRegisterMinFields.IsRegister == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.IsRegister(childComplexity), true

	case "RegionalViolationRegisterMinFields.operator":
		if e.complexity.RegionalViolationRegisterMinFields.Operator == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.Operator(childComplexity), true

	case "RegionalViolationRegisterMinFields.processing_agency":
		if e.complexity.RegionalViolationRegisterMinFields.ProcessingAgency == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.ProcessingAgency(childComplexity), true

	case "RegionalViolationRegisterMinFields.regional_violation_register_id":
		if e.complexity.RegionalViolationRegisterMinFields.RegionalViolationRegisterID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.RegionalViolationRegisterID(childComplexity), true

	case "RegionalViolationRegisterMinFields.register_time":
		if e.complexity.RegionalViolationRegisterMinFields.RegisterTime == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.RegisterTime(childComplexity), true

	case "RegionalViolationRegisterMinFields.updated_at":
		if e.complexity.RegionalViolationRegisterMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.UpdatedAt(childComplexity), true

	case "RegionalViolationRegisterMinFields.updated_by":
		if e.complexity.RegionalViolationRegisterMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.UpdatedBy(childComplexity), true

	case "RegionalViolationRegisterMinFields.vehicle_id":
		if e.complexity.RegionalViolationRegisterMinFields.VehicleID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.VehicleID(childComplexity), true

	case "RegionalViolationRegisterMinFields.violation_detail_id":
		if e.complexity.RegionalViolationRegisterMinFields.ViolationDetailID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.ViolationDetailID(childComplexity), true

	case "RegionalViolationRegisterMutationResponse.affected_rows":
		if e.complexity.RegionalViolationRegisterMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMutationResponse.AffectedRows(childComplexity), true

	case "RegionalViolationRegisterMutationResponse.returning":
		if e.complexity.RegionalViolationRegisterMutationResponse.Returning == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMutationResponse.Returning(childComplexity), true

	case "RegionalViolationRegisterStddevFields.id":
		if e.complexity.RegionalViolationRegisterStddevFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterStddevFields.ID(childComplexity), true

	case "RegionalViolationRegisterStddevFields.illegal_code":
		if e.complexity.RegionalViolationRegisterStddevFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterStddevFields.IllegalCode(childComplexity), true

	case "RegionalViolationRegisterStddevFields.illegal_type":
		if e.complexity.RegionalViolationRegisterStddevFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterStddevFields.IllegalType(childComplexity), true

	case "RegionalViolationRegisterStddevPopFields.id":
		if e.complexity.RegionalViolationRegisterStddevPopFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterStddevPopFields.ID(childComplexity), true

	case "RegionalViolationRegisterStddevPopFields.illegal_code":
		if e.complexity.RegionalViolationRegisterStddevPopFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterStddevPopFields.IllegalCode(childComplexity), true

	case "RegionalViolationRegisterStddevPopFields.illegal_type":
		if e.complexity.RegionalViolationRegisterStddevPopFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterStddevPopFields.IllegalType(childComplexity), true

	case "RegionalViolationRegisterStddevSampFields.id":
		if e.complexity.RegionalViolationRegisterStddevSampFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterStddevSampFields.ID(childComplexity), true

	case "RegionalViolationRegisterStddevSampFields.illegal_code":
		if e.complexity.RegionalViolationRegisterStddevSampFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterStddevSampFields.IllegalCode(childComplexity), true

	case "RegionalViolationRegisterStddevSampFields.illegal_type":
		if e.complexity.RegionalViolationRegisterStddevSampFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterStddevSampFields.IllegalType(childComplexity), true

	case "RegionalViolationRegisterSumFields.id":
		if e.complexity.RegionalViolationRegisterSumFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterSumFields.ID(childComplexity), true

	case "RegionalViolationRegisterSumFields.illegal_code":
		if e.complexity.RegionalViolationRegisterSumFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterSumFields.IllegalCode(childComplexity), true

	case "RegionalViolationRegisterSumFields.illegal_type":
		if e.complexity.RegionalViolationRegisterSumFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterSumFields.IllegalType(childComplexity), true

	case "RegionalViolationRegisterVarPopFields.id":
		if e.complexity.RegionalViolationRegisterVarPopFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterVarPopFields.ID(childComplexity), true

	case "RegionalViolationRegisterVarPopFields.illegal_code":
		if e.complexity.RegionalViolationRegisterVarPopFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterVarPopFields.IllegalCode(childComplexity), true

	case "RegionalViolationRegisterVarPopFields.illegal_type":
		if e.complexity.RegionalViolationRegisterVarPopFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterVarPopFields.IllegalType(childComplexity), true

	case "RegionalViolationRegisterVarSampFields.id":
		if e.complexity.RegionalViolationRegisterVarSampFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterVarSampFields.ID(childComplexity), true

	case "RegionalViolationRegisterVarSampFields.illegal_code":
		if e.complexity.RegionalViolationRegisterVarSampFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterVarSampFields.IllegalCode(childComplexity), true

	case "RegionalViolationRegisterVarSampFields.illegal_type":
		if e.complexity.RegionalViolationRegisterVarSampFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterVarSampFields.IllegalType(childComplexity), true

	case "RegionalViolationRegisterVarianceFields.id":
		if e.complexity.RegionalViolationRegisterVarianceFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterVarianceFields.ID(childComplexity), true

	case "RegionalViolationRegisterVarianceFields.illegal_code":
		if e.complexity.RegionalViolationRegisterVarianceFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterVarianceFields.IllegalCode(childComplexity), true

	case "RegionalViolationRegisterVarianceFields.illegal_type":
		if e.complexity.RegionalViolationRegisterVarianceFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterVarianceFields.IllegalType(childComplexity), true

	case "SeriousTrafficViolation.created_at":
		if e.complexity.SeriousTrafficViolation.CreatedAt == nil {
			break
		}

		return e.complexity.SeriousTrafficViolation.CreatedAt(childComplexity), true

	case "SeriousTrafficViolation.created_by":
		if e.complexity.SeriousTrafficViolation.CreatedBy == nil {
			break
		}

		return e.complexity.SeriousTrafficViolation.CreatedBy(childComplexity), true

	case "SeriousTrafficViolation.deleted_at":
		if e.complexity.SeriousTrafficViolation.DeletedAt == nil {
			break
		}

		return e.complexity.SeriousTrafficViolation.DeletedAt(childComplexity), true

	case "SeriousTrafficViolation.deleted_by":
		if e.complexity.SeriousTrafficViolation.DeletedBy == nil {
			break
		}

		return e.complexity.SeriousTrafficViolation.DeletedBy(childComplexity), true

	case "SeriousTrafficViolation.id":
		if e.complexity.SeriousTrafficViolation.ID == nil {
			break
		}

		return e.complexity.SeriousTrafficViolation.ID(childComplexity), true

	case "SeriousTrafficViolation.illegal_code":
		if e.complexity.SeriousTrafficViolation.IllegalCode == nil {
			break
		}

		return e.complexity.SeriousTrafficViolation.IllegalCode(childComplexity), true

	case "SeriousTrafficViolation.illegal_time":
		if e.complexity.SeriousTrafficViolation.IllegalTime == nil {
			break
		}

		return e.complexity.SeriousTrafficViolation.IllegalTime(childComplexity), true

	case "SeriousTrafficViolation.serious_traffic_violation_id":
		if e.complexity.SeriousTrafficViolation.SeriousTrafficViolationID == nil {
			break
		}

		return e.complexity.SeriousTrafficViolation.SeriousTrafficViolationID(childComplexity), true

	case "SeriousTrafficViolation.updated_at":
		if e.complexity.SeriousTrafficViolation.UpdatedAt == nil {
			break
		}

		return e.complexity.SeriousTrafficViolation.UpdatedAt(childComplexity), true

	case "SeriousTrafficViolation.updated_by":
		if e.complexity.SeriousTrafficViolation.UpdatedBy == nil {
			break
		}

		return e.complexity.SeriousTrafficViolation.UpdatedBy(childComplexity), true

	case "SeriousTrafficViolation.vehicle_id":
		if e.complexity.SeriousTrafficViolation.VehicleID == nil {
			break
		}

		return e.complexity.SeriousTrafficViolation.VehicleID(childComplexity), true

	case "SeriousTrafficViolationAggregate.aggregate":
		if e.complexity.SeriousTrafficViolationAggregate.Aggregate == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationAggregate.Aggregate(childComplexity), true

	case "SeriousTrafficViolationAggregateFields.avg":
		if e.complexity.SeriousTrafficViolationAggregateFields.Avg == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationAggregateFields.Avg(childComplexity), true

	case "SeriousTrafficViolationAggregateFields.count":
		if e.complexity.SeriousTrafficViolationAggregateFields.Count == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationAggregateFields.Count(childComplexity), true

	case "SeriousTrafficViolationAggregateFields.max":
		if e.complexity.SeriousTrafficViolationAggregateFields.Max == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationAggregateFields.Max(childComplexity), true

	case "SeriousTrafficViolationAggregateFields.min":
		if e.complexity.SeriousTrafficViolationAggregateFields.Min == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationAggregateFields.Min(childComplexity), true

	case "SeriousTrafficViolationAggregateFields.stddev":
		if e.complexity.SeriousTrafficViolationAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationAggregateFields.Stddev(childComplexity), true

	case "SeriousTrafficViolationAggregateFields.stddev_pop":
		if e.complexity.SeriousTrafficViolationAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationAggregateFields.StddevPop(childComplexity), true

	case "SeriousTrafficViolationAggregateFields.stddev_samp":
		if e.complexity.SeriousTrafficViolationAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationAggregateFields.StddevSamp(childComplexity), true

	case "SeriousTrafficViolationAggregateFields.sum":
		if e.complexity.SeriousTrafficViolationAggregateFields.Sum == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationAggregateFields.Sum(childComplexity), true

	case "SeriousTrafficViolationAggregateFields.var_pop":
		if e.complexity.SeriousTrafficViolationAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationAggregateFields.VarPop(childComplexity), true

	case "SeriousTrafficViolationAggregateFields.var_samp":
		if e.complexity.SeriousTrafficViolationAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationAggregateFields.VarSamp(childComplexity), true

	case "SeriousTrafficViolationAggregateFields.variance":
		if e.complexity.SeriousTrafficViolationAggregateFields.Variance == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationAggregateFields.Variance(childComplexity), true

	case "SeriousTrafficViolationAvgFields.id":
		if e.complexity.SeriousTrafficViolationAvgFields.ID == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationAvgFields.ID(childComplexity), true

	case "SeriousTrafficViolationMaxFields.created_at":
		if e.complexity.SeriousTrafficViolationMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMaxFields.CreatedAt(childComplexity), true

	case "SeriousTrafficViolationMaxFields.created_by":
		if e.complexity.SeriousTrafficViolationMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMaxFields.CreatedBy(childComplexity), true

	case "SeriousTrafficViolationMaxFields.deleted_at":
		if e.complexity.SeriousTrafficViolationMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMaxFields.DeletedAt(childComplexity), true

	case "SeriousTrafficViolationMaxFields.deleted_by":
		if e.complexity.SeriousTrafficViolationMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMaxFields.DeletedBy(childComplexity), true

	case "SeriousTrafficViolationMaxFields.id":
		if e.complexity.SeriousTrafficViolationMaxFields.ID == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMaxFields.ID(childComplexity), true

	case "SeriousTrafficViolationMaxFields.illegal_code":
		if e.complexity.SeriousTrafficViolationMaxFields.IllegalCode == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMaxFields.IllegalCode(childComplexity), true

	case "SeriousTrafficViolationMaxFields.illegal_time":
		if e.complexity.SeriousTrafficViolationMaxFields.IllegalTime == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMaxFields.IllegalTime(childComplexity), true

	case "SeriousTrafficViolationMaxFields.serious_traffic_violation_id":
		if e.complexity.SeriousTrafficViolationMaxFields.SeriousTrafficViolationID == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMaxFields.SeriousTrafficViolationID(childComplexity), true

	case "SeriousTrafficViolationMaxFields.updated_at":
		if e.complexity.SeriousTrafficViolationMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMaxFields.UpdatedAt(childComplexity), true

	case "SeriousTrafficViolationMaxFields.updated_by":
		if e.complexity.SeriousTrafficViolationMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMaxFields.UpdatedBy(childComplexity), true

	case "SeriousTrafficViolationMaxFields.vehicle_id":
		if e.complexity.SeriousTrafficViolationMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMaxFields.VehicleID(childComplexity), true

	case "SeriousTrafficViolationMinFields.created_at":
		if e.complexity.SeriousTrafficViolationMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMinFields.CreatedAt(childComplexity), true

	case "SeriousTrafficViolationMinFields.created_by":
		if e.complexity.SeriousTrafficViolationMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMinFields.CreatedBy(childComplexity), true

	case "SeriousTrafficViolationMinFields.deleted_at":
		if e.complexity.SeriousTrafficViolationMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMinFields.DeletedAt(childComplexity), true

	case "SeriousTrafficViolationMinFields.deleted_by":
		if e.complexity.SeriousTrafficViolationMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMinFields.DeletedBy(childComplexity), true

	case "SeriousTrafficViolationMinFields.id":
		if e.complexity.SeriousTrafficViolationMinFields.ID == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMinFields.ID(childComplexity), true

	case "SeriousTrafficViolationMinFields.illegal_code":
		if e.complexity.SeriousTrafficViolationMinFields.IllegalCode == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMinFields.IllegalCode(childComplexity), true

	case "SeriousTrafficViolationMinFields.illegal_time":
		if e.complexity.SeriousTrafficViolationMinFields.IllegalTime == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMinFields.IllegalTime(childComplexity), true

	case "SeriousTrafficViolationMinFields.serious_traffic_violation_id":
		if e.complexity.SeriousTrafficViolationMinFields.SeriousTrafficViolationID == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMinFields.SeriousTrafficViolationID(childComplexity), true

	case "SeriousTrafficViolationMinFields.updated_at":
		if e.complexity.SeriousTrafficViolationMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMinFields.UpdatedAt(childComplexity), true

	case "SeriousTrafficViolationMinFields.updated_by":
		if e.complexity.SeriousTrafficViolationMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMinFields.UpdatedBy(childComplexity), true

	case "SeriousTrafficViolationMinFields.vehicle_id":
		if e.complexity.SeriousTrafficViolationMinFields.VehicleID == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMinFields.VehicleID(childComplexity), true

	case "SeriousTrafficViolationMutationResponse.affected_rows":
		if e.complexity.SeriousTrafficViolationMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMutationResponse.AffectedRows(childComplexity), true

	case "SeriousTrafficViolationMutationResponse.returning":
		if e.complexity.SeriousTrafficViolationMutationResponse.Returning == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationMutationResponse.Returning(childComplexity), true

	case "SeriousTrafficViolationStddevFields.id":
		if e.complexity.SeriousTrafficViolationStddevFields.ID == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationStddevFields.ID(childComplexity), true

	case "SeriousTrafficViolationStddevPopFields.id":
		if e.complexity.SeriousTrafficViolationStddevPopFields.ID == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationStddevPopFields.ID(childComplexity), true

	case "SeriousTrafficViolationStddevSampFields.id":
		if e.complexity.SeriousTrafficViolationStddevSampFields.ID == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationStddevSampFields.ID(childComplexity), true

	case "SeriousTrafficViolationSumFields.id":
		if e.complexity.SeriousTrafficViolationSumFields.ID == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationSumFields.ID(childComplexity), true

	case "SeriousTrafficViolationVarPopFields.id":
		if e.complexity.SeriousTrafficViolationVarPopFields.ID == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationVarPopFields.ID(childComplexity), true

	case "SeriousTrafficViolationVarSampFields.id":
		if e.complexity.SeriousTrafficViolationVarSampFields.ID == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationVarSampFields.ID(childComplexity), true

	case "SeriousTrafficViolationVarianceFields.id":
		if e.complexity.SeriousTrafficViolationVarianceFields.ID == nil {
			break
		}

		return e.complexity.SeriousTrafficViolationVarianceFields.ID(childComplexity), true

	case "VehicleViolationDetails.created_at":
		if e.complexity.VehicleViolationDetails.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.CreatedAt(childComplexity), true

	case "VehicleViolationDetails.created_by":
		if e.complexity.VehicleViolationDetails.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.CreatedBy(childComplexity), true

	case "VehicleViolationDetails.decision_number":
		if e.complexity.VehicleViolationDetails.DecisionNumber == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.DecisionNumber(childComplexity), true

	case "VehicleViolationDetails.deleted_at":
		if e.complexity.VehicleViolationDetails.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.DeletedAt(childComplexity), true

	case "VehicleViolationDetails.deleted_by":
		if e.complexity.VehicleViolationDetails.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.DeletedBy(childComplexity), true

	case "VehicleViolationDetails.discovery_agency":
		if e.complexity.VehicleViolationDetails.DiscoveryAgency == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.DiscoveryAgency(childComplexity), true

	case "VehicleViolationDetails.driver_id":
		if e.complexity.VehicleViolationDetails.DriverID == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.DriverID(childComplexity), true

	case "VehicleViolationDetails.enterprise_id":
		if e.complexity.VehicleViolationDetails.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.EnterpriseID(childComplexity), true

	case "VehicleViolationDetails.handle_at":
		if e.complexity.VehicleViolationDetails.HandleAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.HandleAt(childComplexity), true

	case "VehicleViolationDetails.handle_by":
		if e.complexity.VehicleViolationDetails.HandleBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.HandleBy(childComplexity), true

	case "VehicleViolationDetails.id":
		if e.complexity.VehicleViolationDetails.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.ID(childComplexity), true

	case "VehicleViolationDetails.illegal_code":
		if e.complexity.VehicleViolationDetails.IllegalCode == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.IllegalCode(childComplexity), true

	case "VehicleViolationDetails.illegal_handling_status":
		if e.complexity.VehicleViolationDetails.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.IllegalHandlingStatus(childComplexity), true

	case "VehicleViolationDetails.illegal_location":
		if e.complexity.VehicleViolationDetails.IllegalLocation == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.IllegalLocation(childComplexity), true

	case "VehicleViolationDetails.illegal_photo":
		if e.complexity.VehicleViolationDetails.IllegalPhoto == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.IllegalPhoto(childComplexity), true

	case "VehicleViolationDetails.illegal_time":
		if e.complexity.VehicleViolationDetails.IllegalTime == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.IllegalTime(childComplexity), true

	case "VehicleViolationDetails.information_source":
		if e.complexity.VehicleViolationDetails.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.InformationSource(childComplexity), true

	case "VehicleViolationDetails.is_deleted":
		if e.complexity.VehicleViolationDetails.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.IsDeleted(childComplexity), true

	case "VehicleViolationDetails.is_handle":
		if e.complexity.VehicleViolationDetails.IsHandle == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.IsHandle(childComplexity), true

	case "VehicleViolationDetails.is_notice_driver":
		if e.complexity.VehicleViolationDetails.IsNoticeDriver == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.IsNoticeDriver(childComplexity), true

	case "VehicleViolationDetails.is_send":
		if e.complexity.VehicleViolationDetails.IsSend == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.IsSend(childComplexity), true

	case "VehicleViolationDetails.measured_value":
		if e.complexity.VehicleViolationDetails.MeasuredValue == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.MeasuredValue(childComplexity), true

	case "VehicleViolationDetails.notice_time":
		if e.complexity.VehicleViolationDetails.NoticeTime == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.NoticeTime(childComplexity), true

	case "VehicleViolationDetails.party_name":
		if e.complexity.VehicleViolationDetails.PartyName == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.PartyName(childComplexity), true

	case "VehicleViolationDetails.payment_mark":
		if e.complexity.VehicleViolationDetails.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.PaymentMark(childComplexity), true

	case "VehicleViolationDetails.standard_value":
		if e.complexity.VehicleViolationDetails.StandardValue == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.StandardValue(childComplexity), true

	case "VehicleViolationDetails.update_time_in":
		if e.complexity.VehicleViolationDetails.UpdateTimeIn == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.UpdateTimeIn(childComplexity), true

	case "VehicleViolationDetails.updated_at":
		if e.complexity.VehicleViolationDetails.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.UpdatedAt(childComplexity), true

	case "VehicleViolationDetails.updated_by":
		if e.complexity.VehicleViolationDetails.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.UpdatedBy(childComplexity), true

	case "VehicleViolationDetails.vehicle_id":
		if e.complexity.VehicleViolationDetails.VehicleID == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.VehicleID(childComplexity), true

	case "VehicleViolationDetails.vehicle_information":
		if e.complexity.VehicleViolationDetails.VehicleInformation == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.VehicleInformation(childComplexity), true

	case "VehicleViolationDetails.violation_detail_id":
		if e.complexity.VehicleViolationDetails.ViolationDetailID == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.ViolationDetailID(childComplexity), true

	case "VehicleViolationDetailsAggregate.aggregate":
		if e.complexity.VehicleViolationDetailsAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregate.Aggregate(childComplexity), true

	case "VehicleViolationDetailsAggregateFields.avg":
		if e.complexity.VehicleViolationDetailsAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.Avg(childComplexity), true

	case "VehicleViolationDetailsAggregateFields.count":
		if e.complexity.VehicleViolationDetailsAggregateFields.Count == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.Count(childComplexity), true

	case "VehicleViolationDetailsAggregateFields.max":
		if e.complexity.VehicleViolationDetailsAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.Max(childComplexity), true

	case "VehicleViolationDetailsAggregateFields.min":
		if e.complexity.VehicleViolationDetailsAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.Min(childComplexity), true

	case "VehicleViolationDetailsAggregateFields.stddev":
		if e.complexity.VehicleViolationDetailsAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.Stddev(childComplexity), true

	case "VehicleViolationDetailsAggregateFields.stddev_pop":
		if e.complexity.VehicleViolationDetailsAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.StddevPop(childComplexity), true

	case "VehicleViolationDetailsAggregateFields.stddev_samp":
		if e.complexity.VehicleViolationDetailsAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.StddevSamp(childComplexity), true

	case "VehicleViolationDetailsAggregateFields.sum":
		if e.complexity.VehicleViolationDetailsAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.Sum(childComplexity), true

	case "VehicleViolationDetailsAggregateFields.var_pop":
		if e.complexity.VehicleViolationDetailsAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.VarPop(childComplexity), true

	case "VehicleViolationDetailsAggregateFields.var_samp":
		if e.complexity.VehicleViolationDetailsAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.VarSamp(childComplexity), true

	case "VehicleViolationDetailsAggregateFields.variance":
		if e.complexity.VehicleViolationDetailsAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.Variance(childComplexity), true

	case "VehicleViolationDetailsAvgFields.id":
		if e.complexity.VehicleViolationDetailsAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAvgFields.ID(childComplexity), true

	case "VehicleViolationDetailsAvgFields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsAvgFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAvgFields.IllegalHandlingStatus(childComplexity), true

	case "VehicleViolationDetailsAvgFields.information_source":
		if e.complexity.VehicleViolationDetailsAvgFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAvgFields.InformationSource(childComplexity), true

	case "VehicleViolationDetailsAvgFields.payment_mark":
		if e.complexity.VehicleViolationDetailsAvgFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAvgFields.PaymentMark(childComplexity), true

	case "VehicleViolationDetailsMaxFields.created_at":
		if e.complexity.VehicleViolationDetailsMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.CreatedAt(childComplexity), true

	case "VehicleViolationDetailsMaxFields.created_by":
		if e.complexity.VehicleViolationDetailsMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.CreatedBy(childComplexity), true

	case "VehicleViolationDetailsMaxFields.decision_number":
		if e.complexity.VehicleViolationDetailsMaxFields.DecisionNumber == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.DecisionNumber(childComplexity), true

	case "VehicleViolationDetailsMaxFields.deleted_at":
		if e.complexity.VehicleViolationDetailsMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.DeletedAt(childComplexity), true

	case "VehicleViolationDetailsMaxFields.deleted_by":
		if e.complexity.VehicleViolationDetailsMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.DeletedBy(childComplexity), true

	case "VehicleViolationDetailsMaxFields.discovery_agency":
		if e.complexity.VehicleViolationDetailsMaxFields.DiscoveryAgency == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.DiscoveryAgency(childComplexity), true

	case "VehicleViolationDetailsMaxFields.driver_id":
		if e.complexity.VehicleViolationDetailsMaxFields.DriverID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.DriverID(childComplexity), true

	case "VehicleViolationDetailsMaxFields.enterprise_id":
		if e.complexity.VehicleViolationDetailsMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.EnterpriseID(childComplexity), true

	case "VehicleViolationDetailsMaxFields.handle_at":
		if e.complexity.VehicleViolationDetailsMaxFields.HandleAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.HandleAt(childComplexity), true

	case "VehicleViolationDetailsMaxFields.handle_by":
		if e.complexity.VehicleViolationDetailsMaxFields.HandleBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.HandleBy(childComplexity), true

	case "VehicleViolationDetailsMaxFields.id":
		if e.complexity.VehicleViolationDetailsMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.ID(childComplexity), true

	case "VehicleViolationDetailsMaxFields.illegal_code":
		if e.complexity.VehicleViolationDetailsMaxFields.IllegalCode == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.IllegalCode(childComplexity), true

	case "VehicleViolationDetailsMaxFields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsMaxFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.IllegalHandlingStatus(childComplexity), true

	case "VehicleViolationDetailsMaxFields.illegal_location":
		if e.complexity.VehicleViolationDetailsMaxFields.IllegalLocation == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.IllegalLocation(childComplexity), true

	case "VehicleViolationDetailsMaxFields.illegal_photo":
		if e.complexity.VehicleViolationDetailsMaxFields.IllegalPhoto == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.IllegalPhoto(childComplexity), true

	case "VehicleViolationDetailsMaxFields.illegal_time":
		if e.complexity.VehicleViolationDetailsMaxFields.IllegalTime == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.IllegalTime(childComplexity), true

	case "VehicleViolationDetailsMaxFields.information_source":
		if e.complexity.VehicleViolationDetailsMaxFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.InformationSource(childComplexity), true

	case "VehicleViolationDetailsMaxFields.is_deleted":
		if e.complexity.VehicleViolationDetailsMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.IsDeleted(childComplexity), true

	case "VehicleViolationDetailsMaxFields.is_handle":
		if e.complexity.VehicleViolationDetailsMaxFields.IsHandle == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.IsHandle(childComplexity), true

	case "VehicleViolationDetailsMaxFields.is_notice_driver":
		if e.complexity.VehicleViolationDetailsMaxFields.IsNoticeDriver == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.IsNoticeDriver(childComplexity), true

	case "VehicleViolationDetailsMaxFields.is_send":
		if e.complexity.VehicleViolationDetailsMaxFields.IsSend == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.IsSend(childComplexity), true

	case "VehicleViolationDetailsMaxFields.measured_value":
		if e.complexity.VehicleViolationDetailsMaxFields.MeasuredValue == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.MeasuredValue(childComplexity), true

	case "VehicleViolationDetailsMaxFields.notice_time":
		if e.complexity.VehicleViolationDetailsMaxFields.NoticeTime == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.NoticeTime(childComplexity), true

	case "VehicleViolationDetailsMaxFields.party_name":
		if e.complexity.VehicleViolationDetailsMaxFields.PartyName == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.PartyName(childComplexity), true

	case "VehicleViolationDetailsMaxFields.payment_mark":
		if e.complexity.VehicleViolationDetailsMaxFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.PaymentMark(childComplexity), true

	case "VehicleViolationDetailsMaxFields.standard_value":
		if e.complexity.VehicleViolationDetailsMaxFields.StandardValue == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.StandardValue(childComplexity), true

	case "VehicleViolationDetailsMaxFields.update_time_in":
		if e.complexity.VehicleViolationDetailsMaxFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.UpdateTimeIn(childComplexity), true

	case "VehicleViolationDetailsMaxFields.updated_at":
		if e.complexity.VehicleViolationDetailsMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.UpdatedAt(childComplexity), true

	case "VehicleViolationDetailsMaxFields.updated_by":
		if e.complexity.VehicleViolationDetailsMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.UpdatedBy(childComplexity), true

	case "VehicleViolationDetailsMaxFields.vehicle_id":
		if e.complexity.VehicleViolationDetailsMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.VehicleID(childComplexity), true

	case "VehicleViolationDetailsMaxFields.vehicle_information":
		if e.complexity.VehicleViolationDetailsMaxFields.VehicleInformation == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.VehicleInformation(childComplexity), true

	case "VehicleViolationDetailsMaxFields.violation_detail_id":
		if e.complexity.VehicleViolationDetailsMaxFields.ViolationDetailID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.ViolationDetailID(childComplexity), true

	case "VehicleViolationDetailsMinFields.created_at":
		if e.complexity.VehicleViolationDetailsMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.CreatedAt(childComplexity), true

	case "VehicleViolationDetailsMinFields.created_by":
		if e.complexity.VehicleViolationDetailsMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.CreatedBy(childComplexity), true

	case "VehicleViolationDetailsMinFields.decision_number":
		if e.complexity.VehicleViolationDetailsMinFields.DecisionNumber == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.DecisionNumber(childComplexity), true

	case "VehicleViolationDetailsMinFields.deleted_at":
		if e.complexity.VehicleViolationDetailsMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.DeletedAt(childComplexity), true

	case "VehicleViolationDetailsMinFields.deleted_by":
		if e.complexity.VehicleViolationDetailsMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.DeletedBy(childComplexity), true

	case "VehicleViolationDetailsMinFields.discovery_agency":
		if e.complexity.VehicleViolationDetailsMinFields.DiscoveryAgency == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.DiscoveryAgency(childComplexity), true

	case "VehicleViolationDetailsMinFields.driver_id":
		if e.complexity.VehicleViolationDetailsMinFields.DriverID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.DriverID(childComplexity), true

	case "VehicleViolationDetailsMinFields.enterprise_id":
		if e.complexity.VehicleViolationDetailsMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.EnterpriseID(childComplexity), true

	case "VehicleViolationDetailsMinFields.handle_at":
		if e.complexity.VehicleViolationDetailsMinFields.HandleAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.HandleAt(childComplexity), true

	case "VehicleViolationDetailsMinFields.handle_by":
		if e.complexity.VehicleViolationDetailsMinFields.HandleBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.HandleBy(childComplexity), true

	case "VehicleViolationDetailsMinFields.id":
		if e.complexity.VehicleViolationDetailsMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.ID(childComplexity), true

	case "VehicleViolationDetailsMinFields.illegal_code":
		if e.complexity.VehicleViolationDetailsMinFields.IllegalCode == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.IllegalCode(childComplexity), true

	case "VehicleViolationDetailsMinFields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsMinFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.IllegalHandlingStatus(childComplexity), true

	case "VehicleViolationDetailsMinFields.illegal_location":
		if e.complexity.VehicleViolationDetailsMinFields.IllegalLocation == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.IllegalLocation(childComplexity), true

	case "VehicleViolationDetailsMinFields.illegal_photo":
		if e.complexity.VehicleViolationDetailsMinFields.IllegalPhoto == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.IllegalPhoto(childComplexity), true

	case "VehicleViolationDetailsMinFields.illegal_time":
		if e.complexity.VehicleViolationDetailsMinFields.IllegalTime == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.IllegalTime(childComplexity), true

	case "VehicleViolationDetailsMinFields.information_source":
		if e.complexity.VehicleViolationDetailsMinFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.InformationSource(childComplexity), true

	case "VehicleViolationDetailsMinFields.is_deleted":
		if e.complexity.VehicleViolationDetailsMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.IsDeleted(childComplexity), true

	case "VehicleViolationDetailsMinFields.is_handle":
		if e.complexity.VehicleViolationDetailsMinFields.IsHandle == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.IsHandle(childComplexity), true

	case "VehicleViolationDetailsMinFields.is_notice_driver":
		if e.complexity.VehicleViolationDetailsMinFields.IsNoticeDriver == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.IsNoticeDriver(childComplexity), true

	case "VehicleViolationDetailsMinFields.is_send":
		if e.complexity.VehicleViolationDetailsMinFields.IsSend == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.IsSend(childComplexity), true

	case "VehicleViolationDetailsMinFields.measured_value":
		if e.complexity.VehicleViolationDetailsMinFields.MeasuredValue == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.MeasuredValue(childComplexity), true

	case "VehicleViolationDetailsMinFields.notice_time":
		if e.complexity.VehicleViolationDetailsMinFields.NoticeTime == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.NoticeTime(childComplexity), true

	case "VehicleViolationDetailsMinFields.party_name":
		if e.complexity.VehicleViolationDetailsMinFields.PartyName == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.PartyName(childComplexity), true

	case "VehicleViolationDetailsMinFields.payment_mark":
		if e.complexity.VehicleViolationDetailsMinFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.PaymentMark(childComplexity), true

	case "VehicleViolationDetailsMinFields.standard_value":
		if e.complexity.VehicleViolationDetailsMinFields.StandardValue == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.StandardValue(childComplexity), true

	case "VehicleViolationDetailsMinFields.update_time_in":
		if e.complexity.VehicleViolationDetailsMinFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.UpdateTimeIn(childComplexity), true

	case "VehicleViolationDetailsMinFields.updated_at":
		if e.complexity.VehicleViolationDetailsMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.UpdatedAt(childComplexity), true

	case "VehicleViolationDetailsMinFields.updated_by":
		if e.complexity.VehicleViolationDetailsMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.UpdatedBy(childComplexity), true

	case "VehicleViolationDetailsMinFields.vehicle_id":
		if e.complexity.VehicleViolationDetailsMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.VehicleID(childComplexity), true

	case "VehicleViolationDetailsMinFields.vehicle_information":
		if e.complexity.VehicleViolationDetailsMinFields.VehicleInformation == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.VehicleInformation(childComplexity), true

	case "VehicleViolationDetailsMinFields.violation_detail_id":
		if e.complexity.VehicleViolationDetailsMinFields.ViolationDetailID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.ViolationDetailID(childComplexity), true

	case "VehicleViolationDetailsMutationResponse.affected_rows":
		if e.complexity.VehicleViolationDetailsMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMutationResponse.AffectedRows(childComplexity), true

	case "VehicleViolationDetailsMutationResponse.returning":
		if e.complexity.VehicleViolationDetailsMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMutationResponse.Returning(childComplexity), true

	case "VehicleViolationDetailsStddevFields.id":
		if e.complexity.VehicleViolationDetailsStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevFields.ID(childComplexity), true

	case "VehicleViolationDetailsStddevFields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsStddevFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevFields.IllegalHandlingStatus(childComplexity), true

	case "VehicleViolationDetailsStddevFields.information_source":
		if e.complexity.VehicleViolationDetailsStddevFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevFields.InformationSource(childComplexity), true

	case "VehicleViolationDetailsStddevFields.payment_mark":
		if e.complexity.VehicleViolationDetailsStddevFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevFields.PaymentMark(childComplexity), true

	case "VehicleViolationDetailsStddevPopFields.id":
		if e.complexity.VehicleViolationDetailsStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevPopFields.ID(childComplexity), true

	case "VehicleViolationDetailsStddevPopFields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsStddevPopFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevPopFields.IllegalHandlingStatus(childComplexity), true

	case "VehicleViolationDetailsStddevPopFields.information_source":
		if e.complexity.VehicleViolationDetailsStddevPopFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevPopFields.InformationSource(childComplexity), true

	case "VehicleViolationDetailsStddevPopFields.payment_mark":
		if e.complexity.VehicleViolationDetailsStddevPopFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevPopFields.PaymentMark(childComplexity), true

	case "VehicleViolationDetailsStddevSampFields.id":
		if e.complexity.VehicleViolationDetailsStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevSampFields.ID(childComplexity), true

	case "VehicleViolationDetailsStddevSampFields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsStddevSampFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevSampFields.IllegalHandlingStatus(childComplexity), true

	case "VehicleViolationDetailsStddevSampFields.information_source":
		if e.complexity.VehicleViolationDetailsStddevSampFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevSampFields.InformationSource(childComplexity), true

	case "VehicleViolationDetailsStddevSampFields.payment_mark":
		if e.complexity.VehicleViolationDetailsStddevSampFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevSampFields.PaymentMark(childComplexity), true

	case "VehicleViolationDetailsSumFields.id":
		if e.complexity.VehicleViolationDetailsSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsSumFields.ID(childComplexity), true

	case "VehicleViolationDetailsSumFields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsSumFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsSumFields.IllegalHandlingStatus(childComplexity), true

	case "VehicleViolationDetailsSumFields.information_source":
		if e.complexity.VehicleViolationDetailsSumFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsSumFields.InformationSource(childComplexity), true

	case "VehicleViolationDetailsSumFields.payment_mark":
		if e.complexity.VehicleViolationDetailsSumFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsSumFields.PaymentMark(childComplexity), true

	case "VehicleViolationDetailsVarPopFields.id":
		if e.complexity.VehicleViolationDetailsVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarPopFields.ID(childComplexity), true

	case "VehicleViolationDetailsVarPopFields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsVarPopFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarPopFields.IllegalHandlingStatus(childComplexity), true

	case "VehicleViolationDetailsVarPopFields.information_source":
		if e.complexity.VehicleViolationDetailsVarPopFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarPopFields.InformationSource(childComplexity), true

	case "VehicleViolationDetailsVarPopFields.payment_mark":
		if e.complexity.VehicleViolationDetailsVarPopFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarPopFields.PaymentMark(childComplexity), true

	case "VehicleViolationDetailsVarSampFields.id":
		if e.complexity.VehicleViolationDetailsVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarSampFields.ID(childComplexity), true

	case "VehicleViolationDetailsVarSampFields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsVarSampFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarSampFields.IllegalHandlingStatus(childComplexity), true

	case "VehicleViolationDetailsVarSampFields.information_source":
		if e.complexity.VehicleViolationDetailsVarSampFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarSampFields.InformationSource(childComplexity), true

	case "VehicleViolationDetailsVarSampFields.payment_mark":
		if e.complexity.VehicleViolationDetailsVarSampFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarSampFields.PaymentMark(childComplexity), true

	case "VehicleViolationDetailsVarianceFields.id":
		if e.complexity.VehicleViolationDetailsVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarianceFields.ID(childComplexity), true

	case "VehicleViolationDetailsVarianceFields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsVarianceFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarianceFields.IllegalHandlingStatus(childComplexity), true

	case "VehicleViolationDetailsVarianceFields.information_source":
		if e.complexity.VehicleViolationDetailsVarianceFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarianceFields.InformationSource(childComplexity), true

	case "VehicleViolationDetailsVarianceFields.payment_mark":
		if e.complexity.VehicleViolationDetailsVarianceFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarianceFields.PaymentMark(childComplexity), true

	case "VehicleViolationScoringItems.created_at":
		if e.complexity.VehicleViolationScoringItems.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.CreatedAt(childComplexity), true

	case "VehicleViolationScoringItems.created_by":
		if e.complexity.VehicleViolationScoringItems.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.CreatedBy(childComplexity), true

	case "VehicleViolationScoringItems.deduction_category":
		if e.complexity.VehicleViolationScoringItems.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.DeductionCategory(childComplexity), true

	case "VehicleViolationScoringItems.deduction_item_description":
		if e.complexity.VehicleViolationScoringItems.DeductionItemDescription == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.DeductionItemDescription(childComplexity), true

	case "VehicleViolationScoringItems.deleted_at":
		if e.complexity.VehicleViolationScoringItems.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.DeletedAt(childComplexity), true

	case "VehicleViolationScoringItems.deleted_by":
		if e.complexity.VehicleViolationScoringItems.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.DeletedBy(childComplexity), true

	case "VehicleViolationScoringItems.demerit_points":
		if e.complexity.VehicleViolationScoringItems.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringItems.id":
		if e.complexity.VehicleViolationScoringItems.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.ID(childComplexity), true

	case "VehicleViolationScoringItems.is_deleted":
		if e.complexity.VehicleViolationScoringItems.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.IsDeleted(childComplexity), true

	case "VehicleViolationScoringItems.updated_at":
		if e.complexity.VehicleViolationScoringItems.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.UpdatedAt(childComplexity), true

	case "VehicleViolationScoringItems.updated_by":
		if e.complexity.VehicleViolationScoringItems.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.UpdatedBy(childComplexity), true

	case "VehicleViolationScoringItems.violation_scoring_item_id":
		if e.complexity.VehicleViolationScoringItems.ViolationScoringItemID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.ViolationScoringItemID(childComplexity), true

	case "VehicleViolationScoringItemsAggregate.aggregate":
		if e.complexity.VehicleViolationScoringItemsAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregate.Aggregate(childComplexity), true

	case "VehicleViolationScoringItemsAggregateFields.avg":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.Avg(childComplexity), true

	case "VehicleViolationScoringItemsAggregateFields.count":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.Count == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.Count(childComplexity), true

	case "VehicleViolationScoringItemsAggregateFields.max":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.Max(childComplexity), true

	case "VehicleViolationScoringItemsAggregateFields.min":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.Min(childComplexity), true

	case "VehicleViolationScoringItemsAggregateFields.stddev":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.Stddev(childComplexity), true

	case "VehicleViolationScoringItemsAggregateFields.stddev_pop":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.StddevPop(childComplexity), true

	case "VehicleViolationScoringItemsAggregateFields.stddev_samp":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.StddevSamp(childComplexity), true

	case "VehicleViolationScoringItemsAggregateFields.sum":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.Sum(childComplexity), true

	case "VehicleViolationScoringItemsAggregateFields.var_pop":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.VarPop(childComplexity), true

	case "VehicleViolationScoringItemsAggregateFields.var_samp":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.VarSamp(childComplexity), true

	case "VehicleViolationScoringItemsAggregateFields.variance":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.Variance(childComplexity), true

	case "VehicleViolationScoringItemsAvgFields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsAvgFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAvgFields.DeductionCategory(childComplexity), true

	case "VehicleViolationScoringItemsAvgFields.demerit_points":
		if e.complexity.VehicleViolationScoringItemsAvgFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAvgFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringItemsAvgFields.id":
		if e.complexity.VehicleViolationScoringItemsAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAvgFields.ID(childComplexity), true

	case "VehicleViolationScoringItemsMaxFields.created_at":
		if e.complexity.VehicleViolationScoringItemsMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.CreatedAt(childComplexity), true

	case "VehicleViolationScoringItemsMaxFields.created_by":
		if e.complexity.VehicleViolationScoringItemsMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.CreatedBy(childComplexity), true

	case "VehicleViolationScoringItemsMaxFields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsMaxFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.DeductionCategory(childComplexity), true

	case "VehicleViolationScoringItemsMaxFields.deduction_item_description":
		if e.complexity.VehicleViolationScoringItemsMaxFields.DeductionItemDescription == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.DeductionItemDescription(childComplexity), true

	case "VehicleViolationScoringItemsMaxFields.deleted_at":
		if e.complexity.VehicleViolationScoringItemsMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.DeletedAt(childComplexity), true

	case "VehicleViolationScoringItemsMaxFields.deleted_by":
		if e.complexity.VehicleViolationScoringItemsMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.DeletedBy(childComplexity), true

	case "VehicleViolationScoringItemsMaxFields.demerit_points":
		if e.complexity.VehicleViolationScoringItemsMaxFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringItemsMaxFields.id":
		if e.complexity.VehicleViolationScoringItemsMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.ID(childComplexity), true

	case "VehicleViolationScoringItemsMaxFields.is_deleted":
		if e.complexity.VehicleViolationScoringItemsMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.IsDeleted(childComplexity), true

	case "VehicleViolationScoringItemsMaxFields.updated_at":
		if e.complexity.VehicleViolationScoringItemsMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.UpdatedAt(childComplexity), true

	case "VehicleViolationScoringItemsMaxFields.updated_by":
		if e.complexity.VehicleViolationScoringItemsMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.UpdatedBy(childComplexity), true

	case "VehicleViolationScoringItemsMaxFields.violation_scoring_item_id":
		if e.complexity.VehicleViolationScoringItemsMaxFields.ViolationScoringItemID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.ViolationScoringItemID(childComplexity), true

	case "VehicleViolationScoringItemsMinFields.created_at":
		if e.complexity.VehicleViolationScoringItemsMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.CreatedAt(childComplexity), true

	case "VehicleViolationScoringItemsMinFields.created_by":
		if e.complexity.VehicleViolationScoringItemsMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.CreatedBy(childComplexity), true

	case "VehicleViolationScoringItemsMinFields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsMinFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.DeductionCategory(childComplexity), true

	case "VehicleViolationScoringItemsMinFields.deduction_item_description":
		if e.complexity.VehicleViolationScoringItemsMinFields.DeductionItemDescription == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.DeductionItemDescription(childComplexity), true

	case "VehicleViolationScoringItemsMinFields.deleted_at":
		if e.complexity.VehicleViolationScoringItemsMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.DeletedAt(childComplexity), true

	case "VehicleViolationScoringItemsMinFields.deleted_by":
		if e.complexity.VehicleViolationScoringItemsMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.DeletedBy(childComplexity), true

	case "VehicleViolationScoringItemsMinFields.demerit_points":
		if e.complexity.VehicleViolationScoringItemsMinFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringItemsMinFields.id":
		if e.complexity.VehicleViolationScoringItemsMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.ID(childComplexity), true

	case "VehicleViolationScoringItemsMinFields.is_deleted":
		if e.complexity.VehicleViolationScoringItemsMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.IsDeleted(childComplexity), true

	case "VehicleViolationScoringItemsMinFields.updated_at":
		if e.complexity.VehicleViolationScoringItemsMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.UpdatedAt(childComplexity), true

	case "VehicleViolationScoringItemsMinFields.updated_by":
		if e.complexity.VehicleViolationScoringItemsMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.UpdatedBy(childComplexity), true

	case "VehicleViolationScoringItemsMinFields.violation_scoring_item_id":
		if e.complexity.VehicleViolationScoringItemsMinFields.ViolationScoringItemID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.ViolationScoringItemID(childComplexity), true

	case "VehicleViolationScoringItemsMutationResponse.affected_rows":
		if e.complexity.VehicleViolationScoringItemsMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMutationResponse.AffectedRows(childComplexity), true

	case "VehicleViolationScoringItemsMutationResponse.returning":
		if e.complexity.VehicleViolationScoringItemsMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMutationResponse.Returning(childComplexity), true

	case "VehicleViolationScoringItemsStddevFields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsStddevFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsStddevFields.DeductionCategory(childComplexity), true

	case "VehicleViolationScoringItemsStddevFields.demerit_points":
		if e.complexity.VehicleViolationScoringItemsStddevFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsStddevFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringItemsStddevFields.id":
		if e.complexity.VehicleViolationScoringItemsStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsStddevFields.ID(childComplexity), true

	case "VehicleViolationScoringItemsStddevPopFields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsStddevPopFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsStddevPopFields.DeductionCategory(childComplexity), true

	case "VehicleViolationScoringItemsStddevPopFields.demerit_points":
		if e.complexity.VehicleViolationScoringItemsStddevPopFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsStddevPopFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringItemsStddevPopFields.id":
		if e.complexity.VehicleViolationScoringItemsStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsStddevPopFields.ID(childComplexity), true

	case "VehicleViolationScoringItemsStddevSampFields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsStddevSampFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsStddevSampFields.DeductionCategory(childComplexity), true

	case "VehicleViolationScoringItemsStddevSampFields.demerit_points":
		if e.complexity.VehicleViolationScoringItemsStddevSampFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsStddevSampFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringItemsStddevSampFields.id":
		if e.complexity.VehicleViolationScoringItemsStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsStddevSampFields.ID(childComplexity), true

	case "VehicleViolationScoringItemsSumFields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsSumFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsSumFields.DeductionCategory(childComplexity), true

	case "VehicleViolationScoringItemsSumFields.demerit_points":
		if e.complexity.VehicleViolationScoringItemsSumFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsSumFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringItemsSumFields.id":
		if e.complexity.VehicleViolationScoringItemsSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsSumFields.ID(childComplexity), true

	case "VehicleViolationScoringItemsVarPopFields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsVarPopFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsVarPopFields.DeductionCategory(childComplexity), true

	case "VehicleViolationScoringItemsVarPopFields.demerit_points":
		if e.complexity.VehicleViolationScoringItemsVarPopFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsVarPopFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringItemsVarPopFields.id":
		if e.complexity.VehicleViolationScoringItemsVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsVarPopFields.ID(childComplexity), true

	case "VehicleViolationScoringItemsVarSampFields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsVarSampFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsVarSampFields.DeductionCategory(childComplexity), true

	case "VehicleViolationScoringItemsVarSampFields.demerit_points":
		if e.complexity.VehicleViolationScoringItemsVarSampFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsVarSampFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringItemsVarSampFields.id":
		if e.complexity.VehicleViolationScoringItemsVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsVarSampFields.ID(childComplexity), true

	case "VehicleViolationScoringItemsVarianceFields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsVarianceFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsVarianceFields.DeductionCategory(childComplexity), true

	case "VehicleViolationScoringItemsVarianceFields.demerit_points":
		if e.complexity.VehicleViolationScoringItemsVarianceFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsVarianceFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringItemsVarianceFields.id":
		if e.complexity.VehicleViolationScoringItemsVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsVarianceFields.ID(childComplexity), true

	case "VehicleViolationScoringRecord.created_at":
		if e.complexity.VehicleViolationScoringRecord.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.CreatedAt(childComplexity), true

	case "VehicleViolationScoringRecord.created_by":
		if e.complexity.VehicleViolationScoringRecord.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.CreatedBy(childComplexity), true

	case "VehicleViolationScoringRecord.deleted_at":
		if e.complexity.VehicleViolationScoringRecord.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.DeletedAt(childComplexity), true

	case "VehicleViolationScoringRecord.deleted_by":
		if e.complexity.VehicleViolationScoringRecord.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.DeletedBy(childComplexity), true

	case "VehicleViolationScoringRecord.demerit_points":
		if e.complexity.VehicleViolationScoringRecord.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringRecord.id":
		if e.complexity.VehicleViolationScoringRecord.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.ID(childComplexity), true

	case "VehicleViolationScoringRecord.is_deleted":
		if e.complexity.VehicleViolationScoringRecord.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.IsDeleted(childComplexity), true

	case "VehicleViolationScoringRecord.remarks":
		if e.complexity.VehicleViolationScoringRecord.Remarks == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.Remarks(childComplexity), true

	case "VehicleViolationScoringRecord.updated_at":
		if e.complexity.VehicleViolationScoringRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.UpdatedAt(childComplexity), true

	case "VehicleViolationScoringRecord.updated_by":
		if e.complexity.VehicleViolationScoringRecord.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.UpdatedBy(childComplexity), true

	case "VehicleViolationScoringRecord.vehicle_id":
		if e.complexity.VehicleViolationScoringRecord.VehicleID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.VehicleID(childComplexity), true

	case "VehicleViolationScoringRecord.violation_scoring_id":
		if e.complexity.VehicleViolationScoringRecord.ViolationScoringID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.ViolationScoringID(childComplexity), true

	case "VehicleViolationScoringRecord.violation_scoring_item_id":
		if e.complexity.VehicleViolationScoringRecord.ViolationScoringItemID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.ViolationScoringItemID(childComplexity), true

	case "VehicleViolationScoringRecordAggregate.aggregate":
		if e.complexity.VehicleViolationScoringRecordAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregate.Aggregate(childComplexity), true

	case "VehicleViolationScoringRecordAggregateFields.avg":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.Avg(childComplexity), true

	case "VehicleViolationScoringRecordAggregateFields.count":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.Count == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.Count(childComplexity), true

	case "VehicleViolationScoringRecordAggregateFields.max":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.Max(childComplexity), true

	case "VehicleViolationScoringRecordAggregateFields.min":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.Min(childComplexity), true

	case "VehicleViolationScoringRecordAggregateFields.stddev":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.Stddev(childComplexity), true

	case "VehicleViolationScoringRecordAggregateFields.stddev_pop":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.StddevPop(childComplexity), true

	case "VehicleViolationScoringRecordAggregateFields.stddev_samp":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.StddevSamp(childComplexity), true

	case "VehicleViolationScoringRecordAggregateFields.sum":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.Sum(childComplexity), true

	case "VehicleViolationScoringRecordAggregateFields.var_pop":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.VarPop(childComplexity), true

	case "VehicleViolationScoringRecordAggregateFields.var_samp":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.VarSamp(childComplexity), true

	case "VehicleViolationScoringRecordAggregateFields.variance":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.Variance(childComplexity), true

	case "VehicleViolationScoringRecordAvgFields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordAvgFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAvgFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringRecordAvgFields.id":
		if e.complexity.VehicleViolationScoringRecordAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAvgFields.ID(childComplexity), true

	case "VehicleViolationScoringRecordMaxFields.created_at":
		if e.complexity.VehicleViolationScoringRecordMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.CreatedAt(childComplexity), true

	case "VehicleViolationScoringRecordMaxFields.created_by":
		if e.complexity.VehicleViolationScoringRecordMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.CreatedBy(childComplexity), true

	case "VehicleViolationScoringRecordMaxFields.deleted_at":
		if e.complexity.VehicleViolationScoringRecordMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.DeletedAt(childComplexity), true

	case "VehicleViolationScoringRecordMaxFields.deleted_by":
		if e.complexity.VehicleViolationScoringRecordMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.DeletedBy(childComplexity), true

	case "VehicleViolationScoringRecordMaxFields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordMaxFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringRecordMaxFields.id":
		if e.complexity.VehicleViolationScoringRecordMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.ID(childComplexity), true

	case "VehicleViolationScoringRecordMaxFields.is_deleted":
		if e.complexity.VehicleViolationScoringRecordMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.IsDeleted(childComplexity), true

	case "VehicleViolationScoringRecordMaxFields.remarks":
		if e.complexity.VehicleViolationScoringRecordMaxFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.Remarks(childComplexity), true

	case "VehicleViolationScoringRecordMaxFields.updated_at":
		if e.complexity.VehicleViolationScoringRecordMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.UpdatedAt(childComplexity), true

	case "VehicleViolationScoringRecordMaxFields.updated_by":
		if e.complexity.VehicleViolationScoringRecordMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.UpdatedBy(childComplexity), true

	case "VehicleViolationScoringRecordMaxFields.vehicle_id":
		if e.complexity.VehicleViolationScoringRecordMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.VehicleID(childComplexity), true

	case "VehicleViolationScoringRecordMaxFields.violation_scoring_id":
		if e.complexity.VehicleViolationScoringRecordMaxFields.ViolationScoringID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.ViolationScoringID(childComplexity), true

	case "VehicleViolationScoringRecordMaxFields.violation_scoring_item_id":
		if e.complexity.VehicleViolationScoringRecordMaxFields.ViolationScoringItemID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.ViolationScoringItemID(childComplexity), true

	case "VehicleViolationScoringRecordMinFields.created_at":
		if e.complexity.VehicleViolationScoringRecordMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.CreatedAt(childComplexity), true

	case "VehicleViolationScoringRecordMinFields.created_by":
		if e.complexity.VehicleViolationScoringRecordMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.CreatedBy(childComplexity), true

	case "VehicleViolationScoringRecordMinFields.deleted_at":
		if e.complexity.VehicleViolationScoringRecordMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.DeletedAt(childComplexity), true

	case "VehicleViolationScoringRecordMinFields.deleted_by":
		if e.complexity.VehicleViolationScoringRecordMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.DeletedBy(childComplexity), true

	case "VehicleViolationScoringRecordMinFields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordMinFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringRecordMinFields.id":
		if e.complexity.VehicleViolationScoringRecordMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.ID(childComplexity), true

	case "VehicleViolationScoringRecordMinFields.is_deleted":
		if e.complexity.VehicleViolationScoringRecordMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.IsDeleted(childComplexity), true

	case "VehicleViolationScoringRecordMinFields.remarks":
		if e.complexity.VehicleViolationScoringRecordMinFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.Remarks(childComplexity), true

	case "VehicleViolationScoringRecordMinFields.updated_at":
		if e.complexity.VehicleViolationScoringRecordMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.UpdatedAt(childComplexity), true

	case "VehicleViolationScoringRecordMinFields.updated_by":
		if e.complexity.VehicleViolationScoringRecordMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.UpdatedBy(childComplexity), true

	case "VehicleViolationScoringRecordMinFields.vehicle_id":
		if e.complexity.VehicleViolationScoringRecordMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.VehicleID(childComplexity), true

	case "VehicleViolationScoringRecordMinFields.violation_scoring_id":
		if e.complexity.VehicleViolationScoringRecordMinFields.ViolationScoringID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.ViolationScoringID(childComplexity), true

	case "VehicleViolationScoringRecordMinFields.violation_scoring_item_id":
		if e.complexity.VehicleViolationScoringRecordMinFields.ViolationScoringItemID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.ViolationScoringItemID(childComplexity), true

	case "VehicleViolationScoringRecordMutationResponse.affected_rows":
		if e.complexity.VehicleViolationScoringRecordMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMutationResponse.AffectedRows(childComplexity), true

	case "VehicleViolationScoringRecordMutationResponse.returning":
		if e.complexity.VehicleViolationScoringRecordMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMutationResponse.Returning(childComplexity), true

	case "VehicleViolationScoringRecordStddevFields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordStddevFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordStddevFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringRecordStddevFields.id":
		if e.complexity.VehicleViolationScoringRecordStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordStddevFields.ID(childComplexity), true

	case "VehicleViolationScoringRecordStddevPopFields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordStddevPopFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordStddevPopFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringRecordStddevPopFields.id":
		if e.complexity.VehicleViolationScoringRecordStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordStddevPopFields.ID(childComplexity), true

	case "VehicleViolationScoringRecordStddevSampFields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordStddevSampFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordStddevSampFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringRecordStddevSampFields.id":
		if e.complexity.VehicleViolationScoringRecordStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordStddevSampFields.ID(childComplexity), true

	case "VehicleViolationScoringRecordSumFields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordSumFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordSumFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringRecordSumFields.id":
		if e.complexity.VehicleViolationScoringRecordSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordSumFields.ID(childComplexity), true

	case "VehicleViolationScoringRecordVarPopFields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordVarPopFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordVarPopFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringRecordVarPopFields.id":
		if e.complexity.VehicleViolationScoringRecordVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordVarPopFields.ID(childComplexity), true

	case "VehicleViolationScoringRecordVarSampFields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordVarSampFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordVarSampFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringRecordVarSampFields.id":
		if e.complexity.VehicleViolationScoringRecordVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordVarSampFields.ID(childComplexity), true

	case "VehicleViolationScoringRecordVarianceFields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordVarianceFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordVarianceFields.DemeritPoints(childComplexity), true

	case "VehicleViolationScoringRecordVarianceFields.id":
		if e.complexity.VehicleViolationScoringRecordVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordVarianceFields.ID(childComplexity), true

	case "VioCodewfdm.fkje_max":
		if e.complexity.VioCodewfdm.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdm.FkjeMax(childComplexity), true

	case "VioCodewfdm.fkje_min":
		if e.complexity.VioCodewfdm.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdm.FkjeMin(childComplexity), true

	case "VioCodewfdm.wfjfs":
		if e.complexity.VioCodewfdm.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdm.Wfjfs(childComplexity), true

	case "VioCodewfdm.wfms":
		if e.complexity.VioCodewfdm.Wfms == nil {
			break
		}

		return e.complexity.VioCodewfdm.Wfms(childComplexity), true

	case "VioCodewfdm.wfxw":
		if e.complexity.VioCodewfdm.Wfxw == nil {
			break
		}

		return e.complexity.VioCodewfdm.Wfxw(childComplexity), true

	case "VioCodewfdm.xh":
		if e.complexity.VioCodewfdm.Xh == nil {
			break
		}

		return e.complexity.VioCodewfdm.Xh(childComplexity), true

	case "VioCodewfdmAggregate.aggregate":
		if e.complexity.VioCodewfdmAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregate.Aggregate(childComplexity), true

	case "VioCodewfdmAggregateFields.avg":
		if e.complexity.VioCodewfdmAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.Avg(childComplexity), true

	case "VioCodewfdmAggregateFields.count":
		if e.complexity.VioCodewfdmAggregateFields.Count == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.Count(childComplexity), true

	case "VioCodewfdmAggregateFields.max":
		if e.complexity.VioCodewfdmAggregateFields.Max == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.Max(childComplexity), true

	case "VioCodewfdmAggregateFields.min":
		if e.complexity.VioCodewfdmAggregateFields.Min == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.Min(childComplexity), true

	case "VioCodewfdmAggregateFields.stddev":
		if e.complexity.VioCodewfdmAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.Stddev(childComplexity), true

	case "VioCodewfdmAggregateFields.stddev_pop":
		if e.complexity.VioCodewfdmAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.StddevPop(childComplexity), true

	case "VioCodewfdmAggregateFields.stddev_samp":
		if e.complexity.VioCodewfdmAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.StddevSamp(childComplexity), true

	case "VioCodewfdmAggregateFields.sum":
		if e.complexity.VioCodewfdmAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.Sum(childComplexity), true

	case "VioCodewfdmAggregateFields.var_pop":
		if e.complexity.VioCodewfdmAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.VarPop(childComplexity), true

	case "VioCodewfdmAggregateFields.var_samp":
		if e.complexity.VioCodewfdmAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.VarSamp(childComplexity), true

	case "VioCodewfdmAggregateFields.variance":
		if e.complexity.VioCodewfdmAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.Variance(childComplexity), true

	case "VioCodewfdmAvgFields.fkje_max":
		if e.complexity.VioCodewfdmAvgFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmAvgFields.FkjeMax(childComplexity), true

	case "VioCodewfdmAvgFields.fkje_min":
		if e.complexity.VioCodewfdmAvgFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmAvgFields.FkjeMin(childComplexity), true

	case "VioCodewfdmAvgFields.wfjfs":
		if e.complexity.VioCodewfdmAvgFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmAvgFields.Wfjfs(childComplexity), true

	case "VioCodewfdmMaxFields.fkje_max":
		if e.complexity.VioCodewfdmMaxFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmMaxFields.FkjeMax(childComplexity), true

	case "VioCodewfdmMaxFields.fkje_min":
		if e.complexity.VioCodewfdmMaxFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmMaxFields.FkjeMin(childComplexity), true

	case "VioCodewfdmMaxFields.wfjfs":
		if e.complexity.VioCodewfdmMaxFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmMaxFields.Wfjfs(childComplexity), true

	case "VioCodewfdmMaxFields.wfms":
		if e.complexity.VioCodewfdmMaxFields.Wfms == nil {
			break
		}

		return e.complexity.VioCodewfdmMaxFields.Wfms(childComplexity), true

	case "VioCodewfdmMaxFields.wfxw":
		if e.complexity.VioCodewfdmMaxFields.Wfxw == nil {
			break
		}

		return e.complexity.VioCodewfdmMaxFields.Wfxw(childComplexity), true

	case "VioCodewfdmMaxFields.xh":
		if e.complexity.VioCodewfdmMaxFields.Xh == nil {
			break
		}

		return e.complexity.VioCodewfdmMaxFields.Xh(childComplexity), true

	case "VioCodewfdmMinFields.fkje_max":
		if e.complexity.VioCodewfdmMinFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmMinFields.FkjeMax(childComplexity), true

	case "VioCodewfdmMinFields.fkje_min":
		if e.complexity.VioCodewfdmMinFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmMinFields.FkjeMin(childComplexity), true

	case "VioCodewfdmMinFields.wfjfs":
		if e.complexity.VioCodewfdmMinFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmMinFields.Wfjfs(childComplexity), true

	case "VioCodewfdmMinFields.wfms":
		if e.complexity.VioCodewfdmMinFields.Wfms == nil {
			break
		}

		return e.complexity.VioCodewfdmMinFields.Wfms(childComplexity), true

	case "VioCodewfdmMinFields.wfxw":
		if e.complexity.VioCodewfdmMinFields.Wfxw == nil {
			break
		}

		return e.complexity.VioCodewfdmMinFields.Wfxw(childComplexity), true

	case "VioCodewfdmMinFields.xh":
		if e.complexity.VioCodewfdmMinFields.Xh == nil {
			break
		}

		return e.complexity.VioCodewfdmMinFields.Xh(childComplexity), true

	case "VioCodewfdmMutationResponse.affected_rows":
		if e.complexity.VioCodewfdmMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VioCodewfdmMutationResponse.AffectedRows(childComplexity), true

	case "VioCodewfdmMutationResponse.returning":
		if e.complexity.VioCodewfdmMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VioCodewfdmMutationResponse.Returning(childComplexity), true

	case "VioCodewfdmStddevFields.fkje_max":
		if e.complexity.VioCodewfdmStddevFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmStddevFields.FkjeMax(childComplexity), true

	case "VioCodewfdmStddevFields.fkje_min":
		if e.complexity.VioCodewfdmStddevFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmStddevFields.FkjeMin(childComplexity), true

	case "VioCodewfdmStddevFields.wfjfs":
		if e.complexity.VioCodewfdmStddevFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmStddevFields.Wfjfs(childComplexity), true

	case "VioCodewfdmStddevPopFields.fkje_max":
		if e.complexity.VioCodewfdmStddevPopFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmStddevPopFields.FkjeMax(childComplexity), true

	case "VioCodewfdmStddevPopFields.fkje_min":
		if e.complexity.VioCodewfdmStddevPopFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmStddevPopFields.FkjeMin(childComplexity), true

	case "VioCodewfdmStddevPopFields.wfjfs":
		if e.complexity.VioCodewfdmStddevPopFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmStddevPopFields.Wfjfs(childComplexity), true

	case "VioCodewfdmStddevSampFields.fkje_max":
		if e.complexity.VioCodewfdmStddevSampFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmStddevSampFields.FkjeMax(childComplexity), true

	case "VioCodewfdmStddevSampFields.fkje_min":
		if e.complexity.VioCodewfdmStddevSampFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmStddevSampFields.FkjeMin(childComplexity), true

	case "VioCodewfdmStddevSampFields.wfjfs":
		if e.complexity.VioCodewfdmStddevSampFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmStddevSampFields.Wfjfs(childComplexity), true

	case "VioCodewfdmSumFields.fkje_max":
		if e.complexity.VioCodewfdmSumFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmSumFields.FkjeMax(childComplexity), true

	case "VioCodewfdmSumFields.fkje_min":
		if e.complexity.VioCodewfdmSumFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmSumFields.FkjeMin(childComplexity), true

	case "VioCodewfdmSumFields.wfjfs":
		if e.complexity.VioCodewfdmSumFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmSumFields.Wfjfs(childComplexity), true

	case "VioCodewfdmVarPopFields.fkje_max":
		if e.complexity.VioCodewfdmVarPopFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmVarPopFields.FkjeMax(childComplexity), true

	case "VioCodewfdmVarPopFields.fkje_min":
		if e.complexity.VioCodewfdmVarPopFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmVarPopFields.FkjeMin(childComplexity), true

	case "VioCodewfdmVarPopFields.wfjfs":
		if e.complexity.VioCodewfdmVarPopFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmVarPopFields.Wfjfs(childComplexity), true

	case "VioCodewfdmVarSampFields.fkje_max":
		if e.complexity.VioCodewfdmVarSampFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmVarSampFields.FkjeMax(childComplexity), true

	case "VioCodewfdmVarSampFields.fkje_min":
		if e.complexity.VioCodewfdmVarSampFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmVarSampFields.FkjeMin(childComplexity), true

	case "VioCodewfdmVarSampFields.wfjfs":
		if e.complexity.VioCodewfdmVarSampFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmVarSampFields.Wfjfs(childComplexity), true

	case "VioCodewfdmVarianceFields.fkje_max":
		if e.complexity.VioCodewfdmVarianceFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmVarianceFields.FkjeMax(childComplexity), true

	case "VioCodewfdmVarianceFields.fkje_min":
		if e.complexity.VioCodewfdmVarianceFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmVarianceFields.FkjeMin(childComplexity), true

	case "VioCodewfdmVarianceFields.wfjfs":
		if e.complexity.VioCodewfdmVarianceFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmVarianceFields.Wfjfs(childComplexity), true

	case "ViolationRegistration.cause":
		if e.complexity.ViolationRegistration.Cause == nil {
			break
		}

		return e.complexity.ViolationRegistration.Cause(childComplexity), true

	case "ViolationRegistration.city_id":
		if e.complexity.ViolationRegistration.CityID == nil {
			break
		}

		return e.complexity.ViolationRegistration.CityID(childComplexity), true

	case "ViolationRegistration.created_at":
		if e.complexity.ViolationRegistration.CreatedAt == nil {
			break
		}

		return e.complexity.ViolationRegistration.CreatedAt(childComplexity), true

	case "ViolationRegistration.created_by":
		if e.complexity.ViolationRegistration.CreatedBy == nil {
			break
		}

		return e.complexity.ViolationRegistration.CreatedBy(childComplexity), true

	case "ViolationRegistration.deleted_at":
		if e.complexity.ViolationRegistration.DeletedAt == nil {
			break
		}

		return e.complexity.ViolationRegistration.DeletedAt(childComplexity), true

	case "ViolationRegistration.deleted_by":
		if e.complexity.ViolationRegistration.DeletedBy == nil {
			break
		}

		return e.complexity.ViolationRegistration.DeletedBy(childComplexity), true

	case "ViolationRegistration.district_id":
		if e.complexity.ViolationRegistration.DistrictID == nil {
			break
		}

		return e.complexity.ViolationRegistration.DistrictID(childComplexity), true

	case "ViolationRegistration.id":
		if e.complexity.ViolationRegistration.ID == nil {
			break
		}

		return e.complexity.ViolationRegistration.ID(childComplexity), true

	case "ViolationRegistration.id_card_num":
		if e.complexity.ViolationRegistration.IDCardNum == nil {
			break
		}

		return e.complexity.ViolationRegistration.IDCardNum(childComplexity), true

	case "ViolationRegistration.illegal_area":
		if e.complexity.ViolationRegistration.IllegalArea == nil {
			break
		}

		return e.complexity.ViolationRegistration.IllegalArea(childComplexity), true

	case "ViolationRegistration.illegal_code":
		if e.complexity.ViolationRegistration.IllegalCode == nil {
			break
		}

		return e.complexity.ViolationRegistration.IllegalCode(childComplexity), true

	case "ViolationRegistration.illegal_time":
		if e.complexity.ViolationRegistration.IllegalTime == nil {
			break
		}

		return e.complexity.ViolationRegistration.IllegalTime(childComplexity), true

	case "ViolationRegistration.is_accident":
		if e.complexity.ViolationRegistration.IsAccident == nil {
			break
		}

		return e.complexity.ViolationRegistration.IsAccident(childComplexity), true

	case "ViolationRegistration.is_deleted":
		if e.complexity.ViolationRegistration.IsDeleted == nil {
			break
		}

		return e.complexity.ViolationRegistration.IsDeleted(childComplexity), true

	case "ViolationRegistration.is_supervised":
		if e.complexity.ViolationRegistration.IsSupervised == nil {
			break
		}

		return e.complexity.ViolationRegistration.IsSupervised(childComplexity), true

	case "ViolationRegistration.license_plate_number":
		if e.complexity.ViolationRegistration.LicensePlateNumber == nil {
			break
		}

		return e.complexity.ViolationRegistration.LicensePlateNumber(childComplexity), true

	case "ViolationRegistration.location":
		if e.complexity.ViolationRegistration.Location == nil {
			break
		}

		return e.complexity.ViolationRegistration.Location(childComplexity), true

	case "ViolationRegistration.name":
		if e.complexity.ViolationRegistration.Name == nil {
			break
		}

		return e.complexity.ViolationRegistration.Name(childComplexity), true

	case "ViolationRegistration.operator":
		if e.complexity.ViolationRegistration.Operator == nil {
			break
		}

		return e.complexity.ViolationRegistration.Operator(childComplexity), true

	case "ViolationRegistration.province_id":
		if e.complexity.ViolationRegistration.ProvinceID == nil {
			break
		}

		return e.complexity.ViolationRegistration.ProvinceID(childComplexity), true

	case "ViolationRegistration.sepervision_remarks":
		if e.complexity.ViolationRegistration.SepervisionRemarks == nil {
			break
		}

		return e.complexity.ViolationRegistration.SepervisionRemarks(childComplexity), true

	case "ViolationRegistration.supervision_time":
		if e.complexity.ViolationRegistration.SupervisionTime == nil {
			break
		}

		return e.complexity.ViolationRegistration.SupervisionTime(childComplexity), true

	case "ViolationRegistration.supervisor":
		if e.complexity.ViolationRegistration.Supervisor == nil {
			break
		}

		return e.complexity.ViolationRegistration.Supervisor(childComplexity), true

	case "ViolationRegistration.updated_at":
		if e.complexity.ViolationRegistration.UpdatedAt == nil {
			break
		}

		return e.complexity.ViolationRegistration.UpdatedAt(childComplexity), true

	case "ViolationRegistration.updated_by":
		if e.complexity.ViolationRegistration.UpdatedBy == nil {
			break
		}

		return e.complexity.ViolationRegistration.UpdatedBy(childComplexity), true

	case "ViolationRegistration.vehicle_area":
		if e.complexity.ViolationRegistration.VehicleArea == nil {
			break
		}

		return e.complexity.ViolationRegistration.VehicleArea(childComplexity), true

	case "ViolationRegistration.vehicle_enterprise":
		if e.complexity.ViolationRegistration.VehicleEnterprise == nil {
			break
		}

		return e.complexity.ViolationRegistration.VehicleEnterprise(childComplexity), true

	case "ViolationRegistration.vehicle_id":
		if e.complexity.ViolationRegistration.VehicleID == nil {
			break
		}

		return e.complexity.ViolationRegistration.VehicleID(childComplexity), true

	case "ViolationRegistration.violation_registration_id":
		if e.complexity.ViolationRegistration.ViolationRegistrationID == nil {
			break
		}

		return e.complexity.ViolationRegistration.ViolationRegistrationID(childComplexity), true

	case "ViolationRegistrationAggregate.aggregate":
		if e.complexity.ViolationRegistrationAggregate.Aggregate == nil {
			break
		}

		return e.complexity.ViolationRegistrationAggregate.Aggregate(childComplexity), true

	case "ViolationRegistrationAggregateFields.avg":
		if e.complexity.ViolationRegistrationAggregateFields.Avg == nil {
			break
		}

		return e.complexity.ViolationRegistrationAggregateFields.Avg(childComplexity), true

	case "ViolationRegistrationAggregateFields.count":
		if e.complexity.ViolationRegistrationAggregateFields.Count == nil {
			break
		}

		return e.complexity.ViolationRegistrationAggregateFields.Count(childComplexity), true

	case "ViolationRegistrationAggregateFields.max":
		if e.complexity.ViolationRegistrationAggregateFields.Max == nil {
			break
		}

		return e.complexity.ViolationRegistrationAggregateFields.Max(childComplexity), true

	case "ViolationRegistrationAggregateFields.min":
		if e.complexity.ViolationRegistrationAggregateFields.Min == nil {
			break
		}

		return e.complexity.ViolationRegistrationAggregateFields.Min(childComplexity), true

	case "ViolationRegistrationAggregateFields.stddev":
		if e.complexity.ViolationRegistrationAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.ViolationRegistrationAggregateFields.Stddev(childComplexity), true

	case "ViolationRegistrationAggregateFields.stddev_pop":
		if e.complexity.ViolationRegistrationAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.ViolationRegistrationAggregateFields.StddevPop(childComplexity), true

	case "ViolationRegistrationAggregateFields.stddev_samp":
		if e.complexity.ViolationRegistrationAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.ViolationRegistrationAggregateFields.StddevSamp(childComplexity), true

	case "ViolationRegistrationAggregateFields.sum":
		if e.complexity.ViolationRegistrationAggregateFields.Sum == nil {
			break
		}

		return e.complexity.ViolationRegistrationAggregateFields.Sum(childComplexity), true

	case "ViolationRegistrationAggregateFields.var_pop":
		if e.complexity.ViolationRegistrationAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.ViolationRegistrationAggregateFields.VarPop(childComplexity), true

	case "ViolationRegistrationAggregateFields.var_samp":
		if e.complexity.ViolationRegistrationAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.ViolationRegistrationAggregateFields.VarSamp(childComplexity), true

	case "ViolationRegistrationAggregateFields.variance":
		if e.complexity.ViolationRegistrationAggregateFields.Variance == nil {
			break
		}

		return e.complexity.ViolationRegistrationAggregateFields.Variance(childComplexity), true

	case "ViolationRegistrationAvgFields.id":
		if e.complexity.ViolationRegistrationAvgFields.ID == nil {
			break
		}

		return e.complexity.ViolationRegistrationAvgFields.ID(childComplexity), true

	case "ViolationRegistrationMaxFields.cause":
		if e.complexity.ViolationRegistrationMaxFields.Cause == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.Cause(childComplexity), true

	case "ViolationRegistrationMaxFields.city_id":
		if e.complexity.ViolationRegistrationMaxFields.CityID == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.CityID(childComplexity), true

	case "ViolationRegistrationMaxFields.created_at":
		if e.complexity.ViolationRegistrationMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.CreatedAt(childComplexity), true

	case "ViolationRegistrationMaxFields.created_by":
		if e.complexity.ViolationRegistrationMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.CreatedBy(childComplexity), true

	case "ViolationRegistrationMaxFields.deleted_at":
		if e.complexity.ViolationRegistrationMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.DeletedAt(childComplexity), true

	case "ViolationRegistrationMaxFields.deleted_by":
		if e.complexity.ViolationRegistrationMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.DeletedBy(childComplexity), true

	case "ViolationRegistrationMaxFields.district_id":
		if e.complexity.ViolationRegistrationMaxFields.DistrictID == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.DistrictID(childComplexity), true

	case "ViolationRegistrationMaxFields.id":
		if e.complexity.ViolationRegistrationMaxFields.ID == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.ID(childComplexity), true

	case "ViolationRegistrationMaxFields.id_card_num":
		if e.complexity.ViolationRegistrationMaxFields.IDCardNum == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.IDCardNum(childComplexity), true

	case "ViolationRegistrationMaxFields.illegal_area":
		if e.complexity.ViolationRegistrationMaxFields.IllegalArea == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.IllegalArea(childComplexity), true

	case "ViolationRegistrationMaxFields.illegal_code":
		if e.complexity.ViolationRegistrationMaxFields.IllegalCode == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.IllegalCode(childComplexity), true

	case "ViolationRegistrationMaxFields.illegal_time":
		if e.complexity.ViolationRegistrationMaxFields.IllegalTime == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.IllegalTime(childComplexity), true

	case "ViolationRegistrationMaxFields.is_accident":
		if e.complexity.ViolationRegistrationMaxFields.IsAccident == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.IsAccident(childComplexity), true

	case "ViolationRegistrationMaxFields.is_deleted":
		if e.complexity.ViolationRegistrationMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.IsDeleted(childComplexity), true

	case "ViolationRegistrationMaxFields.is_supervised":
		if e.complexity.ViolationRegistrationMaxFields.IsSupervised == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.IsSupervised(childComplexity), true

	case "ViolationRegistrationMaxFields.license_plate_number":
		if e.complexity.ViolationRegistrationMaxFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.LicensePlateNumber(childComplexity), true

	case "ViolationRegistrationMaxFields.location":
		if e.complexity.ViolationRegistrationMaxFields.Location == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.Location(childComplexity), true

	case "ViolationRegistrationMaxFields.name":
		if e.complexity.ViolationRegistrationMaxFields.Name == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.Name(childComplexity), true

	case "ViolationRegistrationMaxFields.operator":
		if e.complexity.ViolationRegistrationMaxFields.Operator == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.Operator(childComplexity), true

	case "ViolationRegistrationMaxFields.province_id":
		if e.complexity.ViolationRegistrationMaxFields.ProvinceID == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.ProvinceID(childComplexity), true

	case "ViolationRegistrationMaxFields.sepervision_remarks":
		if e.complexity.ViolationRegistrationMaxFields.SepervisionRemarks == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.SepervisionRemarks(childComplexity), true

	case "ViolationRegistrationMaxFields.supervision_time":
		if e.complexity.ViolationRegistrationMaxFields.SupervisionTime == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.SupervisionTime(childComplexity), true

	case "ViolationRegistrationMaxFields.supervisor":
		if e.complexity.ViolationRegistrationMaxFields.Supervisor == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.Supervisor(childComplexity), true

	case "ViolationRegistrationMaxFields.updated_at":
		if e.complexity.ViolationRegistrationMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.UpdatedAt(childComplexity), true

	case "ViolationRegistrationMaxFields.updated_by":
		if e.complexity.ViolationRegistrationMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.UpdatedBy(childComplexity), true

	case "ViolationRegistrationMaxFields.vehicle_area":
		if e.complexity.ViolationRegistrationMaxFields.VehicleArea == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.VehicleArea(childComplexity), true

	case "ViolationRegistrationMaxFields.vehicle_enterprise":
		if e.complexity.ViolationRegistrationMaxFields.VehicleEnterprise == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.VehicleEnterprise(childComplexity), true

	case "ViolationRegistrationMaxFields.vehicle_id":
		if e.complexity.ViolationRegistrationMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.VehicleID(childComplexity), true

	case "ViolationRegistrationMaxFields.violation_registration_id":
		if e.complexity.ViolationRegistrationMaxFields.ViolationRegistrationID == nil {
			break
		}

		return e.complexity.ViolationRegistrationMaxFields.ViolationRegistrationID(childComplexity), true

	case "ViolationRegistrationMinFields.cause":
		if e.complexity.ViolationRegistrationMinFields.Cause == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.Cause(childComplexity), true

	case "ViolationRegistrationMinFields.city_id":
		if e.complexity.ViolationRegistrationMinFields.CityID == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.CityID(childComplexity), true

	case "ViolationRegistrationMinFields.created_at":
		if e.complexity.ViolationRegistrationMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.CreatedAt(childComplexity), true

	case "ViolationRegistrationMinFields.created_by":
		if e.complexity.ViolationRegistrationMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.CreatedBy(childComplexity), true

	case "ViolationRegistrationMinFields.deleted_at":
		if e.complexity.ViolationRegistrationMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.DeletedAt(childComplexity), true

	case "ViolationRegistrationMinFields.deleted_by":
		if e.complexity.ViolationRegistrationMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.DeletedBy(childComplexity), true

	case "ViolationRegistrationMinFields.district_id":
		if e.complexity.ViolationRegistrationMinFields.DistrictID == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.DistrictID(childComplexity), true

	case "ViolationRegistrationMinFields.id":
		if e.complexity.ViolationRegistrationMinFields.ID == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.ID(childComplexity), true

	case "ViolationRegistrationMinFields.id_card_num":
		if e.complexity.ViolationRegistrationMinFields.IDCardNum == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.IDCardNum(childComplexity), true

	case "ViolationRegistrationMinFields.illegal_area":
		if e.complexity.ViolationRegistrationMinFields.IllegalArea == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.IllegalArea(childComplexity), true

	case "ViolationRegistrationMinFields.illegal_code":
		if e.complexity.ViolationRegistrationMinFields.IllegalCode == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.IllegalCode(childComplexity), true

	case "ViolationRegistrationMinFields.illegal_time":
		if e.complexity.ViolationRegistrationMinFields.IllegalTime == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.IllegalTime(childComplexity), true

	case "ViolationRegistrationMinFields.is_accident":
		if e.complexity.ViolationRegistrationMinFields.IsAccident == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.IsAccident(childComplexity), true

	case "ViolationRegistrationMinFields.is_deleted":
		if e.complexity.ViolationRegistrationMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.IsDeleted(childComplexity), true

	case "ViolationRegistrationMinFields.is_supervised":
		if e.complexity.ViolationRegistrationMinFields.IsSupervised == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.IsSupervised(childComplexity), true

	case "ViolationRegistrationMinFields.license_plate_number":
		if e.complexity.ViolationRegistrationMinFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.LicensePlateNumber(childComplexity), true

	case "ViolationRegistrationMinFields.location":
		if e.complexity.ViolationRegistrationMinFields.Location == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.Location(childComplexity), true

	case "ViolationRegistrationMinFields.name":
		if e.complexity.ViolationRegistrationMinFields.Name == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.Name(childComplexity), true

	case "ViolationRegistrationMinFields.operator":
		if e.complexity.ViolationRegistrationMinFields.Operator == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.Operator(childComplexity), true

	case "ViolationRegistrationMinFields.province_id":
		if e.complexity.ViolationRegistrationMinFields.ProvinceID == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.ProvinceID(childComplexity), true

	case "ViolationRegistrationMinFields.sepervision_remarks":
		if e.complexity.ViolationRegistrationMinFields.SepervisionRemarks == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.SepervisionRemarks(childComplexity), true

	case "ViolationRegistrationMinFields.supervision_time":
		if e.complexity.ViolationRegistrationMinFields.SupervisionTime == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.SupervisionTime(childComplexity), true

	case "ViolationRegistrationMinFields.supervisor":
		if e.complexity.ViolationRegistrationMinFields.Supervisor == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.Supervisor(childComplexity), true

	case "ViolationRegistrationMinFields.updated_at":
		if e.complexity.ViolationRegistrationMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.UpdatedAt(childComplexity), true

	case "ViolationRegistrationMinFields.updated_by":
		if e.complexity.ViolationRegistrationMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.UpdatedBy(childComplexity), true

	case "ViolationRegistrationMinFields.vehicle_area":
		if e.complexity.ViolationRegistrationMinFields.VehicleArea == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.VehicleArea(childComplexity), true

	case "ViolationRegistrationMinFields.vehicle_enterprise":
		if e.complexity.ViolationRegistrationMinFields.VehicleEnterprise == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.VehicleEnterprise(childComplexity), true

	case "ViolationRegistrationMinFields.vehicle_id":
		if e.complexity.ViolationRegistrationMinFields.VehicleID == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.VehicleID(childComplexity), true

	case "ViolationRegistrationMinFields.violation_registration_id":
		if e.complexity.ViolationRegistrationMinFields.ViolationRegistrationID == nil {
			break
		}

		return e.complexity.ViolationRegistrationMinFields.ViolationRegistrationID(childComplexity), true

	case "ViolationRegistrationMutationResponse.affected_rows":
		if e.complexity.ViolationRegistrationMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.ViolationRegistrationMutationResponse.AffectedRows(childComplexity), true

	case "ViolationRegistrationMutationResponse.returning":
		if e.complexity.ViolationRegistrationMutationResponse.Returning == nil {
			break
		}

		return e.complexity.ViolationRegistrationMutationResponse.Returning(childComplexity), true

	case "ViolationRegistrationStddevFields.id":
		if e.complexity.ViolationRegistrationStddevFields.ID == nil {
			break
		}

		return e.complexity.ViolationRegistrationStddevFields.ID(childComplexity), true

	case "ViolationRegistrationStddevPopFields.id":
		if e.complexity.ViolationRegistrationStddevPopFields.ID == nil {
			break
		}

		return e.complexity.ViolationRegistrationStddevPopFields.ID(childComplexity), true

	case "ViolationRegistrationStddevSampFields.id":
		if e.complexity.ViolationRegistrationStddevSampFields.ID == nil {
			break
		}

		return e.complexity.ViolationRegistrationStddevSampFields.ID(childComplexity), true

	case "ViolationRegistrationSumFields.id":
		if e.complexity.ViolationRegistrationSumFields.ID == nil {
			break
		}

		return e.complexity.ViolationRegistrationSumFields.ID(childComplexity), true

	case "ViolationRegistrationVarPopFields.id":
		if e.complexity.ViolationRegistrationVarPopFields.ID == nil {
			break
		}

		return e.complexity.ViolationRegistrationVarPopFields.ID(childComplexity), true

	case "ViolationRegistrationVarSampFields.id":
		if e.complexity.ViolationRegistrationVarSampFields.ID == nil {
			break
		}

		return e.complexity.ViolationRegistrationVarSampFields.ID(childComplexity), true

	case "ViolationRegistrationVarianceFields.id":
		if e.complexity.ViolationRegistrationVarianceFields.ID == nil {
			break
		}

		return e.complexity.ViolationRegistrationVarianceFields.ID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/app_enforcement.graphqls", Input: `"""
APP现场执法表
"""
type AppEnforcement {
	"""
	 按指定方法生成                                               ( 主键                       )
	"""
	id: Bigint!
	"""
	 APP现场执法表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	illegal_photo_id: String!
	"""
	 vehicle_info 车辆信息表 的vehicle_id                     (                            )
	"""
	vehicle_id: String
	"""
	 操作用户                                                     ( system_user表的user_id )
	"""
	operation_user: String
	"""
	 编辑文本                                                     (                            )
	"""
	edit_text: String
	"""
	 空间数据类型point表示经度(longitude)和纬度(latitude)         (                            )
	"""
	coordinate: Point
	"""
	 位置描述                                                     (                            )
	"""
	location_description: String
	"""
	 企业类型                                                     ( 企业类型字典           )
	"""
	enterprise_type: String
	"""
	 纠察状态（1.反馈辖区管理 2.执法考评 3.其他 4.查处“两非”渣土车） (                            )
	"""
	picket_status: Int
	"""
	 创建时间                                                     (                            )
	"""
	created_at: Timestamptz!
	"""
	 创建人                                                       ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                                     (                            )
	"""
	updated_at: Timestamptz
	"""
	 修改人                                                       ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                                     (                            )
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                                       ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "app_enforcement"
"""
type AppEnforcementAggregate {
	aggregate: AppEnforcementAggregateFields
}
"""
aggregate fields of "app_enforcement"
"""
type AppEnforcementAggregateFields {
	avg: AppEnforcementAvgFields
	count: Int
	max: AppEnforcementMaxFields
	min: AppEnforcementMinFields
	stddev: AppEnforcementStddevFields
	stddev_pop: AppEnforcementStddevPopFields
	stddev_samp: AppEnforcementStddevSampFields
	sum: AppEnforcementSumFields
	var_pop: AppEnforcementVarPopFields
	var_samp: AppEnforcementVarSampFields
	variance: AppEnforcementVarianceFields
}
"""
aggregate avg on columns of table "app_enforcement"
"""
type AppEnforcementAvgFields {
	id: Bigint
	picket_status: Int
}
"""
aggregate max on columns of table "app_enforcement"
"""
type AppEnforcementMaxFields {
	id: Bigint
	illegal_photo_id: String
	vehicle_id: String
	operation_user: String
	edit_text: String
	coordinate: Point
	location_description: String
	enterprise_type: String
	picket_status: Int
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "app_enforcement"
"""
type AppEnforcementMinFields {
	id: Bigint
	illegal_photo_id: String
	vehicle_id: String
	operation_user: String
	edit_text: String
	coordinate: Point
	location_description: String
	enterprise_type: String
	picket_status: Int
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "app_enforcement"
"""
type AppEnforcementStddevFields {
	id: Bigint
	picket_status: Int
}
"""
aggregate stddev_pop on columns of table "app_enforcement"
"""
type AppEnforcementStddevPopFields {
	id: Bigint
	picket_status: Int
}
"""
aggregate stddev_samp on columns of table "app_enforcement"
"""
type AppEnforcementStddevSampFields {
	id: Bigint
	picket_status: Int
}
"""
aggregate sum on columns of table "app_enforcement"
"""
type AppEnforcementSumFields {
	id: Bigint
	picket_status: Int
}
"""
aggregate var_pop on columns of table "app_enforcement"
"""
type AppEnforcementVarPopFields {
	id: Bigint
	picket_status: Int
}
"""
aggregate var_samp on columns of table "app_enforcement"
"""
type AppEnforcementVarSampFields {
	id: Bigint
	picket_status: Int
}
"""
aggregate variance on columns of table "app_enforcement"
"""
type AppEnforcementVarianceFields {
	id: Bigint
	picket_status: Int
}
"""
response of any mutation on the table "app_enforcement"
"""
type AppEnforcementMutationResponse {
	affected_rows: Int!
	returning: [AppEnforcement!]!
}
"""
ordering options when selecting data from "app_enforcement"
"""
input AppEnforcementOrderBy {
	id: OrderBy
	illegal_photo_id: OrderBy
	vehicle_id: OrderBy
	operation_user: OrderBy
	edit_text: OrderBy
	coordinate: OrderBy
	location_description: OrderBy
	enterprise_type: OrderBy
	picket_status: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'app_enforcement'.
"""
input AppEnforcementBoolExp {
	_and: [AppEnforcementBoolExp]
	_not: AppEnforcementBoolExp
	_or: [AppEnforcementBoolExp]
	id: BigintComparisonExp
	illegal_photo_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	operation_user: StringComparisonExp
	edit_text: StringComparisonExp
	coordinate: PointComparisonExp
	location_description: StringComparisonExp
	enterprise_type: StringComparisonExp
	picket_status: IntComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "app_enforcement"
"""
input AppEnforcementInsertInput {
	id: Bigint
	illegal_photo_id: String
	vehicle_id: String
	operation_user: String
	edit_text: String
	coordinate: Point
	location_description: String
	enterprise_type: String
	picket_status: Int
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "app_enforcement"
"""
input AppEnforcementIncInput {
	id: Bigint
	picket_status: Int
}
"""
input type for updating data in table "app_enforcement"
"""
input AppEnforcementSetInput {
	id: Bigint
	illegal_photo_id: String
	vehicle_id: String
	operation_user: String
	edit_text: String
	coordinate: Point
	location_description: String
	enterprise_type: String
	picket_status: Int
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum AppEnforcementSelectColumn {
	"""
	 按指定方法生成                                               ( 主键                       )
	"""
	id
	"""
	 APP现场执法表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	illegal_photo_id
	"""
	 vehicle_info 车辆信息表 的vehicle_id                     (                            )
	"""
	vehicle_id
	"""
	 操作用户                                                     ( system_user表的user_id )
	"""
	operation_user
	"""
	 编辑文本                                                     (                            )
	"""
	edit_text
	"""
	 空间数据类型point表示经度(longitude)和纬度(latitude)         (                            )
	"""
	coordinate
	"""
	 位置描述                                                     (                            )
	"""
	location_description
	"""
	 企业类型                                                     ( 企业类型字典           )
	"""
	enterprise_type
	"""
	 纠察状态（1.反馈辖区管理 2.执法考评 3.其他 4.查处“两非”渣土车） (                            )
	"""
	picket_status
	"""
	 创建时间                                                     (                            )
	"""
	created_at
	"""
	 创建人                                                       ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                                     (                            )
	"""
	updated_at
	"""
	 修改人                                                       ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                                     (                            )
	"""
	deleted_at
	"""
	 删除人                                                       ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	app_enforcement(distinct_on: [AppEnforcementSelectColumn!], limit: Int, offset: Int, order_by: [AppEnforcementOrderBy!], where: AppEnforcementBoolExp): [AppEnforcement!]!
	"""
	聚合查询
	"""
	app_enforcement_aggregate(distinct_on: [AppEnforcementSelectColumn!], limit: Int, offset: Int, order_by: [AppEnforcementOrderBy!], where: AppEnforcementBoolExp): AppEnforcementAggregate!
	"""
	主键查询
	"""
	app_enforcement_by_pk(id: Bigint!): AppEnforcement!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_app_enforcement(where: AppEnforcementBoolExp!): AppEnforcementMutationResponse
	"""
	根据主键删除记录
	"""
	delete_app_enforcement_by_pk(id: Bigint!): AppEnforcement
	"""
	插入
	"""
	insert_app_enforcement(objects: [AppEnforcementInsertInput!]!): AppEnforcementMutationResponse
	"""
	插入一条记录
	"""
	insert_app_enforcement_one(objects: AppEnforcementInsertInput!): AppEnforcement
	"""
	更新
	"""
	update_app_enforcement(_inc: AppEnforcementIncInput, _set: AppEnforcementSetInput, where: AppEnforcementBoolExp!): AppEnforcementMutationResponse
	"""
	更新
	"""
	update_app_enforcement_by_pk(_inc: AppEnforcementIncInput, _set: AppEnforcementSetInput, id: Bigint!): AppEnforcement
}
`, BuiltIn: false},
	{Name: "graph/graphqls/common.graphqls", Input: `
"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
	_eq: Jsonb
	_gt: Jsonb
	_gte: Jsonb
	_in: [Jsonb!]
	_is_null: Boolean
	_lt: Jsonb
	_lte: Jsonb
	_neq: Jsonb
	_nin: [Jsonb!]
}
"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
	_eq: Bigint
	_gt: Bigint
	_gte: Bigint
	_in: [Bigint!]
	_is_null: Boolean
	_lt: Bigint
	_lte: Bigint
	_neq: Bigint
	_nin: [Bigint!]
}
"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
	_eq: Boolean
	_gt: Boolean
	_gte: Boolean
	_in: [Boolean!]
	_is_null: Boolean
	_lt: Boolean
	_lte: Boolean
	_neq: Boolean
	_nin: [Boolean!]
}
"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
	_eq: Int
	_gt: Int
	_gte: Int
	_in: [Int!]
	_is_null: Boolean
	_lt: Int
	_lte: Int
	_neq: Int
	_nin: [Int!]
}
"""
column ordering options
"""
enum OrderBy {
	"""
	in the ascending order, nulls last
	"""
	asc
	"""
	in the ascending order, nulls first
	"""
	asc_nulls_first
	"""
	in the ascending order, nulls last
	"""
	asc_nulls_last
	"""
	in the descending order, nulls first
	"""
	desc
	"""
	in the descending order, nulls first
	"""
	desc_nulls_first
	"""
	in the descending order, nulls last
	"""
	desc_nulls_last
}
"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
	_eq: String
	_gt: String
	_gte: String
	_ilike: String
	_in: [String!]
	_is_null: Boolean
	_like: String
	_lt: String
	_lte: String
	_neq: String
	_nilike: String
	_nin: [String!]
	_nlike: String
	_nsimilar: String
	_similar: String
}
"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
	_eq: Timestamptz
	_gt: Timestamptz
	_gte: Timestamptz
	_in: [Timestamptz!]
	_is_null: Boolean
	_lt: Timestamptz
	_lte: Timestamptz
	_neq: Timestamptz
	_nin: [Timestamptz!]
}
"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input NumericComparisonExp {
	_eq: Numeric
	_gt: Numeric
	_gte: Numeric
	_in: [Numeric!]
	_is_null: Boolean
	_lt: Numeric
	_lte: Numeric
	_neq: Numeric
	_nin: [Numeric!]
}
"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input PointComparisonExp {
	_eq: Point
	_gt: Point
	_gte: Point
	_in: [Point!]
	_is_null: Boolean
	_lt: Point
	_lte: Point
	_neq: Point
	_nin: [Point!]
}
scalar Jsonb
scalar Bigint
scalar Timestamptz
scalar Point
scalar Numeric

`, BuiltIn: false},
	{Name: "graph/graphqls/deduction_report.graphqls", Input: `"""
扣分报表
"""
type DeductionReport {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	deduction_report_id: String!
	"""
	 地区                                            (                            )
	"""
	area_id: String
	"""
	 年份.月份  如2015.3                             (                            )
	"""
	date: String
	"""
	 扣分事由                                        (                            )
	"""
	cause: String
	"""
	 录入人                                          ( system_user表的user_id )
	"""
	input_person: String
	"""
	 录入时间                                        (                            )
	"""
	input_time: Timestamptz
	"""
	 扣分分值                                        (                            )
	"""
	demerit_points: Numeric
	"""
	 创建时间                                        (                            )
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                        (                            )
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                        (                            )
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "deduction_report"
"""
type DeductionReportAggregate {
	aggregate: DeductionReportAggregateFields
}
"""
aggregate fields of "deduction_report"
"""
type DeductionReportAggregateFields {
	avg: DeductionReportAvgFields
	count: Int
	max: DeductionReportMaxFields
	min: DeductionReportMinFields
	stddev: DeductionReportStddevFields
	stddev_pop: DeductionReportStddevPopFields
	stddev_samp: DeductionReportStddevSampFields
	sum: DeductionReportSumFields
	var_pop: DeductionReportVarPopFields
	var_samp: DeductionReportVarSampFields
	variance: DeductionReportVarianceFields
}
"""
aggregate avg on columns of table "deduction_report"
"""
type DeductionReportAvgFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate max on columns of table "deduction_report"
"""
type DeductionReportMaxFields {
	id: Bigint
	deduction_report_id: String
	area_id: String
	date: String
	cause: String
	input_person: String
	input_time: Timestamptz
	demerit_points: Numeric
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "deduction_report"
"""
type DeductionReportMinFields {
	id: Bigint
	deduction_report_id: String
	area_id: String
	date: String
	cause: String
	input_person: String
	input_time: Timestamptz
	demerit_points: Numeric
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "deduction_report"
"""
type DeductionReportStddevFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate stddev_pop on columns of table "deduction_report"
"""
type DeductionReportStddevPopFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate stddev_samp on columns of table "deduction_report"
"""
type DeductionReportStddevSampFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate sum on columns of table "deduction_report"
"""
type DeductionReportSumFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate var_pop on columns of table "deduction_report"
"""
type DeductionReportVarPopFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate var_samp on columns of table "deduction_report"
"""
type DeductionReportVarSampFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate variance on columns of table "deduction_report"
"""
type DeductionReportVarianceFields {
	id: Bigint
	demerit_points: Numeric
}
"""
response of any mutation on the table "deduction_report"
"""
type DeductionReportMutationResponse {
	affected_rows: Int!
	returning: [DeductionReport!]!
}
"""
ordering options when selecting data from "deduction_report"
"""
input DeductionReportOrderBy {
	id: OrderBy
	deduction_report_id: OrderBy
	area_id: OrderBy
	date: OrderBy
	cause: OrderBy
	input_person: OrderBy
	input_time: OrderBy
	demerit_points: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'deduction_report'.
"""
input DeductionReportBoolExp {
	_and: [DeductionReportBoolExp]
	_not: DeductionReportBoolExp
	_or: [DeductionReportBoolExp]
	id: BigintComparisonExp
	deduction_report_id: StringComparisonExp
	area_id: StringComparisonExp
	date: StringComparisonExp
	cause: StringComparisonExp
	input_person: StringComparisonExp
	input_time: TimestamptzComparisonExp
	demerit_points: NumericComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "deduction_report"
"""
input DeductionReportInsertInput {
	id: Bigint
	deduction_report_id: String
	area_id: String
	date: String
	cause: String
	input_person: String
	input_time: Timestamptz
	demerit_points: Numeric
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "deduction_report"
"""
input DeductionReportIncInput {
	id: Bigint
	demerit_points: Numeric
}
"""
input type for updating data in table "deduction_report"
"""
input DeductionReportSetInput {
	id: Bigint
	deduction_report_id: String
	area_id: String
	date: String
	cause: String
	input_person: String
	input_time: Timestamptz
	demerit_points: Numeric
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum DeductionReportSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	deduction_report_id
	"""
	 地区                                            (                            )
	"""
	area_id
	"""
	 年份.月份  如2015.3                             (                            )
	"""
	date
	"""
	 扣分事由                                        (                            )
	"""
	cause
	"""
	 录入人                                          ( system_user表的user_id )
	"""
	input_person
	"""
	 录入时间                                        (                            )
	"""
	input_time
	"""
	 扣分分值                                        (                            )
	"""
	demerit_points
	"""
	 创建时间                                        (                            )
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                        (                            )
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                        (                            )
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	deduction_report(distinct_on: [DeductionReportSelectColumn!], limit: Int, offset: Int, order_by: [DeductionReportOrderBy!], where: DeductionReportBoolExp): [DeductionReport!]!
	"""
	聚合查询
	"""
	deduction_report_aggregate(distinct_on: [DeductionReportSelectColumn!], limit: Int, offset: Int, order_by: [DeductionReportOrderBy!], where: DeductionReportBoolExp): DeductionReportAggregate!
	"""
	主键查询
	"""
	deduction_report_by_pk(id: Bigint!): DeductionReport!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_deduction_report(where: DeductionReportBoolExp!): DeductionReportMutationResponse
	"""
	根据主键删除记录
	"""
	delete_deduction_report_by_pk(id: Bigint!): DeductionReport
	"""
	插入
	"""
	insert_deduction_report(objects: [DeductionReportInsertInput!]!): DeductionReportMutationResponse
	"""
	插入一条记录
	"""
	insert_deduction_report_one(objects: DeductionReportInsertInput!): DeductionReport
	"""
	更新
	"""
	update_deduction_report(_inc: DeductionReportIncInput, _set: DeductionReportSetInput, where: DeductionReportBoolExp!): DeductionReportMutationResponse
	"""
	更新
	"""
	update_deduction_report_by_pk(_inc: DeductionReportIncInput, _set: DeductionReportSetInput, id: Bigint!): DeductionReport
}
`, BuiltIn: false},
	{Name: "graph/graphqls/driver_peccancy_check.graphqls", Input: `"""
驾驶员违法核实记录表
"""
type DriverPeccancyCheck {
	"""
	 按指定方法生成 ( 主键                                 )
	"""
	id: Bigint!
	"""
	 违章车辆id     ( vehicle_info表的vehicle_id       )
	"""
	vehicle_id: String
	"""
	 违章驾驶员id   ( driver_info表的driver_id         )
	"""
	driver_id: String
	"""
	 所在企业id     ( enterprise_info表的enterprise_id )
	"""
	enterprise_id: String
	"""
	 创建时间       (                                      )
	"""
	created_at: Timestamptz!
	"""
	 创建人         ( system_user表的user_id           )
	"""
	created_by: String!
	"""
	 修改时间       (                                      )
	"""
	updated_at: Timestamptz
	"""
	 修改人         ( system_user表的user_id           )
	"""
	updated_by: String
	"""
	 删除时间       (                                      )
	"""
	deleted_at: Timestamptz
	"""
	 删除人         ( system_user表的user_id           )
	"""
	deleted_by: String
}
"""
aggregated selection of "driver_peccancy_check"
"""
type DriverPeccancyCheckAggregate {
	aggregate: DriverPeccancyCheckAggregateFields
}
"""
aggregate fields of "driver_peccancy_check"
"""
type DriverPeccancyCheckAggregateFields {
	avg: DriverPeccancyCheckAvgFields
	count: Int
	max: DriverPeccancyCheckMaxFields
	min: DriverPeccancyCheckMinFields
	stddev: DriverPeccancyCheckStddevFields
	stddev_pop: DriverPeccancyCheckStddevPopFields
	stddev_samp: DriverPeccancyCheckStddevSampFields
	sum: DriverPeccancyCheckSumFields
	var_pop: DriverPeccancyCheckVarPopFields
	var_samp: DriverPeccancyCheckVarSampFields
	variance: DriverPeccancyCheckVarianceFields
}
"""
aggregate avg on columns of table "driver_peccancy_check"
"""
type DriverPeccancyCheckAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "driver_peccancy_check"
"""
type DriverPeccancyCheckMaxFields {
	id: Bigint
	vehicle_id: String
	driver_id: String
	enterprise_id: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "driver_peccancy_check"
"""
type DriverPeccancyCheckMinFields {
	id: Bigint
	vehicle_id: String
	driver_id: String
	enterprise_id: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "driver_peccancy_check"
"""
type DriverPeccancyCheckStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "driver_peccancy_check"
"""
type DriverPeccancyCheckStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "driver_peccancy_check"
"""
type DriverPeccancyCheckStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "driver_peccancy_check"
"""
type DriverPeccancyCheckSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "driver_peccancy_check"
"""
type DriverPeccancyCheckVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "driver_peccancy_check"
"""
type DriverPeccancyCheckVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "driver_peccancy_check"
"""
type DriverPeccancyCheckVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "driver_peccancy_check"
"""
type DriverPeccancyCheckMutationResponse {
	affected_rows: Int!
	returning: [DriverPeccancyCheck!]!
}
"""
ordering options when selecting data from "driver_peccancy_check"
"""
input DriverPeccancyCheckOrderBy {
	id: OrderBy
	vehicle_id: OrderBy
	driver_id: OrderBy
	enterprise_id: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driver_peccancy_check'.
"""
input DriverPeccancyCheckBoolExp {
	_and: [DriverPeccancyCheckBoolExp]
	_not: DriverPeccancyCheckBoolExp
	_or: [DriverPeccancyCheckBoolExp]
	id: BigintComparisonExp
	vehicle_id: StringComparisonExp
	driver_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "driver_peccancy_check"
"""
input DriverPeccancyCheckInsertInput {
	id: Bigint
	vehicle_id: String
	driver_id: String
	enterprise_id: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "driver_peccancy_check"
"""
input DriverPeccancyCheckIncInput {
	id: Bigint
}
"""
input type for updating data in table "driver_peccancy_check"
"""
input DriverPeccancyCheckSetInput {
	id: Bigint
	vehicle_id: String
	driver_id: String
	enterprise_id: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum DriverPeccancyCheckSelectColumn {
	"""
	 按指定方法生成 ( 主键                                 )
	"""
	id
	"""
	 违章车辆id     ( vehicle_info表的vehicle_id       )
	"""
	vehicle_id
	"""
	 违章驾驶员id   ( driver_info表的driver_id         )
	"""
	driver_id
	"""
	 所在企业id     ( enterprise_info表的enterprise_id )
	"""
	enterprise_id
	"""
	 创建时间       (                                      )
	"""
	created_at
	"""
	 创建人         ( system_user表的user_id           )
	"""
	created_by
	"""
	 修改时间       (                                      )
	"""
	updated_at
	"""
	 修改人         ( system_user表的user_id           )
	"""
	updated_by
	"""
	 删除时间       (                                      )
	"""
	deleted_at
	"""
	 删除人         ( system_user表的user_id           )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	driver_peccancy_check(distinct_on: [DriverPeccancyCheckSelectColumn!], limit: Int, offset: Int, order_by: [DriverPeccancyCheckOrderBy!], where: DriverPeccancyCheckBoolExp): [DriverPeccancyCheck!]!
	"""
	聚合查询
	"""
	driver_peccancy_check_aggregate(distinct_on: [DriverPeccancyCheckSelectColumn!], limit: Int, offset: Int, order_by: [DriverPeccancyCheckOrderBy!], where: DriverPeccancyCheckBoolExp): DriverPeccancyCheckAggregate!
	"""
	主键查询
	"""
	driver_peccancy_check_by_pk(id: Bigint!): DriverPeccancyCheck!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_driver_peccancy_check(where: DriverPeccancyCheckBoolExp!): DriverPeccancyCheckMutationResponse
	"""
	根据主键删除记录
	"""
	delete_driver_peccancy_check_by_pk(id: Bigint!): DriverPeccancyCheck
	"""
	插入
	"""
	insert_driver_peccancy_check(objects: [DriverPeccancyCheckInsertInput!]!): DriverPeccancyCheckMutationResponse
	"""
	插入一条记录
	"""
	insert_driver_peccancy_check_one(objects: DriverPeccancyCheckInsertInput!): DriverPeccancyCheck
	"""
	更新
	"""
	update_driver_peccancy_check(_inc: DriverPeccancyCheckIncInput, _set: DriverPeccancyCheckSetInput, where: DriverPeccancyCheckBoolExp!): DriverPeccancyCheckMutationResponse
	"""
	更新
	"""
	update_driver_peccancy_check_by_pk(_inc: DriverPeccancyCheckIncInput, _set: DriverPeccancyCheckSetInput, id: Bigint!): DriverPeccancyCheck
}
`, BuiltIn: false},
	{Name: "graph/graphqls/illegal_photo.graphqls", Input: `"""
违法照片表
"""
type IllegalPhoto {
	"""
	 按指定方法生成                                            ( 主键                       )
	"""
	id: Bigint!
	"""
	 违法照片表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	illegal_photo_id: String!
	"""
	 违法照片名称                                              (                            )
	"""
	picture_name: String
	"""
	 违法照片地址                                              (                            )
	"""
	picture_address: String
	"""
	 是否同步                                                  ( false                      )
	"""
	is_synchronized: Boolean
	"""
	 是否删除                                                  ( false                      )
	"""
	is_deleted: Boolean
	"""
	 创建时间                                                  (                            )
	"""
	created_at: Timestamptz!
	"""
	 创建人                                                    ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                                  (                            )
	"""
	updated_at: Timestamptz
	"""
	 修改人                                                    ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                                  (                            )
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                                    ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "illegal_photo"
"""
type IllegalPhotoAggregate {
	aggregate: IllegalPhotoAggregateFields
}
"""
aggregate fields of "illegal_photo"
"""
type IllegalPhotoAggregateFields {
	avg: IllegalPhotoAvgFields
	count: Int
	max: IllegalPhotoMaxFields
	min: IllegalPhotoMinFields
	stddev: IllegalPhotoStddevFields
	stddev_pop: IllegalPhotoStddevPopFields
	stddev_samp: IllegalPhotoStddevSampFields
	sum: IllegalPhotoSumFields
	var_pop: IllegalPhotoVarPopFields
	var_samp: IllegalPhotoVarSampFields
	variance: IllegalPhotoVarianceFields
}
"""
aggregate avg on columns of table "illegal_photo"
"""
type IllegalPhotoAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "illegal_photo"
"""
type IllegalPhotoMaxFields {
	id: Bigint
	illegal_photo_id: String
	picture_name: String
	picture_address: String
	is_synchronized: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "illegal_photo"
"""
type IllegalPhotoMinFields {
	id: Bigint
	illegal_photo_id: String
	picture_name: String
	picture_address: String
	is_synchronized: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "illegal_photo"
"""
type IllegalPhotoStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "illegal_photo"
"""
type IllegalPhotoStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "illegal_photo"
"""
type IllegalPhotoStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "illegal_photo"
"""
type IllegalPhotoSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "illegal_photo"
"""
type IllegalPhotoVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "illegal_photo"
"""
type IllegalPhotoVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "illegal_photo"
"""
type IllegalPhotoVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "illegal_photo"
"""
type IllegalPhotoMutationResponse {
	affected_rows: Int!
	returning: [IllegalPhoto!]!
}
"""
ordering options when selecting data from "illegal_photo"
"""
input IllegalPhotoOrderBy {
	id: OrderBy
	illegal_photo_id: OrderBy
	picture_name: OrderBy
	picture_address: OrderBy
	is_synchronized: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'illegal_photo'.
"""
input IllegalPhotoBoolExp {
	_and: [IllegalPhotoBoolExp]
	_not: IllegalPhotoBoolExp
	_or: [IllegalPhotoBoolExp]
	id: BigintComparisonExp
	illegal_photo_id: StringComparisonExp
	picture_name: StringComparisonExp
	picture_address: StringComparisonExp
	is_synchronized: BooleanComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "illegal_photo"
"""
input IllegalPhotoInsertInput {
	id: Bigint
	illegal_photo_id: String
	picture_name: String
	picture_address: String
	is_synchronized: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "illegal_photo"
"""
input IllegalPhotoIncInput {
	id: Bigint
}
"""
input type for updating data in table "illegal_photo"
"""
input IllegalPhotoSetInput {
	id: Bigint
	illegal_photo_id: String
	picture_name: String
	picture_address: String
	is_synchronized: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum IllegalPhotoSelectColumn {
	"""
	 按指定方法生成                                            ( 主键                       )
	"""
	id
	"""
	 违法照片表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	illegal_photo_id
	"""
	 违法照片名称                                              (                            )
	"""
	picture_name
	"""
	 违法照片地址                                              (                            )
	"""
	picture_address
	"""
	 是否同步                                                  ( false                      )
	"""
	is_synchronized
	"""
	 是否删除                                                  ( false                      )
	"""
	is_deleted
	"""
	 创建时间                                                  (                            )
	"""
	created_at
	"""
	 创建人                                                    ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                                  (                            )
	"""
	updated_at
	"""
	 修改人                                                    ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                                  (                            )
	"""
	deleted_at
	"""
	 删除人                                                    ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	illegal_photo(distinct_on: [IllegalPhotoSelectColumn!], limit: Int, offset: Int, order_by: [IllegalPhotoOrderBy!], where: IllegalPhotoBoolExp): [IllegalPhoto!]!
	"""
	聚合查询
	"""
	illegal_photo_aggregate(distinct_on: [IllegalPhotoSelectColumn!], limit: Int, offset: Int, order_by: [IllegalPhotoOrderBy!], where: IllegalPhotoBoolExp): IllegalPhotoAggregate!
	"""
	主键查询
	"""
	illegal_photo_by_pk(id: Bigint!): IllegalPhoto!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_illegal_photo(where: IllegalPhotoBoolExp!): IllegalPhotoMutationResponse
	"""
	根据主键删除记录
	"""
	delete_illegal_photo_by_pk(id: Bigint!): IllegalPhoto
	"""
	插入
	"""
	insert_illegal_photo(objects: [IllegalPhotoInsertInput!]!): IllegalPhotoMutationResponse
	"""
	插入一条记录
	"""
	insert_illegal_photo_one(objects: IllegalPhotoInsertInput!): IllegalPhoto
	"""
	更新
	"""
	update_illegal_photo(_inc: IllegalPhotoIncInput, _set: IllegalPhotoSetInput, where: IllegalPhotoBoolExp!): IllegalPhotoMutationResponse
	"""
	更新
	"""
	update_illegal_photo_by_pk(_inc: IllegalPhotoIncInput, _set: IllegalPhotoSetInput, id: Bigint!): IllegalPhoto
}
`, BuiltIn: false},
	{Name: "graph/graphqls/regional_violation_register.graphqls", Input: `"""
区域处理机关交通违法违规登记表
"""
type RegionalViolationRegister {
	"""
	 按指定方法生成                                               ( 主键                                               )
	"""
	id: Bigint!
	"""
	 区域处理机关交通违法违规登记表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                           )
	"""
	regional_violation_register_id: String!
	"""
	 违法记录表ID                                                 ( vehicle_violation_details的violation_detail_id )
	"""
	violation_detail_id: String
	"""
	 违章车辆id                                                   ( vehicle_info表的vehicle_id                     )
	"""
	vehicle_id: String
	"""
	 驾驶员id                                                     ( driver_info 表的driver_id                      )
	"""
	driver_id: String
	"""
	 违法代码                                                     ( VIO_CODEWFDM 违法描述字典表                    )
	"""
	illegal_code: Int
	"""
	 违法时间                                                     (                                                    )
	"""
	illegal_time: Timestamptz
	"""
	 类型(1车辆2驾驶员)                                           ( 违法类型字典表                                 )
	"""
	illegal_type: Int
	"""
	 登记时间                                                     (                                                    )
	"""
	register_time: Timestamptz
	"""
	 处理机关                                                     (                                                    )
	"""
	processing_agency: String
	"""
	 操作员                                                       ( system_user表的user_id                         )
	"""
	operator: String
	"""
	 类型(false未登记true已登记)                                  ( fase                                               )
	"""
	is_register: Boolean
	"""
	 创建时间                                                     (                                                    )
	"""
	created_at: Timestamptz!
	"""
	 创建人                                                       ( system_user表的user_id                         )
	"""
	created_by: String!
	"""
	 修改时间                                                     (                                                    )
	"""
	updated_at: Timestamptz
	"""
	 修改人                                                       ( system_user表的user_id                         )
	"""
	updated_by: String
	"""
	 删除时间                                                     (                                                    )
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                                       ( system_user表的user_id                         )
	"""
	deleted_by: String
	"""
	 是否删除                                                     (                                                    )
	"""
	is_deleted: Boolean
}
"""
aggregated selection of "regional_violation_register"
"""
type RegionalViolationRegisterAggregate {
	aggregate: RegionalViolationRegisterAggregateFields
}
"""
aggregate fields of "regional_violation_register"
"""
type RegionalViolationRegisterAggregateFields {
	avg: RegionalViolationRegisterAvgFields
	count: Int
	max: RegionalViolationRegisterMaxFields
	min: RegionalViolationRegisterMinFields
	stddev: RegionalViolationRegisterStddevFields
	stddev_pop: RegionalViolationRegisterStddevPopFields
	stddev_samp: RegionalViolationRegisterStddevSampFields
	sum: RegionalViolationRegisterSumFields
	var_pop: RegionalViolationRegisterVarPopFields
	var_samp: RegionalViolationRegisterVarSampFields
	variance: RegionalViolationRegisterVarianceFields
}
"""
aggregate avg on columns of table "regional_violation_register"
"""
type RegionalViolationRegisterAvgFields {
	id: Bigint
	illegal_code: Int
	illegal_type: Int
}
"""
aggregate max on columns of table "regional_violation_register"
"""
type RegionalViolationRegisterMaxFields {
	id: Bigint
	regional_violation_register_id: String
	violation_detail_id: String
	vehicle_id: String
	driver_id: String
	illegal_code: Int
	illegal_time: Timestamptz
	illegal_type: Int
	register_time: Timestamptz
	processing_agency: String
	operator: String
	is_register: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate min on columns of table "regional_violation_register"
"""
type RegionalViolationRegisterMinFields {
	id: Bigint
	regional_violation_register_id: String
	violation_detail_id: String
	vehicle_id: String
	driver_id: String
	illegal_code: Int
	illegal_time: Timestamptz
	illegal_type: Int
	register_time: Timestamptz
	processing_agency: String
	operator: String
	is_register: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate stddev on columns of table "regional_violation_register"
"""
type RegionalViolationRegisterStddevFields {
	id: Bigint
	illegal_code: Int
	illegal_type: Int
}
"""
aggregate stddev_pop on columns of table "regional_violation_register"
"""
type RegionalViolationRegisterStddevPopFields {
	id: Bigint
	illegal_code: Int
	illegal_type: Int
}
"""
aggregate stddev_samp on columns of table "regional_violation_register"
"""
type RegionalViolationRegisterStddevSampFields {
	id: Bigint
	illegal_code: Int
	illegal_type: Int
}
"""
aggregate sum on columns of table "regional_violation_register"
"""
type RegionalViolationRegisterSumFields {
	id: Bigint
	illegal_code: Int
	illegal_type: Int
}
"""
aggregate var_pop on columns of table "regional_violation_register"
"""
type RegionalViolationRegisterVarPopFields {
	id: Bigint
	illegal_code: Int
	illegal_type: Int
}
"""
aggregate var_samp on columns of table "regional_violation_register"
"""
type RegionalViolationRegisterVarSampFields {
	id: Bigint
	illegal_code: Int
	illegal_type: Int
}
"""
aggregate variance on columns of table "regional_violation_register"
"""
type RegionalViolationRegisterVarianceFields {
	id: Bigint
	illegal_code: Int
	illegal_type: Int
}
"""
response of any mutation on the table "regional_violation_register"
"""
type RegionalViolationRegisterMutationResponse {
	affected_rows: Int!
	returning: [RegionalViolationRegister!]!
}
"""
ordering options when selecting data from "regional_violation_register"
"""
input RegionalViolationRegisterOrderBy {
	id: OrderBy
	regional_violation_register_id: OrderBy
	violation_detail_id: OrderBy
	vehicle_id: OrderBy
	driver_id: OrderBy
	illegal_code: OrderBy
	illegal_time: OrderBy
	illegal_type: OrderBy
	register_time: OrderBy
	processing_agency: OrderBy
	operator: OrderBy
	is_register: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
	is_deleted: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'regional_violation_register'.
"""
input RegionalViolationRegisterBoolExp {
	_and: [RegionalViolationRegisterBoolExp]
	_not: RegionalViolationRegisterBoolExp
	_or: [RegionalViolationRegisterBoolExp]
	id: BigintComparisonExp
	regional_violation_register_id: StringComparisonExp
	violation_detail_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	driver_id: StringComparisonExp
	illegal_code: IntComparisonExp
	illegal_time: TimestamptzComparisonExp
	illegal_type: IntComparisonExp
	register_time: TimestamptzComparisonExp
	processing_agency: StringComparisonExp
	operator: StringComparisonExp
	is_register: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
	is_deleted: BooleanComparisonExp
}
"""
input type for inserting data into table "regional_violation_register"
"""
input RegionalViolationRegisterInsertInput {
	id: Bigint
	regional_violation_register_id: String
	violation_detail_id: String
	vehicle_id: String
	driver_id: String
	illegal_code: Int
	illegal_time: Timestamptz
	illegal_type: Int
	register_time: Timestamptz
	processing_agency: String
	operator: String
	is_register: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
input type for incrementing integer column in table "regional_violation_register"
"""
input RegionalViolationRegisterIncInput {
	id: Bigint
	illegal_code: Int
	illegal_type: Int
}
"""
input type for updating data in table "regional_violation_register"
"""
input RegionalViolationRegisterSetInput {
	id: Bigint
	regional_violation_register_id: String
	violation_detail_id: String
	vehicle_id: String
	driver_id: String
	illegal_code: Int
	illegal_time: Timestamptz
	illegal_type: Int
	register_time: Timestamptz
	processing_agency: String
	operator: String
	is_register: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
可选select
"""
enum RegionalViolationRegisterSelectColumn {
	"""
	 按指定方法生成                                               ( 主键                                               )
	"""
	id
	"""
	 区域处理机关交通违法违规登记表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                           )
	"""
	regional_violation_register_id
	"""
	 违法记录表ID                                                 ( vehicle_violation_details的violation_detail_id )
	"""
	violation_detail_id
	"""
	 违章车辆id                                                   ( vehicle_info表的vehicle_id                     )
	"""
	vehicle_id
	"""
	 驾驶员id                                                     ( driver_info 表的driver_id                      )
	"""
	driver_id
	"""
	 违法代码                                                     ( VIO_CODEWFDM 违法描述字典表                    )
	"""
	illegal_code
	"""
	 违法时间                                                     (                                                    )
	"""
	illegal_time
	"""
	 类型(1车辆2驾驶员)                                           ( 违法类型字典表                                 )
	"""
	illegal_type
	"""
	 登记时间                                                     (                                                    )
	"""
	register_time
	"""
	 处理机关                                                     (                                                    )
	"""
	processing_agency
	"""
	 操作员                                                       ( system_user表的user_id                         )
	"""
	operator
	"""
	 类型(false未登记true已登记)                                  ( fase                                               )
	"""
	is_register
	"""
	 创建时间                                                     (                                                    )
	"""
	created_at
	"""
	 创建人                                                       ( system_user表的user_id                         )
	"""
	created_by
	"""
	 修改时间                                                     (                                                    )
	"""
	updated_at
	"""
	 修改人                                                       ( system_user表的user_id                         )
	"""
	updated_by
	"""
	 删除时间                                                     (                                                    )
	"""
	deleted_at
	"""
	 删除人                                                       ( system_user表的user_id                         )
	"""
	deleted_by
	"""
	 是否删除                                                     (                                                    )
	"""
	is_deleted
}
extend type Query {
	"""
	列表查询
	"""
	regional_violation_register(distinct_on: [RegionalViolationRegisterSelectColumn!], limit: Int, offset: Int, order_by: [RegionalViolationRegisterOrderBy!], where: RegionalViolationRegisterBoolExp): [RegionalViolationRegister!]!
	"""
	聚合查询
	"""
	regional_violation_register_aggregate(distinct_on: [RegionalViolationRegisterSelectColumn!], limit: Int, offset: Int, order_by: [RegionalViolationRegisterOrderBy!], where: RegionalViolationRegisterBoolExp): RegionalViolationRegisterAggregate!
	"""
	主键查询
	"""
	regional_violation_register_by_pk(id: Bigint!): RegionalViolationRegister!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_regional_violation_register(where: RegionalViolationRegisterBoolExp!): RegionalViolationRegisterMutationResponse
	"""
	根据主键删除记录
	"""
	delete_regional_violation_register_by_pk(id: Bigint!): RegionalViolationRegister
	"""
	插入
	"""
	insert_regional_violation_register(objects: [RegionalViolationRegisterInsertInput!]!): RegionalViolationRegisterMutationResponse
	"""
	插入一条记录
	"""
	insert_regional_violation_register_one(objects: RegionalViolationRegisterInsertInput!): RegionalViolationRegister
	"""
	更新
	"""
	update_regional_violation_register(_inc: RegionalViolationRegisterIncInput, _set: RegionalViolationRegisterSetInput, where: RegionalViolationRegisterBoolExp!): RegionalViolationRegisterMutationResponse
	"""
	更新
	"""
	update_regional_violation_register_by_pk(_inc: RegionalViolationRegisterIncInput, _set: RegionalViolationRegisterSetInput, id: Bigint!): RegionalViolationRegister
}
`, BuiltIn: false},
	{Name: "graph/graphqls/serious_traffic_violation.graphqls", Input: `"""
严重交通违法行为表
"""
type SeriousTrafficViolation {
	"""
	 按指定方法生成                                  ( 主键                            )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                        )
	"""
	serious_traffic_violation_id: String!
	"""
	 违章车辆id                                      ( vehicle_info表的vehicle_id  )
	"""
	vehicle_id: String
	"""
	 违法代码                                        ( VIO_CODEWFDM 违法描述字典表 )
	"""
	illegal_code: String
	"""
	 违法日期                                        (                                 )
	"""
	illegal_time: Timestamptz
	"""
	 创建时间                                        (                                 )
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id      )
	"""
	created_by: String!
	"""
	 修改时间                                        (                                 )
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id      )
	"""
	updated_by: String
	"""
	 删除时间                                        (                                 )
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id      )
	"""
	deleted_by: String
}
"""
aggregated selection of "serious_traffic_violation"
"""
type SeriousTrafficViolationAggregate {
	aggregate: SeriousTrafficViolationAggregateFields
}
"""
aggregate fields of "serious_traffic_violation"
"""
type SeriousTrafficViolationAggregateFields {
	avg: SeriousTrafficViolationAvgFields
	count: Int
	max: SeriousTrafficViolationMaxFields
	min: SeriousTrafficViolationMinFields
	stddev: SeriousTrafficViolationStddevFields
	stddev_pop: SeriousTrafficViolationStddevPopFields
	stddev_samp: SeriousTrafficViolationStddevSampFields
	sum: SeriousTrafficViolationSumFields
	var_pop: SeriousTrafficViolationVarPopFields
	var_samp: SeriousTrafficViolationVarSampFields
	variance: SeriousTrafficViolationVarianceFields
}
"""
aggregate avg on columns of table "serious_traffic_violation"
"""
type SeriousTrafficViolationAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "serious_traffic_violation"
"""
type SeriousTrafficViolationMaxFields {
	id: Bigint
	serious_traffic_violation_id: String
	vehicle_id: String
	illegal_code: String
	illegal_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "serious_traffic_violation"
"""
type SeriousTrafficViolationMinFields {
	id: Bigint
	serious_traffic_violation_id: String
	vehicle_id: String
	illegal_code: String
	illegal_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "serious_traffic_violation"
"""
type SeriousTrafficViolationStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "serious_traffic_violation"
"""
type SeriousTrafficViolationStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "serious_traffic_violation"
"""
type SeriousTrafficViolationStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "serious_traffic_violation"
"""
type SeriousTrafficViolationSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "serious_traffic_violation"
"""
type SeriousTrafficViolationVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "serious_traffic_violation"
"""
type SeriousTrafficViolationVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "serious_traffic_violation"
"""
type SeriousTrafficViolationVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "serious_traffic_violation"
"""
type SeriousTrafficViolationMutationResponse {
	affected_rows: Int!
	returning: [SeriousTrafficViolation!]!
}
"""
ordering options when selecting data from "serious_traffic_violation"
"""
input SeriousTrafficViolationOrderBy {
	id: OrderBy
	serious_traffic_violation_id: OrderBy
	vehicle_id: OrderBy
	illegal_code: OrderBy
	illegal_time: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'serious_traffic_violation'.
"""
input SeriousTrafficViolationBoolExp {
	_and: [SeriousTrafficViolationBoolExp]
	_not: SeriousTrafficViolationBoolExp
	_or: [SeriousTrafficViolationBoolExp]
	id: BigintComparisonExp
	serious_traffic_violation_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	illegal_code: StringComparisonExp
	illegal_time: TimestamptzComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "serious_traffic_violation"
"""
input SeriousTrafficViolationInsertInput {
	id: Bigint
	serious_traffic_violation_id: String
	vehicle_id: String
	illegal_code: String
	illegal_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "serious_traffic_violation"
"""
input SeriousTrafficViolationIncInput {
	id: Bigint
}
"""
input type for updating data in table "serious_traffic_violation"
"""
input SeriousTrafficViolationSetInput {
	id: Bigint
	serious_traffic_violation_id: String
	vehicle_id: String
	illegal_code: String
	illegal_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum SeriousTrafficViolationSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                            )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                        )
	"""
	serious_traffic_violation_id
	"""
	 违章车辆id                                      ( vehicle_info表的vehicle_id  )
	"""
	vehicle_id
	"""
	 违法代码                                        ( VIO_CODEWFDM 违法描述字典表 )
	"""
	illegal_code
	"""
	 违法日期                                        (                                 )
	"""
	illegal_time
	"""
	 创建时间                                        (                                 )
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id      )
	"""
	created_by
	"""
	 修改时间                                        (                                 )
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id      )
	"""
	updated_by
	"""
	 删除时间                                        (                                 )
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id      )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	serious_traffic_violation(distinct_on: [SeriousTrafficViolationSelectColumn!], limit: Int, offset: Int, order_by: [SeriousTrafficViolationOrderBy!], where: SeriousTrafficViolationBoolExp): [SeriousTrafficViolation!]!
	"""
	聚合查询
	"""
	serious_traffic_violation_aggregate(distinct_on: [SeriousTrafficViolationSelectColumn!], limit: Int, offset: Int, order_by: [SeriousTrafficViolationOrderBy!], where: SeriousTrafficViolationBoolExp): SeriousTrafficViolationAggregate!
	"""
	主键查询
	"""
	serious_traffic_violation_by_pk(id: Bigint!): SeriousTrafficViolation!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_serious_traffic_violation(where: SeriousTrafficViolationBoolExp!): SeriousTrafficViolationMutationResponse
	"""
	根据主键删除记录
	"""
	delete_serious_traffic_violation_by_pk(id: Bigint!): SeriousTrafficViolation
	"""
	插入
	"""
	insert_serious_traffic_violation(objects: [SeriousTrafficViolationInsertInput!]!): SeriousTrafficViolationMutationResponse
	"""
	插入一条记录
	"""
	insert_serious_traffic_violation_one(objects: SeriousTrafficViolationInsertInput!): SeriousTrafficViolation
	"""
	更新
	"""
	update_serious_traffic_violation(_inc: SeriousTrafficViolationIncInput, _set: SeriousTrafficViolationSetInput, where: SeriousTrafficViolationBoolExp!): SeriousTrafficViolationMutationResponse
	"""
	更新
	"""
	update_serious_traffic_violation_by_pk(_inc: SeriousTrafficViolationIncInput, _set: SeriousTrafficViolationSetInput, id: Bigint!): SeriousTrafficViolation
}
`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_violation_details.graphqls", Input: `"""
车辆违章明细表
"""
type VehicleViolationDetails {
	"""
	 按指定方法生成                                              ( 主键                                                         )
	"""
	id: Bigint!
	"""
	 车辆违章明细外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                     )
	"""
	violation_detail_id: String!
	"""
	 违章车辆id                                                  ( vehicle_info表的vehicle_id                               )
	"""
	vehicle_id: String
	"""
	 违章驾驶员id                                                ( driver_info表的driver_id                                 )
	"""
	driver_id: String
	"""
	 所在企业id                                                  ( enterprise_info表的enterprise_id                         )
	"""
	enterprise_id: String
	"""
	 违法代码                                                    ( VIO_CODEWFDM 违法描述字典表                              )
	"""
	illegal_code: String
	"""
	 违法时间                                                    (                                                              )
	"""
	illegal_time: Timestamptz
	"""
	 违法处理状态                                                ( 车辆违法处理状态字典                                     )
	"""
	illegal_handling_status: Int
	"""
	 违法地点                                                    (                                                              )
	"""
	illegal_location: String
	"""
	 标准值                                                      ( 路段的限速阈值或核载的人数，根据违法的种类不同而不同。       )
	"""
	standard_value: String
	"""
	 实测值                                                      ( 车辆实际行驶的车速或实际载的人数，根据违法的种类不同而不同。 )
	"""
	measured_value: String
	"""
	 发现机构                                                    (                                                              )
	"""
	discovery_agency: String
	"""
	 违法照片                                                    (                                                              )
	"""
	illegal_photo: String
	"""
	 是否通知驾驶员                                              (                                                              )
	"""
	is_notice_driver: Boolean
	"""
	 通知时间                                                    (                                                              )
	"""
	notice_time: Timestamptz
	"""
	 决定书号                                                    (                                                              )
	"""
	decision_number: String
	"""
	 缴款标记                                                    ( 是否缴款字典                                             )
	"""
	payment_mark: Int
	"""
	 当事人姓名                                                  (                                                              )
	"""
	party_name: String
	"""
	 信息来源：1，强制，2，非现场，0，简易                       ( 信息来源字典表                                           )
	"""
	information_source: Int
	"""
	 驾驶人处理的交通违法记录对应的机动车信息                    (                                                              )
	"""
	vehicle_information: String
	"""
	 内网更新时间                                                (                                                              )
	"""
	update_time_in: Timestamptz
	"""
	 是否处理                                                    (                                                              )
	"""
	is_handle: Boolean
	"""
	 处理人                                                      ( system_user表的user_id                                   )
	"""
	handle_by: String
	"""
	 处理时间                                                    (                                                              )
	"""
	handle_at: Timestamptz
	"""
	 是否发送短信                                                (                                                              )
	"""
	is_send: Boolean
	"""
	 是否删除                                                    (                                                              )
	"""
	is_deleted: Boolean
	"""
	 创建时间                                                    (                                                              )
	"""
	created_at: Timestamptz!
	"""
	 创建人                                                      ( system_user表的user_id                                   )
	"""
	created_by: String!
	"""
	 修改时间                                                    (                                                              )
	"""
	updated_at: Timestamptz
	"""
	 修改人                                                      ( system_user表的user_id                                   )
	"""
	updated_by: String
	"""
	 删除时间                                                    (                                                              )
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                                      ( system_user表的user_id                                   )
	"""
	deleted_by: String
}
"""
aggregated selection of "vehicle_violation_details"
"""
type VehicleViolationDetailsAggregate {
	aggregate: VehicleViolationDetailsAggregateFields
}
"""
aggregate fields of "vehicle_violation_details"
"""
type VehicleViolationDetailsAggregateFields {
	avg: VehicleViolationDetailsAvgFields
	count: Int
	max: VehicleViolationDetailsMaxFields
	min: VehicleViolationDetailsMinFields
	stddev: VehicleViolationDetailsStddevFields
	stddev_pop: VehicleViolationDetailsStddevPopFields
	stddev_samp: VehicleViolationDetailsStddevSampFields
	sum: VehicleViolationDetailsSumFields
	var_pop: VehicleViolationDetailsVarPopFields
	var_samp: VehicleViolationDetailsVarSampFields
	variance: VehicleViolationDetailsVarianceFields
}
"""
aggregate avg on columns of table "vehicle_violation_details"
"""
type VehicleViolationDetailsAvgFields {
	id: Bigint
	illegal_handling_status: Int
	payment_mark: Int
	information_source: Int
}
"""
aggregate max on columns of table "vehicle_violation_details"
"""
type VehicleViolationDetailsMaxFields {
	id: Bigint
	violation_detail_id: String
	vehicle_id: String
	driver_id: String
	enterprise_id: String
	illegal_code: String
	illegal_time: Timestamptz
	illegal_handling_status: Int
	illegal_location: String
	standard_value: String
	measured_value: String
	discovery_agency: String
	illegal_photo: String
	is_notice_driver: Boolean
	notice_time: Timestamptz
	decision_number: String
	payment_mark: Int
	party_name: String
	information_source: Int
	vehicle_information: String
	update_time_in: Timestamptz
	is_handle: Boolean
	handle_by: String
	handle_at: Timestamptz
	is_send: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "vehicle_violation_details"
"""
type VehicleViolationDetailsMinFields {
	id: Bigint
	violation_detail_id: String
	vehicle_id: String
	driver_id: String
	enterprise_id: String
	illegal_code: String
	illegal_time: Timestamptz
	illegal_handling_status: Int
	illegal_location: String
	standard_value: String
	measured_value: String
	discovery_agency: String
	illegal_photo: String
	is_notice_driver: Boolean
	notice_time: Timestamptz
	decision_number: String
	payment_mark: Int
	party_name: String
	information_source: Int
	vehicle_information: String
	update_time_in: Timestamptz
	is_handle: Boolean
	handle_by: String
	handle_at: Timestamptz
	is_send: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "vehicle_violation_details"
"""
type VehicleViolationDetailsStddevFields {
	id: Bigint
	illegal_handling_status: Int
	payment_mark: Int
	information_source: Int
}
"""
aggregate stddev_pop on columns of table "vehicle_violation_details"
"""
type VehicleViolationDetailsStddevPopFields {
	id: Bigint
	illegal_handling_status: Int
	payment_mark: Int
	information_source: Int
}
"""
aggregate stddev_samp on columns of table "vehicle_violation_details"
"""
type VehicleViolationDetailsStddevSampFields {
	id: Bigint
	illegal_handling_status: Int
	payment_mark: Int
	information_source: Int
}
"""
aggregate sum on columns of table "vehicle_violation_details"
"""
type VehicleViolationDetailsSumFields {
	id: Bigint
	illegal_handling_status: Int
	payment_mark: Int
	information_source: Int
}
"""
aggregate var_pop on columns of table "vehicle_violation_details"
"""
type VehicleViolationDetailsVarPopFields {
	id: Bigint
	illegal_handling_status: Int
	payment_mark: Int
	information_source: Int
}
"""
aggregate var_samp on columns of table "vehicle_violation_details"
"""
type VehicleViolationDetailsVarSampFields {
	id: Bigint
	illegal_handling_status: Int
	payment_mark: Int
	information_source: Int
}
"""
aggregate variance on columns of table "vehicle_violation_details"
"""
type VehicleViolationDetailsVarianceFields {
	id: Bigint
	illegal_handling_status: Int
	payment_mark: Int
	information_source: Int
}
"""
response of any mutation on the table "vehicle_violation_details"
"""
type VehicleViolationDetailsMutationResponse {
	affected_rows: Int!
	returning: [VehicleViolationDetails!]!
}
"""
ordering options when selecting data from "vehicle_violation_details"
"""
input VehicleViolationDetailsOrderBy {
	id: OrderBy
	violation_detail_id: OrderBy
	vehicle_id: OrderBy
	driver_id: OrderBy
	enterprise_id: OrderBy
	illegal_code: OrderBy
	illegal_time: OrderBy
	illegal_handling_status: OrderBy
	illegal_location: OrderBy
	standard_value: OrderBy
	measured_value: OrderBy
	discovery_agency: OrderBy
	illegal_photo: OrderBy
	is_notice_driver: OrderBy
	notice_time: OrderBy
	decision_number: OrderBy
	payment_mark: OrderBy
	party_name: OrderBy
	information_source: OrderBy
	vehicle_information: OrderBy
	update_time_in: OrderBy
	is_handle: OrderBy
	handle_by: OrderBy
	handle_at: OrderBy
	is_send: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_violation_details'.
"""
input VehicleViolationDetailsBoolExp {
	_and: [VehicleViolationDetailsBoolExp]
	_not: VehicleViolationDetailsBoolExp
	_or: [VehicleViolationDetailsBoolExp]
	id: BigintComparisonExp
	violation_detail_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	driver_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	illegal_code: StringComparisonExp
	illegal_time: TimestamptzComparisonExp
	illegal_handling_status: IntComparisonExp
	illegal_location: StringComparisonExp
	standard_value: StringComparisonExp
	measured_value: StringComparisonExp
	discovery_agency: StringComparisonExp
	illegal_photo: StringComparisonExp
	is_notice_driver: BooleanComparisonExp
	notice_time: TimestamptzComparisonExp
	decision_number: StringComparisonExp
	payment_mark: IntComparisonExp
	party_name: StringComparisonExp
	information_source: IntComparisonExp
	vehicle_information: StringComparisonExp
	update_time_in: TimestamptzComparisonExp
	is_handle: BooleanComparisonExp
	handle_by: StringComparisonExp
	handle_at: TimestamptzComparisonExp
	is_send: BooleanComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "vehicle_violation_details"
"""
input VehicleViolationDetailsInsertInput {
	id: Bigint
	violation_detail_id: String
	vehicle_id: String
	driver_id: String
	enterprise_id: String
	illegal_code: String
	illegal_time: Timestamptz
	illegal_handling_status: Int
	illegal_location: String
	standard_value: String
	measured_value: String
	discovery_agency: String
	illegal_photo: String
	is_notice_driver: Boolean
	notice_time: Timestamptz
	decision_number: String
	payment_mark: Int
	party_name: String
	information_source: Int
	vehicle_information: String
	update_time_in: Timestamptz
	is_handle: Boolean
	handle_by: String
	handle_at: Timestamptz
	is_send: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "vehicle_violation_details"
"""
input VehicleViolationDetailsIncInput {
	id: Bigint
	illegal_handling_status: Int
	payment_mark: Int
	information_source: Int
}
"""
input type for updating data in table "vehicle_violation_details"
"""
input VehicleViolationDetailsSetInput {
	id: Bigint
	violation_detail_id: String
	vehicle_id: String
	driver_id: String
	enterprise_id: String
	illegal_code: String
	illegal_time: Timestamptz
	illegal_handling_status: Int
	illegal_location: String
	standard_value: String
	measured_value: String
	discovery_agency: String
	illegal_photo: String
	is_notice_driver: Boolean
	notice_time: Timestamptz
	decision_number: String
	payment_mark: Int
	party_name: String
	information_source: Int
	vehicle_information: String
	update_time_in: Timestamptz
	is_handle: Boolean
	handle_by: String
	handle_at: Timestamptz
	is_send: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum VehicleViolationDetailsSelectColumn {
	"""
	 按指定方法生成                                              ( 主键                                                         )
	"""
	id
	"""
	 车辆违章明细外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                     )
	"""
	violation_detail_id
	"""
	 违章车辆id                                                  ( vehicle_info表的vehicle_id                               )
	"""
	vehicle_id
	"""
	 违章驾驶员id                                                ( driver_info表的driver_id                                 )
	"""
	driver_id
	"""
	 所在企业id                                                  ( enterprise_info表的enterprise_id                         )
	"""
	enterprise_id
	"""
	 违法代码                                                    ( VIO_CODEWFDM 违法描述字典表                              )
	"""
	illegal_code
	"""
	 违法时间                                                    (                                                              )
	"""
	illegal_time
	"""
	 违法处理状态                                                ( 车辆违法处理状态字典                                     )
	"""
	illegal_handling_status
	"""
	 违法地点                                                    (                                                              )
	"""
	illegal_location
	"""
	 标准值                                                      ( 路段的限速阈值或核载的人数，根据违法的种类不同而不同。       )
	"""
	standard_value
	"""
	 实测值                                                      ( 车辆实际行驶的车速或实际载的人数，根据违法的种类不同而不同。 )
	"""
	measured_value
	"""
	 发现机构                                                    (                                                              )
	"""
	discovery_agency
	"""
	 违法照片                                                    (                                                              )
	"""
	illegal_photo
	"""
	 是否通知驾驶员                                              (                                                              )
	"""
	is_notice_driver
	"""
	 通知时间                                                    (                                                              )
	"""
	notice_time
	"""
	 决定书号                                                    (                                                              )
	"""
	decision_number
	"""
	 缴款标记                                                    ( 是否缴款字典                                             )
	"""
	payment_mark
	"""
	 当事人姓名                                                  (                                                              )
	"""
	party_name
	"""
	 信息来源：1，强制，2，非现场，0，简易                       ( 信息来源字典表                                           )
	"""
	information_source
	"""
	 驾驶人处理的交通违法记录对应的机动车信息                    (                                                              )
	"""
	vehicle_information
	"""
	 内网更新时间                                                (                                                              )
	"""
	update_time_in
	"""
	 是否处理                                                    (                                                              )
	"""
	is_handle
	"""
	 处理人                                                      ( system_user表的user_id                                   )
	"""
	handle_by
	"""
	 处理时间                                                    (                                                              )
	"""
	handle_at
	"""
	 是否发送短信                                                (                                                              )
	"""
	is_send
	"""
	 是否删除                                                    (                                                              )
	"""
	is_deleted
	"""
	 创建时间                                                    (                                                              )
	"""
	created_at
	"""
	 创建人                                                      ( system_user表的user_id                                   )
	"""
	created_by
	"""
	 修改时间                                                    (                                                              )
	"""
	updated_at
	"""
	 修改人                                                      ( system_user表的user_id                                   )
	"""
	updated_by
	"""
	 删除时间                                                    (                                                              )
	"""
	deleted_at
	"""
	 删除人                                                      ( system_user表的user_id                                   )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	vehicle_violation_details(distinct_on: [VehicleViolationDetailsSelectColumn!], limit: Int, offset: Int, order_by: [VehicleViolationDetailsOrderBy!], where: VehicleViolationDetailsBoolExp): [VehicleViolationDetails!]!
	"""
	聚合查询
	"""
	vehicle_violation_details_aggregate(distinct_on: [VehicleViolationDetailsSelectColumn!], limit: Int, offset: Int, order_by: [VehicleViolationDetailsOrderBy!], where: VehicleViolationDetailsBoolExp): VehicleViolationDetailsAggregate!
	"""
	主键查询
	"""
	vehicle_violation_details_by_pk(id: Bigint!): VehicleViolationDetails!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_vehicle_violation_details(where: VehicleViolationDetailsBoolExp!): VehicleViolationDetailsMutationResponse
	"""
	根据主键删除记录
	"""
	delete_vehicle_violation_details_by_pk(id: Bigint!): VehicleViolationDetails
	"""
	插入
	"""
	insert_vehicle_violation_details(objects: [VehicleViolationDetailsInsertInput!]!): VehicleViolationDetailsMutationResponse
	"""
	插入一条记录
	"""
	insert_vehicle_violation_details_one(objects: VehicleViolationDetailsInsertInput!): VehicleViolationDetails
	"""
	更新
	"""
	update_vehicle_violation_details(_inc: VehicleViolationDetailsIncInput, _set: VehicleViolationDetailsSetInput, where: VehicleViolationDetailsBoolExp!): VehicleViolationDetailsMutationResponse
	"""
	更新
	"""
	update_vehicle_violation_details_by_pk(_inc: VehicleViolationDetailsIncInput, _set: VehicleViolationDetailsSetInput, id: Bigint!): VehicleViolationDetails
}
`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_violation_scoring_items.graphqls", Input: `"""
车辆违规计分项表
"""
type VehicleViolationScoringItems {
	"""
	 按指定方法生成                                               ( 主键                       )
	"""
	id: Bigint!
	"""
	 车辆违规计分项表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	violation_scoring_item_id: String!
	"""
	 扣分事项描述                                                 (                            )
	"""
	deduction_item_description: String
	"""
	 扣分事项类别                                                 ( 车辆评分扣分类别字典   )
	"""
	deduction_category: Int
	"""
	 扣分分值                                                     (                            )
	"""
	demerit_points: Numeric
	"""
	 是否删除                                                     (                            )
	"""
	is_deleted: Boolean
	"""
	 创建时间                                                     (                            )
	"""
	created_at: Timestamptz!
	"""
	 创建人                                                       ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                                     (                            )
	"""
	updated_at: Timestamptz
	"""
	 修改人                                                       ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                                     (                            )
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                                       ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "vehicle_violation_scoring_items"
"""
type VehicleViolationScoringItemsAggregate {
	aggregate: VehicleViolationScoringItemsAggregateFields
}
"""
aggregate fields of "vehicle_violation_scoring_items"
"""
type VehicleViolationScoringItemsAggregateFields {
	avg: VehicleViolationScoringItemsAvgFields
	count: Int
	max: VehicleViolationScoringItemsMaxFields
	min: VehicleViolationScoringItemsMinFields
	stddev: VehicleViolationScoringItemsStddevFields
	stddev_pop: VehicleViolationScoringItemsStddevPopFields
	stddev_samp: VehicleViolationScoringItemsStddevSampFields
	sum: VehicleViolationScoringItemsSumFields
	var_pop: VehicleViolationScoringItemsVarPopFields
	var_samp: VehicleViolationScoringItemsVarSampFields
	variance: VehicleViolationScoringItemsVarianceFields
}
"""
aggregate avg on columns of table "vehicle_violation_scoring_items"
"""
type VehicleViolationScoringItemsAvgFields {
	id: Bigint
	deduction_category: Int
	demerit_points: Numeric
}
"""
aggregate max on columns of table "vehicle_violation_scoring_items"
"""
type VehicleViolationScoringItemsMaxFields {
	id: Bigint
	violation_scoring_item_id: String
	deduction_item_description: String
	deduction_category: Int
	demerit_points: Numeric
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "vehicle_violation_scoring_items"
"""
type VehicleViolationScoringItemsMinFields {
	id: Bigint
	violation_scoring_item_id: String
	deduction_item_description: String
	deduction_category: Int
	demerit_points: Numeric
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "vehicle_violation_scoring_items"
"""
type VehicleViolationScoringItemsStddevFields {
	id: Bigint
	deduction_category: Int
	demerit_points: Numeric
}
"""
aggregate stddev_pop on columns of table "vehicle_violation_scoring_items"
"""
type VehicleViolationScoringItemsStddevPopFields {
	id: Bigint
	deduction_category: Int
	demerit_points: Numeric
}
"""
aggregate stddev_samp on columns of table "vehicle_violation_scoring_items"
"""
type VehicleViolationScoringItemsStddevSampFields {
	id: Bigint
	deduction_category: Int
	demerit_points: Numeric
}
"""
aggregate sum on columns of table "vehicle_violation_scoring_items"
"""
type VehicleViolationScoringItemsSumFields {
	id: Bigint
	deduction_category: Int
	demerit_points: Numeric
}
"""
aggregate var_pop on columns of table "vehicle_violation_scoring_items"
"""
type VehicleViolationScoringItemsVarPopFields {
	id: Bigint
	deduction_category: Int
	demerit_points: Numeric
}
"""
aggregate var_samp on columns of table "vehicle_violation_scoring_items"
"""
type VehicleViolationScoringItemsVarSampFields {
	id: Bigint
	deduction_category: Int
	demerit_points: Numeric
}
"""
aggregate variance on columns of table "vehicle_violation_scoring_items"
"""
type VehicleViolationScoringItemsVarianceFields {
	id: Bigint
	deduction_category: Int
	demerit_points: Numeric
}
"""
response of any mutation on the table "vehicle_violation_scoring_items"
"""
type VehicleViolationScoringItemsMutationResponse {
	affected_rows: Int!
	returning: [VehicleViolationScoringItems!]!
}
"""
ordering options when selecting data from "vehicle_violation_scoring_items"
"""
input VehicleViolationScoringItemsOrderBy {
	id: OrderBy
	violation_scoring_item_id: OrderBy
	deduction_item_description: OrderBy
	deduction_category: OrderBy
	demerit_points: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_violation_scoring_items'.
"""
input VehicleViolationScoringItemsBoolExp {
	_and: [VehicleViolationScoringItemsBoolExp]
	_not: VehicleViolationScoringItemsBoolExp
	_or: [VehicleViolationScoringItemsBoolExp]
	id: BigintComparisonExp
	violation_scoring_item_id: StringComparisonExp
	deduction_item_description: StringComparisonExp
	deduction_category: IntComparisonExp
	demerit_points: NumericComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "vehicle_violation_scoring_items"
"""
input VehicleViolationScoringItemsInsertInput {
	id: Bigint
	violation_scoring_item_id: String
	deduction_item_description: String
	deduction_category: Int
	demerit_points: Numeric
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "vehicle_violation_scoring_items"
"""
input VehicleViolationScoringItemsIncInput {
	id: Bigint
	deduction_category: Int
	demerit_points: Numeric
}
"""
input type for updating data in table "vehicle_violation_scoring_items"
"""
input VehicleViolationScoringItemsSetInput {
	id: Bigint
	violation_scoring_item_id: String
	deduction_item_description: String
	deduction_category: Int
	demerit_points: Numeric
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum VehicleViolationScoringItemsSelectColumn {
	"""
	 按指定方法生成                                               ( 主键                       )
	"""
	id
	"""
	 车辆违规计分项表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	violation_scoring_item_id
	"""
	 扣分事项描述                                                 (                            )
	"""
	deduction_item_description
	"""
	 扣分事项类别                                                 ( 车辆评分扣分类别字典   )
	"""
	deduction_category
	"""
	 扣分分值                                                     (                            )
	"""
	demerit_points
	"""
	 是否删除                                                     (                            )
	"""
	is_deleted
	"""
	 创建时间                                                     (                            )
	"""
	created_at
	"""
	 创建人                                                       ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                                     (                            )
	"""
	updated_at
	"""
	 修改人                                                       ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                                     (                            )
	"""
	deleted_at
	"""
	 删除人                                                       ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	vehicle_violation_scoring_items(distinct_on: [VehicleViolationScoringItemsSelectColumn!], limit: Int, offset: Int, order_by: [VehicleViolationScoringItemsOrderBy!], where: VehicleViolationScoringItemsBoolExp): [VehicleViolationScoringItems!]!
	"""
	聚合查询
	"""
	vehicle_violation_scoring_items_aggregate(distinct_on: [VehicleViolationScoringItemsSelectColumn!], limit: Int, offset: Int, order_by: [VehicleViolationScoringItemsOrderBy!], where: VehicleViolationScoringItemsBoolExp): VehicleViolationScoringItemsAggregate!
	"""
	主键查询
	"""
	vehicle_violation_scoring_items_by_pk(id: Bigint!): VehicleViolationScoringItems!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_vehicle_violation_scoring_items(where: VehicleViolationScoringItemsBoolExp!): VehicleViolationScoringItemsMutationResponse
	"""
	根据主键删除记录
	"""
	delete_vehicle_violation_scoring_items_by_pk(id: Bigint!): VehicleViolationScoringItems
	"""
	插入
	"""
	insert_vehicle_violation_scoring_items(objects: [VehicleViolationScoringItemsInsertInput!]!): VehicleViolationScoringItemsMutationResponse
	"""
	插入一条记录
	"""
	insert_vehicle_violation_scoring_items_one(objects: VehicleViolationScoringItemsInsertInput!): VehicleViolationScoringItems
	"""
	更新
	"""
	update_vehicle_violation_scoring_items(_inc: VehicleViolationScoringItemsIncInput, _set: VehicleViolationScoringItemsSetInput, where: VehicleViolationScoringItemsBoolExp!): VehicleViolationScoringItemsMutationResponse
	"""
	更新
	"""
	update_vehicle_violation_scoring_items_by_pk(_inc: VehicleViolationScoringItemsIncInput, _set: VehicleViolationScoringItemsSetInput, id: Bigint!): VehicleViolationScoringItems
}
`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_violation_scoring_record.graphqls", Input: `"""
车辆违规计分记录
"""
type VehicleViolationScoringRecord {
	"""
	 按指定方法生成                                               ( 主键                                                         )
	"""
	id: Bigint!
	"""
	 车辆违规计分记录外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                     )
	"""
	violation_scoring_id: String!
	"""
	 扣分车辆id                                                   ( vehicle_info表的vehicle_id                               )
	"""
	vehicle_id: String
	"""
	 扣分明细id                                                   ( vehicle_violation_scoring_ items表的violation_scoring_item_id )
	"""
	violation_scoring_item_id: String
	"""
	 扣分分值                                                     (                                                              )
	"""
	demerit_points: Numeric
	"""
	 备注                                                         (                                                              )
	"""
	remarks: String
	"""
	 是否删除                                                     (                                                              )
	"""
	is_deleted: Boolean
	"""
	 创建时间                                                     (                                                              )
	"""
	created_at: Timestamptz!
	"""
	 创建人                                                       ( system_user表的user_id                                   )
	"""
	created_by: String!
	"""
	 修改时间                                                     (                                                              )
	"""
	updated_at: Timestamptz
	"""
	 修改人                                                       ( system_user表的user_id                                   )
	"""
	updated_by: String
	"""
	 删除时间                                                     (                                                              )
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                                       ( system_user表的user_id                                   )
	"""
	deleted_by: String
}
"""
aggregated selection of "vehicle_violation_scoring_record"
"""
type VehicleViolationScoringRecordAggregate {
	aggregate: VehicleViolationScoringRecordAggregateFields
}
"""
aggregate fields of "vehicle_violation_scoring_record"
"""
type VehicleViolationScoringRecordAggregateFields {
	avg: VehicleViolationScoringRecordAvgFields
	count: Int
	max: VehicleViolationScoringRecordMaxFields
	min: VehicleViolationScoringRecordMinFields
	stddev: VehicleViolationScoringRecordStddevFields
	stddev_pop: VehicleViolationScoringRecordStddevPopFields
	stddev_samp: VehicleViolationScoringRecordStddevSampFields
	sum: VehicleViolationScoringRecordSumFields
	var_pop: VehicleViolationScoringRecordVarPopFields
	var_samp: VehicleViolationScoringRecordVarSampFields
	variance: VehicleViolationScoringRecordVarianceFields
}
"""
aggregate avg on columns of table "vehicle_violation_scoring_record"
"""
type VehicleViolationScoringRecordAvgFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate max on columns of table "vehicle_violation_scoring_record"
"""
type VehicleViolationScoringRecordMaxFields {
	id: Bigint
	violation_scoring_id: String
	vehicle_id: String
	violation_scoring_item_id: String
	demerit_points: Numeric
	remarks: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "vehicle_violation_scoring_record"
"""
type VehicleViolationScoringRecordMinFields {
	id: Bigint
	violation_scoring_id: String
	vehicle_id: String
	violation_scoring_item_id: String
	demerit_points: Numeric
	remarks: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "vehicle_violation_scoring_record"
"""
type VehicleViolationScoringRecordStddevFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate stddev_pop on columns of table "vehicle_violation_scoring_record"
"""
type VehicleViolationScoringRecordStddevPopFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate stddev_samp on columns of table "vehicle_violation_scoring_record"
"""
type VehicleViolationScoringRecordStddevSampFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate sum on columns of table "vehicle_violation_scoring_record"
"""
type VehicleViolationScoringRecordSumFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate var_pop on columns of table "vehicle_violation_scoring_record"
"""
type VehicleViolationScoringRecordVarPopFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate var_samp on columns of table "vehicle_violation_scoring_record"
"""
type VehicleViolationScoringRecordVarSampFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate variance on columns of table "vehicle_violation_scoring_record"
"""
type VehicleViolationScoringRecordVarianceFields {
	id: Bigint
	demerit_points: Numeric
}
"""
response of any mutation on the table "vehicle_violation_scoring_record"
"""
type VehicleViolationScoringRecordMutationResponse {
	affected_rows: Int!
	returning: [VehicleViolationScoringRecord!]!
}
"""
ordering options when selecting data from "vehicle_violation_scoring_record"
"""
input VehicleViolationScoringRecordOrderBy {
	id: OrderBy
	violation_scoring_id: OrderBy
	vehicle_id: OrderBy
	violation_scoring_item_id: OrderBy
	demerit_points: OrderBy
	remarks: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_violation_scoring_record'.
"""
input VehicleViolationScoringRecordBoolExp {
	_and: [VehicleViolationScoringRecordBoolExp]
	_not: VehicleViolationScoringRecordBoolExp
	_or: [VehicleViolationScoringRecordBoolExp]
	id: BigintComparisonExp
	violation_scoring_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	violation_scoring_item_id: StringComparisonExp
	demerit_points: NumericComparisonExp
	remarks: StringComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "vehicle_violation_scoring_record"
"""
input VehicleViolationScoringRecordInsertInput {
	id: Bigint
	violation_scoring_id: String
	vehicle_id: String
	violation_scoring_item_id: String
	demerit_points: Numeric
	remarks: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "vehicle_violation_scoring_record"
"""
input VehicleViolationScoringRecordIncInput {
	id: Bigint
	demerit_points: Numeric
}
"""
input type for updating data in table "vehicle_violation_scoring_record"
"""
input VehicleViolationScoringRecordSetInput {
	id: Bigint
	violation_scoring_id: String
	vehicle_id: String
	violation_scoring_item_id: String
	demerit_points: Numeric
	remarks: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum VehicleViolationScoringRecordSelectColumn {
	"""
	 按指定方法生成                                               ( 主键                                                         )
	"""
	id
	"""
	 车辆违规计分记录外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                     )
	"""
	violation_scoring_id
	"""
	 扣分车辆id                                                   ( vehicle_info表的vehicle_id                               )
	"""
	vehicle_id
	"""
	 扣分明细id                                                   ( vehicle_violation_scoring_ items表的violation_scoring_item_id )
	"""
	violation_scoring_item_id
	"""
	 扣分分值                                                     (                                                              )
	"""
	demerit_points
	"""
	 备注                                                         (                                                              )
	"""
	remarks
	"""
	 是否删除                                                     (                                                              )
	"""
	is_deleted
	"""
	 创建时间                                                     (                                                              )
	"""
	created_at
	"""
	 创建人                                                       ( system_user表的user_id                                   )
	"""
	created_by
	"""
	 修改时间                                                     (                                                              )
	"""
	updated_at
	"""
	 修改人                                                       ( system_user表的user_id                                   )
	"""
	updated_by
	"""
	 删除时间                                                     (                                                              )
	"""
	deleted_at
	"""
	 删除人                                                       ( system_user表的user_id                                   )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	vehicle_violation_scoring_record(distinct_on: [VehicleViolationScoringRecordSelectColumn!], limit: Int, offset: Int, order_by: [VehicleViolationScoringRecordOrderBy!], where: VehicleViolationScoringRecordBoolExp): [VehicleViolationScoringRecord!]!
	"""
	聚合查询
	"""
	vehicle_violation_scoring_record_aggregate(distinct_on: [VehicleViolationScoringRecordSelectColumn!], limit: Int, offset: Int, order_by: [VehicleViolationScoringRecordOrderBy!], where: VehicleViolationScoringRecordBoolExp): VehicleViolationScoringRecordAggregate!
	"""
	主键查询
	"""
	vehicle_violation_scoring_record_by_pk(id: Bigint!): VehicleViolationScoringRecord!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_vehicle_violation_scoring_record(where: VehicleViolationScoringRecordBoolExp!): VehicleViolationScoringRecordMutationResponse
	"""
	根据主键删除记录
	"""
	delete_vehicle_violation_scoring_record_by_pk(id: Bigint!): VehicleViolationScoringRecord
	"""
	插入
	"""
	insert_vehicle_violation_scoring_record(objects: [VehicleViolationScoringRecordInsertInput!]!): VehicleViolationScoringRecordMutationResponse
	"""
	插入一条记录
	"""
	insert_vehicle_violation_scoring_record_one(objects: VehicleViolationScoringRecordInsertInput!): VehicleViolationScoringRecord
	"""
	更新
	"""
	update_vehicle_violation_scoring_record(_inc: VehicleViolationScoringRecordIncInput, _set: VehicleViolationScoringRecordSetInput, where: VehicleViolationScoringRecordBoolExp!): VehicleViolationScoringRecordMutationResponse
	"""
	更新
	"""
	update_vehicle_violation_scoring_record_by_pk(_inc: VehicleViolationScoringRecordIncInput, _set: VehicleViolationScoringRecordSetInput, id: Bigint!): VehicleViolationScoringRecord
}
`, BuiltIn: false},
	{Name: "graph/graphqls/vio_codewfdm.graphqls", Input: `"""
违法描述字典表(交警提供数据表，暂无修改)
"""
type VioCodewfdm {
	"""
	 违法行为     (         )
	"""
	wfxw: String!
	"""
	 违法描述     (         )
	"""
	wfms: String
	"""
	 违法计分数   (         )
	"""
	wfjfs: Numeric
	"""
	 最小罚款金额 (         )
	"""
	fkje_min: Numeric
	"""
	 最大罚款金额 (         )
	"""
	fkje_max: Numeric
	"""
	 序号         (         )
	"""
	xh: String
}
"""
aggregated selection of "vio_codewfdm"
"""
type VioCodewfdmAggregate {
	aggregate: VioCodewfdmAggregateFields
}
"""
aggregate fields of "vio_codewfdm"
"""
type VioCodewfdmAggregateFields {
	avg: VioCodewfdmAvgFields
	count: Int
	max: VioCodewfdmMaxFields
	min: VioCodewfdmMinFields
	stddev: VioCodewfdmStddevFields
	stddev_pop: VioCodewfdmStddevPopFields
	stddev_samp: VioCodewfdmStddevSampFields
	sum: VioCodewfdmSumFields
	var_pop: VioCodewfdmVarPopFields
	var_samp: VioCodewfdmVarSampFields
	variance: VioCodewfdmVarianceFields
}
"""
aggregate avg on columns of table "vio_codewfdm"
"""
type VioCodewfdmAvgFields {
	wfjfs: Numeric
	fkje_min: Numeric
	fkje_max: Numeric
}
"""
aggregate max on columns of table "vio_codewfdm"
"""
type VioCodewfdmMaxFields {
	wfxw: String
	wfms: String
	wfjfs: Numeric
	fkje_min: Numeric
	fkje_max: Numeric
	xh: String
}
"""
aggregate min on columns of table "vio_codewfdm"
"""
type VioCodewfdmMinFields {
	wfxw: String
	wfms: String
	wfjfs: Numeric
	fkje_min: Numeric
	fkje_max: Numeric
	xh: String
}
"""
aggregate stddev on columns of table "vio_codewfdm"
"""
type VioCodewfdmStddevFields {
	wfjfs: Numeric
	fkje_min: Numeric
	fkje_max: Numeric
}
"""
aggregate stddev_pop on columns of table "vio_codewfdm"
"""
type VioCodewfdmStddevPopFields {
	wfjfs: Numeric
	fkje_min: Numeric
	fkje_max: Numeric
}
"""
aggregate stddev_samp on columns of table "vio_codewfdm"
"""
type VioCodewfdmStddevSampFields {
	wfjfs: Numeric
	fkje_min: Numeric
	fkje_max: Numeric
}
"""
aggregate sum on columns of table "vio_codewfdm"
"""
type VioCodewfdmSumFields {
	wfjfs: Numeric
	fkje_min: Numeric
	fkje_max: Numeric
}
"""
aggregate var_pop on columns of table "vio_codewfdm"
"""
type VioCodewfdmVarPopFields {
	wfjfs: Numeric
	fkje_min: Numeric
	fkje_max: Numeric
}
"""
aggregate var_samp on columns of table "vio_codewfdm"
"""
type VioCodewfdmVarSampFields {
	wfjfs: Numeric
	fkje_min: Numeric
	fkje_max: Numeric
}
"""
aggregate variance on columns of table "vio_codewfdm"
"""
type VioCodewfdmVarianceFields {
	wfjfs: Numeric
	fkje_min: Numeric
	fkje_max: Numeric
}
"""
response of any mutation on the table "vio_codewfdm"
"""
type VioCodewfdmMutationResponse {
	affected_rows: Int!
	returning: [VioCodewfdm!]!
}
"""
ordering options when selecting data from "vio_codewfdm"
"""
input VioCodewfdmOrderBy {
	wfxw: OrderBy
	wfms: OrderBy
	wfjfs: OrderBy
	fkje_min: OrderBy
	fkje_max: OrderBy
	xh: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vio_codewfdm'.
"""
input VioCodewfdmBoolExp {
	_and: [VioCodewfdmBoolExp]
	_not: VioCodewfdmBoolExp
	_or: [VioCodewfdmBoolExp]
	wfxw: StringComparisonExp
	wfms: StringComparisonExp
	wfjfs: NumericComparisonExp
	fkje_min: NumericComparisonExp
	fkje_max: NumericComparisonExp
	xh: StringComparisonExp
}
"""
input type for inserting data into table "vio_codewfdm"
"""
input VioCodewfdmInsertInput {
	wfxw: String
	wfms: String
	wfjfs: Numeric
	fkje_min: Numeric
	fkje_max: Numeric
	xh: String
}
"""
input type for incrementing integer column in table "vio_codewfdm"
"""
input VioCodewfdmIncInput {
	wfjfs: Numeric
	fkje_min: Numeric
	fkje_max: Numeric
}
"""
input type for updating data in table "vio_codewfdm"
"""
input VioCodewfdmSetInput {
	wfxw: String
	wfms: String
	wfjfs: Numeric
	fkje_min: Numeric
	fkje_max: Numeric
	xh: String
}
"""
可选select
"""
enum VioCodewfdmSelectColumn {
	"""
	 违法行为     (         )
	"""
	wfxw
	"""
	 违法描述     (         )
	"""
	wfms
	"""
	 违法计分数   (         )
	"""
	wfjfs
	"""
	 最小罚款金额 (         )
	"""
	fkje_min
	"""
	 最大罚款金额 (         )
	"""
	fkje_max
	"""
	 序号         (         )
	"""
	xh
}
extend type Query {
	"""
	列表查询
	"""
	vio_codewfdm(distinct_on: [VioCodewfdmSelectColumn!], limit: Int, offset: Int, order_by: [VioCodewfdmOrderBy!], where: VioCodewfdmBoolExp): [VioCodewfdm!]!
	"""
	聚合查询
	"""
	vio_codewfdm_aggregate(distinct_on: [VioCodewfdmSelectColumn!], limit: Int, offset: Int, order_by: [VioCodewfdmOrderBy!], where: VioCodewfdmBoolExp): VioCodewfdmAggregate!
	"""
	主键查询
	"""
	vio_codewfdm_by_pk(id: String!): VioCodewfdm!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_vio_codewfdm(where: VioCodewfdmBoolExp!): VioCodewfdmMutationResponse
	"""
	根据主键删除记录
	"""
	delete_vio_codewfdm_by_pk(id: String!): VioCodewfdm
	"""
	插入
	"""
	insert_vio_codewfdm(objects: [VioCodewfdmInsertInput!]!): VioCodewfdmMutationResponse
	"""
	插入一条记录
	"""
	insert_vio_codewfdm_one(objects: VioCodewfdmInsertInput!): VioCodewfdm
	"""
	更新
	"""
	update_vio_codewfdm(_inc: VioCodewfdmIncInput, _set: VioCodewfdmSetInput, where: VioCodewfdmBoolExp!): VioCodewfdmMutationResponse
	"""
	更新
	"""
	update_vio_codewfdm_by_pk(_inc: VioCodewfdmIncInput, _set: VioCodewfdmSetInput, id: String!): VioCodewfdm
}
`, BuiltIn: false},
	{Name: "graph/graphqls/violation_registration.graphqls", Input: `"""
违法信息登记表
"""
type ViolationRegistration {
	"""
	 按指定方法生成                                  ( 主键                           )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                       )
	"""
	violation_registration_id: String!
	"""
	 违章车辆id                                      ( vehicle_info表的vehicle_id )
	"""
	vehicle_id: String
	"""
	 车牌号                                          (                                )
	"""
	license_plate_number: String
	"""
	 码身份证号                                      (                                )
	"""
	id_card_num: String
	"""
	 姓名                                            (                                )
	"""
	name: String
	"""
	 地点                                            (                                )
	"""
	location: String
	"""
	 原因                                            (                                )
	"""
	cause: String
	"""
	 违法时间                                        (                                )
	"""
	illegal_time: Timestamptz
	"""
	 操作人                                          ( system_user表的user_id     )
	"""
	operator: String
	"""
	 违法地区                                        (                                )
	"""
	illegal_area: String
	"""
	 违法代码                                        (                                )
	"""
	illegal_code: String
	"""
	 车辆所属地区                                    (                                )
	"""
	vehicle_area: String
	"""
	 车辆所属单位                                    (                                )
	"""
	vehicle_enterprise: String
	"""
	 所在省                                          ( 省份表province_id          )
	"""
	province_id: String
	"""
	 所在市                                          ( 城市表city_id              )
	"""
	city_id: String
	"""
	 所在县                                          ( 区域表district_id          )
	"""
	district_id: String
	"""
	 监管人                                          (                                )
	"""
	supervisor: String
	"""
	 监管时间                                        (                                )
	"""
	supervision_time: String
	"""
	 监管备注                                        (                                )
	"""
	sepervision_remarks: String
	"""
	 是否监管                                        (                                )
	"""
	is_supervised: String
	"""
	 是否事故                                        (                                )
	"""
	is_accident: String
	"""
	 是否删除                                        (                                )
	"""
	is_deleted: Boolean
	"""
	 创建时间                                        (                                )
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id     )
	"""
	created_by: String!
	"""
	 修改时间                                        (                                )
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id     )
	"""
	updated_by: String
	"""
	 删除时间                                        (                                )
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id     )
	"""
	deleted_by: String
}
"""
aggregated selection of "violation_registration"
"""
type ViolationRegistrationAggregate {
	aggregate: ViolationRegistrationAggregateFields
}
"""
aggregate fields of "violation_registration"
"""
type ViolationRegistrationAggregateFields {
	avg: ViolationRegistrationAvgFields
	count: Int
	max: ViolationRegistrationMaxFields
	min: ViolationRegistrationMinFields
	stddev: ViolationRegistrationStddevFields
	stddev_pop: ViolationRegistrationStddevPopFields
	stddev_samp: ViolationRegistrationStddevSampFields
	sum: ViolationRegistrationSumFields
	var_pop: ViolationRegistrationVarPopFields
	var_samp: ViolationRegistrationVarSampFields
	variance: ViolationRegistrationVarianceFields
}
"""
aggregate avg on columns of table "violation_registration"
"""
type ViolationRegistrationAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "violation_registration"
"""
type ViolationRegistrationMaxFields {
	id: Bigint
	violation_registration_id: String
	vehicle_id: String
	license_plate_number: String
	id_card_num: String
	name: String
	location: String
	cause: String
	illegal_time: Timestamptz
	operator: String
	illegal_area: String
	illegal_code: String
	vehicle_area: String
	vehicle_enterprise: String
	province_id: String
	city_id: String
	district_id: String
	supervisor: String
	supervision_time: String
	sepervision_remarks: String
	is_supervised: String
	is_accident: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "violation_registration"
"""
type ViolationRegistrationMinFields {
	id: Bigint
	violation_registration_id: String
	vehicle_id: String
	license_plate_number: String
	id_card_num: String
	name: String
	location: String
	cause: String
	illegal_time: Timestamptz
	operator: String
	illegal_area: String
	illegal_code: String
	vehicle_area: String
	vehicle_enterprise: String
	province_id: String
	city_id: String
	district_id: String
	supervisor: String
	supervision_time: String
	sepervision_remarks: String
	is_supervised: String
	is_accident: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "violation_registration"
"""
type ViolationRegistrationStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "violation_registration"
"""
type ViolationRegistrationStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "violation_registration"
"""
type ViolationRegistrationStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "violation_registration"
"""
type ViolationRegistrationSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "violation_registration"
"""
type ViolationRegistrationVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "violation_registration"
"""
type ViolationRegistrationVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "violation_registration"
"""
type ViolationRegistrationVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "violation_registration"
"""
type ViolationRegistrationMutationResponse {
	affected_rows: Int!
	returning: [ViolationRegistration!]!
}
"""
ordering options when selecting data from "violation_registration"
"""
input ViolationRegistrationOrderBy {
	id: OrderBy
	violation_registration_id: OrderBy
	vehicle_id: OrderBy
	license_plate_number: OrderBy
	id_card_num: OrderBy
	name: OrderBy
	location: OrderBy
	cause: OrderBy
	illegal_time: OrderBy
	operator: OrderBy
	illegal_area: OrderBy
	illegal_code: OrderBy
	vehicle_area: OrderBy
	vehicle_enterprise: OrderBy
	province_id: OrderBy
	city_id: OrderBy
	district_id: OrderBy
	supervisor: OrderBy
	supervision_time: OrderBy
	sepervision_remarks: OrderBy
	is_supervised: OrderBy
	is_accident: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'violation_registration'.
"""
input ViolationRegistrationBoolExp {
	_and: [ViolationRegistrationBoolExp]
	_not: ViolationRegistrationBoolExp
	_or: [ViolationRegistrationBoolExp]
	id: BigintComparisonExp
	violation_registration_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	license_plate_number: StringComparisonExp
	id_card_num: StringComparisonExp
	name: StringComparisonExp
	location: StringComparisonExp
	cause: StringComparisonExp
	illegal_time: TimestamptzComparisonExp
	operator: StringComparisonExp
	illegal_area: StringComparisonExp
	illegal_code: StringComparisonExp
	vehicle_area: StringComparisonExp
	vehicle_enterprise: StringComparisonExp
	province_id: StringComparisonExp
	city_id: StringComparisonExp
	district_id: StringComparisonExp
	supervisor: StringComparisonExp
	supervision_time: StringComparisonExp
	sepervision_remarks: StringComparisonExp
	is_supervised: StringComparisonExp
	is_accident: StringComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "violation_registration"
"""
input ViolationRegistrationInsertInput {
	id: Bigint
	violation_registration_id: String
	vehicle_id: String
	license_plate_number: String
	id_card_num: String
	name: String
	location: String
	cause: String
	illegal_time: Timestamptz
	operator: String
	illegal_area: String
	illegal_code: String
	vehicle_area: String
	vehicle_enterprise: String
	province_id: String
	city_id: String
	district_id: String
	supervisor: String
	supervision_time: String
	sepervision_remarks: String
	is_supervised: String
	is_accident: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "violation_registration"
"""
input ViolationRegistrationIncInput {
	id: Bigint
}
"""
input type for updating data in table "violation_registration"
"""
input ViolationRegistrationSetInput {
	id: Bigint
	violation_registration_id: String
	vehicle_id: String
	license_plate_number: String
	id_card_num: String
	name: String
	location: String
	cause: String
	illegal_time: Timestamptz
	operator: String
	illegal_area: String
	illegal_code: String
	vehicle_area: String
	vehicle_enterprise: String
	province_id: String
	city_id: String
	district_id: String
	supervisor: String
	supervision_time: String
	sepervision_remarks: String
	is_supervised: String
	is_accident: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum ViolationRegistrationSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                           )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                       )
	"""
	violation_registration_id
	"""
	 违章车辆id                                      ( vehicle_info表的vehicle_id )
	"""
	vehicle_id
	"""
	 车牌号                                          (                                )
	"""
	license_plate_number
	"""
	 码身份证号                                      (                                )
	"""
	id_card_num
	"""
	 姓名                                            (                                )
	"""
	name
	"""
	 地点                                            (                                )
	"""
	location
	"""
	 原因                                            (                                )
	"""
	cause
	"""
	 违法时间                                        (                                )
	"""
	illegal_time
	"""
	 操作人                                          ( system_user表的user_id     )
	"""
	operator
	"""
	 违法地区                                        (                                )
	"""
	illegal_area
	"""
	 违法代码                                        (                                )
	"""
	illegal_code
	"""
	 车辆所属地区                                    (                                )
	"""
	vehicle_area
	"""
	 车辆所属单位                                    (                                )
	"""
	vehicle_enterprise
	"""
	 所在省                                          ( 省份表province_id          )
	"""
	province_id
	"""
	 所在市                                          ( 城市表city_id              )
	"""
	city_id
	"""
	 所在县                                          ( 区域表district_id          )
	"""
	district_id
	"""
	 监管人                                          (                                )
	"""
	supervisor
	"""
	 监管时间                                        (                                )
	"""
	supervision_time
	"""
	 监管备注                                        (                                )
	"""
	sepervision_remarks
	"""
	 是否监管                                        (                                )
	"""
	is_supervised
	"""
	 是否事故                                        (                                )
	"""
	is_accident
	"""
	 是否删除                                        (                                )
	"""
	is_deleted
	"""
	 创建时间                                        (                                )
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id     )
	"""
	created_by
	"""
	 修改时间                                        (                                )
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id     )
	"""
	updated_by
	"""
	 删除时间                                        (                                )
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id     )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	violation_registration(distinct_on: [ViolationRegistrationSelectColumn!], limit: Int, offset: Int, order_by: [ViolationRegistrationOrderBy!], where: ViolationRegistrationBoolExp): [ViolationRegistration!]!
	"""
	聚合查询
	"""
	violation_registration_aggregate(distinct_on: [ViolationRegistrationSelectColumn!], limit: Int, offset: Int, order_by: [ViolationRegistrationOrderBy!], where: ViolationRegistrationBoolExp): ViolationRegistrationAggregate!
	"""
	主键查询
	"""
	violation_registration_by_pk(id: Bigint!): ViolationRegistration!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_violation_registration(where: ViolationRegistrationBoolExp!): ViolationRegistrationMutationResponse
	"""
	根据主键删除记录
	"""
	delete_violation_registration_by_pk(id: Bigint!): ViolationRegistration
	"""
	插入
	"""
	insert_violation_registration(objects: [ViolationRegistrationInsertInput!]!): ViolationRegistrationMutationResponse
	"""
	插入一条记录
	"""
	insert_violation_registration_one(objects: ViolationRegistrationInsertInput!): ViolationRegistration
	"""
	更新
	"""
	update_violation_registration(_inc: ViolationRegistrationIncInput, _set: ViolationRegistrationSetInput, where: ViolationRegistrationBoolExp!): ViolationRegistrationMutationResponse
	"""
	更新
	"""
	update_violation_registration_by_pk(_inc: ViolationRegistrationIncInput, _set: ViolationRegistrationSetInput, id: Bigint!): ViolationRegistration
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_app_enforcement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AppEnforcementBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNAppEnforcementBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_app_enforcement_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_deduction_report_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DeductionReportBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDeductionReportBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_deduction_report_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_peccancy_check_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverPeccancyCheckBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDriverPeccancyCheckBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_peccancy_check_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_illegal_photo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.IllegalPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNIllegalPhotoBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_illegal_photo_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_regional_violation_register_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RegionalViolationRegisterBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNRegionalViolationRegisterBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_regional_violation_register_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_serious_traffic_violation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SeriousTrafficViolationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNSeriousTrafficViolationBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_serious_traffic_violation_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_violation_details_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleViolationDetailsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVehicleViolationDetailsBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_violation_details_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_violation_scoring_items_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleViolationScoringItemsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVehicleViolationScoringItemsBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_violation_scoring_items_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_violation_scoring_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleViolationScoringRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVehicleViolationScoringRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_violation_scoring_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vio_codewfdm_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VioCodewfdmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVioCodewfdmBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vio_codewfdm_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_violation_registration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ViolationRegistrationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNViolationRegistrationBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_violation_registration_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_app_enforcement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AppEnforcementInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNAppEnforcementInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_app_enforcement_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AppEnforcementInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNAppEnforcementInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_deduction_report_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DeductionReportInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDeductionReportInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_deduction_report_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DeductionReportInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDeductionReportInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_peccancy_check_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DriverPeccancyCheckInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDriverPeccancyCheckInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_peccancy_check_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverPeccancyCheckInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDriverPeccancyCheckInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_illegal_photo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.IllegalPhotoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNIllegalPhotoInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_illegal_photo_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.IllegalPhotoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNIllegalPhotoInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_regional_violation_register_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.RegionalViolationRegisterInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNRegionalViolationRegisterInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_regional_violation_register_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RegionalViolationRegisterInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNRegionalViolationRegisterInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_serious_traffic_violation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.SeriousTrafficViolationInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNSeriousTrafficViolationInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_serious_traffic_violation_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SeriousTrafficViolationInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNSeriousTrafficViolationInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_violation_details_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleViolationDetailsInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleViolationDetailsInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_violation_details_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleViolationDetailsInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleViolationDetailsInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_violation_scoring_items_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleViolationScoringItemsInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleViolationScoringItemsInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_violation_scoring_items_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleViolationScoringItemsInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleViolationScoringItemsInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_violation_scoring_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleViolationScoringRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleViolationScoringRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_violation_scoring_record_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleViolationScoringRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleViolationScoringRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vio_codewfdm_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VioCodewfdmInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVioCodewfdmInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vio_codewfdm_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VioCodewfdmInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVioCodewfdmInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_violation_registration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.ViolationRegistrationInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNViolationRegistrationInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_violation_registration_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ViolationRegistrationInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNViolationRegistrationInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_update_app_enforcement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AppEnforcementIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOAppEnforcementIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.AppEnforcementSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOAppEnforcementSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.AppEnforcementBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNAppEnforcementBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_app_enforcement_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AppEnforcementIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOAppEnforcementIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.AppEnforcementSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOAppEnforcementSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_deduction_report_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DeductionReportIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODeductionReportIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DeductionReportSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODeductionReportSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DeductionReportBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDeductionReportBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_deduction_report_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DeductionReportIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODeductionReportIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DeductionReportSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODeductionReportSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_peccancy_check_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverPeccancyCheckIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverPeccancyCheckIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverPeccancyCheckSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverPeccancyCheckSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DriverPeccancyCheckBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDriverPeccancyCheckBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_peccancy_check_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverPeccancyCheckIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverPeccancyCheckIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverPeccancyCheckSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverPeccancyCheckSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_illegal_photo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.IllegalPhotoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOIllegalPhotoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.IllegalPhotoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOIllegalPhotoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.IllegalPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNIllegalPhotoBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_illegal_photo_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.IllegalPhotoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOIllegalPhotoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.IllegalPhotoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOIllegalPhotoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_regional_violation_register_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RegionalViolationRegisterIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalORegionalViolationRegisterIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.RegionalViolationRegisterSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalORegionalViolationRegisterSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.RegionalViolationRegisterBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNRegionalViolationRegisterBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_regional_violation_register_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RegionalViolationRegisterIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalORegionalViolationRegisterIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.RegionalViolationRegisterSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalORegionalViolationRegisterSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_serious_traffic_violation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SeriousTrafficViolationIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOSeriousTrafficViolationIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SeriousTrafficViolationSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOSeriousTrafficViolationSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.SeriousTrafficViolationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNSeriousTrafficViolationBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_serious_traffic_violation_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SeriousTrafficViolationIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOSeriousTrafficViolationIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SeriousTrafficViolationSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOSeriousTrafficViolationSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_violation_details_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleViolationDetailsIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleViolationDetailsIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleViolationDetailsSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleViolationDetailsSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleViolationDetailsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVehicleViolationDetailsBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_violation_details_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleViolationDetailsIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleViolationDetailsIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleViolationDetailsSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleViolationDetailsSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_violation_scoring_items_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleViolationScoringItemsIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleViolationScoringItemsIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleViolationScoringItemsSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleViolationScoringItemsSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleViolationScoringItemsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVehicleViolationScoringItemsBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_violation_scoring_items_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleViolationScoringItemsIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleViolationScoringItemsIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleViolationScoringItemsSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleViolationScoringItemsSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_violation_scoring_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleViolationScoringRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleViolationScoringRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleViolationScoringRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleViolationScoringRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleViolationScoringRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVehicleViolationScoringRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_violation_scoring_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleViolationScoringRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleViolationScoringRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleViolationScoringRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleViolationScoringRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vio_codewfdm_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VioCodewfdmIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVioCodewfdmIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VioCodewfdmSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVioCodewfdmSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VioCodewfdmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVioCodewfdmBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vio_codewfdm_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VioCodewfdmIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVioCodewfdmIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VioCodewfdmSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVioCodewfdmSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_violation_registration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ViolationRegistrationIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOViolationRegistrationIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ViolationRegistrationSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOViolationRegistrationSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.ViolationRegistrationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNViolationRegistrationBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_violation_registration_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ViolationRegistrationIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOViolationRegistrationIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ViolationRegistrationSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOViolationRegistrationSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_app_enforcement_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AppEnforcementSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOAppEnforcementSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AppEnforcementOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOAppEnforcementOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AppEnforcementBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOAppEnforcementBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_app_enforcement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AppEnforcementSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOAppEnforcementSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AppEnforcementOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOAppEnforcementOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AppEnforcementBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOAppEnforcementBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_app_enforcement_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_deduction_report_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DeductionReportSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODeductionReportSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DeductionReportOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODeductionReportOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DeductionReportBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODeductionReportBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_deduction_report_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DeductionReportSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODeductionReportSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DeductionReportOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODeductionReportOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DeductionReportBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODeductionReportBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_deduction_report_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driver_peccancy_check_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverPeccancyCheckSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODriverPeccancyCheckSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverPeccancyCheckOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODriverPeccancyCheckOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverPeccancyCheckBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODriverPeccancyCheckBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_peccancy_check_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverPeccancyCheckSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODriverPeccancyCheckSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverPeccancyCheckOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODriverPeccancyCheckOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverPeccancyCheckBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODriverPeccancyCheckBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_peccancy_check_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_illegal_photo_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.IllegalPhotoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOIllegalPhotoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.IllegalPhotoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOIllegalPhotoOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.IllegalPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOIllegalPhotoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_illegal_photo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.IllegalPhotoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOIllegalPhotoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.IllegalPhotoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOIllegalPhotoOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.IllegalPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOIllegalPhotoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_illegal_photo_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_regional_violation_register_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RegionalViolationRegisterSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalORegionalViolationRegisterSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.RegionalViolationRegisterOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalORegionalViolationRegisterOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.RegionalViolationRegisterBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalORegionalViolationRegisterBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_regional_violation_register_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RegionalViolationRegisterSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalORegionalViolationRegisterSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.RegionalViolationRegisterOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalORegionalViolationRegisterOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.RegionalViolationRegisterBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalORegionalViolationRegisterBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_regional_violation_register_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_serious_traffic_violation_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SeriousTrafficViolationSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOSeriousTrafficViolationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.SeriousTrafficViolationOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOSeriousTrafficViolationOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.SeriousTrafficViolationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOSeriousTrafficViolationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_serious_traffic_violation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SeriousTrafficViolationSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOSeriousTrafficViolationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.SeriousTrafficViolationOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOSeriousTrafficViolationOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.SeriousTrafficViolationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOSeriousTrafficViolationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_serious_traffic_violation_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_violation_details_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationDetailsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleViolationDetailsSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleViolationDetailsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleViolationDetailsOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleViolationDetailsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleViolationDetailsBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_violation_details_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationDetailsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleViolationDetailsSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleViolationDetailsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleViolationDetailsOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleViolationDetailsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleViolationDetailsBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_violation_details_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_violation_scoring_items_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationScoringItemsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleViolationScoringItemsSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleViolationScoringItemsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleViolationScoringItemsOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleViolationScoringItemsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleViolationScoringItemsBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_violation_scoring_items_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationScoringItemsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleViolationScoringItemsSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleViolationScoringItemsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleViolationScoringItemsOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleViolationScoringItemsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleViolationScoringItemsBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_violation_scoring_items_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_violation_scoring_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationScoringRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleViolationScoringRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleViolationScoringRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleViolationScoringRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleViolationScoringRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleViolationScoringRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_violation_scoring_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationScoringRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleViolationScoringRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleViolationScoringRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleViolationScoringRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleViolationScoringRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleViolationScoringRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_violation_scoring_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vio_codewfdm_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VioCodewfdmSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVioCodewfdmSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VioCodewfdmOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVioCodewfdmOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VioCodewfdmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVioCodewfdmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vio_codewfdm_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VioCodewfdmSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVioCodewfdmSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VioCodewfdmOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVioCodewfdmOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VioCodewfdmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVioCodewfdmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vio_codewfdm_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_violation_registration_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ViolationRegistrationSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOViolationRegistrationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.ViolationRegistrationOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOViolationRegistrationOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.ViolationRegistrationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOViolationRegistrationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_violation_registration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ViolationRegistrationSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOViolationRegistrationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.ViolationRegistrationOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOViolationRegistrationOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.ViolationRegistrationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOViolationRegistrationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_violation_registration_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AppEnforcement_id(ctx context.Context, field graphql.CollectedField, obj *model1.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcement_illegal_photo_id(ctx context.Context, field graphql.CollectedField, obj *model1.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcement_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcement_operation_user(ctx context.Context, field graphql.CollectedField, obj *model1.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcement_edit_text(ctx context.Context, field graphql.CollectedField, obj *model1.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EditText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcement_coordinate(ctx context.Context, field graphql.CollectedField, obj *model1.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcement_location_description(ctx context.Context, field graphql.CollectedField, obj *model1.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcement_enterprise_type(ctx context.Context, field graphql.CollectedField, obj *model1.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcement_picket_status(ctx context.Context, field graphql.CollectedField, obj *model1.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcement_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcement_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcement_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcement_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcement_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcement_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementAggregateFields)
	fc.Result = res
	return ec.marshalOAppEnforcementAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementAvgFields)
	fc.Result = res
	return ec.marshalOAppEnforcementAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementMaxFields)
	fc.Result = res
	return ec.marshalOAppEnforcementMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementMinFields)
	fc.Result = res
	return ec.marshalOAppEnforcementMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementStddevFields)
	fc.Result = res
	return ec.marshalOAppEnforcementStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementStddevPopFields)
	fc.Result = res
	return ec.marshalOAppEnforcementStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementStddevSampFields)
	fc.Result = res
	return ec.marshalOAppEnforcementStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementSumFields)
	fc.Result = res
	return ec.marshalOAppEnforcementSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementVarPopFields)
	fc.Result = res
	return ec.marshalOAppEnforcementVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementVarSampFields)
	fc.Result = res
	return ec.marshalOAppEnforcementVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementVarianceFields)
	fc.Result = res
	return ec.marshalOAppEnforcementVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementAvgFields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMaxFields_illegal_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMaxFields_operation_user(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMaxFields_edit_text(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EditText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMaxFields_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMaxFields_location_description(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMaxFields_enterprise_type(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMaxFields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMinFields_illegal_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMinFields_operation_user(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMinFields_edit_text(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EditText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMinFields_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMinFields_location_description(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMinFields_enterprise_type(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMinFields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.AppEnforcement)
	fc.Result = res
	return ec.marshalNAppEnforcement2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐAppEnforcementᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementStddevFields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementStddevPopFields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementStddevSampFields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementSumFields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementVarPopFields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementVarSampFields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppEnforcementVarianceFields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppEnforcementVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReport_id(ctx context.Context, field graphql.CollectedField, obj *model1.DeductionReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReport_deduction_report_id(ctx context.Context, field graphql.CollectedField, obj *model1.DeductionReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionReportID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReport_area_id(ctx context.Context, field graphql.CollectedField, obj *model1.DeductionReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReport_date(ctx context.Context, field graphql.CollectedField, obj *model1.DeductionReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReport_cause(ctx context.Context, field graphql.CollectedField, obj *model1.DeductionReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReport_input_person(ctx context.Context, field graphql.CollectedField, obj *model1.DeductionReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReport_input_time(ctx context.Context, field graphql.CollectedField, obj *model1.DeductionReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReport_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model1.DeductionReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReport_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.DeductionReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReport_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.DeductionReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReport_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.DeductionReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReport_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.DeductionReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReport_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.DeductionReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReport_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.DeductionReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeductionReportAggregateFields)
	fc.Result = res
	return ec.marshalODeductionReportAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeductionReportAvgFields)
	fc.Result = res
	return ec.marshalODeductionReportAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeductionReportMaxFields)
	fc.Result = res
	return ec.marshalODeductionReportMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeductionReportMinFields)
	fc.Result = res
	return ec.marshalODeductionReportMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeductionReportStddevFields)
	fc.Result = res
	return ec.marshalODeductionReportStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeductionReportStddevPopFields)
	fc.Result = res
	return ec.marshalODeductionReportStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeductionReportStddevSampFields)
	fc.Result = res
	return ec.marshalODeductionReportStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeductionReportSumFields)
	fc.Result = res
	return ec.marshalODeductionReportSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeductionReportVarPopFields)
	fc.Result = res
	return ec.marshalODeductionReportVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeductionReportVarSampFields)
	fc.Result = res
	return ec.marshalODeductionReportVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeductionReportVarianceFields)
	fc.Result = res
	return ec.marshalODeductionReportVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportAvgFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMaxFields_deduction_report_id(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionReportID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMaxFields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMaxFields_date(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMaxFields_cause(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMaxFields_input_person(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMaxFields_input_time(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMaxFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMinFields_deduction_report_id(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionReportID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMinFields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMinFields_date(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMinFields_cause(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMinFields_input_person(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMinFields_input_time(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMinFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DeductionReport)
	fc.Result = res
	return ec.marshalNDeductionReport2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDeductionReportᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportStddevFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportStddevPopFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportStddevSampFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportSumFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportVarPopFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportVarSampFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DeductionReportVarianceFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.DeductionReportVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeductionReportVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheck_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheck",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheck_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheck",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheck_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheck",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheck_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheck",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheck_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheck",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheck_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheck",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheck_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheck",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheck_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheck",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheck_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheck",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheck_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheck",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckAggregateFields)
	fc.Result = res
	return ec.marshalODriverPeccancyCheckAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckAvgFields)
	fc.Result = res
	return ec.marshalODriverPeccancyCheckAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckMaxFields)
	fc.Result = res
	return ec.marshalODriverPeccancyCheckMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckMinFields)
	fc.Result = res
	return ec.marshalODriverPeccancyCheckMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckStddevFields)
	fc.Result = res
	return ec.marshalODriverPeccancyCheckStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckStddevPopFields)
	fc.Result = res
	return ec.marshalODriverPeccancyCheckStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckStddevSampFields)
	fc.Result = res
	return ec.marshalODriverPeccancyCheckStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckSumFields)
	fc.Result = res
	return ec.marshalODriverPeccancyCheckSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckVarPopFields)
	fc.Result = res
	return ec.marshalODriverPeccancyCheckVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckVarSampFields)
	fc.Result = res
	return ec.marshalODriverPeccancyCheckVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckVarianceFields)
	fc.Result = res
	return ec.marshalODriverPeccancyCheckVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMaxFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMinFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DriverPeccancyCheck)
	fc.Result = res
	return ec.marshalNDriverPeccancyCheck2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDriverPeccancyCheckᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverPeccancyCheckVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverPeccancyCheckVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhoto_id(ctx context.Context, field graphql.CollectedField, obj *model1.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhoto_illegal_photo_id(ctx context.Context, field graphql.CollectedField, obj *model1.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhoto_picture_name(ctx context.Context, field graphql.CollectedField, obj *model1.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhoto_picture_address(ctx context.Context, field graphql.CollectedField, obj *model1.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhoto_is_synchronized(ctx context.Context, field graphql.CollectedField, obj *model1.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSynchronized, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhoto_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhoto_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhoto_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhoto_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhoto_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhoto_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhoto_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoAggregateFields)
	fc.Result = res
	return ec.marshalOIllegalPhotoAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoAvgFields)
	fc.Result = res
	return ec.marshalOIllegalPhotoAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoMaxFields)
	fc.Result = res
	return ec.marshalOIllegalPhotoMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoMinFields)
	fc.Result = res
	return ec.marshalOIllegalPhotoMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoStddevFields)
	fc.Result = res
	return ec.marshalOIllegalPhotoStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoStddevPopFields)
	fc.Result = res
	return ec.marshalOIllegalPhotoStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoStddevSampFields)
	fc.Result = res
	return ec.marshalOIllegalPhotoStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoSumFields)
	fc.Result = res
	return ec.marshalOIllegalPhotoSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoVarPopFields)
	fc.Result = res
	return ec.marshalOIllegalPhotoVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoVarSampFields)
	fc.Result = res
	return ec.marshalOIllegalPhotoVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoVarianceFields)
	fc.Result = res
	return ec.marshalOIllegalPhotoVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMaxFields_illegal_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMaxFields_picture_name(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMaxFields_picture_address(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMaxFields_is_synchronized(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSynchronized, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMinFields_illegal_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMinFields_picture_name(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMinFields_picture_address(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMinFields_is_synchronized(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSynchronized, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.IllegalPhoto)
	fc.Result = res
	return ec.marshalNIllegalPhoto2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐIllegalPhotoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _IllegalPhotoVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IllegalPhotoVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_app_enforcement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_app_enforcement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAppEnforcement(rctx, args["where"].(model.AppEnforcementBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementMutationResponse)
	fc.Result = res
	return ec.marshalOAppEnforcementMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_app_enforcement_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_app_enforcement_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAppEnforcementByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.AppEnforcement)
	fc.Result = res
	return ec.marshalOAppEnforcement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐAppEnforcement(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_app_enforcement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_app_enforcement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertAppEnforcement(rctx, args["objects"].([]*model.AppEnforcementInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementMutationResponse)
	fc.Result = res
	return ec.marshalOAppEnforcementMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_app_enforcement_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_app_enforcement_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertAppEnforcementOne(rctx, args["objects"].(model.AppEnforcementInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.AppEnforcement)
	fc.Result = res
	return ec.marshalOAppEnforcement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐAppEnforcement(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_app_enforcement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_app_enforcement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAppEnforcement(rctx, args["_inc"].(*model.AppEnforcementIncInput), args["_set"].(*model.AppEnforcementSetInput), args["where"].(model.AppEnforcementBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementMutationResponse)
	fc.Result = res
	return ec.marshalOAppEnforcementMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_app_enforcement_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_app_enforcement_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAppEnforcementByPk(rctx, args["_inc"].(*model.AppEnforcementIncInput), args["_set"].(*model.AppEnforcementSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.AppEnforcement)
	fc.Result = res
	return ec.marshalOAppEnforcement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐAppEnforcement(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_deduction_report(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_deduction_report_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDeductionReport(rctx, args["where"].(model.DeductionReportBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeductionReportMutationResponse)
	fc.Result = res
	return ec.marshalODeductionReportMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_deduction_report_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_deduction_report_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDeductionReportByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DeductionReport)
	fc.Result = res
	return ec.marshalODeductionReport2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDeductionReport(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_deduction_report(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_deduction_report_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDeductionReport(rctx, args["objects"].([]*model.DeductionReportInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeductionReportMutationResponse)
	fc.Result = res
	return ec.marshalODeductionReportMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_deduction_report_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_deduction_report_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDeductionReportOne(rctx, args["objects"].(model.DeductionReportInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DeductionReport)
	fc.Result = res
	return ec.marshalODeductionReport2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDeductionReport(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_deduction_report(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_deduction_report_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDeductionReport(rctx, args["_inc"].(*model.DeductionReportIncInput), args["_set"].(*model.DeductionReportSetInput), args["where"].(model.DeductionReportBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeductionReportMutationResponse)
	fc.Result = res
	return ec.marshalODeductionReportMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_deduction_report_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_deduction_report_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDeductionReportByPk(rctx, args["_inc"].(*model.DeductionReportIncInput), args["_set"].(*model.DeductionReportSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DeductionReport)
	fc.Result = res
	return ec.marshalODeductionReport2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDeductionReport(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_peccancy_check(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_peccancy_check_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverPeccancyCheck(rctx, args["where"].(model.DriverPeccancyCheckBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckMutationResponse)
	fc.Result = res
	return ec.marshalODriverPeccancyCheckMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_peccancy_check_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_peccancy_check_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverPeccancyCheckByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverPeccancyCheck)
	fc.Result = res
	return ec.marshalODriverPeccancyCheck2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDriverPeccancyCheck(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_peccancy_check(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_peccancy_check_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverPeccancyCheck(rctx, args["objects"].([]*model.DriverPeccancyCheckInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckMutationResponse)
	fc.Result = res
	return ec.marshalODriverPeccancyCheckMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_peccancy_check_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_peccancy_check_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverPeccancyCheckOne(rctx, args["objects"].(model.DriverPeccancyCheckInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverPeccancyCheck)
	fc.Result = res
	return ec.marshalODriverPeccancyCheck2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDriverPeccancyCheck(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_peccancy_check(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_peccancy_check_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverPeccancyCheck(rctx, args["_inc"].(*model.DriverPeccancyCheckIncInput), args["_set"].(*model.DriverPeccancyCheckSetInput), args["where"].(model.DriverPeccancyCheckBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckMutationResponse)
	fc.Result = res
	return ec.marshalODriverPeccancyCheckMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_peccancy_check_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_peccancy_check_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverPeccancyCheckByPk(rctx, args["_inc"].(*model.DriverPeccancyCheckIncInput), args["_set"].(*model.DriverPeccancyCheckSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverPeccancyCheck)
	fc.Result = res
	return ec.marshalODriverPeccancyCheck2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDriverPeccancyCheck(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_illegal_photo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_illegal_photo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteIllegalPhoto(rctx, args["where"].(model.IllegalPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoMutationResponse)
	fc.Result = res
	return ec.marshalOIllegalPhotoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_illegal_photo_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_illegal_photo_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteIllegalPhotoByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.IllegalPhoto)
	fc.Result = res
	return ec.marshalOIllegalPhoto2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐIllegalPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_illegal_photo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_illegal_photo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertIllegalPhoto(rctx, args["objects"].([]*model.IllegalPhotoInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoMutationResponse)
	fc.Result = res
	return ec.marshalOIllegalPhotoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_illegal_photo_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_illegal_photo_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertIllegalPhotoOne(rctx, args["objects"].(model.IllegalPhotoInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.IllegalPhoto)
	fc.Result = res
	return ec.marshalOIllegalPhoto2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐIllegalPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_illegal_photo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_illegal_photo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIllegalPhoto(rctx, args["_inc"].(*model.IllegalPhotoIncInput), args["_set"].(*model.IllegalPhotoSetInput), args["where"].(model.IllegalPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoMutationResponse)
	fc.Result = res
	return ec.marshalOIllegalPhotoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_illegal_photo_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_illegal_photo_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIllegalPhotoByPk(rctx, args["_inc"].(*model.IllegalPhotoIncInput), args["_set"].(*model.IllegalPhotoSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.IllegalPhoto)
	fc.Result = res
	return ec.marshalOIllegalPhoto2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐIllegalPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_regional_violation_register(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_regional_violation_register_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRegionalViolationRegister(rctx, args["where"].(model.RegionalViolationRegisterBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterMutationResponse)
	fc.Result = res
	return ec.marshalORegionalViolationRegisterMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_regional_violation_register_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_regional_violation_register_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRegionalViolationRegisterByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RegionalViolationRegister)
	fc.Result = res
	return ec.marshalORegionalViolationRegister2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐRegionalViolationRegister(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_regional_violation_register(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_regional_violation_register_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertRegionalViolationRegister(rctx, args["objects"].([]*model.RegionalViolationRegisterInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterMutationResponse)
	fc.Result = res
	return ec.marshalORegionalViolationRegisterMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_regional_violation_register_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_regional_violation_register_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertRegionalViolationRegisterOne(rctx, args["objects"].(model.RegionalViolationRegisterInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RegionalViolationRegister)
	fc.Result = res
	return ec.marshalORegionalViolationRegister2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐRegionalViolationRegister(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_regional_violation_register(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_regional_violation_register_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRegionalViolationRegister(rctx, args["_inc"].(*model.RegionalViolationRegisterIncInput), args["_set"].(*model.RegionalViolationRegisterSetInput), args["where"].(model.RegionalViolationRegisterBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterMutationResponse)
	fc.Result = res
	return ec.marshalORegionalViolationRegisterMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_regional_violation_register_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_regional_violation_register_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRegionalViolationRegisterByPk(rctx, args["_inc"].(*model.RegionalViolationRegisterIncInput), args["_set"].(*model.RegionalViolationRegisterSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RegionalViolationRegister)
	fc.Result = res
	return ec.marshalORegionalViolationRegister2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐRegionalViolationRegister(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_serious_traffic_violation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_serious_traffic_violation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSeriousTrafficViolation(rctx, args["where"].(model.SeriousTrafficViolationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SeriousTrafficViolationMutationResponse)
	fc.Result = res
	return ec.marshalOSeriousTrafficViolationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_serious_traffic_violation_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_serious_traffic_violation_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSeriousTrafficViolationByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SeriousTrafficViolation)
	fc.Result = res
	return ec.marshalOSeriousTrafficViolation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐSeriousTrafficViolation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_serious_traffic_violation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_serious_traffic_violation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertSeriousTrafficViolation(rctx, args["objects"].([]*model.SeriousTrafficViolationInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SeriousTrafficViolationMutationResponse)
	fc.Result = res
	return ec.marshalOSeriousTrafficViolationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_serious_traffic_violation_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_serious_traffic_violation_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertSeriousTrafficViolationOne(rctx, args["objects"].(model.SeriousTrafficViolationInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SeriousTrafficViolation)
	fc.Result = res
	return ec.marshalOSeriousTrafficViolation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐSeriousTrafficViolation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_serious_traffic_violation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_serious_traffic_violation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSeriousTrafficViolation(rctx, args["_inc"].(*model.SeriousTrafficViolationIncInput), args["_set"].(*model.SeriousTrafficViolationSetInput), args["where"].(model.SeriousTrafficViolationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SeriousTrafficViolationMutationResponse)
	fc.Result = res
	return ec.marshalOSeriousTrafficViolationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_serious_traffic_violation_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_serious_traffic_violation_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSeriousTrafficViolationByPk(rctx, args["_inc"].(*model.SeriousTrafficViolationIncInput), args["_set"].(*model.SeriousTrafficViolationSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SeriousTrafficViolation)
	fc.Result = res
	return ec.marshalOSeriousTrafficViolation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐSeriousTrafficViolation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_violation_details(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_violation_details_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleViolationDetails(rctx, args["where"].(model.VehicleViolationDetailsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleViolationDetailsMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_violation_details_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_violation_details_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleViolationDetailsByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleViolationDetails)
	fc.Result = res
	return ec.marshalOVehicleViolationDetails2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_violation_details(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_violation_details_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleViolationDetails(rctx, args["objects"].([]*model.VehicleViolationDetailsInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleViolationDetailsMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_violation_details_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_violation_details_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleViolationDetailsOne(rctx, args["objects"].(model.VehicleViolationDetailsInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleViolationDetails)
	fc.Result = res
	return ec.marshalOVehicleViolationDetails2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_violation_details(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_violation_details_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleViolationDetails(rctx, args["_inc"].(*model.VehicleViolationDetailsIncInput), args["_set"].(*model.VehicleViolationDetailsSetInput), args["where"].(model.VehicleViolationDetailsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleViolationDetailsMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_violation_details_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_violation_details_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleViolationDetailsByPk(rctx, args["_inc"].(*model.VehicleViolationDetailsIncInput), args["_set"].(*model.VehicleViolationDetailsSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleViolationDetails)
	fc.Result = res
	return ec.marshalOVehicleViolationDetails2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_violation_scoring_items(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_violation_scoring_items_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleViolationScoringItems(rctx, args["where"].(model.VehicleViolationScoringItemsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringItemsMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_violation_scoring_items_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_violation_scoring_items_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleViolationScoringItemsByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleViolationScoringItems)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringItems2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringItems(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_violation_scoring_items(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_violation_scoring_items_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleViolationScoringItems(rctx, args["objects"].([]*model.VehicleViolationScoringItemsInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringItemsMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_violation_scoring_items_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_violation_scoring_items_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleViolationScoringItemsOne(rctx, args["objects"].(model.VehicleViolationScoringItemsInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleViolationScoringItems)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringItems2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringItems(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_violation_scoring_items(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_violation_scoring_items_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleViolationScoringItems(rctx, args["_inc"].(*model.VehicleViolationScoringItemsIncInput), args["_set"].(*model.VehicleViolationScoringItemsSetInput), args["where"].(model.VehicleViolationScoringItemsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringItemsMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_violation_scoring_items_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_violation_scoring_items_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleViolationScoringItemsByPk(rctx, args["_inc"].(*model.VehicleViolationScoringItemsIncInput), args["_set"].(*model.VehicleViolationScoringItemsSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleViolationScoringItems)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringItems2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringItems(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_violation_scoring_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_violation_scoring_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleViolationScoringRecord(rctx, args["where"].(model.VehicleViolationScoringRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_violation_scoring_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_violation_scoring_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleViolationScoringRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleViolationScoringRecord)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_violation_scoring_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_violation_scoring_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleViolationScoringRecord(rctx, args["objects"].([]*model.VehicleViolationScoringRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_violation_scoring_record_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_violation_scoring_record_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleViolationScoringRecordOne(rctx, args["objects"].(model.VehicleViolationScoringRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleViolationScoringRecord)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_violation_scoring_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_violation_scoring_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleViolationScoringRecord(rctx, args["_inc"].(*model.VehicleViolationScoringRecordIncInput), args["_set"].(*model.VehicleViolationScoringRecordSetInput), args["where"].(model.VehicleViolationScoringRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_violation_scoring_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_violation_scoring_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleViolationScoringRecordByPk(rctx, args["_inc"].(*model.VehicleViolationScoringRecordIncInput), args["_set"].(*model.VehicleViolationScoringRecordSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleViolationScoringRecord)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vio_codewfdm(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vio_codewfdm_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVioCodewfdm(rctx, args["where"].(model.VioCodewfdmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmMutationResponse)
	fc.Result = res
	return ec.marshalOVioCodewfdmMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vio_codewfdm_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vio_codewfdm_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVioCodewfdmByPk(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VioCodewfdm)
	fc.Result = res
	return ec.marshalOVioCodewfdm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVioCodewfdm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vio_codewfdm(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vio_codewfdm_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVioCodewfdm(rctx, args["objects"].([]*model.VioCodewfdmInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmMutationResponse)
	fc.Result = res
	return ec.marshalOVioCodewfdmMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vio_codewfdm_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vio_codewfdm_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVioCodewfdmOne(rctx, args["objects"].(model.VioCodewfdmInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VioCodewfdm)
	fc.Result = res
	return ec.marshalOVioCodewfdm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVioCodewfdm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vio_codewfdm(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vio_codewfdm_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVioCodewfdm(rctx, args["_inc"].(*model.VioCodewfdmIncInput), args["_set"].(*model.VioCodewfdmSetInput), args["where"].(model.VioCodewfdmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmMutationResponse)
	fc.Result = res
	return ec.marshalOVioCodewfdmMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vio_codewfdm_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vio_codewfdm_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVioCodewfdmByPk(rctx, args["_inc"].(*model.VioCodewfdmIncInput), args["_set"].(*model.VioCodewfdmSetInput), args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VioCodewfdm)
	fc.Result = res
	return ec.marshalOVioCodewfdm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVioCodewfdm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_violation_registration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_violation_registration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteViolationRegistration(rctx, args["where"].(model.ViolationRegistrationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ViolationRegistrationMutationResponse)
	fc.Result = res
	return ec.marshalOViolationRegistrationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_violation_registration_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_violation_registration_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteViolationRegistrationByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ViolationRegistration)
	fc.Result = res
	return ec.marshalOViolationRegistration2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐViolationRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_violation_registration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_violation_registration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertViolationRegistration(rctx, args["objects"].([]*model.ViolationRegistrationInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ViolationRegistrationMutationResponse)
	fc.Result = res
	return ec.marshalOViolationRegistrationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_violation_registration_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_violation_registration_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertViolationRegistrationOne(rctx, args["objects"].(model.ViolationRegistrationInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ViolationRegistration)
	fc.Result = res
	return ec.marshalOViolationRegistration2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐViolationRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_violation_registration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_violation_registration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateViolationRegistration(rctx, args["_inc"].(*model.ViolationRegistrationIncInput), args["_set"].(*model.ViolationRegistrationSetInput), args["where"].(model.ViolationRegistrationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ViolationRegistrationMutationResponse)
	fc.Result = res
	return ec.marshalOViolationRegistrationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_violation_registration_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_violation_registration_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateViolationRegistrationByPk(rctx, args["_inc"].(*model.ViolationRegistrationIncInput), args["_set"].(*model.ViolationRegistrationSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ViolationRegistration)
	fc.Result = res
	return ec.marshalOViolationRegistration2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐViolationRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_app_enforcement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_app_enforcement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AppEnforcement(rctx, args["distinct_on"].([]model.AppEnforcementSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AppEnforcementOrderBy), args["where"].(*model.AppEnforcementBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.AppEnforcement)
	fc.Result = res
	return ec.marshalNAppEnforcement2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐAppEnforcementᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_app_enforcement_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_app_enforcement_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AppEnforcementAggregate(rctx, args["distinct_on"].([]model.AppEnforcementSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AppEnforcementOrderBy), args["where"].(*model.AppEnforcementBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementAggregate)
	fc.Result = res
	return ec.marshalNAppEnforcementAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_app_enforcement_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_app_enforcement_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AppEnforcementByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.AppEnforcement)
	fc.Result = res
	return ec.marshalNAppEnforcement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐAppEnforcement(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_deduction_report(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_deduction_report_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeductionReport(rctx, args["distinct_on"].([]model.DeductionReportSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DeductionReportOrderBy), args["where"].(*model.DeductionReportBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DeductionReport)
	fc.Result = res
	return ec.marshalNDeductionReport2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDeductionReportᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_deduction_report_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_deduction_report_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeductionReportAggregate(rctx, args["distinct_on"].([]model.DeductionReportSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DeductionReportOrderBy), args["where"].(*model.DeductionReportBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeductionReportAggregate)
	fc.Result = res
	return ec.marshalNDeductionReportAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_deduction_report_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_deduction_report_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeductionReportByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DeductionReport)
	fc.Result = res
	return ec.marshalNDeductionReport2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDeductionReport(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_peccancy_check(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_peccancy_check_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverPeccancyCheck(rctx, args["distinct_on"].([]model.DriverPeccancyCheckSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverPeccancyCheckOrderBy), args["where"].(*model.DriverPeccancyCheckBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DriverPeccancyCheck)
	fc.Result = res
	return ec.marshalNDriverPeccancyCheck2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDriverPeccancyCheckᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_peccancy_check_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_peccancy_check_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverPeccancyCheckAggregate(rctx, args["distinct_on"].([]model.DriverPeccancyCheckSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverPeccancyCheckOrderBy), args["where"].(*model.DriverPeccancyCheckBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckAggregate)
	fc.Result = res
	return ec.marshalNDriverPeccancyCheckAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_peccancy_check_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_peccancy_check_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverPeccancyCheckByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DriverPeccancyCheck)
	fc.Result = res
	return ec.marshalNDriverPeccancyCheck2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDriverPeccancyCheck(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_illegal_photo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_illegal_photo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IllegalPhoto(rctx, args["distinct_on"].([]model.IllegalPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.IllegalPhotoOrderBy), args["where"].(*model.IllegalPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.IllegalPhoto)
	fc.Result = res
	return ec.marshalNIllegalPhoto2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐIllegalPhotoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_illegal_photo_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_illegal_photo_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IllegalPhotoAggregate(rctx, args["distinct_on"].([]model.IllegalPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.IllegalPhotoOrderBy), args["where"].(*model.IllegalPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoAggregate)
	fc.Result = res
	return ec.marshalNIllegalPhotoAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_illegal_photo_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_illegal_photo_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IllegalPhotoByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.IllegalPhoto)
	fc.Result = res
	return ec.marshalNIllegalPhoto2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐIllegalPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_regional_violation_register(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_regional_violation_register_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RegionalViolationRegister(rctx, args["distinct_on"].([]model.RegionalViolationRegisterSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionalViolationRegisterOrderBy), args["where"].(*model.RegionalViolationRegisterBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.RegionalViolationRegister)
	fc.Result = res
	return ec.marshalNRegionalViolationRegister2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐRegionalViolationRegisterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_regional_violation_register_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_regional_violation_register_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RegionalViolationRegisterAggregate(rctx, args["distinct_on"].([]model.RegionalViolationRegisterSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionalViolationRegisterOrderBy), args["where"].(*model.RegionalViolationRegisterBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterAggregate)
	fc.Result = res
	return ec.marshalNRegionalViolationRegisterAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_regional_violation_register_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_regional_violation_register_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RegionalViolationRegisterByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.RegionalViolationRegister)
	fc.Result = res
	return ec.marshalNRegionalViolationRegister2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐRegionalViolationRegister(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_serious_traffic_violation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_serious_traffic_violation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SeriousTrafficViolation(rctx, args["distinct_on"].([]model.SeriousTrafficViolationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SeriousTrafficViolationOrderBy), args["where"].(*model.SeriousTrafficViolationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SeriousTrafficViolation)
	fc.Result = res
	return ec.marshalNSeriousTrafficViolation2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐSeriousTrafficViolationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_serious_traffic_violation_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_serious_traffic_violation_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SeriousTrafficViolationAggregate(rctx, args["distinct_on"].([]model.SeriousTrafficViolationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SeriousTrafficViolationOrderBy), args["where"].(*model.SeriousTrafficViolationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SeriousTrafficViolationAggregate)
	fc.Result = res
	return ec.marshalNSeriousTrafficViolationAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_serious_traffic_violation_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_serious_traffic_violation_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SeriousTrafficViolationByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.SeriousTrafficViolation)
	fc.Result = res
	return ec.marshalNSeriousTrafficViolation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐSeriousTrafficViolation(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_violation_details(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_violation_details_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleViolationDetails(rctx, args["distinct_on"].([]model.VehicleViolationDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationDetailsOrderBy), args["where"].(*model.VehicleViolationDetailsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleViolationDetails)
	fc.Result = res
	return ec.marshalNVehicleViolationDetails2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationDetailsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_violation_details_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_violation_details_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleViolationDetailsAggregate(rctx, args["distinct_on"].([]model.VehicleViolationDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationDetailsOrderBy), args["where"].(*model.VehicleViolationDetailsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsAggregate)
	fc.Result = res
	return ec.marshalNVehicleViolationDetailsAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_violation_details_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_violation_details_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleViolationDetailsByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleViolationDetails)
	fc.Result = res
	return ec.marshalNVehicleViolationDetails2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_violation_scoring_items(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_violation_scoring_items_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleViolationScoringItems(rctx, args["distinct_on"].([]model.VehicleViolationScoringItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringItemsOrderBy), args["where"].(*model.VehicleViolationScoringItemsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleViolationScoringItems)
	fc.Result = res
	return ec.marshalNVehicleViolationScoringItems2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringItemsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_violation_scoring_items_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_violation_scoring_items_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleViolationScoringItemsAggregate(rctx, args["distinct_on"].([]model.VehicleViolationScoringItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringItemsOrderBy), args["where"].(*model.VehicleViolationScoringItemsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsAggregate)
	fc.Result = res
	return ec.marshalNVehicleViolationScoringItemsAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_violation_scoring_items_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_violation_scoring_items_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleViolationScoringItemsByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleViolationScoringItems)
	fc.Result = res
	return ec.marshalNVehicleViolationScoringItems2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringItems(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_violation_scoring_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_violation_scoring_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleViolationScoringRecord(rctx, args["distinct_on"].([]model.VehicleViolationScoringRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringRecordOrderBy), args["where"].(*model.VehicleViolationScoringRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleViolationScoringRecord)
	fc.Result = res
	return ec.marshalNVehicleViolationScoringRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_violation_scoring_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_violation_scoring_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleViolationScoringRecordAggregate(rctx, args["distinct_on"].([]model.VehicleViolationScoringRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringRecordOrderBy), args["where"].(*model.VehicleViolationScoringRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordAggregate)
	fc.Result = res
	return ec.marshalNVehicleViolationScoringRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_violation_scoring_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_violation_scoring_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleViolationScoringRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleViolationScoringRecord)
	fc.Result = res
	return ec.marshalNVehicleViolationScoringRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vio_codewfdm(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vio_codewfdm_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VioCodewfdm(rctx, args["distinct_on"].([]model.VioCodewfdmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VioCodewfdmOrderBy), args["where"].(*model.VioCodewfdmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VioCodewfdm)
	fc.Result = res
	return ec.marshalNVioCodewfdm2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVioCodewfdmᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vio_codewfdm_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vio_codewfdm_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VioCodewfdmAggregate(rctx, args["distinct_on"].([]model.VioCodewfdmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VioCodewfdmOrderBy), args["where"].(*model.VioCodewfdmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmAggregate)
	fc.Result = res
	return ec.marshalNVioCodewfdmAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vio_codewfdm_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vio_codewfdm_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VioCodewfdmByPk(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VioCodewfdm)
	fc.Result = res
	return ec.marshalNVioCodewfdm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVioCodewfdm(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_violation_registration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_violation_registration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ViolationRegistration(rctx, args["distinct_on"].([]model.ViolationRegistrationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ViolationRegistrationOrderBy), args["where"].(*model.ViolationRegistrationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.ViolationRegistration)
	fc.Result = res
	return ec.marshalNViolationRegistration2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐViolationRegistrationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_violation_registration_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_violation_registration_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ViolationRegistrationAggregate(rctx, args["distinct_on"].([]model.ViolationRegistrationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ViolationRegistrationOrderBy), args["where"].(*model.ViolationRegistrationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ViolationRegistrationAggregate)
	fc.Result = res
	return ec.marshalNViolationRegistrationAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_violation_registration_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_violation_registration_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ViolationRegistrationByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.ViolationRegistration)
	fc.Result = res
	return ec.marshalNViolationRegistration2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐViolationRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_id(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_regional_violation_register_id(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionalViolationRegisterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_register_time(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_processing_agency(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_operator(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_is_register(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRegister, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegister_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegister",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterAggregateFields)
	fc.Result = res
	return ec.marshalORegionalViolationRegisterAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterAvgFields)
	fc.Result = res
	return ec.marshalORegionalViolationRegisterAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterMaxFields)
	fc.Result = res
	return ec.marshalORegionalViolationRegisterMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterMinFields)
	fc.Result = res
	return ec.marshalORegionalViolationRegisterMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterStddevFields)
	fc.Result = res
	return ec.marshalORegionalViolationRegisterStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterStddevPopFields)
	fc.Result = res
	return ec.marshalORegionalViolationRegisterStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterStddevSampFields)
	fc.Result = res
	return ec.marshalORegionalViolationRegisterStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterSumFields)
	fc.Result = res
	return ec.marshalORegionalViolationRegisterSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterVarPopFields)
	fc.Result = res
	return ec.marshalORegionalViolationRegisterVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterVarSampFields)
	fc.Result = res
	return ec.marshalORegionalViolationRegisterVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterVarianceFields)
	fc.Result = res
	return ec.marshalORegionalViolationRegisterVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterAvgFields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterAvgFields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_regional_violation_register_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionalViolationRegisterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_register_time(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_processing_agency(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_operator(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_is_register(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRegister, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_regional_violation_register_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionalViolationRegisterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_register_time(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_processing_agency(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_operator(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_is_register(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRegister, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.RegionalViolationRegister)
	fc.Result = res
	return ec.marshalNRegionalViolationRegister2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐRegionalViolationRegisterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterStddevFields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterStddevFields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterStddevPopFields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterStddevPopFields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterStddevSampFields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterStddevSampFields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterSumFields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterSumFields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterVarPopFields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterVarPopFields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterVarSampFields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterVarSampFields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterVarianceFields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionalViolationRegisterVarianceFields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionalViolationRegisterVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolation_id(ctx context.Context, field graphql.CollectedField, obj *model1.SeriousTrafficViolation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolation_serious_traffic_violation_id(ctx context.Context, field graphql.CollectedField, obj *model1.SeriousTrafficViolation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeriousTrafficViolationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolation_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.SeriousTrafficViolation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolation_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model1.SeriousTrafficViolation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolation_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model1.SeriousTrafficViolation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolation_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.SeriousTrafficViolation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolation_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.SeriousTrafficViolation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolation_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.SeriousTrafficViolation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolation_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.SeriousTrafficViolation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolation_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.SeriousTrafficViolation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolation_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.SeriousTrafficViolation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SeriousTrafficViolationAggregateFields)
	fc.Result = res
	return ec.marshalOSeriousTrafficViolationAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SeriousTrafficViolationAvgFields)
	fc.Result = res
	return ec.marshalOSeriousTrafficViolationAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SeriousTrafficViolationMaxFields)
	fc.Result = res
	return ec.marshalOSeriousTrafficViolationMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SeriousTrafficViolationMinFields)
	fc.Result = res
	return ec.marshalOSeriousTrafficViolationMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SeriousTrafficViolationStddevFields)
	fc.Result = res
	return ec.marshalOSeriousTrafficViolationStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SeriousTrafficViolationStddevPopFields)
	fc.Result = res
	return ec.marshalOSeriousTrafficViolationStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SeriousTrafficViolationStddevSampFields)
	fc.Result = res
	return ec.marshalOSeriousTrafficViolationStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SeriousTrafficViolationSumFields)
	fc.Result = res
	return ec.marshalOSeriousTrafficViolationSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SeriousTrafficViolationVarPopFields)
	fc.Result = res
	return ec.marshalOSeriousTrafficViolationVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SeriousTrafficViolationVarSampFields)
	fc.Result = res
	return ec.marshalOSeriousTrafficViolationVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SeriousTrafficViolationVarianceFields)
	fc.Result = res
	return ec.marshalOSeriousTrafficViolationVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMaxFields_serious_traffic_violation_id(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeriousTrafficViolationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMaxFields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMaxFields_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMinFields_serious_traffic_violation_id(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeriousTrafficViolationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMinFields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMinFields_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SeriousTrafficViolation)
	fc.Result = res
	return ec.marshalNSeriousTrafficViolation2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐSeriousTrafficViolationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SeriousTrafficViolationVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SeriousTrafficViolationVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeriousTrafficViolationVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_illegal_location(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_standard_value(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StandardValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_measured_value(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MeasuredValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_discovery_agency(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscoveryAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_illegal_photo(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_is_notice_driver(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNoticeDriver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_notice_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoticeTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_decision_number(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DecisionNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_party_name(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_information_source(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_vehicle_information(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleInformation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_is_handle(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsHandle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_handle_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandleBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_handle_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandleAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_is_send(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetails_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsAggregateFields)
	fc.Result = res
	return ec.marshalOVehicleViolationDetailsAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsAvgFields)
	fc.Result = res
	return ec.marshalOVehicleViolationDetailsAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsMaxFields)
	fc.Result = res
	return ec.marshalOVehicleViolationDetailsMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsMinFields)
	fc.Result = res
	return ec.marshalOVehicleViolationDetailsMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsStddevFields)
	fc.Result = res
	return ec.marshalOVehicleViolationDetailsStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsStddevPopFields)
	fc.Result = res
	return ec.marshalOVehicleViolationDetailsStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsStddevSampFields)
	fc.Result = res
	return ec.marshalOVehicleViolationDetailsStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsSumFields)
	fc.Result = res
	return ec.marshalOVehicleViolationDetailsSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsVarPopFields)
	fc.Result = res
	return ec.marshalOVehicleViolationDetailsVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsVarSampFields)
	fc.Result = res
	return ec.marshalOVehicleViolationDetailsVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsVarianceFields)
	fc.Result = res
	return ec.marshalOVehicleViolationDetailsVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsAvgFields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsAvgFields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsAvgFields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_illegal_location(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_standard_value(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StandardValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_measured_value(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MeasuredValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_discovery_agency(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscoveryAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_illegal_photo(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_is_notice_driver(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNoticeDriver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_notice_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoticeTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_decision_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DecisionNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_party_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_vehicle_information(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleInformation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_is_handle(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsHandle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_handle_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandleBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_handle_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandleAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_is_send(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_illegal_location(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_standard_value(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StandardValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_measured_value(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MeasuredValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_discovery_agency(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscoveryAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_illegal_photo(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_is_notice_driver(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNoticeDriver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_notice_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoticeTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_decision_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DecisionNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_party_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_vehicle_information(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleInformation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_is_handle(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsHandle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_handle_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandleBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_handle_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandleAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_is_send(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleViolationDetails)
	fc.Result = res
	return ec.marshalNVehicleViolationDetails2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationDetailsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsStddevFields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsStddevFields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsStddevFields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsStddevPopFields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsStddevPopFields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsStddevPopFields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsStddevSampFields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsStddevSampFields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsStddevSampFields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsSumFields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsSumFields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsSumFields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsVarPopFields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsVarPopFields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsVarPopFields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsVarSampFields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsVarSampFields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsVarSampFields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsVarianceFields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsVarianceFields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationDetailsVarianceFields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationDetailsVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItems_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItems_violation_scoring_item_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationScoringItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItems_deduction_item_description(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionItemDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItems_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItems_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItems_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItems_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItems_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItems_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItems_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItems_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItems_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItems",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsAggregateFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringItemsAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsAvgFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringItemsAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsMaxFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringItemsMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsMinFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringItemsMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsStddevFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringItemsStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsStddevPopFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringItemsStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsStddevSampFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringItemsStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsSumFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringItemsSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsVarPopFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringItemsVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsVarSampFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringItemsVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsVarianceFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringItemsVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsAvgFields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsAvgFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMaxFields_violation_scoring_item_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationScoringItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMaxFields_deduction_item_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionItemDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMaxFields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMaxFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMinFields_violation_scoring_item_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationScoringItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMinFields_deduction_item_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionItemDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMinFields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMinFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleViolationScoringItems)
	fc.Result = res
	return ec.marshalNVehicleViolationScoringItems2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringItemsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsStddevFields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsStddevFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsStddevPopFields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsStddevPopFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsStddevSampFields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsStddevSampFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsSumFields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsSumFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsVarPopFields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsVarPopFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsVarSampFields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsVarSampFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsVarianceFields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringItemsVarianceFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringItemsVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecord_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecord_violation_scoring_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationScoringID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecord_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecord_violation_scoring_item_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationScoringItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecord_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecord_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecord_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecord_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecord_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecord_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecord_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecord_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecord_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordAggregateFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordAvgFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordMaxFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordMinFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordStddevFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordStddevPopFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordStddevSampFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordSumFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordVarPopFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordVarSampFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordVarianceFields)
	fc.Result = res
	return ec.marshalOVehicleViolationScoringRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordAvgFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMaxFields_violation_scoring_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationScoringID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMaxFields_violation_scoring_item_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationScoringItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMaxFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMinFields_violation_scoring_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationScoringID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMinFields_violation_scoring_item_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationScoringItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMinFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleViolationScoringRecord)
	fc.Result = res
	return ec.marshalNVehicleViolationScoringRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordStddevFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordStddevPopFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordStddevSampFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordSumFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordVarPopFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordVarSampFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleViolationScoringRecordVarianceFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleViolationScoringRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdm_wfxw(ctx context.Context, field graphql.CollectedField, obj *model1.VioCodewfdm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfxw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdm_wfms(ctx context.Context, field graphql.CollectedField, obj *model1.VioCodewfdm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdm_wfjfs(ctx context.Context, field graphql.CollectedField, obj *model1.VioCodewfdm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdm_fkje_min(ctx context.Context, field graphql.CollectedField, obj *model1.VioCodewfdm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdm_fkje_max(ctx context.Context, field graphql.CollectedField, obj *model1.VioCodewfdm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdm_xh(ctx context.Context, field graphql.CollectedField, obj *model1.VioCodewfdm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Xh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmAggregateFields)
	fc.Result = res
	return ec.marshalOVioCodewfdmAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmAvgFields)
	fc.Result = res
	return ec.marshalOVioCodewfdmAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmMaxFields)
	fc.Result = res
	return ec.marshalOVioCodewfdmMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmMinFields)
	fc.Result = res
	return ec.marshalOVioCodewfdmMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmStddevFields)
	fc.Result = res
	return ec.marshalOVioCodewfdmStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmStddevPopFields)
	fc.Result = res
	return ec.marshalOVioCodewfdmStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmStddevSampFields)
	fc.Result = res
	return ec.marshalOVioCodewfdmStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmSumFields)
	fc.Result = res
	return ec.marshalOVioCodewfdmSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmVarPopFields)
	fc.Result = res
	return ec.marshalOVioCodewfdmVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmVarSampFields)
	fc.Result = res
	return ec.marshalOVioCodewfdmVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmVarianceFields)
	fc.Result = res
	return ec.marshalOVioCodewfdmVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmAvgFields_wfjfs(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmAvgFields_fkje_min(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmAvgFields_fkje_max(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmMaxFields_wfxw(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfxw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmMaxFields_wfms(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmMaxFields_wfjfs(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmMaxFields_fkje_min(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmMaxFields_fkje_max(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmMaxFields_xh(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Xh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmMinFields_wfxw(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfxw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmMinFields_wfms(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmMinFields_wfjfs(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmMinFields_fkje_min(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmMinFields_fkje_max(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmMinFields_xh(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Xh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VioCodewfdm)
	fc.Result = res
	return ec.marshalNVioCodewfdm2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVioCodewfdmᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmStddevFields_wfjfs(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmStddevFields_fkje_min(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmStddevFields_fkje_max(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmStddevPopFields_wfjfs(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmStddevPopFields_fkje_min(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmStddevPopFields_fkje_max(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmStddevSampFields_wfjfs(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmStddevSampFields_fkje_min(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmStddevSampFields_fkje_max(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmSumFields_wfjfs(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmSumFields_fkje_min(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmSumFields_fkje_max(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmVarPopFields_wfjfs(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmVarPopFields_fkje_min(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmVarPopFields_fkje_max(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmVarSampFields_wfjfs(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmVarSampFields_fkje_min(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmVarSampFields_fkje_max(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmVarianceFields_wfjfs(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmVarianceFields_fkje_min(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VioCodewfdmVarianceFields_fkje_max(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VioCodewfdmVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_id(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_violation_registration_id(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationRegistrationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_id_card_num(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_name(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_location(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_cause(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_operator(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_illegal_area(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_vehicle_area(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_vehicle_enterprise(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleEnterprise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_province_id(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_city_id(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_supervisor(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supervisor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_supervision_time(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_sepervision_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SepervisionRemarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_is_supervised(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSupervised, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_is_accident(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAccident, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistration_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.ViolationRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ViolationRegistrationAggregateFields)
	fc.Result = res
	return ec.marshalOViolationRegistrationAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ViolationRegistrationAvgFields)
	fc.Result = res
	return ec.marshalOViolationRegistrationAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ViolationRegistrationMaxFields)
	fc.Result = res
	return ec.marshalOViolationRegistrationMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ViolationRegistrationMinFields)
	fc.Result = res
	return ec.marshalOViolationRegistrationMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ViolationRegistrationStddevFields)
	fc.Result = res
	return ec.marshalOViolationRegistrationStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ViolationRegistrationStddevPopFields)
	fc.Result = res
	return ec.marshalOViolationRegistrationStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ViolationRegistrationStddevSampFields)
	fc.Result = res
	return ec.marshalOViolationRegistrationStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ViolationRegistrationSumFields)
	fc.Result = res
	return ec.marshalOViolationRegistrationSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ViolationRegistrationVarPopFields)
	fc.Result = res
	return ec.marshalOViolationRegistrationVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ViolationRegistrationVarSampFields)
	fc.Result = res
	return ec.marshalOViolationRegistrationVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ViolationRegistrationVarianceFields)
	fc.Result = res
	return ec.marshalOViolationRegistrationVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_violation_registration_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationRegistrationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_id_card_num(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_name(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_location(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_cause(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_operator(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_illegal_area(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_vehicle_area(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_vehicle_enterprise(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleEnterprise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_supervisor(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supervisor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_supervision_time(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_sepervision_remarks(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SepervisionRemarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_is_supervised(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSupervised, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_is_accident(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAccident, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_violation_registration_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationRegistrationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_id_card_num(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_name(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_location(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_cause(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_operator(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_illegal_area(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_vehicle_area(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_vehicle_enterprise(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleEnterprise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_supervisor(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supervisor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_supervision_time(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_sepervision_remarks(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SepervisionRemarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_is_supervised(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSupervised, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_is_accident(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAccident, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.ViolationRegistration)
	fc.Result = res
	return ec.marshalNViolationRegistration2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐViolationRegistrationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ViolationRegistrationVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ViolationRegistrationVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ViolationRegistrationVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAppEnforcementBoolExp(ctx context.Context, obj interface{}) (model.AppEnforcementBoolExp, error) {
	var it model.AppEnforcementBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOAppEnforcementBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOAppEnforcementBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOAppEnforcementBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "edit_text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("edit_text"))
			it.EditText, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_type"))
			it.EnterpriseType, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAppEnforcementIncInput(ctx context.Context, obj interface{}) (model.AppEnforcementIncInput, error) {
	var it model.AppEnforcementIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAppEnforcementInsertInput(ctx context.Context, obj interface{}) (model.AppEnforcementInsertInput, error) {
	var it model.AppEnforcementInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "edit_text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("edit_text"))
			it.EditText, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_type"))
			it.EnterpriseType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAppEnforcementOrderBy(ctx context.Context, obj interface{}) (model.AppEnforcementOrderBy, error) {
	var it model.AppEnforcementOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "edit_text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("edit_text"))
			it.EditText, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_type"))
			it.EnterpriseType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAppEnforcementSetInput(ctx context.Context, obj interface{}) (model.AppEnforcementSetInput, error) {
	var it model.AppEnforcementSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "edit_text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("edit_text"))
			it.EditText, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_type"))
			it.EnterpriseType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBigintComparisonExp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBooleanComparisonExp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeductionReportBoolExp(ctx context.Context, obj interface{}) (model.DeductionReportBoolExp, error) {
	var it model.DeductionReportBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODeductionReportBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODeductionReportBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODeductionReportBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_report_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_report_id"))
			it.DeductionReportID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_person"))
			it.InputPerson, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_time"))
			it.InputTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeductionReportIncInput(ctx context.Context, obj interface{}) (model.DeductionReportIncInput, error) {
	var it model.DeductionReportIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeductionReportInsertInput(ctx context.Context, obj interface{}) (model.DeductionReportInsertInput, error) {
	var it model.DeductionReportInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_report_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_report_id"))
			it.DeductionReportID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_person"))
			it.InputPerson, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_time"))
			it.InputTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeductionReportOrderBy(ctx context.Context, obj interface{}) (model.DeductionReportOrderBy, error) {
	var it model.DeductionReportOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_report_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_report_id"))
			it.DeductionReportID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_person"))
			it.InputPerson, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_time"))
			it.InputTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeductionReportSetInput(ctx context.Context, obj interface{}) (model.DeductionReportSetInput, error) {
	var it model.DeductionReportSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_report_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_report_id"))
			it.DeductionReportID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_person"))
			it.InputPerson, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_time"))
			it.InputTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverPeccancyCheckBoolExp(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckBoolExp, error) {
	var it model.DriverPeccancyCheckBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODriverPeccancyCheckBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODriverPeccancyCheckBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODriverPeccancyCheckBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverPeccancyCheckIncInput(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckIncInput, error) {
	var it model.DriverPeccancyCheckIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverPeccancyCheckInsertInput(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckInsertInput, error) {
	var it model.DriverPeccancyCheckInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverPeccancyCheckOrderBy(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckOrderBy, error) {
	var it model.DriverPeccancyCheckOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverPeccancyCheckSetInput(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckSetInput, error) {
	var it model.DriverPeccancyCheckSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIllegalPhotoBoolExp(ctx context.Context, obj interface{}) (model.IllegalPhotoBoolExp, error) {
	var it model.IllegalPhotoBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOIllegalPhotoBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOIllegalPhotoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOIllegalPhotoBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_name"))
			it.PictureName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_address"))
			it.PictureAddress, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_synchronized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_synchronized"))
			it.IsSynchronized, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIllegalPhotoIncInput(ctx context.Context, obj interface{}) (model.IllegalPhotoIncInput, error) {
	var it model.IllegalPhotoIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIllegalPhotoInsertInput(ctx context.Context, obj interface{}) (model.IllegalPhotoInsertInput, error) {
	var it model.IllegalPhotoInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_name"))
			it.PictureName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_address"))
			it.PictureAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_synchronized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_synchronized"))
			it.IsSynchronized, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIllegalPhotoOrderBy(ctx context.Context, obj interface{}) (model.IllegalPhotoOrderBy, error) {
	var it model.IllegalPhotoOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_name"))
			it.PictureName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_address"))
			it.PictureAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_synchronized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_synchronized"))
			it.IsSynchronized, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIllegalPhotoSetInput(ctx context.Context, obj interface{}) (model.IllegalPhotoSetInput, error) {
	var it model.IllegalPhotoSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_name"))
			it.PictureName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_address"))
			it.PictureAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_synchronized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_synchronized"))
			it.IsSynchronized, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntComparisonExp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJsonbComparisonExp(ctx context.Context, obj interface{}) (model2.JsonbComparisonExp, error) {
	var it model2.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNumericComparisonExp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPointComparisonExp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegionalViolationRegisterBoolExp(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterBoolExp, error) {
	var it model.RegionalViolationRegisterBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalORegionalViolationRegisterBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalORegionalViolationRegisterBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalORegionalViolationRegisterBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "regional_violation_register_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regional_violation_register_id"))
			it.RegionalViolationRegisterID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_time"))
			it.RegisterTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_agency"))
			it.ProcessingAgency, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_register":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_register"))
			it.IsRegister, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegionalViolationRegisterIncInput(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterIncInput, error) {
	var it model.RegionalViolationRegisterIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegionalViolationRegisterInsertInput(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterInsertInput, error) {
	var it model.RegionalViolationRegisterInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "regional_violation_register_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regional_violation_register_id"))
			it.RegionalViolationRegisterID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_time"))
			it.RegisterTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_agency"))
			it.ProcessingAgency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_register":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_register"))
			it.IsRegister, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegionalViolationRegisterOrderBy(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterOrderBy, error) {
	var it model.RegionalViolationRegisterOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "regional_violation_register_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regional_violation_register_id"))
			it.RegionalViolationRegisterID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_time"))
			it.RegisterTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_agency"))
			it.ProcessingAgency, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_register":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_register"))
			it.IsRegister, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegionalViolationRegisterSetInput(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterSetInput, error) {
	var it model.RegionalViolationRegisterSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "regional_violation_register_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regional_violation_register_id"))
			it.RegionalViolationRegisterID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_time"))
			it.RegisterTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_agency"))
			it.ProcessingAgency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_register":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_register"))
			it.IsRegister, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSeriousTrafficViolationBoolExp(ctx context.Context, obj interface{}) (model.SeriousTrafficViolationBoolExp, error) {
	var it model.SeriousTrafficViolationBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOSeriousTrafficViolationBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOSeriousTrafficViolationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOSeriousTrafficViolationBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "serious_traffic_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serious_traffic_violation_id"))
			it.SeriousTrafficViolationID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSeriousTrafficViolationIncInput(ctx context.Context, obj interface{}) (model.SeriousTrafficViolationIncInput, error) {
	var it model.SeriousTrafficViolationIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSeriousTrafficViolationInsertInput(ctx context.Context, obj interface{}) (model.SeriousTrafficViolationInsertInput, error) {
	var it model.SeriousTrafficViolationInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "serious_traffic_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serious_traffic_violation_id"))
			it.SeriousTrafficViolationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSeriousTrafficViolationOrderBy(ctx context.Context, obj interface{}) (model.SeriousTrafficViolationOrderBy, error) {
	var it model.SeriousTrafficViolationOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "serious_traffic_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serious_traffic_violation_id"))
			it.SeriousTrafficViolationID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSeriousTrafficViolationSetInput(ctx context.Context, obj interface{}) (model.SeriousTrafficViolationSetInput, error) {
	var it model.SeriousTrafficViolationSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "serious_traffic_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serious_traffic_violation_id"))
			it.SeriousTrafficViolationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringComparisonExp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimestamptzComparisonExp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleViolationDetailsBoolExp(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsBoolExp, error) {
	var it model.VehicleViolationDetailsBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVehicleViolationDetailsBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVehicleViolationDetailsBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVehicleViolationDetailsBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_location"))
			it.IllegalLocation, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "standard_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("standard_value"))
			it.StandardValue, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "measured_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measured_value"))
			it.MeasuredValue, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "discovery_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discovery_agency"))
			it.DiscoveryAgency, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo"))
			it.IllegalPhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notice_driver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notice_driver"))
			it.IsNoticeDriver, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "notice_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notice_time"))
			it.NoticeTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "decision_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("decision_number"))
			it.DecisionNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "party_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("party_name"))
			it.PartyName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_information":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_information"))
			it.VehicleInformation, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_handle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_handle"))
			it.IsHandle, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_by"))
			it.HandleBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_at"))
			it.HandleAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send"))
			it.IsSend, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleViolationDetailsIncInput(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsIncInput, error) {
	var it model.VehicleViolationDetailsIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleViolationDetailsInsertInput(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsInsertInput, error) {
	var it model.VehicleViolationDetailsInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_location"))
			it.IllegalLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "standard_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("standard_value"))
			it.StandardValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "measured_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measured_value"))
			it.MeasuredValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "discovery_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discovery_agency"))
			it.DiscoveryAgency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo"))
			it.IllegalPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notice_driver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notice_driver"))
			it.IsNoticeDriver, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "notice_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notice_time"))
			it.NoticeTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "decision_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("decision_number"))
			it.DecisionNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "party_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("party_name"))
			it.PartyName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_information":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_information"))
			it.VehicleInformation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_handle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_handle"))
			it.IsHandle, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_by"))
			it.HandleBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_at"))
			it.HandleAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send"))
			it.IsSend, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleViolationDetailsOrderBy(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsOrderBy, error) {
	var it model.VehicleViolationDetailsOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_location"))
			it.IllegalLocation, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "standard_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("standard_value"))
			it.StandardValue, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "measured_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measured_value"))
			it.MeasuredValue, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "discovery_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discovery_agency"))
			it.DiscoveryAgency, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo"))
			it.IllegalPhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notice_driver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notice_driver"))
			it.IsNoticeDriver, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "notice_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notice_time"))
			it.NoticeTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "decision_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("decision_number"))
			it.DecisionNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "party_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("party_name"))
			it.PartyName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_information":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_information"))
			it.VehicleInformation, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_handle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_handle"))
			it.IsHandle, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_by"))
			it.HandleBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_at"))
			it.HandleAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send"))
			it.IsSend, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleViolationDetailsSetInput(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsSetInput, error) {
	var it model.VehicleViolationDetailsSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_location"))
			it.IllegalLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "standard_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("standard_value"))
			it.StandardValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "measured_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measured_value"))
			it.MeasuredValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "discovery_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discovery_agency"))
			it.DiscoveryAgency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo"))
			it.IllegalPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notice_driver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notice_driver"))
			it.IsNoticeDriver, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "notice_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notice_time"))
			it.NoticeTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "decision_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("decision_number"))
			it.DecisionNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "party_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("party_name"))
			it.PartyName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_information":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_information"))
			it.VehicleInformation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_handle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_handle"))
			it.IsHandle, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_by"))
			it.HandleBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_at"))
			it.HandleAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send"))
			it.IsSend, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleViolationScoringItemsBoolExp(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsBoolExp, error) {
	var it model.VehicleViolationScoringItemsBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVehicleViolationScoringItemsBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVehicleViolationScoringItemsBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVehicleViolationScoringItemsBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_item_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_item_description"))
			it.DeductionItemDescription, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleViolationScoringItemsIncInput(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsIncInput, error) {
	var it model.VehicleViolationScoringItemsIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleViolationScoringItemsInsertInput(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsInsertInput, error) {
	var it model.VehicleViolationScoringItemsInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_item_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_item_description"))
			it.DeductionItemDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleViolationScoringItemsOrderBy(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsOrderBy, error) {
	var it model.VehicleViolationScoringItemsOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_item_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_item_description"))
			it.DeductionItemDescription, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleViolationScoringItemsSetInput(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsSetInput, error) {
	var it model.VehicleViolationScoringItemsSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_item_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_item_description"))
			it.DeductionItemDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleViolationScoringRecordBoolExp(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordBoolExp, error) {
	var it model.VehicleViolationScoringRecordBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVehicleViolationScoringRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVehicleViolationScoringRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVehicleViolationScoringRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_id"))
			it.ViolationScoringID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleViolationScoringRecordIncInput(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordIncInput, error) {
	var it model.VehicleViolationScoringRecordIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleViolationScoringRecordInsertInput(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordInsertInput, error) {
	var it model.VehicleViolationScoringRecordInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_id"))
			it.ViolationScoringID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleViolationScoringRecordOrderBy(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordOrderBy, error) {
	var it model.VehicleViolationScoringRecordOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_id"))
			it.ViolationScoringID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleViolationScoringRecordSetInput(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordSetInput, error) {
	var it model.VehicleViolationScoringRecordSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_id"))
			it.ViolationScoringID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVioCodewfdmBoolExp(ctx context.Context, obj interface{}) (model.VioCodewfdmBoolExp, error) {
	var it model.VioCodewfdmBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVioCodewfdmBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVioCodewfdmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVioCodewfdmBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "wfxw":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wfxw"))
			it.Wfxw, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "wfms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wfms"))
			it.Wfms, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "wfjfs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wfjfs"))
			it.Wfjfs, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "fkje_min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkje_min"))
			it.FkjeMin, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "fkje_max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkje_max"))
			it.FkjeMax, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "xh":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xh"))
			it.Xh, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVioCodewfdmIncInput(ctx context.Context, obj interface{}) (model.VioCodewfdmIncInput, error) {
	var it model.VioCodewfdmIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "wfjfs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wfjfs"))
			it.Wfjfs, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fkje_min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkje_min"))
			it.FkjeMin, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fkje_max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkje_max"))
			it.FkjeMax, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVioCodewfdmInsertInput(ctx context.Context, obj interface{}) (model.VioCodewfdmInsertInput, error) {
	var it model.VioCodewfdmInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "wfxw":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wfxw"))
			it.Wfxw, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "wfms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wfms"))
			it.Wfms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "wfjfs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wfjfs"))
			it.Wfjfs, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fkje_min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkje_min"))
			it.FkjeMin, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fkje_max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkje_max"))
			it.FkjeMax, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "xh":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xh"))
			it.Xh, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVioCodewfdmOrderBy(ctx context.Context, obj interface{}) (model.VioCodewfdmOrderBy, error) {
	var it model.VioCodewfdmOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "wfxw":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wfxw"))
			it.Wfxw, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "wfms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wfms"))
			it.Wfms, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "wfjfs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wfjfs"))
			it.Wfjfs, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fkje_min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkje_min"))
			it.FkjeMin, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fkje_max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkje_max"))
			it.FkjeMax, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "xh":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xh"))
			it.Xh, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVioCodewfdmSetInput(ctx context.Context, obj interface{}) (model.VioCodewfdmSetInput, error) {
	var it model.VioCodewfdmSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "wfxw":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wfxw"))
			it.Wfxw, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "wfms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wfms"))
			it.Wfms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "wfjfs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wfjfs"))
			it.Wfjfs, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fkje_min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkje_min"))
			it.FkjeMin, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fkje_max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fkje_max"))
			it.FkjeMax, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "xh":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xh"))
			it.Xh, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputViolationRegistrationBoolExp(ctx context.Context, obj interface{}) (model.ViolationRegistrationBoolExp, error) {
	var it model.ViolationRegistrationBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOViolationRegistrationBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOViolationRegistrationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOViolationRegistrationBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_registration_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_registration_id"))
			it.ViolationRegistrationID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_area"))
			it.IllegalArea, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_area"))
			it.VehicleArea, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_enterprise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_enterprise"))
			it.VehicleEnterprise, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisor"))
			it.Supervisor, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_time"))
			it.SupervisionTime, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sepervision_remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sepervision_remarks"))
			it.SepervisionRemarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervised":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervised"))
			it.IsSupervised, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_accident":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_accident"))
			it.IsAccident, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputViolationRegistrationIncInput(ctx context.Context, obj interface{}) (model.ViolationRegistrationIncInput, error) {
	var it model.ViolationRegistrationIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputViolationRegistrationInsertInput(ctx context.Context, obj interface{}) (model.ViolationRegistrationInsertInput, error) {
	var it model.ViolationRegistrationInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_registration_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_registration_id"))
			it.ViolationRegistrationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_area"))
			it.IllegalArea, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_area"))
			it.VehicleArea, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_enterprise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_enterprise"))
			it.VehicleEnterprise, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisor"))
			it.Supervisor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_time"))
			it.SupervisionTime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sepervision_remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sepervision_remarks"))
			it.SepervisionRemarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervised":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervised"))
			it.IsSupervised, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_accident":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_accident"))
			it.IsAccident, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputViolationRegistrationOrderBy(ctx context.Context, obj interface{}) (model.ViolationRegistrationOrderBy, error) {
	var it model.ViolationRegistrationOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_registration_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_registration_id"))
			it.ViolationRegistrationID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_area"))
			it.IllegalArea, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_area"))
			it.VehicleArea, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_enterprise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_enterprise"))
			it.VehicleEnterprise, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisor"))
			it.Supervisor, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_time"))
			it.SupervisionTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sepervision_remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sepervision_remarks"))
			it.SepervisionRemarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervised":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervised"))
			it.IsSupervised, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_accident":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_accident"))
			it.IsAccident, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputViolationRegistrationSetInput(ctx context.Context, obj interface{}) (model.ViolationRegistrationSetInput, error) {
	var it model.ViolationRegistrationSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_registration_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_registration_id"))
			it.ViolationRegistrationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_area"))
			it.IllegalArea, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_area"))
			it.VehicleArea, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_enterprise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_enterprise"))
			it.VehicleEnterprise, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisor"))
			it.Supervisor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_time"))
			it.SupervisionTime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sepervision_remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sepervision_remarks"))
			it.SepervisionRemarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervised":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervised"))
			it.IsSupervised, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_accident":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_accident"))
			it.IsAccident, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var appEnforcementImplementors = []string{"AppEnforcement"}

func (ec *executionContext) _AppEnforcement(ctx context.Context, sel ast.SelectionSet, obj *model1.AppEnforcement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appEnforcementImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppEnforcement")
		case "id":
			out.Values[i] = ec._AppEnforcement_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "illegal_photo_id":
			out.Values[i] = ec._AppEnforcement_illegal_photo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._AppEnforcement_vehicle_id(ctx, field, obj)
		case "operation_user":
			out.Values[i] = ec._AppEnforcement_operation_user(ctx, field, obj)
		case "edit_text":
			out.Values[i] = ec._AppEnforcement_edit_text(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._AppEnforcement_coordinate(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._AppEnforcement_location_description(ctx, field, obj)
		case "enterprise_type":
			out.Values[i] = ec._AppEnforcement_enterprise_type(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._AppEnforcement_picket_status(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._AppEnforcement_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._AppEnforcement_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._AppEnforcement_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._AppEnforcement_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._AppEnforcement_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._AppEnforcement_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appEnforcementAggregateImplementors = []string{"AppEnforcementAggregate"}

func (ec *executionContext) _AppEnforcementAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appEnforcementAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppEnforcementAggregate")
		case "aggregate":
			out.Values[i] = ec._AppEnforcementAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appEnforcementAggregateFieldsImplementors = []string{"AppEnforcementAggregateFields"}

func (ec *executionContext) _AppEnforcementAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appEnforcementAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppEnforcementAggregateFields")
		case "avg":
			out.Values[i] = ec._AppEnforcementAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._AppEnforcementAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._AppEnforcementAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._AppEnforcementAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._AppEnforcementAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._AppEnforcementAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._AppEnforcementAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._AppEnforcementAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._AppEnforcementAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._AppEnforcementAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._AppEnforcementAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appEnforcementAvgFieldsImplementors = []string{"AppEnforcementAvgFields"}

func (ec *executionContext) _AppEnforcementAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appEnforcementAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppEnforcementAvgFields")
		case "id":
			out.Values[i] = ec._AppEnforcementAvgFields_id(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._AppEnforcementAvgFields_picket_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appEnforcementMaxFieldsImplementors = []string{"AppEnforcementMaxFields"}

func (ec *executionContext) _AppEnforcementMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appEnforcementMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppEnforcementMaxFields")
		case "id":
			out.Values[i] = ec._AppEnforcementMaxFields_id(ctx, field, obj)
		case "illegal_photo_id":
			out.Values[i] = ec._AppEnforcementMaxFields_illegal_photo_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._AppEnforcementMaxFields_vehicle_id(ctx, field, obj)
		case "operation_user":
			out.Values[i] = ec._AppEnforcementMaxFields_operation_user(ctx, field, obj)
		case "edit_text":
			out.Values[i] = ec._AppEnforcementMaxFields_edit_text(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._AppEnforcementMaxFields_coordinate(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._AppEnforcementMaxFields_location_description(ctx, field, obj)
		case "enterprise_type":
			out.Values[i] = ec._AppEnforcementMaxFields_enterprise_type(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._AppEnforcementMaxFields_picket_status(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._AppEnforcementMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._AppEnforcementMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._AppEnforcementMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._AppEnforcementMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._AppEnforcementMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._AppEnforcementMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appEnforcementMinFieldsImplementors = []string{"AppEnforcementMinFields"}

func (ec *executionContext) _AppEnforcementMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appEnforcementMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppEnforcementMinFields")
		case "id":
			out.Values[i] = ec._AppEnforcementMinFields_id(ctx, field, obj)
		case "illegal_photo_id":
			out.Values[i] = ec._AppEnforcementMinFields_illegal_photo_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._AppEnforcementMinFields_vehicle_id(ctx, field, obj)
		case "operation_user":
			out.Values[i] = ec._AppEnforcementMinFields_operation_user(ctx, field, obj)
		case "edit_text":
			out.Values[i] = ec._AppEnforcementMinFields_edit_text(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._AppEnforcementMinFields_coordinate(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._AppEnforcementMinFields_location_description(ctx, field, obj)
		case "enterprise_type":
			out.Values[i] = ec._AppEnforcementMinFields_enterprise_type(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._AppEnforcementMinFields_picket_status(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._AppEnforcementMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._AppEnforcementMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._AppEnforcementMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._AppEnforcementMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._AppEnforcementMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._AppEnforcementMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appEnforcementMutationResponseImplementors = []string{"AppEnforcementMutationResponse"}

func (ec *executionContext) _AppEnforcementMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appEnforcementMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppEnforcementMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._AppEnforcementMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._AppEnforcementMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appEnforcementStddevFieldsImplementors = []string{"AppEnforcementStddevFields"}

func (ec *executionContext) _AppEnforcementStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appEnforcementStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppEnforcementStddevFields")
		case "id":
			out.Values[i] = ec._AppEnforcementStddevFields_id(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._AppEnforcementStddevFields_picket_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appEnforcementStddevPopFieldsImplementors = []string{"AppEnforcementStddevPopFields"}

func (ec *executionContext) _AppEnforcementStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appEnforcementStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppEnforcementStddevPopFields")
		case "id":
			out.Values[i] = ec._AppEnforcementStddevPopFields_id(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._AppEnforcementStddevPopFields_picket_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appEnforcementStddevSampFieldsImplementors = []string{"AppEnforcementStddevSampFields"}

func (ec *executionContext) _AppEnforcementStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appEnforcementStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppEnforcementStddevSampFields")
		case "id":
			out.Values[i] = ec._AppEnforcementStddevSampFields_id(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._AppEnforcementStddevSampFields_picket_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appEnforcementSumFieldsImplementors = []string{"AppEnforcementSumFields"}

func (ec *executionContext) _AppEnforcementSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appEnforcementSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppEnforcementSumFields")
		case "id":
			out.Values[i] = ec._AppEnforcementSumFields_id(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._AppEnforcementSumFields_picket_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appEnforcementVarPopFieldsImplementors = []string{"AppEnforcementVarPopFields"}

func (ec *executionContext) _AppEnforcementVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appEnforcementVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppEnforcementVarPopFields")
		case "id":
			out.Values[i] = ec._AppEnforcementVarPopFields_id(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._AppEnforcementVarPopFields_picket_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appEnforcementVarSampFieldsImplementors = []string{"AppEnforcementVarSampFields"}

func (ec *executionContext) _AppEnforcementVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appEnforcementVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppEnforcementVarSampFields")
		case "id":
			out.Values[i] = ec._AppEnforcementVarSampFields_id(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._AppEnforcementVarSampFields_picket_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appEnforcementVarianceFieldsImplementors = []string{"AppEnforcementVarianceFields"}

func (ec *executionContext) _AppEnforcementVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appEnforcementVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppEnforcementVarianceFields")
		case "id":
			out.Values[i] = ec._AppEnforcementVarianceFields_id(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._AppEnforcementVarianceFields_picket_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deductionReportImplementors = []string{"DeductionReport"}

func (ec *executionContext) _DeductionReport(ctx context.Context, sel ast.SelectionSet, obj *model1.DeductionReport) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deductionReportImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeductionReport")
		case "id":
			out.Values[i] = ec._DeductionReport_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deduction_report_id":
			out.Values[i] = ec._DeductionReport_deduction_report_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "area_id":
			out.Values[i] = ec._DeductionReport_area_id(ctx, field, obj)
		case "date":
			out.Values[i] = ec._DeductionReport_date(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._DeductionReport_cause(ctx, field, obj)
		case "input_person":
			out.Values[i] = ec._DeductionReport_input_person(ctx, field, obj)
		case "input_time":
			out.Values[i] = ec._DeductionReport_input_time(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._DeductionReport_demerit_points(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DeductionReport_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._DeductionReport_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._DeductionReport_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DeductionReport_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DeductionReport_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DeductionReport_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deductionReportAggregateImplementors = []string{"DeductionReportAggregate"}

func (ec *executionContext) _DeductionReportAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DeductionReportAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deductionReportAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeductionReportAggregate")
		case "aggregate":
			out.Values[i] = ec._DeductionReportAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deductionReportAggregateFieldsImplementors = []string{"DeductionReportAggregateFields"}

func (ec *executionContext) _DeductionReportAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DeductionReportAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deductionReportAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeductionReportAggregateFields")
		case "avg":
			out.Values[i] = ec._DeductionReportAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DeductionReportAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DeductionReportAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DeductionReportAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DeductionReportAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DeductionReportAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DeductionReportAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DeductionReportAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DeductionReportAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DeductionReportAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DeductionReportAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deductionReportAvgFieldsImplementors = []string{"DeductionReportAvgFields"}

func (ec *executionContext) _DeductionReportAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DeductionReportAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deductionReportAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeductionReportAvgFields")
		case "id":
			out.Values[i] = ec._DeductionReportAvgFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._DeductionReportAvgFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deductionReportMaxFieldsImplementors = []string{"DeductionReportMaxFields"}

func (ec *executionContext) _DeductionReportMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DeductionReportMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deductionReportMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeductionReportMaxFields")
		case "id":
			out.Values[i] = ec._DeductionReportMaxFields_id(ctx, field, obj)
		case "deduction_report_id":
			out.Values[i] = ec._DeductionReportMaxFields_deduction_report_id(ctx, field, obj)
		case "area_id":
			out.Values[i] = ec._DeductionReportMaxFields_area_id(ctx, field, obj)
		case "date":
			out.Values[i] = ec._DeductionReportMaxFields_date(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._DeductionReportMaxFields_cause(ctx, field, obj)
		case "input_person":
			out.Values[i] = ec._DeductionReportMaxFields_input_person(ctx, field, obj)
		case "input_time":
			out.Values[i] = ec._DeductionReportMaxFields_input_time(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._DeductionReportMaxFields_demerit_points(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DeductionReportMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DeductionReportMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DeductionReportMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DeductionReportMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DeductionReportMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DeductionReportMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deductionReportMinFieldsImplementors = []string{"DeductionReportMinFields"}

func (ec *executionContext) _DeductionReportMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DeductionReportMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deductionReportMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeductionReportMinFields")
		case "id":
			out.Values[i] = ec._DeductionReportMinFields_id(ctx, field, obj)
		case "deduction_report_id":
			out.Values[i] = ec._DeductionReportMinFields_deduction_report_id(ctx, field, obj)
		case "area_id":
			out.Values[i] = ec._DeductionReportMinFields_area_id(ctx, field, obj)
		case "date":
			out.Values[i] = ec._DeductionReportMinFields_date(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._DeductionReportMinFields_cause(ctx, field, obj)
		case "input_person":
			out.Values[i] = ec._DeductionReportMinFields_input_person(ctx, field, obj)
		case "input_time":
			out.Values[i] = ec._DeductionReportMinFields_input_time(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._DeductionReportMinFields_demerit_points(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DeductionReportMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DeductionReportMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DeductionReportMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DeductionReportMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DeductionReportMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DeductionReportMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deductionReportMutationResponseImplementors = []string{"DeductionReportMutationResponse"}

func (ec *executionContext) _DeductionReportMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DeductionReportMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deductionReportMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeductionReportMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DeductionReportMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DeductionReportMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deductionReportStddevFieldsImplementors = []string{"DeductionReportStddevFields"}

func (ec *executionContext) _DeductionReportStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DeductionReportStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deductionReportStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeductionReportStddevFields")
		case "id":
			out.Values[i] = ec._DeductionReportStddevFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._DeductionReportStddevFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deductionReportStddevPopFieldsImplementors = []string{"DeductionReportStddevPopFields"}

func (ec *executionContext) _DeductionReportStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DeductionReportStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deductionReportStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeductionReportStddevPopFields")
		case "id":
			out.Values[i] = ec._DeductionReportStddevPopFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._DeductionReportStddevPopFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deductionReportStddevSampFieldsImplementors = []string{"DeductionReportStddevSampFields"}

func (ec *executionContext) _DeductionReportStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DeductionReportStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deductionReportStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeductionReportStddevSampFields")
		case "id":
			out.Values[i] = ec._DeductionReportStddevSampFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._DeductionReportStddevSampFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deductionReportSumFieldsImplementors = []string{"DeductionReportSumFields"}

func (ec *executionContext) _DeductionReportSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DeductionReportSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deductionReportSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeductionReportSumFields")
		case "id":
			out.Values[i] = ec._DeductionReportSumFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._DeductionReportSumFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deductionReportVarPopFieldsImplementors = []string{"DeductionReportVarPopFields"}

func (ec *executionContext) _DeductionReportVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DeductionReportVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deductionReportVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeductionReportVarPopFields")
		case "id":
			out.Values[i] = ec._DeductionReportVarPopFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._DeductionReportVarPopFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deductionReportVarSampFieldsImplementors = []string{"DeductionReportVarSampFields"}

func (ec *executionContext) _DeductionReportVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DeductionReportVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deductionReportVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeductionReportVarSampFields")
		case "id":
			out.Values[i] = ec._DeductionReportVarSampFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._DeductionReportVarSampFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deductionReportVarianceFieldsImplementors = []string{"DeductionReportVarianceFields"}

func (ec *executionContext) _DeductionReportVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DeductionReportVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deductionReportVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeductionReportVarianceFields")
		case "id":
			out.Values[i] = ec._DeductionReportVarianceFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._DeductionReportVarianceFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverPeccancyCheckImplementors = []string{"DriverPeccancyCheck"}

func (ec *executionContext) _DriverPeccancyCheck(ctx context.Context, sel ast.SelectionSet, obj *model1.DriverPeccancyCheck) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverPeccancyCheckImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverPeccancyCheck")
		case "id":
			out.Values[i] = ec._DriverPeccancyCheck_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._DriverPeccancyCheck_vehicle_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DriverPeccancyCheck_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._DriverPeccancyCheck_enterprise_id(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverPeccancyCheck_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._DriverPeccancyCheck_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._DriverPeccancyCheck_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverPeccancyCheck_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverPeccancyCheck_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverPeccancyCheck_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverPeccancyCheckAggregateImplementors = []string{"DriverPeccancyCheckAggregate"}

func (ec *executionContext) _DriverPeccancyCheckAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverPeccancyCheckAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverPeccancyCheckAggregate")
		case "aggregate":
			out.Values[i] = ec._DriverPeccancyCheckAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverPeccancyCheckAggregateFieldsImplementors = []string{"DriverPeccancyCheckAggregateFields"}

func (ec *executionContext) _DriverPeccancyCheckAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverPeccancyCheckAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverPeccancyCheckAggregateFields")
		case "avg":
			out.Values[i] = ec._DriverPeccancyCheckAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DriverPeccancyCheckAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DriverPeccancyCheckAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DriverPeccancyCheckAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DriverPeccancyCheckAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DriverPeccancyCheckAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DriverPeccancyCheckAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DriverPeccancyCheckAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DriverPeccancyCheckAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DriverPeccancyCheckAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DriverPeccancyCheckAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverPeccancyCheckAvgFieldsImplementors = []string{"DriverPeccancyCheckAvgFields"}

func (ec *executionContext) _DriverPeccancyCheckAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverPeccancyCheckAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverPeccancyCheckAvgFields")
		case "id":
			out.Values[i] = ec._DriverPeccancyCheckAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverPeccancyCheckMaxFieldsImplementors = []string{"DriverPeccancyCheckMaxFields"}

func (ec *executionContext) _DriverPeccancyCheckMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverPeccancyCheckMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverPeccancyCheckMaxFields")
		case "id":
			out.Values[i] = ec._DriverPeccancyCheckMaxFields_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._DriverPeccancyCheckMaxFields_vehicle_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DriverPeccancyCheckMaxFields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._DriverPeccancyCheckMaxFields_enterprise_id(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverPeccancyCheckMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DriverPeccancyCheckMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DriverPeccancyCheckMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverPeccancyCheckMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverPeccancyCheckMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverPeccancyCheckMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverPeccancyCheckMinFieldsImplementors = []string{"DriverPeccancyCheckMinFields"}

func (ec *executionContext) _DriverPeccancyCheckMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverPeccancyCheckMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverPeccancyCheckMinFields")
		case "id":
			out.Values[i] = ec._DriverPeccancyCheckMinFields_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._DriverPeccancyCheckMinFields_vehicle_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DriverPeccancyCheckMinFields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._DriverPeccancyCheckMinFields_enterprise_id(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverPeccancyCheckMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DriverPeccancyCheckMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DriverPeccancyCheckMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverPeccancyCheckMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverPeccancyCheckMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverPeccancyCheckMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverPeccancyCheckMutationResponseImplementors = []string{"DriverPeccancyCheckMutationResponse"}

func (ec *executionContext) _DriverPeccancyCheckMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverPeccancyCheckMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverPeccancyCheckMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DriverPeccancyCheckMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DriverPeccancyCheckMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverPeccancyCheckStddevFieldsImplementors = []string{"DriverPeccancyCheckStddevFields"}

func (ec *executionContext) _DriverPeccancyCheckStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverPeccancyCheckStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverPeccancyCheckStddevFields")
		case "id":
			out.Values[i] = ec._DriverPeccancyCheckStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverPeccancyCheckStddevPopFieldsImplementors = []string{"DriverPeccancyCheckStddevPopFields"}

func (ec *executionContext) _DriverPeccancyCheckStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverPeccancyCheckStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverPeccancyCheckStddevPopFields")
		case "id":
			out.Values[i] = ec._DriverPeccancyCheckStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverPeccancyCheckStddevSampFieldsImplementors = []string{"DriverPeccancyCheckStddevSampFields"}

func (ec *executionContext) _DriverPeccancyCheckStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverPeccancyCheckStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverPeccancyCheckStddevSampFields")
		case "id":
			out.Values[i] = ec._DriverPeccancyCheckStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverPeccancyCheckSumFieldsImplementors = []string{"DriverPeccancyCheckSumFields"}

func (ec *executionContext) _DriverPeccancyCheckSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverPeccancyCheckSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverPeccancyCheckSumFields")
		case "id":
			out.Values[i] = ec._DriverPeccancyCheckSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverPeccancyCheckVarPopFieldsImplementors = []string{"DriverPeccancyCheckVarPopFields"}

func (ec *executionContext) _DriverPeccancyCheckVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverPeccancyCheckVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverPeccancyCheckVarPopFields")
		case "id":
			out.Values[i] = ec._DriverPeccancyCheckVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverPeccancyCheckVarSampFieldsImplementors = []string{"DriverPeccancyCheckVarSampFields"}

func (ec *executionContext) _DriverPeccancyCheckVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverPeccancyCheckVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverPeccancyCheckVarSampFields")
		case "id":
			out.Values[i] = ec._DriverPeccancyCheckVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverPeccancyCheckVarianceFieldsImplementors = []string{"DriverPeccancyCheckVarianceFields"}

func (ec *executionContext) _DriverPeccancyCheckVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverPeccancyCheckVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverPeccancyCheckVarianceFields")
		case "id":
			out.Values[i] = ec._DriverPeccancyCheckVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegalPhotoImplementors = []string{"IllegalPhoto"}

func (ec *executionContext) _IllegalPhoto(ctx context.Context, sel ast.SelectionSet, obj *model1.IllegalPhoto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegalPhotoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IllegalPhoto")
		case "id":
			out.Values[i] = ec._IllegalPhoto_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "illegal_photo_id":
			out.Values[i] = ec._IllegalPhoto_illegal_photo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "picture_name":
			out.Values[i] = ec._IllegalPhoto_picture_name(ctx, field, obj)
		case "picture_address":
			out.Values[i] = ec._IllegalPhoto_picture_address(ctx, field, obj)
		case "is_synchronized":
			out.Values[i] = ec._IllegalPhoto_is_synchronized(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._IllegalPhoto_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._IllegalPhoto_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._IllegalPhoto_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._IllegalPhoto_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._IllegalPhoto_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._IllegalPhoto_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._IllegalPhoto_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegalPhotoAggregateImplementors = []string{"IllegalPhotoAggregate"}

func (ec *executionContext) _IllegalPhotoAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegalPhotoAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IllegalPhotoAggregate")
		case "aggregate":
			out.Values[i] = ec._IllegalPhotoAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegalPhotoAggregateFieldsImplementors = []string{"IllegalPhotoAggregateFields"}

func (ec *executionContext) _IllegalPhotoAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegalPhotoAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IllegalPhotoAggregateFields")
		case "avg":
			out.Values[i] = ec._IllegalPhotoAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._IllegalPhotoAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._IllegalPhotoAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._IllegalPhotoAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._IllegalPhotoAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._IllegalPhotoAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._IllegalPhotoAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._IllegalPhotoAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._IllegalPhotoAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._IllegalPhotoAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._IllegalPhotoAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegalPhotoAvgFieldsImplementors = []string{"IllegalPhotoAvgFields"}

func (ec *executionContext) _IllegalPhotoAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegalPhotoAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IllegalPhotoAvgFields")
		case "id":
			out.Values[i] = ec._IllegalPhotoAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegalPhotoMaxFieldsImplementors = []string{"IllegalPhotoMaxFields"}

func (ec *executionContext) _IllegalPhotoMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegalPhotoMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IllegalPhotoMaxFields")
		case "id":
			out.Values[i] = ec._IllegalPhotoMaxFields_id(ctx, field, obj)
		case "illegal_photo_id":
			out.Values[i] = ec._IllegalPhotoMaxFields_illegal_photo_id(ctx, field, obj)
		case "picture_name":
			out.Values[i] = ec._IllegalPhotoMaxFields_picture_name(ctx, field, obj)
		case "picture_address":
			out.Values[i] = ec._IllegalPhotoMaxFields_picture_address(ctx, field, obj)
		case "is_synchronized":
			out.Values[i] = ec._IllegalPhotoMaxFields_is_synchronized(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._IllegalPhotoMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._IllegalPhotoMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._IllegalPhotoMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._IllegalPhotoMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._IllegalPhotoMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._IllegalPhotoMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._IllegalPhotoMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegalPhotoMinFieldsImplementors = []string{"IllegalPhotoMinFields"}

func (ec *executionContext) _IllegalPhotoMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegalPhotoMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IllegalPhotoMinFields")
		case "id":
			out.Values[i] = ec._IllegalPhotoMinFields_id(ctx, field, obj)
		case "illegal_photo_id":
			out.Values[i] = ec._IllegalPhotoMinFields_illegal_photo_id(ctx, field, obj)
		case "picture_name":
			out.Values[i] = ec._IllegalPhotoMinFields_picture_name(ctx, field, obj)
		case "picture_address":
			out.Values[i] = ec._IllegalPhotoMinFields_picture_address(ctx, field, obj)
		case "is_synchronized":
			out.Values[i] = ec._IllegalPhotoMinFields_is_synchronized(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._IllegalPhotoMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._IllegalPhotoMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._IllegalPhotoMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._IllegalPhotoMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._IllegalPhotoMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._IllegalPhotoMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._IllegalPhotoMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegalPhotoMutationResponseImplementors = []string{"IllegalPhotoMutationResponse"}

func (ec *executionContext) _IllegalPhotoMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegalPhotoMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IllegalPhotoMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._IllegalPhotoMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._IllegalPhotoMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegalPhotoStddevFieldsImplementors = []string{"IllegalPhotoStddevFields"}

func (ec *executionContext) _IllegalPhotoStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegalPhotoStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IllegalPhotoStddevFields")
		case "id":
			out.Values[i] = ec._IllegalPhotoStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegalPhotoStddevPopFieldsImplementors = []string{"IllegalPhotoStddevPopFields"}

func (ec *executionContext) _IllegalPhotoStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegalPhotoStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IllegalPhotoStddevPopFields")
		case "id":
			out.Values[i] = ec._IllegalPhotoStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegalPhotoStddevSampFieldsImplementors = []string{"IllegalPhotoStddevSampFields"}

func (ec *executionContext) _IllegalPhotoStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegalPhotoStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IllegalPhotoStddevSampFields")
		case "id":
			out.Values[i] = ec._IllegalPhotoStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegalPhotoSumFieldsImplementors = []string{"IllegalPhotoSumFields"}

func (ec *executionContext) _IllegalPhotoSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegalPhotoSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IllegalPhotoSumFields")
		case "id":
			out.Values[i] = ec._IllegalPhotoSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegalPhotoVarPopFieldsImplementors = []string{"IllegalPhotoVarPopFields"}

func (ec *executionContext) _IllegalPhotoVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegalPhotoVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IllegalPhotoVarPopFields")
		case "id":
			out.Values[i] = ec._IllegalPhotoVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegalPhotoVarSampFieldsImplementors = []string{"IllegalPhotoVarSampFields"}

func (ec *executionContext) _IllegalPhotoVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegalPhotoVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IllegalPhotoVarSampFields")
		case "id":
			out.Values[i] = ec._IllegalPhotoVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegalPhotoVarianceFieldsImplementors = []string{"IllegalPhotoVarianceFields"}

func (ec *executionContext) _IllegalPhotoVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegalPhotoVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IllegalPhotoVarianceFields")
		case "id":
			out.Values[i] = ec._IllegalPhotoVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_app_enforcement":
			out.Values[i] = ec._Mutation_delete_app_enforcement(ctx, field)
		case "delete_app_enforcement_by_pk":
			out.Values[i] = ec._Mutation_delete_app_enforcement_by_pk(ctx, field)
		case "insert_app_enforcement":
			out.Values[i] = ec._Mutation_insert_app_enforcement(ctx, field)
		case "insert_app_enforcement_one":
			out.Values[i] = ec._Mutation_insert_app_enforcement_one(ctx, field)
		case "update_app_enforcement":
			out.Values[i] = ec._Mutation_update_app_enforcement(ctx, field)
		case "update_app_enforcement_by_pk":
			out.Values[i] = ec._Mutation_update_app_enforcement_by_pk(ctx, field)
		case "delete_deduction_report":
			out.Values[i] = ec._Mutation_delete_deduction_report(ctx, field)
		case "delete_deduction_report_by_pk":
			out.Values[i] = ec._Mutation_delete_deduction_report_by_pk(ctx, field)
		case "insert_deduction_report":
			out.Values[i] = ec._Mutation_insert_deduction_report(ctx, field)
		case "insert_deduction_report_one":
			out.Values[i] = ec._Mutation_insert_deduction_report_one(ctx, field)
		case "update_deduction_report":
			out.Values[i] = ec._Mutation_update_deduction_report(ctx, field)
		case "update_deduction_report_by_pk":
			out.Values[i] = ec._Mutation_update_deduction_report_by_pk(ctx, field)
		case "delete_driver_peccancy_check":
			out.Values[i] = ec._Mutation_delete_driver_peccancy_check(ctx, field)
		case "delete_driver_peccancy_check_by_pk":
			out.Values[i] = ec._Mutation_delete_driver_peccancy_check_by_pk(ctx, field)
		case "insert_driver_peccancy_check":
			out.Values[i] = ec._Mutation_insert_driver_peccancy_check(ctx, field)
		case "insert_driver_peccancy_check_one":
			out.Values[i] = ec._Mutation_insert_driver_peccancy_check_one(ctx, field)
		case "update_driver_peccancy_check":
			out.Values[i] = ec._Mutation_update_driver_peccancy_check(ctx, field)
		case "update_driver_peccancy_check_by_pk":
			out.Values[i] = ec._Mutation_update_driver_peccancy_check_by_pk(ctx, field)
		case "delete_illegal_photo":
			out.Values[i] = ec._Mutation_delete_illegal_photo(ctx, field)
		case "delete_illegal_photo_by_pk":
			out.Values[i] = ec._Mutation_delete_illegal_photo_by_pk(ctx, field)
		case "insert_illegal_photo":
			out.Values[i] = ec._Mutation_insert_illegal_photo(ctx, field)
		case "insert_illegal_photo_one":
			out.Values[i] = ec._Mutation_insert_illegal_photo_one(ctx, field)
		case "update_illegal_photo":
			out.Values[i] = ec._Mutation_update_illegal_photo(ctx, field)
		case "update_illegal_photo_by_pk":
			out.Values[i] = ec._Mutation_update_illegal_photo_by_pk(ctx, field)
		case "delete_regional_violation_register":
			out.Values[i] = ec._Mutation_delete_regional_violation_register(ctx, field)
		case "delete_regional_violation_register_by_pk":
			out.Values[i] = ec._Mutation_delete_regional_violation_register_by_pk(ctx, field)
		case "insert_regional_violation_register":
			out.Values[i] = ec._Mutation_insert_regional_violation_register(ctx, field)
		case "insert_regional_violation_register_one":
			out.Values[i] = ec._Mutation_insert_regional_violation_register_one(ctx, field)
		case "update_regional_violation_register":
			out.Values[i] = ec._Mutation_update_regional_violation_register(ctx, field)
		case "update_regional_violation_register_by_pk":
			out.Values[i] = ec._Mutation_update_regional_violation_register_by_pk(ctx, field)
		case "delete_serious_traffic_violation":
			out.Values[i] = ec._Mutation_delete_serious_traffic_violation(ctx, field)
		case "delete_serious_traffic_violation_by_pk":
			out.Values[i] = ec._Mutation_delete_serious_traffic_violation_by_pk(ctx, field)
		case "insert_serious_traffic_violation":
			out.Values[i] = ec._Mutation_insert_serious_traffic_violation(ctx, field)
		case "insert_serious_traffic_violation_one":
			out.Values[i] = ec._Mutation_insert_serious_traffic_violation_one(ctx, field)
		case "update_serious_traffic_violation":
			out.Values[i] = ec._Mutation_update_serious_traffic_violation(ctx, field)
		case "update_serious_traffic_violation_by_pk":
			out.Values[i] = ec._Mutation_update_serious_traffic_violation_by_pk(ctx, field)
		case "delete_vehicle_violation_details":
			out.Values[i] = ec._Mutation_delete_vehicle_violation_details(ctx, field)
		case "delete_vehicle_violation_details_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_violation_details_by_pk(ctx, field)
		case "insert_vehicle_violation_details":
			out.Values[i] = ec._Mutation_insert_vehicle_violation_details(ctx, field)
		case "insert_vehicle_violation_details_one":
			out.Values[i] = ec._Mutation_insert_vehicle_violation_details_one(ctx, field)
		case "update_vehicle_violation_details":
			out.Values[i] = ec._Mutation_update_vehicle_violation_details(ctx, field)
		case "update_vehicle_violation_details_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_violation_details_by_pk(ctx, field)
		case "delete_vehicle_violation_scoring_items":
			out.Values[i] = ec._Mutation_delete_vehicle_violation_scoring_items(ctx, field)
		case "delete_vehicle_violation_scoring_items_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_violation_scoring_items_by_pk(ctx, field)
		case "insert_vehicle_violation_scoring_items":
			out.Values[i] = ec._Mutation_insert_vehicle_violation_scoring_items(ctx, field)
		case "insert_vehicle_violation_scoring_items_one":
			out.Values[i] = ec._Mutation_insert_vehicle_violation_scoring_items_one(ctx, field)
		case "update_vehicle_violation_scoring_items":
			out.Values[i] = ec._Mutation_update_vehicle_violation_scoring_items(ctx, field)
		case "update_vehicle_violation_scoring_items_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_violation_scoring_items_by_pk(ctx, field)
		case "delete_vehicle_violation_scoring_record":
			out.Values[i] = ec._Mutation_delete_vehicle_violation_scoring_record(ctx, field)
		case "delete_vehicle_violation_scoring_record_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_violation_scoring_record_by_pk(ctx, field)
		case "insert_vehicle_violation_scoring_record":
			out.Values[i] = ec._Mutation_insert_vehicle_violation_scoring_record(ctx, field)
		case "insert_vehicle_violation_scoring_record_one":
			out.Values[i] = ec._Mutation_insert_vehicle_violation_scoring_record_one(ctx, field)
		case "update_vehicle_violation_scoring_record":
			out.Values[i] = ec._Mutation_update_vehicle_violation_scoring_record(ctx, field)
		case "update_vehicle_violation_scoring_record_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_violation_scoring_record_by_pk(ctx, field)
		case "delete_vio_codewfdm":
			out.Values[i] = ec._Mutation_delete_vio_codewfdm(ctx, field)
		case "delete_vio_codewfdm_by_pk":
			out.Values[i] = ec._Mutation_delete_vio_codewfdm_by_pk(ctx, field)
		case "insert_vio_codewfdm":
			out.Values[i] = ec._Mutation_insert_vio_codewfdm(ctx, field)
		case "insert_vio_codewfdm_one":
			out.Values[i] = ec._Mutation_insert_vio_codewfdm_one(ctx, field)
		case "update_vio_codewfdm":
			out.Values[i] = ec._Mutation_update_vio_codewfdm(ctx, field)
		case "update_vio_codewfdm_by_pk":
			out.Values[i] = ec._Mutation_update_vio_codewfdm_by_pk(ctx, field)
		case "delete_violation_registration":
			out.Values[i] = ec._Mutation_delete_violation_registration(ctx, field)
		case "delete_violation_registration_by_pk":
			out.Values[i] = ec._Mutation_delete_violation_registration_by_pk(ctx, field)
		case "insert_violation_registration":
			out.Values[i] = ec._Mutation_insert_violation_registration(ctx, field)
		case "insert_violation_registration_one":
			out.Values[i] = ec._Mutation_insert_violation_registration_one(ctx, field)
		case "update_violation_registration":
			out.Values[i] = ec._Mutation_update_violation_registration(ctx, field)
		case "update_violation_registration_by_pk":
			out.Values[i] = ec._Mutation_update_violation_registration_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "app_enforcement":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_app_enforcement(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "app_enforcement_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_app_enforcement_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "app_enforcement_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_app_enforcement_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "deduction_report":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deduction_report(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "deduction_report_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deduction_report_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "deduction_report_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deduction_report_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_peccancy_check":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_peccancy_check(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_peccancy_check_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_peccancy_check_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_peccancy_check_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_peccancy_check_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "illegal_photo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_illegal_photo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "illegal_photo_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_illegal_photo_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "illegal_photo_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_illegal_photo_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "regional_violation_register":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_regional_violation_register(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "regional_violation_register_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_regional_violation_register_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "regional_violation_register_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_regional_violation_register_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "serious_traffic_violation":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_serious_traffic_violation(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "serious_traffic_violation_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_serious_traffic_violation_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "serious_traffic_violation_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_serious_traffic_violation_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_violation_details":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_violation_details(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_violation_details_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_violation_details_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_violation_details_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_violation_details_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_violation_scoring_items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_violation_scoring_items(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_violation_scoring_items_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_violation_scoring_items_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_violation_scoring_items_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_violation_scoring_items_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_violation_scoring_record":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_violation_scoring_record(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_violation_scoring_record_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_violation_scoring_record_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_violation_scoring_record_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_violation_scoring_record_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vio_codewfdm":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vio_codewfdm(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vio_codewfdm_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vio_codewfdm_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vio_codewfdm_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vio_codewfdm_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "violation_registration":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_violation_registration(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "violation_registration_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_violation_registration_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "violation_registration_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_violation_registration_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionalViolationRegisterImplementors = []string{"RegionalViolationRegister"}

func (ec *executionContext) _RegionalViolationRegister(ctx context.Context, sel ast.SelectionSet, obj *model1.RegionalViolationRegister) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionalViolationRegisterImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionalViolationRegister")
		case "id":
			out.Values[i] = ec._RegionalViolationRegister_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "regional_violation_register_id":
			out.Values[i] = ec._RegionalViolationRegister_regional_violation_register_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "violation_detail_id":
			out.Values[i] = ec._RegionalViolationRegister_violation_detail_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._RegionalViolationRegister_vehicle_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._RegionalViolationRegister_driver_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._RegionalViolationRegister_illegal_code(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._RegionalViolationRegister_illegal_time(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._RegionalViolationRegister_illegal_type(ctx, field, obj)
		case "register_time":
			out.Values[i] = ec._RegionalViolationRegister_register_time(ctx, field, obj)
		case "processing_agency":
			out.Values[i] = ec._RegionalViolationRegister_processing_agency(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._RegionalViolationRegister_operator(ctx, field, obj)
		case "is_register":
			out.Values[i] = ec._RegionalViolationRegister_is_register(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._RegionalViolationRegister_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._RegionalViolationRegister_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._RegionalViolationRegister_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._RegionalViolationRegister_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._RegionalViolationRegister_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._RegionalViolationRegister_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._RegionalViolationRegister_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionalViolationRegisterAggregateImplementors = []string{"RegionalViolationRegisterAggregate"}

func (ec *executionContext) _RegionalViolationRegisterAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionalViolationRegisterAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionalViolationRegisterAggregate")
		case "aggregate":
			out.Values[i] = ec._RegionalViolationRegisterAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionalViolationRegisterAggregateFieldsImplementors = []string{"RegionalViolationRegisterAggregateFields"}

func (ec *executionContext) _RegionalViolationRegisterAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionalViolationRegisterAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionalViolationRegisterAggregateFields")
		case "avg":
			out.Values[i] = ec._RegionalViolationRegisterAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._RegionalViolationRegisterAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._RegionalViolationRegisterAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._RegionalViolationRegisterAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._RegionalViolationRegisterAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._RegionalViolationRegisterAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._RegionalViolationRegisterAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._RegionalViolationRegisterAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._RegionalViolationRegisterAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._RegionalViolationRegisterAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._RegionalViolationRegisterAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionalViolationRegisterAvgFieldsImplementors = []string{"RegionalViolationRegisterAvgFields"}

func (ec *executionContext) _RegionalViolationRegisterAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionalViolationRegisterAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionalViolationRegisterAvgFields")
		case "id":
			out.Values[i] = ec._RegionalViolationRegisterAvgFields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._RegionalViolationRegisterAvgFields_illegal_code(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._RegionalViolationRegisterAvgFields_illegal_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionalViolationRegisterMaxFieldsImplementors = []string{"RegionalViolationRegisterMaxFields"}

func (ec *executionContext) _RegionalViolationRegisterMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionalViolationRegisterMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionalViolationRegisterMaxFields")
		case "id":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_id(ctx, field, obj)
		case "regional_violation_register_id":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_regional_violation_register_id(ctx, field, obj)
		case "violation_detail_id":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_violation_detail_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_vehicle_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_driver_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_illegal_code(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_illegal_time(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_illegal_type(ctx, field, obj)
		case "register_time":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_register_time(ctx, field, obj)
		case "processing_agency":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_processing_agency(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_operator(ctx, field, obj)
		case "is_register":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_is_register(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._RegionalViolationRegisterMaxFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionalViolationRegisterMinFieldsImplementors = []string{"RegionalViolationRegisterMinFields"}

func (ec *executionContext) _RegionalViolationRegisterMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionalViolationRegisterMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionalViolationRegisterMinFields")
		case "id":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_id(ctx, field, obj)
		case "regional_violation_register_id":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_regional_violation_register_id(ctx, field, obj)
		case "violation_detail_id":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_violation_detail_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_vehicle_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_driver_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_illegal_code(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_illegal_time(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_illegal_type(ctx, field, obj)
		case "register_time":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_register_time(ctx, field, obj)
		case "processing_agency":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_processing_agency(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_operator(ctx, field, obj)
		case "is_register":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_is_register(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._RegionalViolationRegisterMinFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionalViolationRegisterMutationResponseImplementors = []string{"RegionalViolationRegisterMutationResponse"}

func (ec *executionContext) _RegionalViolationRegisterMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionalViolationRegisterMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionalViolationRegisterMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._RegionalViolationRegisterMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._RegionalViolationRegisterMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionalViolationRegisterStddevFieldsImplementors = []string{"RegionalViolationRegisterStddevFields"}

func (ec *executionContext) _RegionalViolationRegisterStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionalViolationRegisterStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionalViolationRegisterStddevFields")
		case "id":
			out.Values[i] = ec._RegionalViolationRegisterStddevFields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._RegionalViolationRegisterStddevFields_illegal_code(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._RegionalViolationRegisterStddevFields_illegal_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionalViolationRegisterStddevPopFieldsImplementors = []string{"RegionalViolationRegisterStddevPopFields"}

func (ec *executionContext) _RegionalViolationRegisterStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionalViolationRegisterStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionalViolationRegisterStddevPopFields")
		case "id":
			out.Values[i] = ec._RegionalViolationRegisterStddevPopFields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._RegionalViolationRegisterStddevPopFields_illegal_code(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._RegionalViolationRegisterStddevPopFields_illegal_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionalViolationRegisterStddevSampFieldsImplementors = []string{"RegionalViolationRegisterStddevSampFields"}

func (ec *executionContext) _RegionalViolationRegisterStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionalViolationRegisterStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionalViolationRegisterStddevSampFields")
		case "id":
			out.Values[i] = ec._RegionalViolationRegisterStddevSampFields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._RegionalViolationRegisterStddevSampFields_illegal_code(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._RegionalViolationRegisterStddevSampFields_illegal_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionalViolationRegisterSumFieldsImplementors = []string{"RegionalViolationRegisterSumFields"}

func (ec *executionContext) _RegionalViolationRegisterSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionalViolationRegisterSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionalViolationRegisterSumFields")
		case "id":
			out.Values[i] = ec._RegionalViolationRegisterSumFields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._RegionalViolationRegisterSumFields_illegal_code(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._RegionalViolationRegisterSumFields_illegal_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionalViolationRegisterVarPopFieldsImplementors = []string{"RegionalViolationRegisterVarPopFields"}

func (ec *executionContext) _RegionalViolationRegisterVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionalViolationRegisterVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionalViolationRegisterVarPopFields")
		case "id":
			out.Values[i] = ec._RegionalViolationRegisterVarPopFields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._RegionalViolationRegisterVarPopFields_illegal_code(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._RegionalViolationRegisterVarPopFields_illegal_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionalViolationRegisterVarSampFieldsImplementors = []string{"RegionalViolationRegisterVarSampFields"}

func (ec *executionContext) _RegionalViolationRegisterVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionalViolationRegisterVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionalViolationRegisterVarSampFields")
		case "id":
			out.Values[i] = ec._RegionalViolationRegisterVarSampFields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._RegionalViolationRegisterVarSampFields_illegal_code(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._RegionalViolationRegisterVarSampFields_illegal_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionalViolationRegisterVarianceFieldsImplementors = []string{"RegionalViolationRegisterVarianceFields"}

func (ec *executionContext) _RegionalViolationRegisterVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionalViolationRegisterVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionalViolationRegisterVarianceFields")
		case "id":
			out.Values[i] = ec._RegionalViolationRegisterVarianceFields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._RegionalViolationRegisterVarianceFields_illegal_code(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._RegionalViolationRegisterVarianceFields_illegal_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriousTrafficViolationImplementors = []string{"SeriousTrafficViolation"}

func (ec *executionContext) _SeriousTrafficViolation(ctx context.Context, sel ast.SelectionSet, obj *model1.SeriousTrafficViolation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriousTrafficViolationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeriousTrafficViolation")
		case "id":
			out.Values[i] = ec._SeriousTrafficViolation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "serious_traffic_violation_id":
			out.Values[i] = ec._SeriousTrafficViolation_serious_traffic_violation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._SeriousTrafficViolation_vehicle_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._SeriousTrafficViolation_illegal_code(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._SeriousTrafficViolation_illegal_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SeriousTrafficViolation_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._SeriousTrafficViolation_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._SeriousTrafficViolation_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._SeriousTrafficViolation_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._SeriousTrafficViolation_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._SeriousTrafficViolation_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriousTrafficViolationAggregateImplementors = []string{"SeriousTrafficViolationAggregate"}

func (ec *executionContext) _SeriousTrafficViolationAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.SeriousTrafficViolationAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriousTrafficViolationAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeriousTrafficViolationAggregate")
		case "aggregate":
			out.Values[i] = ec._SeriousTrafficViolationAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriousTrafficViolationAggregateFieldsImplementors = []string{"SeriousTrafficViolationAggregateFields"}

func (ec *executionContext) _SeriousTrafficViolationAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.SeriousTrafficViolationAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriousTrafficViolationAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeriousTrafficViolationAggregateFields")
		case "avg":
			out.Values[i] = ec._SeriousTrafficViolationAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._SeriousTrafficViolationAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._SeriousTrafficViolationAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._SeriousTrafficViolationAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._SeriousTrafficViolationAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._SeriousTrafficViolationAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._SeriousTrafficViolationAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._SeriousTrafficViolationAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._SeriousTrafficViolationAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._SeriousTrafficViolationAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._SeriousTrafficViolationAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriousTrafficViolationAvgFieldsImplementors = []string{"SeriousTrafficViolationAvgFields"}

func (ec *executionContext) _SeriousTrafficViolationAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.SeriousTrafficViolationAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriousTrafficViolationAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeriousTrafficViolationAvgFields")
		case "id":
			out.Values[i] = ec._SeriousTrafficViolationAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriousTrafficViolationMaxFieldsImplementors = []string{"SeriousTrafficViolationMaxFields"}

func (ec *executionContext) _SeriousTrafficViolationMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.SeriousTrafficViolationMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriousTrafficViolationMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeriousTrafficViolationMaxFields")
		case "id":
			out.Values[i] = ec._SeriousTrafficViolationMaxFields_id(ctx, field, obj)
		case "serious_traffic_violation_id":
			out.Values[i] = ec._SeriousTrafficViolationMaxFields_serious_traffic_violation_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._SeriousTrafficViolationMaxFields_vehicle_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._SeriousTrafficViolationMaxFields_illegal_code(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._SeriousTrafficViolationMaxFields_illegal_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SeriousTrafficViolationMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._SeriousTrafficViolationMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._SeriousTrafficViolationMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._SeriousTrafficViolationMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._SeriousTrafficViolationMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._SeriousTrafficViolationMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriousTrafficViolationMinFieldsImplementors = []string{"SeriousTrafficViolationMinFields"}

func (ec *executionContext) _SeriousTrafficViolationMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.SeriousTrafficViolationMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriousTrafficViolationMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeriousTrafficViolationMinFields")
		case "id":
			out.Values[i] = ec._SeriousTrafficViolationMinFields_id(ctx, field, obj)
		case "serious_traffic_violation_id":
			out.Values[i] = ec._SeriousTrafficViolationMinFields_serious_traffic_violation_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._SeriousTrafficViolationMinFields_vehicle_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._SeriousTrafficViolationMinFields_illegal_code(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._SeriousTrafficViolationMinFields_illegal_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SeriousTrafficViolationMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._SeriousTrafficViolationMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._SeriousTrafficViolationMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._SeriousTrafficViolationMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._SeriousTrafficViolationMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._SeriousTrafficViolationMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriousTrafficViolationMutationResponseImplementors = []string{"SeriousTrafficViolationMutationResponse"}

func (ec *executionContext) _SeriousTrafficViolationMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.SeriousTrafficViolationMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriousTrafficViolationMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeriousTrafficViolationMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._SeriousTrafficViolationMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._SeriousTrafficViolationMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriousTrafficViolationStddevFieldsImplementors = []string{"SeriousTrafficViolationStddevFields"}

func (ec *executionContext) _SeriousTrafficViolationStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.SeriousTrafficViolationStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriousTrafficViolationStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeriousTrafficViolationStddevFields")
		case "id":
			out.Values[i] = ec._SeriousTrafficViolationStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriousTrafficViolationStddevPopFieldsImplementors = []string{"SeriousTrafficViolationStddevPopFields"}

func (ec *executionContext) _SeriousTrafficViolationStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.SeriousTrafficViolationStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriousTrafficViolationStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeriousTrafficViolationStddevPopFields")
		case "id":
			out.Values[i] = ec._SeriousTrafficViolationStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriousTrafficViolationStddevSampFieldsImplementors = []string{"SeriousTrafficViolationStddevSampFields"}

func (ec *executionContext) _SeriousTrafficViolationStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.SeriousTrafficViolationStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriousTrafficViolationStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeriousTrafficViolationStddevSampFields")
		case "id":
			out.Values[i] = ec._SeriousTrafficViolationStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriousTrafficViolationSumFieldsImplementors = []string{"SeriousTrafficViolationSumFields"}

func (ec *executionContext) _SeriousTrafficViolationSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.SeriousTrafficViolationSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriousTrafficViolationSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeriousTrafficViolationSumFields")
		case "id":
			out.Values[i] = ec._SeriousTrafficViolationSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriousTrafficViolationVarPopFieldsImplementors = []string{"SeriousTrafficViolationVarPopFields"}

func (ec *executionContext) _SeriousTrafficViolationVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.SeriousTrafficViolationVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriousTrafficViolationVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeriousTrafficViolationVarPopFields")
		case "id":
			out.Values[i] = ec._SeriousTrafficViolationVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriousTrafficViolationVarSampFieldsImplementors = []string{"SeriousTrafficViolationVarSampFields"}

func (ec *executionContext) _SeriousTrafficViolationVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.SeriousTrafficViolationVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriousTrafficViolationVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeriousTrafficViolationVarSampFields")
		case "id":
			out.Values[i] = ec._SeriousTrafficViolationVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seriousTrafficViolationVarianceFieldsImplementors = []string{"SeriousTrafficViolationVarianceFields"}

func (ec *executionContext) _SeriousTrafficViolationVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.SeriousTrafficViolationVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seriousTrafficViolationVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeriousTrafficViolationVarianceFields")
		case "id":
			out.Values[i] = ec._SeriousTrafficViolationVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationDetailsImplementors = []string{"VehicleViolationDetails"}

func (ec *executionContext) _VehicleViolationDetails(ctx context.Context, sel ast.SelectionSet, obj *model1.VehicleViolationDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationDetails")
		case "id":
			out.Values[i] = ec._VehicleViolationDetails_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "violation_detail_id":
			out.Values[i] = ec._VehicleViolationDetails_violation_detail_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._VehicleViolationDetails_vehicle_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._VehicleViolationDetails_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._VehicleViolationDetails_enterprise_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._VehicleViolationDetails_illegal_code(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._VehicleViolationDetails_illegal_time(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._VehicleViolationDetails_illegal_handling_status(ctx, field, obj)
		case "illegal_location":
			out.Values[i] = ec._VehicleViolationDetails_illegal_location(ctx, field, obj)
		case "standard_value":
			out.Values[i] = ec._VehicleViolationDetails_standard_value(ctx, field, obj)
		case "measured_value":
			out.Values[i] = ec._VehicleViolationDetails_measured_value(ctx, field, obj)
		case "discovery_agency":
			out.Values[i] = ec._VehicleViolationDetails_discovery_agency(ctx, field, obj)
		case "illegal_photo":
			out.Values[i] = ec._VehicleViolationDetails_illegal_photo(ctx, field, obj)
		case "is_notice_driver":
			out.Values[i] = ec._VehicleViolationDetails_is_notice_driver(ctx, field, obj)
		case "notice_time":
			out.Values[i] = ec._VehicleViolationDetails_notice_time(ctx, field, obj)
		case "decision_number":
			out.Values[i] = ec._VehicleViolationDetails_decision_number(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._VehicleViolationDetails_payment_mark(ctx, field, obj)
		case "party_name":
			out.Values[i] = ec._VehicleViolationDetails_party_name(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._VehicleViolationDetails_information_source(ctx, field, obj)
		case "vehicle_information":
			out.Values[i] = ec._VehicleViolationDetails_vehicle_information(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._VehicleViolationDetails_update_time_in(ctx, field, obj)
		case "is_handle":
			out.Values[i] = ec._VehicleViolationDetails_is_handle(ctx, field, obj)
		case "handle_by":
			out.Values[i] = ec._VehicleViolationDetails_handle_by(ctx, field, obj)
		case "handle_at":
			out.Values[i] = ec._VehicleViolationDetails_handle_at(ctx, field, obj)
		case "is_send":
			out.Values[i] = ec._VehicleViolationDetails_is_send(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleViolationDetails_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleViolationDetails_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._VehicleViolationDetails_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._VehicleViolationDetails_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleViolationDetails_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleViolationDetails_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleViolationDetails_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationDetailsAggregateImplementors = []string{"VehicleViolationDetailsAggregate"}

func (ec *executionContext) _VehicleViolationDetailsAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationDetailsAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationDetailsAggregate")
		case "aggregate":
			out.Values[i] = ec._VehicleViolationDetailsAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationDetailsAggregateFieldsImplementors = []string{"VehicleViolationDetailsAggregateFields"}

func (ec *executionContext) _VehicleViolationDetailsAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationDetailsAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationDetailsAggregateFields")
		case "avg":
			out.Values[i] = ec._VehicleViolationDetailsAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VehicleViolationDetailsAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VehicleViolationDetailsAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VehicleViolationDetailsAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VehicleViolationDetailsAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VehicleViolationDetailsAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VehicleViolationDetailsAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VehicleViolationDetailsAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VehicleViolationDetailsAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VehicleViolationDetailsAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VehicleViolationDetailsAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationDetailsAvgFieldsImplementors = []string{"VehicleViolationDetailsAvgFields"}

func (ec *executionContext) _VehicleViolationDetailsAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationDetailsAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationDetailsAvgFields")
		case "id":
			out.Values[i] = ec._VehicleViolationDetailsAvgFields_id(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._VehicleViolationDetailsAvgFields_illegal_handling_status(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._VehicleViolationDetailsAvgFields_payment_mark(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._VehicleViolationDetailsAvgFields_information_source(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationDetailsMaxFieldsImplementors = []string{"VehicleViolationDetailsMaxFields"}

func (ec *executionContext) _VehicleViolationDetailsMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationDetailsMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationDetailsMaxFields")
		case "id":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_id(ctx, field, obj)
		case "violation_detail_id":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_violation_detail_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_vehicle_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_enterprise_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_illegal_code(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_illegal_time(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_illegal_handling_status(ctx, field, obj)
		case "illegal_location":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_illegal_location(ctx, field, obj)
		case "standard_value":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_standard_value(ctx, field, obj)
		case "measured_value":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_measured_value(ctx, field, obj)
		case "discovery_agency":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_discovery_agency(ctx, field, obj)
		case "illegal_photo":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_illegal_photo(ctx, field, obj)
		case "is_notice_driver":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_is_notice_driver(ctx, field, obj)
		case "notice_time":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_notice_time(ctx, field, obj)
		case "decision_number":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_decision_number(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_payment_mark(ctx, field, obj)
		case "party_name":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_party_name(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_information_source(ctx, field, obj)
		case "vehicle_information":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_vehicle_information(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_update_time_in(ctx, field, obj)
		case "is_handle":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_is_handle(ctx, field, obj)
		case "handle_by":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_handle_by(ctx, field, obj)
		case "handle_at":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_handle_at(ctx, field, obj)
		case "is_send":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_is_send(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleViolationDetailsMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationDetailsMinFieldsImplementors = []string{"VehicleViolationDetailsMinFields"}

func (ec *executionContext) _VehicleViolationDetailsMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationDetailsMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationDetailsMinFields")
		case "id":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_id(ctx, field, obj)
		case "violation_detail_id":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_violation_detail_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_vehicle_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_enterprise_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_illegal_code(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_illegal_time(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_illegal_handling_status(ctx, field, obj)
		case "illegal_location":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_illegal_location(ctx, field, obj)
		case "standard_value":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_standard_value(ctx, field, obj)
		case "measured_value":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_measured_value(ctx, field, obj)
		case "discovery_agency":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_discovery_agency(ctx, field, obj)
		case "illegal_photo":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_illegal_photo(ctx, field, obj)
		case "is_notice_driver":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_is_notice_driver(ctx, field, obj)
		case "notice_time":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_notice_time(ctx, field, obj)
		case "decision_number":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_decision_number(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_payment_mark(ctx, field, obj)
		case "party_name":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_party_name(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_information_source(ctx, field, obj)
		case "vehicle_information":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_vehicle_information(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_update_time_in(ctx, field, obj)
		case "is_handle":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_is_handle(ctx, field, obj)
		case "handle_by":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_handle_by(ctx, field, obj)
		case "handle_at":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_handle_at(ctx, field, obj)
		case "is_send":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_is_send(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleViolationDetailsMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationDetailsMutationResponseImplementors = []string{"VehicleViolationDetailsMutationResponse"}

func (ec *executionContext) _VehicleViolationDetailsMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationDetailsMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationDetailsMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VehicleViolationDetailsMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VehicleViolationDetailsMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationDetailsStddevFieldsImplementors = []string{"VehicleViolationDetailsStddevFields"}

func (ec *executionContext) _VehicleViolationDetailsStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationDetailsStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationDetailsStddevFields")
		case "id":
			out.Values[i] = ec._VehicleViolationDetailsStddevFields_id(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._VehicleViolationDetailsStddevFields_illegal_handling_status(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._VehicleViolationDetailsStddevFields_payment_mark(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._VehicleViolationDetailsStddevFields_information_source(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationDetailsStddevPopFieldsImplementors = []string{"VehicleViolationDetailsStddevPopFields"}

func (ec *executionContext) _VehicleViolationDetailsStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationDetailsStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationDetailsStddevPopFields")
		case "id":
			out.Values[i] = ec._VehicleViolationDetailsStddevPopFields_id(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._VehicleViolationDetailsStddevPopFields_illegal_handling_status(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._VehicleViolationDetailsStddevPopFields_payment_mark(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._VehicleViolationDetailsStddevPopFields_information_source(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationDetailsStddevSampFieldsImplementors = []string{"VehicleViolationDetailsStddevSampFields"}

func (ec *executionContext) _VehicleViolationDetailsStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationDetailsStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationDetailsStddevSampFields")
		case "id":
			out.Values[i] = ec._VehicleViolationDetailsStddevSampFields_id(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._VehicleViolationDetailsStddevSampFields_illegal_handling_status(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._VehicleViolationDetailsStddevSampFields_payment_mark(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._VehicleViolationDetailsStddevSampFields_information_source(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationDetailsSumFieldsImplementors = []string{"VehicleViolationDetailsSumFields"}

func (ec *executionContext) _VehicleViolationDetailsSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationDetailsSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationDetailsSumFields")
		case "id":
			out.Values[i] = ec._VehicleViolationDetailsSumFields_id(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._VehicleViolationDetailsSumFields_illegal_handling_status(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._VehicleViolationDetailsSumFields_payment_mark(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._VehicleViolationDetailsSumFields_information_source(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationDetailsVarPopFieldsImplementors = []string{"VehicleViolationDetailsVarPopFields"}

func (ec *executionContext) _VehicleViolationDetailsVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationDetailsVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationDetailsVarPopFields")
		case "id":
			out.Values[i] = ec._VehicleViolationDetailsVarPopFields_id(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._VehicleViolationDetailsVarPopFields_illegal_handling_status(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._VehicleViolationDetailsVarPopFields_payment_mark(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._VehicleViolationDetailsVarPopFields_information_source(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationDetailsVarSampFieldsImplementors = []string{"VehicleViolationDetailsVarSampFields"}

func (ec *executionContext) _VehicleViolationDetailsVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationDetailsVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationDetailsVarSampFields")
		case "id":
			out.Values[i] = ec._VehicleViolationDetailsVarSampFields_id(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._VehicleViolationDetailsVarSampFields_illegal_handling_status(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._VehicleViolationDetailsVarSampFields_payment_mark(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._VehicleViolationDetailsVarSampFields_information_source(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationDetailsVarianceFieldsImplementors = []string{"VehicleViolationDetailsVarianceFields"}

func (ec *executionContext) _VehicleViolationDetailsVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationDetailsVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationDetailsVarianceFields")
		case "id":
			out.Values[i] = ec._VehicleViolationDetailsVarianceFields_id(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._VehicleViolationDetailsVarianceFields_illegal_handling_status(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._VehicleViolationDetailsVarianceFields_payment_mark(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._VehicleViolationDetailsVarianceFields_information_source(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringItemsImplementors = []string{"VehicleViolationScoringItems"}

func (ec *executionContext) _VehicleViolationScoringItems(ctx context.Context, sel ast.SelectionSet, obj *model1.VehicleViolationScoringItems) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringItemsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringItems")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringItems_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "violation_scoring_item_id":
			out.Values[i] = ec._VehicleViolationScoringItems_violation_scoring_item_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deduction_item_description":
			out.Values[i] = ec._VehicleViolationScoringItems_deduction_item_description(ctx, field, obj)
		case "deduction_category":
			out.Values[i] = ec._VehicleViolationScoringItems_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringItems_demerit_points(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleViolationScoringItems_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleViolationScoringItems_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._VehicleViolationScoringItems_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._VehicleViolationScoringItems_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleViolationScoringItems_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleViolationScoringItems_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleViolationScoringItems_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringItemsAggregateImplementors = []string{"VehicleViolationScoringItemsAggregate"}

func (ec *executionContext) _VehicleViolationScoringItemsAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringItemsAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringItemsAggregate")
		case "aggregate":
			out.Values[i] = ec._VehicleViolationScoringItemsAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringItemsAggregateFieldsImplementors = []string{"VehicleViolationScoringItemsAggregateFields"}

func (ec *executionContext) _VehicleViolationScoringItemsAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringItemsAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringItemsAggregateFields")
		case "avg":
			out.Values[i] = ec._VehicleViolationScoringItemsAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VehicleViolationScoringItemsAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VehicleViolationScoringItemsAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VehicleViolationScoringItemsAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VehicleViolationScoringItemsAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VehicleViolationScoringItemsAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VehicleViolationScoringItemsAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VehicleViolationScoringItemsAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VehicleViolationScoringItemsAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VehicleViolationScoringItemsAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VehicleViolationScoringItemsAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringItemsAvgFieldsImplementors = []string{"VehicleViolationScoringItemsAvgFields"}

func (ec *executionContext) _VehicleViolationScoringItemsAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringItemsAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringItemsAvgFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringItemsAvgFields_id(ctx, field, obj)
		case "deduction_category":
			out.Values[i] = ec._VehicleViolationScoringItemsAvgFields_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringItemsAvgFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringItemsMaxFieldsImplementors = []string{"VehicleViolationScoringItemsMaxFields"}

func (ec *executionContext) _VehicleViolationScoringItemsMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringItemsMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringItemsMaxFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringItemsMaxFields_id(ctx, field, obj)
		case "violation_scoring_item_id":
			out.Values[i] = ec._VehicleViolationScoringItemsMaxFields_violation_scoring_item_id(ctx, field, obj)
		case "deduction_item_description":
			out.Values[i] = ec._VehicleViolationScoringItemsMaxFields_deduction_item_description(ctx, field, obj)
		case "deduction_category":
			out.Values[i] = ec._VehicleViolationScoringItemsMaxFields_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringItemsMaxFields_demerit_points(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleViolationScoringItemsMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleViolationScoringItemsMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleViolationScoringItemsMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleViolationScoringItemsMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleViolationScoringItemsMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleViolationScoringItemsMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleViolationScoringItemsMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringItemsMinFieldsImplementors = []string{"VehicleViolationScoringItemsMinFields"}

func (ec *executionContext) _VehicleViolationScoringItemsMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringItemsMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringItemsMinFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringItemsMinFields_id(ctx, field, obj)
		case "violation_scoring_item_id":
			out.Values[i] = ec._VehicleViolationScoringItemsMinFields_violation_scoring_item_id(ctx, field, obj)
		case "deduction_item_description":
			out.Values[i] = ec._VehicleViolationScoringItemsMinFields_deduction_item_description(ctx, field, obj)
		case "deduction_category":
			out.Values[i] = ec._VehicleViolationScoringItemsMinFields_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringItemsMinFields_demerit_points(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleViolationScoringItemsMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleViolationScoringItemsMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleViolationScoringItemsMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleViolationScoringItemsMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleViolationScoringItemsMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleViolationScoringItemsMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleViolationScoringItemsMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringItemsMutationResponseImplementors = []string{"VehicleViolationScoringItemsMutationResponse"}

func (ec *executionContext) _VehicleViolationScoringItemsMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringItemsMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringItemsMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VehicleViolationScoringItemsMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VehicleViolationScoringItemsMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringItemsStddevFieldsImplementors = []string{"VehicleViolationScoringItemsStddevFields"}

func (ec *executionContext) _VehicleViolationScoringItemsStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringItemsStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringItemsStddevFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringItemsStddevFields_id(ctx, field, obj)
		case "deduction_category":
			out.Values[i] = ec._VehicleViolationScoringItemsStddevFields_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringItemsStddevFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringItemsStddevPopFieldsImplementors = []string{"VehicleViolationScoringItemsStddevPopFields"}

func (ec *executionContext) _VehicleViolationScoringItemsStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringItemsStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringItemsStddevPopFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringItemsStddevPopFields_id(ctx, field, obj)
		case "deduction_category":
			out.Values[i] = ec._VehicleViolationScoringItemsStddevPopFields_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringItemsStddevPopFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringItemsStddevSampFieldsImplementors = []string{"VehicleViolationScoringItemsStddevSampFields"}

func (ec *executionContext) _VehicleViolationScoringItemsStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringItemsStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringItemsStddevSampFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringItemsStddevSampFields_id(ctx, field, obj)
		case "deduction_category":
			out.Values[i] = ec._VehicleViolationScoringItemsStddevSampFields_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringItemsStddevSampFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringItemsSumFieldsImplementors = []string{"VehicleViolationScoringItemsSumFields"}

func (ec *executionContext) _VehicleViolationScoringItemsSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringItemsSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringItemsSumFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringItemsSumFields_id(ctx, field, obj)
		case "deduction_category":
			out.Values[i] = ec._VehicleViolationScoringItemsSumFields_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringItemsSumFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringItemsVarPopFieldsImplementors = []string{"VehicleViolationScoringItemsVarPopFields"}

func (ec *executionContext) _VehicleViolationScoringItemsVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringItemsVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringItemsVarPopFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringItemsVarPopFields_id(ctx, field, obj)
		case "deduction_category":
			out.Values[i] = ec._VehicleViolationScoringItemsVarPopFields_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringItemsVarPopFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringItemsVarSampFieldsImplementors = []string{"VehicleViolationScoringItemsVarSampFields"}

func (ec *executionContext) _VehicleViolationScoringItemsVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringItemsVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringItemsVarSampFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringItemsVarSampFields_id(ctx, field, obj)
		case "deduction_category":
			out.Values[i] = ec._VehicleViolationScoringItemsVarSampFields_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringItemsVarSampFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringItemsVarianceFieldsImplementors = []string{"VehicleViolationScoringItemsVarianceFields"}

func (ec *executionContext) _VehicleViolationScoringItemsVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringItemsVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringItemsVarianceFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringItemsVarianceFields_id(ctx, field, obj)
		case "deduction_category":
			out.Values[i] = ec._VehicleViolationScoringItemsVarianceFields_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringItemsVarianceFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringRecordImplementors = []string{"VehicleViolationScoringRecord"}

func (ec *executionContext) _VehicleViolationScoringRecord(ctx context.Context, sel ast.SelectionSet, obj *model1.VehicleViolationScoringRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringRecord")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "violation_scoring_id":
			out.Values[i] = ec._VehicleViolationScoringRecord_violation_scoring_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._VehicleViolationScoringRecord_vehicle_id(ctx, field, obj)
		case "violation_scoring_item_id":
			out.Values[i] = ec._VehicleViolationScoringRecord_violation_scoring_item_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringRecord_demerit_points(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._VehicleViolationScoringRecord_remarks(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleViolationScoringRecord_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleViolationScoringRecord_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._VehicleViolationScoringRecord_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._VehicleViolationScoringRecord_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleViolationScoringRecord_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleViolationScoringRecord_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleViolationScoringRecord_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringRecordAggregateImplementors = []string{"VehicleViolationScoringRecordAggregate"}

func (ec *executionContext) _VehicleViolationScoringRecordAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringRecordAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringRecordAggregate")
		case "aggregate":
			out.Values[i] = ec._VehicleViolationScoringRecordAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringRecordAggregateFieldsImplementors = []string{"VehicleViolationScoringRecordAggregateFields"}

func (ec *executionContext) _VehicleViolationScoringRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringRecordAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringRecordAggregateFields")
		case "avg":
			out.Values[i] = ec._VehicleViolationScoringRecordAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VehicleViolationScoringRecordAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VehicleViolationScoringRecordAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VehicleViolationScoringRecordAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VehicleViolationScoringRecordAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VehicleViolationScoringRecordAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VehicleViolationScoringRecordAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VehicleViolationScoringRecordAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VehicleViolationScoringRecordAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VehicleViolationScoringRecordAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VehicleViolationScoringRecordAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringRecordAvgFieldsImplementors = []string{"VehicleViolationScoringRecordAvgFields"}

func (ec *executionContext) _VehicleViolationScoringRecordAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringRecordAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringRecordAvgFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringRecordAvgFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringRecordAvgFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringRecordMaxFieldsImplementors = []string{"VehicleViolationScoringRecordMaxFields"}

func (ec *executionContext) _VehicleViolationScoringRecordMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringRecordMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringRecordMaxFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringRecordMaxFields_id(ctx, field, obj)
		case "violation_scoring_id":
			out.Values[i] = ec._VehicleViolationScoringRecordMaxFields_violation_scoring_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleViolationScoringRecordMaxFields_vehicle_id(ctx, field, obj)
		case "violation_scoring_item_id":
			out.Values[i] = ec._VehicleViolationScoringRecordMaxFields_violation_scoring_item_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringRecordMaxFields_demerit_points(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._VehicleViolationScoringRecordMaxFields_remarks(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleViolationScoringRecordMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleViolationScoringRecordMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleViolationScoringRecordMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleViolationScoringRecordMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleViolationScoringRecordMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleViolationScoringRecordMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleViolationScoringRecordMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringRecordMinFieldsImplementors = []string{"VehicleViolationScoringRecordMinFields"}

func (ec *executionContext) _VehicleViolationScoringRecordMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringRecordMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringRecordMinFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringRecordMinFields_id(ctx, field, obj)
		case "violation_scoring_id":
			out.Values[i] = ec._VehicleViolationScoringRecordMinFields_violation_scoring_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleViolationScoringRecordMinFields_vehicle_id(ctx, field, obj)
		case "violation_scoring_item_id":
			out.Values[i] = ec._VehicleViolationScoringRecordMinFields_violation_scoring_item_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringRecordMinFields_demerit_points(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._VehicleViolationScoringRecordMinFields_remarks(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleViolationScoringRecordMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleViolationScoringRecordMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleViolationScoringRecordMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleViolationScoringRecordMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleViolationScoringRecordMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleViolationScoringRecordMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleViolationScoringRecordMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringRecordMutationResponseImplementors = []string{"VehicleViolationScoringRecordMutationResponse"}

func (ec *executionContext) _VehicleViolationScoringRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringRecordMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringRecordMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VehicleViolationScoringRecordMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VehicleViolationScoringRecordMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringRecordStddevFieldsImplementors = []string{"VehicleViolationScoringRecordStddevFields"}

func (ec *executionContext) _VehicleViolationScoringRecordStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringRecordStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringRecordStddevFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringRecordStddevFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringRecordStddevFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringRecordStddevPopFieldsImplementors = []string{"VehicleViolationScoringRecordStddevPopFields"}

func (ec *executionContext) _VehicleViolationScoringRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringRecordStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringRecordStddevPopFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringRecordStddevPopFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringRecordStddevPopFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringRecordStddevSampFieldsImplementors = []string{"VehicleViolationScoringRecordStddevSampFields"}

func (ec *executionContext) _VehicleViolationScoringRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringRecordStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringRecordStddevSampFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringRecordStddevSampFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringRecordStddevSampFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringRecordSumFieldsImplementors = []string{"VehicleViolationScoringRecordSumFields"}

func (ec *executionContext) _VehicleViolationScoringRecordSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringRecordSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringRecordSumFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringRecordSumFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringRecordSumFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringRecordVarPopFieldsImplementors = []string{"VehicleViolationScoringRecordVarPopFields"}

func (ec *executionContext) _VehicleViolationScoringRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringRecordVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringRecordVarPopFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringRecordVarPopFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringRecordVarPopFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringRecordVarSampFieldsImplementors = []string{"VehicleViolationScoringRecordVarSampFields"}

func (ec *executionContext) _VehicleViolationScoringRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringRecordVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringRecordVarSampFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringRecordVarSampFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringRecordVarSampFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleViolationScoringRecordVarianceFieldsImplementors = []string{"VehicleViolationScoringRecordVarianceFields"}

func (ec *executionContext) _VehicleViolationScoringRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleViolationScoringRecordVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleViolationScoringRecordVarianceFields")
		case "id":
			out.Values[i] = ec._VehicleViolationScoringRecordVarianceFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._VehicleViolationScoringRecordVarianceFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vioCodewfdmImplementors = []string{"VioCodewfdm"}

func (ec *executionContext) _VioCodewfdm(ctx context.Context, sel ast.SelectionSet, obj *model1.VioCodewfdm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vioCodewfdmImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VioCodewfdm")
		case "wfxw":
			out.Values[i] = ec._VioCodewfdm_wfxw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "wfms":
			out.Values[i] = ec._VioCodewfdm_wfms(ctx, field, obj)
		case "wfjfs":
			out.Values[i] = ec._VioCodewfdm_wfjfs(ctx, field, obj)
		case "fkje_min":
			out.Values[i] = ec._VioCodewfdm_fkje_min(ctx, field, obj)
		case "fkje_max":
			out.Values[i] = ec._VioCodewfdm_fkje_max(ctx, field, obj)
		case "xh":
			out.Values[i] = ec._VioCodewfdm_xh(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vioCodewfdmAggregateImplementors = []string{"VioCodewfdmAggregate"}

func (ec *executionContext) _VioCodewfdmAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vioCodewfdmAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VioCodewfdmAggregate")
		case "aggregate":
			out.Values[i] = ec._VioCodewfdmAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vioCodewfdmAggregateFieldsImplementors = []string{"VioCodewfdmAggregateFields"}

func (ec *executionContext) _VioCodewfdmAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vioCodewfdmAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VioCodewfdmAggregateFields")
		case "avg":
			out.Values[i] = ec._VioCodewfdmAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VioCodewfdmAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VioCodewfdmAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VioCodewfdmAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VioCodewfdmAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VioCodewfdmAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VioCodewfdmAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VioCodewfdmAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VioCodewfdmAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VioCodewfdmAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VioCodewfdmAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vioCodewfdmAvgFieldsImplementors = []string{"VioCodewfdmAvgFields"}

func (ec *executionContext) _VioCodewfdmAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vioCodewfdmAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VioCodewfdmAvgFields")
		case "wfjfs":
			out.Values[i] = ec._VioCodewfdmAvgFields_wfjfs(ctx, field, obj)
		case "fkje_min":
			out.Values[i] = ec._VioCodewfdmAvgFields_fkje_min(ctx, field, obj)
		case "fkje_max":
			out.Values[i] = ec._VioCodewfdmAvgFields_fkje_max(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vioCodewfdmMaxFieldsImplementors = []string{"VioCodewfdmMaxFields"}

func (ec *executionContext) _VioCodewfdmMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vioCodewfdmMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VioCodewfdmMaxFields")
		case "wfxw":
			out.Values[i] = ec._VioCodewfdmMaxFields_wfxw(ctx, field, obj)
		case "wfms":
			out.Values[i] = ec._VioCodewfdmMaxFields_wfms(ctx, field, obj)
		case "wfjfs":
			out.Values[i] = ec._VioCodewfdmMaxFields_wfjfs(ctx, field, obj)
		case "fkje_min":
			out.Values[i] = ec._VioCodewfdmMaxFields_fkje_min(ctx, field, obj)
		case "fkje_max":
			out.Values[i] = ec._VioCodewfdmMaxFields_fkje_max(ctx, field, obj)
		case "xh":
			out.Values[i] = ec._VioCodewfdmMaxFields_xh(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vioCodewfdmMinFieldsImplementors = []string{"VioCodewfdmMinFields"}

func (ec *executionContext) _VioCodewfdmMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vioCodewfdmMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VioCodewfdmMinFields")
		case "wfxw":
			out.Values[i] = ec._VioCodewfdmMinFields_wfxw(ctx, field, obj)
		case "wfms":
			out.Values[i] = ec._VioCodewfdmMinFields_wfms(ctx, field, obj)
		case "wfjfs":
			out.Values[i] = ec._VioCodewfdmMinFields_wfjfs(ctx, field, obj)
		case "fkje_min":
			out.Values[i] = ec._VioCodewfdmMinFields_fkje_min(ctx, field, obj)
		case "fkje_max":
			out.Values[i] = ec._VioCodewfdmMinFields_fkje_max(ctx, field, obj)
		case "xh":
			out.Values[i] = ec._VioCodewfdmMinFields_xh(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vioCodewfdmMutationResponseImplementors = []string{"VioCodewfdmMutationResponse"}

func (ec *executionContext) _VioCodewfdmMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vioCodewfdmMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VioCodewfdmMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VioCodewfdmMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VioCodewfdmMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vioCodewfdmStddevFieldsImplementors = []string{"VioCodewfdmStddevFields"}

func (ec *executionContext) _VioCodewfdmStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vioCodewfdmStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VioCodewfdmStddevFields")
		case "wfjfs":
			out.Values[i] = ec._VioCodewfdmStddevFields_wfjfs(ctx, field, obj)
		case "fkje_min":
			out.Values[i] = ec._VioCodewfdmStddevFields_fkje_min(ctx, field, obj)
		case "fkje_max":
			out.Values[i] = ec._VioCodewfdmStddevFields_fkje_max(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vioCodewfdmStddevPopFieldsImplementors = []string{"VioCodewfdmStddevPopFields"}

func (ec *executionContext) _VioCodewfdmStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vioCodewfdmStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VioCodewfdmStddevPopFields")
		case "wfjfs":
			out.Values[i] = ec._VioCodewfdmStddevPopFields_wfjfs(ctx, field, obj)
		case "fkje_min":
			out.Values[i] = ec._VioCodewfdmStddevPopFields_fkje_min(ctx, field, obj)
		case "fkje_max":
			out.Values[i] = ec._VioCodewfdmStddevPopFields_fkje_max(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vioCodewfdmStddevSampFieldsImplementors = []string{"VioCodewfdmStddevSampFields"}

func (ec *executionContext) _VioCodewfdmStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vioCodewfdmStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VioCodewfdmStddevSampFields")
		case "wfjfs":
			out.Values[i] = ec._VioCodewfdmStddevSampFields_wfjfs(ctx, field, obj)
		case "fkje_min":
			out.Values[i] = ec._VioCodewfdmStddevSampFields_fkje_min(ctx, field, obj)
		case "fkje_max":
			out.Values[i] = ec._VioCodewfdmStddevSampFields_fkje_max(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vioCodewfdmSumFieldsImplementors = []string{"VioCodewfdmSumFields"}

func (ec *executionContext) _VioCodewfdmSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vioCodewfdmSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VioCodewfdmSumFields")
		case "wfjfs":
			out.Values[i] = ec._VioCodewfdmSumFields_wfjfs(ctx, field, obj)
		case "fkje_min":
			out.Values[i] = ec._VioCodewfdmSumFields_fkje_min(ctx, field, obj)
		case "fkje_max":
			out.Values[i] = ec._VioCodewfdmSumFields_fkje_max(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vioCodewfdmVarPopFieldsImplementors = []string{"VioCodewfdmVarPopFields"}

func (ec *executionContext) _VioCodewfdmVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vioCodewfdmVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VioCodewfdmVarPopFields")
		case "wfjfs":
			out.Values[i] = ec._VioCodewfdmVarPopFields_wfjfs(ctx, field, obj)
		case "fkje_min":
			out.Values[i] = ec._VioCodewfdmVarPopFields_fkje_min(ctx, field, obj)
		case "fkje_max":
			out.Values[i] = ec._VioCodewfdmVarPopFields_fkje_max(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vioCodewfdmVarSampFieldsImplementors = []string{"VioCodewfdmVarSampFields"}

func (ec *executionContext) _VioCodewfdmVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vioCodewfdmVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VioCodewfdmVarSampFields")
		case "wfjfs":
			out.Values[i] = ec._VioCodewfdmVarSampFields_wfjfs(ctx, field, obj)
		case "fkje_min":
			out.Values[i] = ec._VioCodewfdmVarSampFields_fkje_min(ctx, field, obj)
		case "fkje_max":
			out.Values[i] = ec._VioCodewfdmVarSampFields_fkje_max(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vioCodewfdmVarianceFieldsImplementors = []string{"VioCodewfdmVarianceFields"}

func (ec *executionContext) _VioCodewfdmVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vioCodewfdmVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VioCodewfdmVarianceFields")
		case "wfjfs":
			out.Values[i] = ec._VioCodewfdmVarianceFields_wfjfs(ctx, field, obj)
		case "fkje_min":
			out.Values[i] = ec._VioCodewfdmVarianceFields_fkje_min(ctx, field, obj)
		case "fkje_max":
			out.Values[i] = ec._VioCodewfdmVarianceFields_fkje_max(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var violationRegistrationImplementors = []string{"ViolationRegistration"}

func (ec *executionContext) _ViolationRegistration(ctx context.Context, sel ast.SelectionSet, obj *model1.ViolationRegistration) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, violationRegistrationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViolationRegistration")
		case "id":
			out.Values[i] = ec._ViolationRegistration_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "violation_registration_id":
			out.Values[i] = ec._ViolationRegistration_violation_registration_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._ViolationRegistration_vehicle_id(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._ViolationRegistration_license_plate_number(ctx, field, obj)
		case "id_card_num":
			out.Values[i] = ec._ViolationRegistration_id_card_num(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ViolationRegistration_name(ctx, field, obj)
		case "location":
			out.Values[i] = ec._ViolationRegistration_location(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._ViolationRegistration_cause(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._ViolationRegistration_illegal_time(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._ViolationRegistration_operator(ctx, field, obj)
		case "illegal_area":
			out.Values[i] = ec._ViolationRegistration_illegal_area(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._ViolationRegistration_illegal_code(ctx, field, obj)
		case "vehicle_area":
			out.Values[i] = ec._ViolationRegistration_vehicle_area(ctx, field, obj)
		case "vehicle_enterprise":
			out.Values[i] = ec._ViolationRegistration_vehicle_enterprise(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._ViolationRegistration_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._ViolationRegistration_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._ViolationRegistration_district_id(ctx, field, obj)
		case "supervisor":
			out.Values[i] = ec._ViolationRegistration_supervisor(ctx, field, obj)
		case "supervision_time":
			out.Values[i] = ec._ViolationRegistration_supervision_time(ctx, field, obj)
		case "sepervision_remarks":
			out.Values[i] = ec._ViolationRegistration_sepervision_remarks(ctx, field, obj)
		case "is_supervised":
			out.Values[i] = ec._ViolationRegistration_is_supervised(ctx, field, obj)
		case "is_accident":
			out.Values[i] = ec._ViolationRegistration_is_accident(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._ViolationRegistration_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._ViolationRegistration_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._ViolationRegistration_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._ViolationRegistration_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._ViolationRegistration_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._ViolationRegistration_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._ViolationRegistration_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var violationRegistrationAggregateImplementors = []string{"ViolationRegistrationAggregate"}

func (ec *executionContext) _ViolationRegistrationAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.ViolationRegistrationAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, violationRegistrationAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViolationRegistrationAggregate")
		case "aggregate":
			out.Values[i] = ec._ViolationRegistrationAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var violationRegistrationAggregateFieldsImplementors = []string{"ViolationRegistrationAggregateFields"}

func (ec *executionContext) _ViolationRegistrationAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.ViolationRegistrationAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, violationRegistrationAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViolationRegistrationAggregateFields")
		case "avg":
			out.Values[i] = ec._ViolationRegistrationAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._ViolationRegistrationAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._ViolationRegistrationAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._ViolationRegistrationAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._ViolationRegistrationAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._ViolationRegistrationAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._ViolationRegistrationAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._ViolationRegistrationAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._ViolationRegistrationAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._ViolationRegistrationAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._ViolationRegistrationAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var violationRegistrationAvgFieldsImplementors = []string{"ViolationRegistrationAvgFields"}

func (ec *executionContext) _ViolationRegistrationAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.ViolationRegistrationAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, violationRegistrationAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViolationRegistrationAvgFields")
		case "id":
			out.Values[i] = ec._ViolationRegistrationAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var violationRegistrationMaxFieldsImplementors = []string{"ViolationRegistrationMaxFields"}

func (ec *executionContext) _ViolationRegistrationMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.ViolationRegistrationMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, violationRegistrationMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViolationRegistrationMaxFields")
		case "id":
			out.Values[i] = ec._ViolationRegistrationMaxFields_id(ctx, field, obj)
		case "violation_registration_id":
			out.Values[i] = ec._ViolationRegistrationMaxFields_violation_registration_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._ViolationRegistrationMaxFields_vehicle_id(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._ViolationRegistrationMaxFields_license_plate_number(ctx, field, obj)
		case "id_card_num":
			out.Values[i] = ec._ViolationRegistrationMaxFields_id_card_num(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ViolationRegistrationMaxFields_name(ctx, field, obj)
		case "location":
			out.Values[i] = ec._ViolationRegistrationMaxFields_location(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._ViolationRegistrationMaxFields_cause(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._ViolationRegistrationMaxFields_illegal_time(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._ViolationRegistrationMaxFields_operator(ctx, field, obj)
		case "illegal_area":
			out.Values[i] = ec._ViolationRegistrationMaxFields_illegal_area(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._ViolationRegistrationMaxFields_illegal_code(ctx, field, obj)
		case "vehicle_area":
			out.Values[i] = ec._ViolationRegistrationMaxFields_vehicle_area(ctx, field, obj)
		case "vehicle_enterprise":
			out.Values[i] = ec._ViolationRegistrationMaxFields_vehicle_enterprise(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._ViolationRegistrationMaxFields_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._ViolationRegistrationMaxFields_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._ViolationRegistrationMaxFields_district_id(ctx, field, obj)
		case "supervisor":
			out.Values[i] = ec._ViolationRegistrationMaxFields_supervisor(ctx, field, obj)
		case "supervision_time":
			out.Values[i] = ec._ViolationRegistrationMaxFields_supervision_time(ctx, field, obj)
		case "sepervision_remarks":
			out.Values[i] = ec._ViolationRegistrationMaxFields_sepervision_remarks(ctx, field, obj)
		case "is_supervised":
			out.Values[i] = ec._ViolationRegistrationMaxFields_is_supervised(ctx, field, obj)
		case "is_accident":
			out.Values[i] = ec._ViolationRegistrationMaxFields_is_accident(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._ViolationRegistrationMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._ViolationRegistrationMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._ViolationRegistrationMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._ViolationRegistrationMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._ViolationRegistrationMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._ViolationRegistrationMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._ViolationRegistrationMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var violationRegistrationMinFieldsImplementors = []string{"ViolationRegistrationMinFields"}

func (ec *executionContext) _ViolationRegistrationMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.ViolationRegistrationMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, violationRegistrationMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViolationRegistrationMinFields")
		case "id":
			out.Values[i] = ec._ViolationRegistrationMinFields_id(ctx, field, obj)
		case "violation_registration_id":
			out.Values[i] = ec._ViolationRegistrationMinFields_violation_registration_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._ViolationRegistrationMinFields_vehicle_id(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._ViolationRegistrationMinFields_license_plate_number(ctx, field, obj)
		case "id_card_num":
			out.Values[i] = ec._ViolationRegistrationMinFields_id_card_num(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ViolationRegistrationMinFields_name(ctx, field, obj)
		case "location":
			out.Values[i] = ec._ViolationRegistrationMinFields_location(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._ViolationRegistrationMinFields_cause(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._ViolationRegistrationMinFields_illegal_time(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._ViolationRegistrationMinFields_operator(ctx, field, obj)
		case "illegal_area":
			out.Values[i] = ec._ViolationRegistrationMinFields_illegal_area(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._ViolationRegistrationMinFields_illegal_code(ctx, field, obj)
		case "vehicle_area":
			out.Values[i] = ec._ViolationRegistrationMinFields_vehicle_area(ctx, field, obj)
		case "vehicle_enterprise":
			out.Values[i] = ec._ViolationRegistrationMinFields_vehicle_enterprise(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._ViolationRegistrationMinFields_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._ViolationRegistrationMinFields_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._ViolationRegistrationMinFields_district_id(ctx, field, obj)
		case "supervisor":
			out.Values[i] = ec._ViolationRegistrationMinFields_supervisor(ctx, field, obj)
		case "supervision_time":
			out.Values[i] = ec._ViolationRegistrationMinFields_supervision_time(ctx, field, obj)
		case "sepervision_remarks":
			out.Values[i] = ec._ViolationRegistrationMinFields_sepervision_remarks(ctx, field, obj)
		case "is_supervised":
			out.Values[i] = ec._ViolationRegistrationMinFields_is_supervised(ctx, field, obj)
		case "is_accident":
			out.Values[i] = ec._ViolationRegistrationMinFields_is_accident(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._ViolationRegistrationMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._ViolationRegistrationMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._ViolationRegistrationMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._ViolationRegistrationMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._ViolationRegistrationMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._ViolationRegistrationMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._ViolationRegistrationMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var violationRegistrationMutationResponseImplementors = []string{"ViolationRegistrationMutationResponse"}

func (ec *executionContext) _ViolationRegistrationMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ViolationRegistrationMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, violationRegistrationMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViolationRegistrationMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._ViolationRegistrationMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._ViolationRegistrationMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var violationRegistrationStddevFieldsImplementors = []string{"ViolationRegistrationStddevFields"}

func (ec *executionContext) _ViolationRegistrationStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.ViolationRegistrationStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, violationRegistrationStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViolationRegistrationStddevFields")
		case "id":
			out.Values[i] = ec._ViolationRegistrationStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var violationRegistrationStddevPopFieldsImplementors = []string{"ViolationRegistrationStddevPopFields"}

func (ec *executionContext) _ViolationRegistrationStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.ViolationRegistrationStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, violationRegistrationStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViolationRegistrationStddevPopFields")
		case "id":
			out.Values[i] = ec._ViolationRegistrationStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var violationRegistrationStddevSampFieldsImplementors = []string{"ViolationRegistrationStddevSampFields"}

func (ec *executionContext) _ViolationRegistrationStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.ViolationRegistrationStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, violationRegistrationStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViolationRegistrationStddevSampFields")
		case "id":
			out.Values[i] = ec._ViolationRegistrationStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var violationRegistrationSumFieldsImplementors = []string{"ViolationRegistrationSumFields"}

func (ec *executionContext) _ViolationRegistrationSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.ViolationRegistrationSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, violationRegistrationSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViolationRegistrationSumFields")
		case "id":
			out.Values[i] = ec._ViolationRegistrationSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var violationRegistrationVarPopFieldsImplementors = []string{"ViolationRegistrationVarPopFields"}

func (ec *executionContext) _ViolationRegistrationVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.ViolationRegistrationVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, violationRegistrationVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViolationRegistrationVarPopFields")
		case "id":
			out.Values[i] = ec._ViolationRegistrationVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var violationRegistrationVarSampFieldsImplementors = []string{"ViolationRegistrationVarSampFields"}

func (ec *executionContext) _ViolationRegistrationVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.ViolationRegistrationVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, violationRegistrationVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViolationRegistrationVarSampFields")
		case "id":
			out.Values[i] = ec._ViolationRegistrationVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var violationRegistrationVarianceFieldsImplementors = []string{"ViolationRegistrationVarianceFields"}

func (ec *executionContext) _ViolationRegistrationVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.ViolationRegistrationVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, violationRegistrationVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViolationRegistrationVarianceFields")
		case "id":
			out.Values[i] = ec._ViolationRegistrationVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAppEnforcement2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐAppEnforcement(ctx context.Context, sel ast.SelectionSet, v model1.AppEnforcement) graphql.Marshaler {
	return ec._AppEnforcement(ctx, sel, &v)
}

func (ec *executionContext) marshalNAppEnforcement2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐAppEnforcementᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.AppEnforcement) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAppEnforcement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐAppEnforcement(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAppEnforcement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐAppEnforcement(ctx context.Context, sel ast.SelectionSet, v *model1.AppEnforcement) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AppEnforcement(ctx, sel, v)
}

func (ec *executionContext) marshalNAppEnforcementAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementAggregate(ctx context.Context, sel ast.SelectionSet, v model.AppEnforcementAggregate) graphql.Marshaler {
	return ec._AppEnforcementAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNAppEnforcementAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementAggregate(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AppEnforcementAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAppEnforcementBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx context.Context, v interface{}) (model.AppEnforcementBoolExp, error) {
	res, err := ec.unmarshalInputAppEnforcementBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAppEnforcementInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementInsertInput(ctx context.Context, v interface{}) (model.AppEnforcementInsertInput, error) {
	res, err := ec.unmarshalInputAppEnforcementInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAppEnforcementInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.AppEnforcementInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AppEnforcementInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAppEnforcementInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAppEnforcementInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementInsertInput(ctx context.Context, v interface{}) (*model.AppEnforcementInsertInput, error) {
	res, err := ec.unmarshalInputAppEnforcementInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAppEnforcementOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementOrderBy(ctx context.Context, v interface{}) (*model.AppEnforcementOrderBy, error) {
	res, err := ec.unmarshalInputAppEnforcementOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAppEnforcementSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumn(ctx context.Context, v interface{}) (model.AppEnforcementSelectColumn, error) {
	var res model.AppEnforcementSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAppEnforcementSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.AppEnforcementSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNDeductionReport2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDeductionReport(ctx context.Context, sel ast.SelectionSet, v model1.DeductionReport) graphql.Marshaler {
	return ec._DeductionReport(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeductionReport2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDeductionReportᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DeductionReport) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeductionReport2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDeductionReport(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDeductionReport2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDeductionReport(ctx context.Context, sel ast.SelectionSet, v *model1.DeductionReport) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeductionReport(ctx, sel, v)
}

func (ec *executionContext) marshalNDeductionReportAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportAggregate(ctx context.Context, sel ast.SelectionSet, v model.DeductionReportAggregate) graphql.Marshaler {
	return ec._DeductionReportAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeductionReportAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DeductionReportAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeductionReportAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeductionReportBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportBoolExp(ctx context.Context, v interface{}) (model.DeductionReportBoolExp, error) {
	res, err := ec.unmarshalInputDeductionReportBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeductionReportInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportInsertInput(ctx context.Context, v interface{}) (model.DeductionReportInsertInput, error) {
	res, err := ec.unmarshalInputDeductionReportInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeductionReportInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DeductionReportInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DeductionReportInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDeductionReportInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDeductionReportInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportInsertInput(ctx context.Context, v interface{}) (*model.DeductionReportInsertInput, error) {
	res, err := ec.unmarshalInputDeductionReportInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeductionReportOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportOrderBy(ctx context.Context, v interface{}) (*model.DeductionReportOrderBy, error) {
	res, err := ec.unmarshalInputDeductionReportOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeductionReportSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportSelectColumn(ctx context.Context, v interface{}) (model.DeductionReportSelectColumn, error) {
	var res model.DeductionReportSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeductionReportSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DeductionReportSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDriverPeccancyCheck2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDriverPeccancyCheck(ctx context.Context, sel ast.SelectionSet, v model1.DriverPeccancyCheck) graphql.Marshaler {
	return ec._DriverPeccancyCheck(ctx, sel, &v)
}

func (ec *executionContext) marshalNDriverPeccancyCheck2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDriverPeccancyCheckᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DriverPeccancyCheck) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverPeccancyCheck2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDriverPeccancyCheck(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDriverPeccancyCheck2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDriverPeccancyCheck(ctx context.Context, sel ast.SelectionSet, v *model1.DriverPeccancyCheck) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DriverPeccancyCheck(ctx, sel, v)
}

func (ec *executionContext) marshalNDriverPeccancyCheckAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckAggregate(ctx context.Context, sel ast.SelectionSet, v model.DriverPeccancyCheckAggregate) graphql.Marshaler {
	return ec._DriverPeccancyCheckAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDriverPeccancyCheckAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DriverPeccancyCheckAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDriverPeccancyCheckBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx context.Context, v interface{}) (model.DriverPeccancyCheckBoolExp, error) {
	res, err := ec.unmarshalInputDriverPeccancyCheckBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverPeccancyCheckInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckInsertInput(ctx context.Context, v interface{}) (model.DriverPeccancyCheckInsertInput, error) {
	res, err := ec.unmarshalInputDriverPeccancyCheckInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverPeccancyCheckInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DriverPeccancyCheckInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverPeccancyCheckInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverPeccancyCheckInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDriverPeccancyCheckInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckInsertInput(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckInsertInput, error) {
	res, err := ec.unmarshalInputDriverPeccancyCheckInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverPeccancyCheckOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckOrderBy(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckOrderBy, error) {
	res, err := ec.unmarshalInputDriverPeccancyCheckOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverPeccancyCheckSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumn(ctx context.Context, v interface{}) (model.DriverPeccancyCheckSelectColumn, error) {
	var res model.DriverPeccancyCheckSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDriverPeccancyCheckSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DriverPeccancyCheckSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNIllegalPhoto2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐIllegalPhoto(ctx context.Context, sel ast.SelectionSet, v model1.IllegalPhoto) graphql.Marshaler {
	return ec._IllegalPhoto(ctx, sel, &v)
}

func (ec *executionContext) marshalNIllegalPhoto2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐIllegalPhotoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.IllegalPhoto) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIllegalPhoto2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐIllegalPhoto(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNIllegalPhoto2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐIllegalPhoto(ctx context.Context, sel ast.SelectionSet, v *model1.IllegalPhoto) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IllegalPhoto(ctx, sel, v)
}

func (ec *executionContext) marshalNIllegalPhotoAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoAggregate(ctx context.Context, sel ast.SelectionSet, v model.IllegalPhotoAggregate) graphql.Marshaler {
	return ec._IllegalPhotoAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNIllegalPhotoAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoAggregate(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IllegalPhotoAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIllegalPhotoBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx context.Context, v interface{}) (model.IllegalPhotoBoolExp, error) {
	res, err := ec.unmarshalInputIllegalPhotoBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNIllegalPhotoInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoInsertInput(ctx context.Context, v interface{}) (model.IllegalPhotoInsertInput, error) {
	res, err := ec.unmarshalInputIllegalPhotoInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNIllegalPhotoInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.IllegalPhotoInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.IllegalPhotoInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNIllegalPhotoInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNIllegalPhotoInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoInsertInput(ctx context.Context, v interface{}) (*model.IllegalPhotoInsertInput, error) {
	res, err := ec.unmarshalInputIllegalPhotoInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNIllegalPhotoOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoOrderBy(ctx context.Context, v interface{}) (*model.IllegalPhotoOrderBy, error) {
	res, err := ec.unmarshalInputIllegalPhotoOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNIllegalPhotoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumn(ctx context.Context, v interface{}) (model.IllegalPhotoSelectColumn, error) {
	var res model.IllegalPhotoSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIllegalPhotoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.IllegalPhotoSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNNumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNRegionalViolationRegister2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐRegionalViolationRegister(ctx context.Context, sel ast.SelectionSet, v model1.RegionalViolationRegister) graphql.Marshaler {
	return ec._RegionalViolationRegister(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegionalViolationRegister2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐRegionalViolationRegisterᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.RegionalViolationRegister) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRegionalViolationRegister2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐRegionalViolationRegister(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRegionalViolationRegister2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐRegionalViolationRegister(ctx context.Context, sel ast.SelectionSet, v *model1.RegionalViolationRegister) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RegionalViolationRegister(ctx, sel, v)
}

func (ec *executionContext) marshalNRegionalViolationRegisterAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterAggregate(ctx context.Context, sel ast.SelectionSet, v model.RegionalViolationRegisterAggregate) graphql.Marshaler {
	return ec._RegionalViolationRegisterAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegionalViolationRegisterAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterAggregate(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RegionalViolationRegisterAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRegionalViolationRegisterBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx context.Context, v interface{}) (model.RegionalViolationRegisterBoolExp, error) {
	res, err := ec.unmarshalInputRegionalViolationRegisterBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRegionalViolationRegisterInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterInsertInput(ctx context.Context, v interface{}) (model.RegionalViolationRegisterInsertInput, error) {
	res, err := ec.unmarshalInputRegionalViolationRegisterInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRegionalViolationRegisterInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.RegionalViolationRegisterInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RegionalViolationRegisterInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRegionalViolationRegisterInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNRegionalViolationRegisterInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterInsertInput(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterInsertInput, error) {
	res, err := ec.unmarshalInputRegionalViolationRegisterInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRegionalViolationRegisterOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterOrderBy(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterOrderBy, error) {
	res, err := ec.unmarshalInputRegionalViolationRegisterOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRegionalViolationRegisterSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumn(ctx context.Context, v interface{}) (model.RegionalViolationRegisterSelectColumn, error) {
	var res model.RegionalViolationRegisterSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRegionalViolationRegisterSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.RegionalViolationRegisterSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNSeriousTrafficViolation2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐSeriousTrafficViolation(ctx context.Context, sel ast.SelectionSet, v model1.SeriousTrafficViolation) graphql.Marshaler {
	return ec._SeriousTrafficViolation(ctx, sel, &v)
}

func (ec *executionContext) marshalNSeriousTrafficViolation2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐSeriousTrafficViolationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.SeriousTrafficViolation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSeriousTrafficViolation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐSeriousTrafficViolation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSeriousTrafficViolation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐSeriousTrafficViolation(ctx context.Context, sel ast.SelectionSet, v *model1.SeriousTrafficViolation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SeriousTrafficViolation(ctx, sel, v)
}

func (ec *executionContext) marshalNSeriousTrafficViolationAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationAggregate(ctx context.Context, sel ast.SelectionSet, v model.SeriousTrafficViolationAggregate) graphql.Marshaler {
	return ec._SeriousTrafficViolationAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNSeriousTrafficViolationAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationAggregate(ctx context.Context, sel ast.SelectionSet, v *model.SeriousTrafficViolationAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SeriousTrafficViolationAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSeriousTrafficViolationBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationBoolExp(ctx context.Context, v interface{}) (model.SeriousTrafficViolationBoolExp, error) {
	res, err := ec.unmarshalInputSeriousTrafficViolationBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSeriousTrafficViolationInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationInsertInput(ctx context.Context, v interface{}) (model.SeriousTrafficViolationInsertInput, error) {
	res, err := ec.unmarshalInputSeriousTrafficViolationInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSeriousTrafficViolationInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.SeriousTrafficViolationInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SeriousTrafficViolationInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSeriousTrafficViolationInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNSeriousTrafficViolationInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationInsertInput(ctx context.Context, v interface{}) (*model.SeriousTrafficViolationInsertInput, error) {
	res, err := ec.unmarshalInputSeriousTrafficViolationInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSeriousTrafficViolationOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationOrderBy(ctx context.Context, v interface{}) (*model.SeriousTrafficViolationOrderBy, error) {
	res, err := ec.unmarshalInputSeriousTrafficViolationOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSeriousTrafficViolationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationSelectColumn(ctx context.Context, v interface{}) (model.SeriousTrafficViolationSelectColumn, error) {
	var res model.SeriousTrafficViolationSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSeriousTrafficViolationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.SeriousTrafficViolationSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNVehicleViolationDetails2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationDetails(ctx context.Context, sel ast.SelectionSet, v model1.VehicleViolationDetails) graphql.Marshaler {
	return ec._VehicleViolationDetails(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleViolationDetails2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationDetailsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VehicleViolationDetails) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleViolationDetails2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationDetails(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehicleViolationDetails2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationDetails(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleViolationDetails) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleViolationDetails(ctx, sel, v)
}

func (ec *executionContext) marshalNVehicleViolationDetailsAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleViolationDetailsAggregate) graphql.Marshaler {
	return ec._VehicleViolationDetailsAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleViolationDetailsAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleViolationDetailsAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehicleViolationDetailsBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx context.Context, v interface{}) (model.VehicleViolationDetailsBoolExp, error) {
	res, err := ec.unmarshalInputVehicleViolationDetailsBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleViolationDetailsInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsInsertInput(ctx context.Context, v interface{}) (model.VehicleViolationDetailsInsertInput, error) {
	res, err := ec.unmarshalInputVehicleViolationDetailsInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleViolationDetailsInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleViolationDetailsInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleViolationDetailsInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleViolationDetailsInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVehicleViolationDetailsInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsInsertInput(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsInsertInput, error) {
	res, err := ec.unmarshalInputVehicleViolationDetailsInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleViolationDetailsOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsOrderBy, error) {
	res, err := ec.unmarshalInputVehicleViolationDetailsOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleViolationDetailsSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumn(ctx context.Context, v interface{}) (model.VehicleViolationDetailsSelectColumn, error) {
	var res model.VehicleViolationDetailsSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehicleViolationDetailsSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleViolationDetailsSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNVehicleViolationScoringItems2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringItems(ctx context.Context, sel ast.SelectionSet, v model1.VehicleViolationScoringItems) graphql.Marshaler {
	return ec._VehicleViolationScoringItems(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleViolationScoringItems2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringItemsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VehicleViolationScoringItems) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleViolationScoringItems2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringItems(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehicleViolationScoringItems2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringItems(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleViolationScoringItems) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleViolationScoringItems(ctx, sel, v)
}

func (ec *executionContext) marshalNVehicleViolationScoringItemsAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleViolationScoringItemsAggregate) graphql.Marshaler {
	return ec._VehicleViolationScoringItemsAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleViolationScoringItemsAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleViolationScoringItemsAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehicleViolationScoringItemsBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx context.Context, v interface{}) (model.VehicleViolationScoringItemsBoolExp, error) {
	res, err := ec.unmarshalInputVehicleViolationScoringItemsBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleViolationScoringItemsInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsInsertInput(ctx context.Context, v interface{}) (model.VehicleViolationScoringItemsInsertInput, error) {
	res, err := ec.unmarshalInputVehicleViolationScoringItemsInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleViolationScoringItemsInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleViolationScoringItemsInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleViolationScoringItemsInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleViolationScoringItemsInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVehicleViolationScoringItemsInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsInsertInput(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsInsertInput, error) {
	res, err := ec.unmarshalInputVehicleViolationScoringItemsInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleViolationScoringItemsOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsOrderBy, error) {
	res, err := ec.unmarshalInputVehicleViolationScoringItemsOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleViolationScoringItemsSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumn(ctx context.Context, v interface{}) (model.VehicleViolationScoringItemsSelectColumn, error) {
	var res model.VehicleViolationScoringItemsSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehicleViolationScoringItemsSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleViolationScoringItemsSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNVehicleViolationScoringRecord2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringRecord(ctx context.Context, sel ast.SelectionSet, v model1.VehicleViolationScoringRecord) graphql.Marshaler {
	return ec._VehicleViolationScoringRecord(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleViolationScoringRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VehicleViolationScoringRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleViolationScoringRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehicleViolationScoringRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringRecord(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleViolationScoringRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleViolationScoringRecord(ctx, sel, v)
}

func (ec *executionContext) marshalNVehicleViolationScoringRecordAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleViolationScoringRecordAggregate) graphql.Marshaler {
	return ec._VehicleViolationScoringRecordAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleViolationScoringRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleViolationScoringRecordAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehicleViolationScoringRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx context.Context, v interface{}) (model.VehicleViolationScoringRecordBoolExp, error) {
	res, err := ec.unmarshalInputVehicleViolationScoringRecordBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleViolationScoringRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordInsertInput(ctx context.Context, v interface{}) (model.VehicleViolationScoringRecordInsertInput, error) {
	res, err := ec.unmarshalInputVehicleViolationScoringRecordInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleViolationScoringRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleViolationScoringRecordInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleViolationScoringRecordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleViolationScoringRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVehicleViolationScoringRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordInsertInput(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordInsertInput, error) {
	res, err := ec.unmarshalInputVehicleViolationScoringRecordInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleViolationScoringRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordOrderBy, error) {
	res, err := ec.unmarshalInputVehicleViolationScoringRecordOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleViolationScoringRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumn(ctx context.Context, v interface{}) (model.VehicleViolationScoringRecordSelectColumn, error) {
	var res model.VehicleViolationScoringRecordSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehicleViolationScoringRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleViolationScoringRecordSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNVioCodewfdm2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVioCodewfdm(ctx context.Context, sel ast.SelectionSet, v model1.VioCodewfdm) graphql.Marshaler {
	return ec._VioCodewfdm(ctx, sel, &v)
}

func (ec *executionContext) marshalNVioCodewfdm2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVioCodewfdmᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VioCodewfdm) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVioCodewfdm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVioCodewfdm(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVioCodewfdm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVioCodewfdm(ctx context.Context, sel ast.SelectionSet, v *model1.VioCodewfdm) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VioCodewfdm(ctx, sel, v)
}

func (ec *executionContext) marshalNVioCodewfdmAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmAggregate(ctx context.Context, sel ast.SelectionSet, v model.VioCodewfdmAggregate) graphql.Marshaler {
	return ec._VioCodewfdmAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVioCodewfdmAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VioCodewfdmAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVioCodewfdmBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx context.Context, v interface{}) (model.VioCodewfdmBoolExp, error) {
	res, err := ec.unmarshalInputVioCodewfdmBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVioCodewfdmInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmInsertInput(ctx context.Context, v interface{}) (model.VioCodewfdmInsertInput, error) {
	res, err := ec.unmarshalInputVioCodewfdmInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVioCodewfdmInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VioCodewfdmInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VioCodewfdmInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVioCodewfdmInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVioCodewfdmInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmInsertInput(ctx context.Context, v interface{}) (*model.VioCodewfdmInsertInput, error) {
	res, err := ec.unmarshalInputVioCodewfdmInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVioCodewfdmOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmOrderBy(ctx context.Context, v interface{}) (*model.VioCodewfdmOrderBy, error) {
	res, err := ec.unmarshalInputVioCodewfdmOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVioCodewfdmSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumn(ctx context.Context, v interface{}) (model.VioCodewfdmSelectColumn, error) {
	var res model.VioCodewfdmSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVioCodewfdmSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VioCodewfdmSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNViolationRegistration2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐViolationRegistration(ctx context.Context, sel ast.SelectionSet, v model1.ViolationRegistration) graphql.Marshaler {
	return ec._ViolationRegistration(ctx, sel, &v)
}

func (ec *executionContext) marshalNViolationRegistration2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐViolationRegistrationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.ViolationRegistration) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNViolationRegistration2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐViolationRegistration(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNViolationRegistration2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐViolationRegistration(ctx context.Context, sel ast.SelectionSet, v *model1.ViolationRegistration) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ViolationRegistration(ctx, sel, v)
}

func (ec *executionContext) marshalNViolationRegistrationAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationAggregate(ctx context.Context, sel ast.SelectionSet, v model.ViolationRegistrationAggregate) graphql.Marshaler {
	return ec._ViolationRegistrationAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNViolationRegistrationAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationAggregate(ctx context.Context, sel ast.SelectionSet, v *model.ViolationRegistrationAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ViolationRegistrationAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNViolationRegistrationBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationBoolExp(ctx context.Context, v interface{}) (model.ViolationRegistrationBoolExp, error) {
	res, err := ec.unmarshalInputViolationRegistrationBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNViolationRegistrationInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationInsertInput(ctx context.Context, v interface{}) (model.ViolationRegistrationInsertInput, error) {
	res, err := ec.unmarshalInputViolationRegistrationInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNViolationRegistrationInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.ViolationRegistrationInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ViolationRegistrationInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNViolationRegistrationInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNViolationRegistrationInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationInsertInput(ctx context.Context, v interface{}) (*model.ViolationRegistrationInsertInput, error) {
	res, err := ec.unmarshalInputViolationRegistrationInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNViolationRegistrationOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationOrderBy(ctx context.Context, v interface{}) (*model.ViolationRegistrationOrderBy, error) {
	res, err := ec.unmarshalInputViolationRegistrationOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNViolationRegistrationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationSelectColumn(ctx context.Context, v interface{}) (model.ViolationRegistrationSelectColumn, error) {
	var res model.ViolationRegistrationSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNViolationRegistrationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.ViolationRegistrationSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOAppEnforcement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐAppEnforcement(ctx context.Context, sel ast.SelectionSet, v *model1.AppEnforcement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppEnforcement(ctx, sel, v)
}

func (ec *executionContext) marshalOAppEnforcementAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppEnforcementAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAppEnforcementAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppEnforcementAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAppEnforcementBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx context.Context, v interface{}) ([]*model.AppEnforcementBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AppEnforcementBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOAppEnforcementBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAppEnforcementBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx context.Context, v interface{}) (*model.AppEnforcementBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAppEnforcementBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAppEnforcementIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementIncInput(ctx context.Context, v interface{}) (*model.AppEnforcementIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAppEnforcementIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAppEnforcementMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppEnforcementMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAppEnforcementMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMinFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppEnforcementMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAppEnforcementMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppEnforcementMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAppEnforcementOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementOrderByᚄ(ctx context.Context, v interface{}) ([]*model.AppEnforcementOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AppEnforcementOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAppEnforcementOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAppEnforcementSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.AppEnforcementSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.AppEnforcementSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAppEnforcementSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAppEnforcementSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AppEnforcementSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAppEnforcementSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOAppEnforcementSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSetInput(ctx context.Context, v interface{}) (*model.AppEnforcementSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAppEnforcementSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAppEnforcementStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppEnforcementStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAppEnforcementStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppEnforcementStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAppEnforcementStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppEnforcementStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAppEnforcementSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSumFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppEnforcementSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAppEnforcementVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppEnforcementVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAppEnforcementVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppEnforcementVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAppEnforcementVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppEnforcementVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBigintComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBooleanComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODeductionReport2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDeductionReport(ctx context.Context, sel ast.SelectionSet, v *model1.DeductionReport) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeductionReport(ctx, sel, v)
}

func (ec *executionContext) marshalODeductionReportAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DeductionReportAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeductionReportAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODeductionReportAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DeductionReportAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeductionReportAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODeductionReportBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportBoolExp(ctx context.Context, v interface{}) ([]*model.DeductionReportBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DeductionReportBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODeductionReportBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODeductionReportBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportBoolExp(ctx context.Context, v interface{}) (*model.DeductionReportBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDeductionReportBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODeductionReportIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportIncInput(ctx context.Context, v interface{}) (*model.DeductionReportIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDeductionReportIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODeductionReportMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DeductionReportMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeductionReportMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODeductionReportMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DeductionReportMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeductionReportMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODeductionReportMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DeductionReportMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeductionReportMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODeductionReportOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DeductionReportOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DeductionReportOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDeductionReportOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODeductionReportSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DeductionReportSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DeductionReportSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDeductionReportSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODeductionReportSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DeductionReportSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeductionReportSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODeductionReportSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportSetInput(ctx context.Context, v interface{}) (*model.DeductionReportSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDeductionReportSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODeductionReportStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DeductionReportStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeductionReportStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODeductionReportStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DeductionReportStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeductionReportStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODeductionReportStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DeductionReportStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeductionReportStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODeductionReportSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DeductionReportSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeductionReportSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODeductionReportVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DeductionReportVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeductionReportVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODeductionReportVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DeductionReportVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeductionReportVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODeductionReportVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDeductionReportVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DeductionReportVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeductionReportVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverPeccancyCheck2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐDriverPeccancyCheck(ctx context.Context, sel ast.SelectionSet, v *model1.DriverPeccancyCheck) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverPeccancyCheck(ctx, sel, v)
}

func (ec *executionContext) marshalODriverPeccancyCheckAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverPeccancyCheckAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverPeccancyCheckAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverPeccancyCheckAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODriverPeccancyCheckBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx context.Context, v interface{}) ([]*model.DriverPeccancyCheckBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverPeccancyCheckBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODriverPeccancyCheckBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODriverPeccancyCheckBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverPeccancyCheckBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODriverPeccancyCheckIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckIncInput(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverPeccancyCheckIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverPeccancyCheckMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverPeccancyCheckMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverPeccancyCheckMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverPeccancyCheckMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverPeccancyCheckMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverPeccancyCheckMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODriverPeccancyCheckOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DriverPeccancyCheckOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverPeccancyCheckOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverPeccancyCheckOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODriverPeccancyCheckSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DriverPeccancyCheckSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DriverPeccancyCheckSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverPeccancyCheckSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODriverPeccancyCheckSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DriverPeccancyCheckSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverPeccancyCheckSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODriverPeccancyCheckSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSetInput(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverPeccancyCheckSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverPeccancyCheckStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverPeccancyCheckStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverPeccancyCheckStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverPeccancyCheckStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverPeccancyCheckStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverPeccancyCheckStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverPeccancyCheckSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverPeccancyCheckSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverPeccancyCheckVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverPeccancyCheckVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverPeccancyCheckVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverPeccancyCheckVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverPeccancyCheckVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverPeccancyCheckVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOIllegalPhoto2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐIllegalPhoto(ctx context.Context, sel ast.SelectionSet, v *model1.IllegalPhoto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IllegalPhoto(ctx, sel, v)
}

func (ec *executionContext) marshalOIllegalPhotoAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IllegalPhotoAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOIllegalPhotoAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IllegalPhotoAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOIllegalPhotoBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx context.Context, v interface{}) ([]*model.IllegalPhotoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.IllegalPhotoBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOIllegalPhotoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOIllegalPhotoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx context.Context, v interface{}) (*model.IllegalPhotoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIllegalPhotoBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOIllegalPhotoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoIncInput(ctx context.Context, v interface{}) (*model.IllegalPhotoIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIllegalPhotoIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOIllegalPhotoMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IllegalPhotoMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOIllegalPhotoMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMinFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IllegalPhotoMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOIllegalPhotoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IllegalPhotoMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOIllegalPhotoOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoOrderByᚄ(ctx context.Context, v interface{}) ([]*model.IllegalPhotoOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.IllegalPhotoOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNIllegalPhotoOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOIllegalPhotoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.IllegalPhotoSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.IllegalPhotoSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNIllegalPhotoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOIllegalPhotoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.IllegalPhotoSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIllegalPhotoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOIllegalPhotoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSetInput(ctx context.Context, v interface{}) (*model.IllegalPhotoSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIllegalPhotoSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOIllegalPhotoStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IllegalPhotoStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOIllegalPhotoStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IllegalPhotoStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOIllegalPhotoStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IllegalPhotoStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOIllegalPhotoSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSumFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IllegalPhotoSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOIllegalPhotoVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IllegalPhotoVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOIllegalPhotoVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IllegalPhotoVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOIllegalPhotoVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IllegalPhotoVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOJsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNJsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOJsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalONumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNNumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalONumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx context.Context, v interface{}) (*model2.NumericComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNumericComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNPoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOPoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx context.Context, v interface{}) (*model2.PointComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPointComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORegionalViolationRegister2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐRegionalViolationRegister(ctx context.Context, sel ast.SelectionSet, v *model1.RegionalViolationRegister) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionalViolationRegister(ctx, sel, v)
}

func (ec *executionContext) marshalORegionalViolationRegisterAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionalViolationRegisterAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionalViolationRegisterAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionalViolationRegisterAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalORegionalViolationRegisterBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx context.Context, v interface{}) ([]*model.RegionalViolationRegisterBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RegionalViolationRegisterBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORegionalViolationRegisterBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORegionalViolationRegisterBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRegionalViolationRegisterBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORegionalViolationRegisterIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterIncInput(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRegionalViolationRegisterIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORegionalViolationRegisterMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionalViolationRegisterMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionalViolationRegisterMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMinFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionalViolationRegisterMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionalViolationRegisterMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionalViolationRegisterMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalORegionalViolationRegisterOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterOrderByᚄ(ctx context.Context, v interface{}) ([]*model.RegionalViolationRegisterOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RegionalViolationRegisterOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRegionalViolationRegisterOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORegionalViolationRegisterSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.RegionalViolationRegisterSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.RegionalViolationRegisterSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRegionalViolationRegisterSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalORegionalViolationRegisterSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.RegionalViolationRegisterSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRegionalViolationRegisterSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalORegionalViolationRegisterSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSetInput(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRegionalViolationRegisterSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORegionalViolationRegisterStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionalViolationRegisterStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionalViolationRegisterStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionalViolationRegisterStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionalViolationRegisterStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionalViolationRegisterStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionalViolationRegisterSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSumFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionalViolationRegisterSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionalViolationRegisterVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionalViolationRegisterVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionalViolationRegisterVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionalViolationRegisterVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionalViolationRegisterVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionalViolationRegisterVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSeriousTrafficViolation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐSeriousTrafficViolation(ctx context.Context, sel ast.SelectionSet, v *model1.SeriousTrafficViolation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SeriousTrafficViolation(ctx, sel, v)
}

func (ec *executionContext) marshalOSeriousTrafficViolationAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.SeriousTrafficViolationAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SeriousTrafficViolationAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSeriousTrafficViolationAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.SeriousTrafficViolationAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SeriousTrafficViolationAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSeriousTrafficViolationBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationBoolExp(ctx context.Context, v interface{}) ([]*model.SeriousTrafficViolationBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SeriousTrafficViolationBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSeriousTrafficViolationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSeriousTrafficViolationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationBoolExp(ctx context.Context, v interface{}) (*model.SeriousTrafficViolationBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSeriousTrafficViolationBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSeriousTrafficViolationIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationIncInput(ctx context.Context, v interface{}) (*model.SeriousTrafficViolationIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSeriousTrafficViolationIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSeriousTrafficViolationMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.SeriousTrafficViolationMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SeriousTrafficViolationMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSeriousTrafficViolationMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationMinFields(ctx context.Context, sel ast.SelectionSet, v *model.SeriousTrafficViolationMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SeriousTrafficViolationMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSeriousTrafficViolationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.SeriousTrafficViolationMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SeriousTrafficViolationMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSeriousTrafficViolationOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationOrderByᚄ(ctx context.Context, v interface{}) ([]*model.SeriousTrafficViolationOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SeriousTrafficViolationOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSeriousTrafficViolationOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSeriousTrafficViolationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.SeriousTrafficViolationSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.SeriousTrafficViolationSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSeriousTrafficViolationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSeriousTrafficViolationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SeriousTrafficViolationSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSeriousTrafficViolationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOSeriousTrafficViolationSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationSetInput(ctx context.Context, v interface{}) (*model.SeriousTrafficViolationSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSeriousTrafficViolationSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSeriousTrafficViolationStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.SeriousTrafficViolationStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SeriousTrafficViolationStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSeriousTrafficViolationStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.SeriousTrafficViolationStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SeriousTrafficViolationStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSeriousTrafficViolationStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.SeriousTrafficViolationStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SeriousTrafficViolationStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSeriousTrafficViolationSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationSumFields(ctx context.Context, sel ast.SelectionSet, v *model.SeriousTrafficViolationSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SeriousTrafficViolationSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSeriousTrafficViolationVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.SeriousTrafficViolationVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SeriousTrafficViolationVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSeriousTrafficViolationVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.SeriousTrafficViolationVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SeriousTrafficViolationVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSeriousTrafficViolationVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐSeriousTrafficViolationVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.SeriousTrafficViolationVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SeriousTrafficViolationVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimestamptzComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleViolationDetails2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationDetails(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleViolationDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationDetails(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationDetailsAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationDetailsAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationDetailsAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationDetailsAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleViolationDetailsBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleViolationDetailsBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleViolationDetailsBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVehicleViolationDetailsBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleViolationDetailsBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleViolationDetailsBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVehicleViolationDetailsIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsIncInput(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleViolationDetailsIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleViolationDetailsMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationDetailsMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationDetailsMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationDetailsMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationDetailsMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationDetailsMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleViolationDetailsOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleViolationDetailsOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleViolationDetailsOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleViolationDetailsOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleViolationDetailsSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleViolationDetailsSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleViolationDetailsSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleViolationDetailsSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVehicleViolationDetailsSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleViolationDetailsSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleViolationDetailsSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVehicleViolationDetailsSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSetInput(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleViolationDetailsSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleViolationDetailsStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationDetailsStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationDetailsStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationDetailsStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationDetailsStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationDetailsStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationDetailsSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationDetailsSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationDetailsVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationDetailsVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationDetailsVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationDetailsVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationDetailsVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationDetailsVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringItems2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringItems(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleViolationScoringItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringItems(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringItemsAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringItemsAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringItemsAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringItemsAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleViolationScoringItemsBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleViolationScoringItemsBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleViolationScoringItemsBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVehicleViolationScoringItemsBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleViolationScoringItemsBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleViolationScoringItemsBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVehicleViolationScoringItemsIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsIncInput(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleViolationScoringItemsIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleViolationScoringItemsMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringItemsMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringItemsMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringItemsMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringItemsMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringItemsMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleViolationScoringItemsOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleViolationScoringItemsOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleViolationScoringItemsOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleViolationScoringItemsOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleViolationScoringItemsSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleViolationScoringItemsSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleViolationScoringItemsSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleViolationScoringItemsSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVehicleViolationScoringItemsSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleViolationScoringItemsSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleViolationScoringItemsSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVehicleViolationScoringItemsSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSetInput(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleViolationScoringItemsSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleViolationScoringItemsStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringItemsStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringItemsStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringItemsStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringItemsStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringItemsStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringItemsSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringItemsSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringItemsVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringItemsVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringItemsVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringItemsVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringItemsVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringItemsVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVehicleViolationScoringRecord(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleViolationScoringRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringRecord(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringRecordAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringRecordAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleViolationScoringRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleViolationScoringRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleViolationScoringRecordBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVehicleViolationScoringRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleViolationScoringRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleViolationScoringRecordBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVehicleViolationScoringRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordIncInput(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleViolationScoringRecordIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleViolationScoringRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringRecordMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringRecordMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringRecordMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleViolationScoringRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleViolationScoringRecordOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleViolationScoringRecordOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleViolationScoringRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleViolationScoringRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleViolationScoringRecordSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleViolationScoringRecordSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleViolationScoringRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVehicleViolationScoringRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleViolationScoringRecordSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleViolationScoringRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVehicleViolationScoringRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSetInput(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleViolationScoringRecordSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleViolationScoringRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringRecordStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringRecordStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringRecordStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringRecordSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringRecordVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringRecordVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleViolationScoringRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleViolationScoringRecordVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVioCodewfdm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐVioCodewfdm(ctx context.Context, sel ast.SelectionSet, v *model1.VioCodewfdm) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VioCodewfdm(ctx, sel, v)
}

func (ec *executionContext) marshalOVioCodewfdmAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VioCodewfdmAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVioCodewfdmAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VioCodewfdmAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVioCodewfdmBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx context.Context, v interface{}) ([]*model.VioCodewfdmBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VioCodewfdmBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVioCodewfdmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVioCodewfdmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx context.Context, v interface{}) (*model.VioCodewfdmBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVioCodewfdmBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVioCodewfdmIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmIncInput(ctx context.Context, v interface{}) (*model.VioCodewfdmIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVioCodewfdmIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVioCodewfdmMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VioCodewfdmMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVioCodewfdmMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VioCodewfdmMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVioCodewfdmMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VioCodewfdmMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVioCodewfdmOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VioCodewfdmOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VioCodewfdmOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVioCodewfdmOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVioCodewfdmSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VioCodewfdmSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VioCodewfdmSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVioCodewfdmSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVioCodewfdmSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VioCodewfdmSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVioCodewfdmSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVioCodewfdmSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSetInput(ctx context.Context, v interface{}) (*model.VioCodewfdmSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVioCodewfdmSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVioCodewfdmStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VioCodewfdmStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVioCodewfdmStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VioCodewfdmStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVioCodewfdmStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VioCodewfdmStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVioCodewfdmSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VioCodewfdmSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVioCodewfdmVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VioCodewfdmVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVioCodewfdmVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VioCodewfdmVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVioCodewfdmVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VioCodewfdmVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOViolationRegistration2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋmodelᚐViolationRegistration(ctx context.Context, sel ast.SelectionSet, v *model1.ViolationRegistration) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ViolationRegistration(ctx, sel, v)
}

func (ec *executionContext) marshalOViolationRegistrationAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.ViolationRegistrationAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ViolationRegistrationAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOViolationRegistrationAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.ViolationRegistrationAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ViolationRegistrationAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOViolationRegistrationBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationBoolExp(ctx context.Context, v interface{}) ([]*model.ViolationRegistrationBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ViolationRegistrationBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOViolationRegistrationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOViolationRegistrationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationBoolExp(ctx context.Context, v interface{}) (*model.ViolationRegistrationBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputViolationRegistrationBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOViolationRegistrationIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationIncInput(ctx context.Context, v interface{}) (*model.ViolationRegistrationIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputViolationRegistrationIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOViolationRegistrationMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.ViolationRegistrationMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ViolationRegistrationMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOViolationRegistrationMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationMinFields(ctx context.Context, sel ast.SelectionSet, v *model.ViolationRegistrationMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ViolationRegistrationMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOViolationRegistrationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.ViolationRegistrationMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ViolationRegistrationMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOViolationRegistrationOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationOrderByᚄ(ctx context.Context, v interface{}) ([]*model.ViolationRegistrationOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ViolationRegistrationOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNViolationRegistrationOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOViolationRegistrationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.ViolationRegistrationSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.ViolationRegistrationSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNViolationRegistrationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOViolationRegistrationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ViolationRegistrationSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNViolationRegistrationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOViolationRegistrationSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationSetInput(ctx context.Context, v interface{}) (*model.ViolationRegistrationSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputViolationRegistrationSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOViolationRegistrationStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.ViolationRegistrationStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ViolationRegistrationStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOViolationRegistrationStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.ViolationRegistrationStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ViolationRegistrationStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOViolationRegistrationStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.ViolationRegistrationStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ViolationRegistrationStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOViolationRegistrationSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationSumFields(ctx context.Context, sel ast.SelectionSet, v *model.ViolationRegistrationSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ViolationRegistrationSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOViolationRegistrationVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.ViolationRegistrationVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ViolationRegistrationVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOViolationRegistrationVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.ViolationRegistrationVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ViolationRegistrationVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOViolationRegistrationVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐViolationRegistrationVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.ViolationRegistrationVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ViolationRegistrationVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
