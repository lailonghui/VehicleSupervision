// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/vehicle_violation/graph/model"
	model1 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"io"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Mutation struct {
		DeleteAppEnforcement                         func(childComplexity int, where model.AppEnforcementBoolExp) int
		DeleteAppEnforcementByPk                     func(childComplexity int, id int64, illegalPhotoID string) int
		DeleteDisputeViolationRecord                 func(childComplexity int, where model.DisputeViolationRecordBoolExp) int
		DeleteDisputeViolationRecordByPk             func(childComplexity int, disputeViolationID string, id int64) int
		DeleteDisputeViolationRecordLog              func(childComplexity int, where model.DisputeViolationRecordLogBoolExp) int
		DeleteDisputeViolationRecordLogByPk          func(childComplexity int, disputeViolationLogID string, id int64) int
		DeleteDriverPeccancyCheck                    func(childComplexity int, where model.DriverPeccancyCheckBoolExp) int
		DeleteDriverPeccancyCheckByPk                func(childComplexity int, id int64) int
		DeleteEnterpriseDeductionItems               func(childComplexity int, where model.EnterpriseDeductionItemsBoolExp) int
		DeleteEnterpriseDeductionItemsByPk           func(childComplexity int, enterpriseDeductionItemID string, id int64) int
		DeleteEnterpriseDeductionOperationRecord     func(childComplexity int, where model.EnterpriseDeductionOperationRecordBoolExp) int
		DeleteEnterpriseDeductionOperationRecordByPk func(childComplexity int, enterpriseDuductionOperationID string, id int64) int
		DeleteIllegalPhoto                           func(childComplexity int, where model.IllegalPhotoBoolExp) int
		DeleteIllegalPhotoByPk                       func(childComplexity int, id int64, illegalPhotoID string) int
		DeleteRegionalViolationRegister              func(childComplexity int, where model.RegionalViolationRegisterBoolExp) int
		DeleteRegionalViolationRegisterByPk          func(childComplexity int, id int64, regionalViolationRegisterID string) int
		DeleteUserOperationLog                       func(childComplexity int, where model.UserOperationLogBoolExp) int
		DeleteUserOperationLogByPk                   func(childComplexity int, id int64) int
		DeleteVehicleDetainDetails                   func(childComplexity int, where model.VehicleDetainDetailsBoolExp) int
		DeleteVehicleDetainDetailsByPk               func(childComplexity int, id int64) int
		DeleteVehicleViolationDetails                func(childComplexity int, where model.VehicleViolationDetailsBoolExp) int
		DeleteVehicleViolationDetailsByPk            func(childComplexity int, id int64) int
		DeleteVehicleViolationScoringItems           func(childComplexity int, where model.VehicleViolationScoringItemsBoolExp) int
		DeleteVehicleViolationScoringItemsByPk       func(childComplexity int, id int64, violationScoringItemID string) int
		DeleteVehicleViolationScoringRecord          func(childComplexity int, where model.VehicleViolationScoringRecordBoolExp) int
		DeleteVehicleViolationScoringRecordByPk      func(childComplexity int, id int64, violationScoringID string) int
		DeleteVioCodewfdm                            func(childComplexity int, where model.VioCodewfdmBoolExp) int
		InsertAppEnforcement                         func(childComplexity int, objects []*model.AppEnforcementInsertInput, onConflict *model.AppEnforcementOnConflict) int
		InsertAppEnforcementOne                      func(childComplexity int, object model.AppEnforcementInsertInput, onConflict *model.AppEnforcementOnConflict) int
		InsertDisputeViolationRecord                 func(childComplexity int, objects []*model.DisputeViolationRecordInsertInput, onConflict *model.DisputeViolationRecordOnConflict) int
		InsertDisputeViolationRecordLog              func(childComplexity int, objects []*model.DisputeViolationRecordLogInsertInput, onConflict *model.DisputeViolationRecordLogOnConflict) int
		InsertDisputeViolationRecordLogOne           func(childComplexity int, object model.DisputeViolationRecordLogInsertInput, onConflict *model.DisputeViolationRecordLogOnConflict) int
		InsertDisputeViolationRecordOne              func(childComplexity int, object model.DisputeViolationRecordInsertInput, onConflict *model.DisputeViolationRecordOnConflict) int
		InsertDriverPeccancyCheck                    func(childComplexity int, objects []*model.DriverPeccancyCheckInsertInput, onConflict *model.DriverPeccancyCheckOnConflict) int
		InsertDriverPeccancyCheckOne                 func(childComplexity int, object model.DriverPeccancyCheckInsertInput, onConflict *model.DriverPeccancyCheckOnConflict) int
		InsertEnterpriseDeductionItems               func(childComplexity int, objects []*model.EnterpriseDeductionItemsInsertInput, onConflict *model.EnterpriseDeductionItemsOnConflict) int
		InsertEnterpriseDeductionItemsOne            func(childComplexity int, object model.EnterpriseDeductionItemsInsertInput, onConflict *model.EnterpriseDeductionItemsOnConflict) int
		InsertEnterpriseDeductionOperationRecord     func(childComplexity int, objects []*model.EnterpriseDeductionOperationRecordInsertInput, onConflict *model.EnterpriseDeductionOperationRecordOnConflict) int
		InsertEnterpriseDeductionOperationRecordOne  func(childComplexity int, object model.EnterpriseDeductionOperationRecordInsertInput, onConflict *model.EnterpriseDeductionOperationRecordOnConflict) int
		InsertIllegalPhoto                           func(childComplexity int, objects []*model.IllegalPhotoInsertInput, onConflict *model.IllegalPhotoOnConflict) int
		InsertIllegalPhotoOne                        func(childComplexity int, object model.IllegalPhotoInsertInput, onConflict *model.IllegalPhotoOnConflict) int
		InsertRegionalViolationRegister              func(childComplexity int, objects []*model.RegionalViolationRegisterInsertInput, onConflict *model.RegionalViolationRegisterOnConflict) int
		InsertRegionalViolationRegisterOne           func(childComplexity int, object model.RegionalViolationRegisterInsertInput, onConflict *model.RegionalViolationRegisterOnConflict) int
		InsertUserOperationLog                       func(childComplexity int, objects []*model.UserOperationLogInsertInput, onConflict *model.UserOperationLogOnConflict) int
		InsertUserOperationLogOne                    func(childComplexity int, object model.UserOperationLogInsertInput, onConflict *model.UserOperationLogOnConflict) int
		InsertVehicleDetainDetails                   func(childComplexity int, objects []*model.VehicleDetainDetailsInsertInput, onConflict *model.VehicleDetainDetailsOnConflict) int
		InsertVehicleDetainDetailsOne                func(childComplexity int, object model.VehicleDetainDetailsInsertInput, onConflict *model.VehicleDetainDetailsOnConflict) int
		InsertVehicleViolationDetails                func(childComplexity int, objects []*model.VehicleViolationDetailsInsertInput, onConflict *model.VehicleViolationDetailsOnConflict) int
		InsertVehicleViolationDetailsOne             func(childComplexity int, object model.VehicleViolationDetailsInsertInput, onConflict *model.VehicleViolationDetailsOnConflict) int
		InsertVehicleViolationScoringItems           func(childComplexity int, objects []*model.VehicleViolationScoringItemsInsertInput, onConflict *model.VehicleViolationScoringItemsOnConflict) int
		InsertVehicleViolationScoringItemsOne        func(childComplexity int, object model.VehicleViolationScoringItemsInsertInput, onConflict *model.VehicleViolationScoringItemsOnConflict) int
		InsertVehicleViolationScoringRecord          func(childComplexity int, objects []*model.VehicleViolationScoringRecordInsertInput, onConflict *model.VehicleViolationScoringRecordOnConflict) int
		InsertVehicleViolationScoringRecordOne       func(childComplexity int, object model.VehicleViolationScoringRecordInsertInput, onConflict *model.VehicleViolationScoringRecordOnConflict) int
		InsertVioCodewfdm                            func(childComplexity int, objects []*model.VioCodewfdmInsertInput) int
		InsertVioCodewfdmOne                         func(childComplexity int, object model.VioCodewfdmInsertInput) int
		UpdateAppEnforcement                         func(childComplexity int, inc *model.AppEnforcementIncInput, set *model.AppEnforcementSetInput, where model.AppEnforcementBoolExp) int
		UpdateAppEnforcementByPk                     func(childComplexity int, inc *model.AppEnforcementIncInput, set *model.AppEnforcementSetInput, pkColumns model.AppEnforcementPkColumnsInput) int
		UpdateDisputeViolationRecord                 func(childComplexity int, inc *model.DisputeViolationRecordIncInput, set *model.DisputeViolationRecordSetInput, where model.DisputeViolationRecordBoolExp) int
		UpdateDisputeViolationRecordByPk             func(childComplexity int, inc *model.DisputeViolationRecordIncInput, set *model.DisputeViolationRecordSetInput, pkColumns model.DisputeViolationRecordPkColumnsInput) int
		UpdateDisputeViolationRecordLog              func(childComplexity int, inc *model.DisputeViolationRecordLogIncInput, set *model.DisputeViolationRecordLogSetInput, where model.DisputeViolationRecordLogBoolExp) int
		UpdateDisputeViolationRecordLogByPk          func(childComplexity int, inc *model.DisputeViolationRecordLogIncInput, set *model.DisputeViolationRecordLogSetInput, pkColumns model.DisputeViolationRecordLogPkColumnsInput) int
		UpdateDriverPeccancyCheck                    func(childComplexity int, inc *model.DriverPeccancyCheckIncInput, set *model.DriverPeccancyCheckSetInput, where model.DriverPeccancyCheckBoolExp) int
		UpdateDriverPeccancyCheckByPk                func(childComplexity int, inc *model.DriverPeccancyCheckIncInput, set *model.DriverPeccancyCheckSetInput, pkColumns model.DriverPeccancyCheckPkColumnsInput) int
		UpdateEnterpriseDeductionItems               func(childComplexity int, inc *model.EnterpriseDeductionItemsIncInput, set *model.EnterpriseDeductionItemsSetInput, where model.EnterpriseDeductionItemsBoolExp) int
		UpdateEnterpriseDeductionItemsByPk           func(childComplexity int, inc *model.EnterpriseDeductionItemsIncInput, set *model.EnterpriseDeductionItemsSetInput, pkColumns model.EnterpriseDeductionItemsPkColumnsInput) int
		UpdateEnterpriseDeductionOperationRecord     func(childComplexity int, inc *model.EnterpriseDeductionOperationRecordIncInput, set *model.EnterpriseDeductionOperationRecordSetInput, where model.EnterpriseDeductionOperationRecordBoolExp) int
		UpdateEnterpriseDeductionOperationRecordByPk func(childComplexity int, inc *model.EnterpriseDeductionOperationRecordIncInput, set *model.EnterpriseDeductionOperationRecordSetInput, pkColumns model.EnterpriseDeductionOperationRecordPkColumnsInput) int
		UpdateIllegalPhoto                           func(childComplexity int, inc *model.IllegalPhotoIncInput, set *model.IllegalPhotoSetInput, where model.IllegalPhotoBoolExp) int
		UpdateIllegalPhotoByPk                       func(childComplexity int, inc *model.IllegalPhotoIncInput, set *model.IllegalPhotoSetInput, pkColumns model.IllegalPhotoPkColumnsInput) int
		UpdateRegionalViolationRegister              func(childComplexity int, inc *model.RegionalViolationRegisterIncInput, set *model.RegionalViolationRegisterSetInput, where model.RegionalViolationRegisterBoolExp) int
		UpdateRegionalViolationRegisterByPk          func(childComplexity int, inc *model.RegionalViolationRegisterIncInput, set *model.RegionalViolationRegisterSetInput, pkColumns model.RegionalViolationRegisterPkColumnsInput) int
		UpdateUserOperationLog                       func(childComplexity int, inc *model.UserOperationLogIncInput, set *model.UserOperationLogSetInput, where model.UserOperationLogBoolExp) int
		UpdateUserOperationLogByPk                   func(childComplexity int, inc *model.UserOperationLogIncInput, set *model.UserOperationLogSetInput, pkColumns model.UserOperationLogPkColumnsInput) int
		UpdateVehicleDetainDetails                   func(childComplexity int, inc *model.VehicleDetainDetailsIncInput, set *model.VehicleDetainDetailsSetInput, where model.VehicleDetainDetailsBoolExp) int
		UpdateVehicleDetainDetailsByPk               func(childComplexity int, inc *model.VehicleDetainDetailsIncInput, set *model.VehicleDetainDetailsSetInput, pkColumns model.VehicleDetainDetailsPkColumnsInput) int
		UpdateVehicleViolationDetails                func(childComplexity int, inc *model.VehicleViolationDetailsIncInput, set *model.VehicleViolationDetailsSetInput, where model.VehicleViolationDetailsBoolExp) int
		UpdateVehicleViolationDetailsByPk            func(childComplexity int, inc *model.VehicleViolationDetailsIncInput, set *model.VehicleViolationDetailsSetInput, pkColumns model.VehicleViolationDetailsPkColumnsInput) int
		UpdateVehicleViolationScoringItems           func(childComplexity int, inc *model.VehicleViolationScoringItemsIncInput, set *model.VehicleViolationScoringItemsSetInput, where model.VehicleViolationScoringItemsBoolExp) int
		UpdateVehicleViolationScoringItemsByPk       func(childComplexity int, inc *model.VehicleViolationScoringItemsIncInput, set *model.VehicleViolationScoringItemsSetInput, pkColumns model.VehicleViolationScoringItemsPkColumnsInput) int
		UpdateVehicleViolationScoringRecord          func(childComplexity int, inc *model.VehicleViolationScoringRecordIncInput, set *model.VehicleViolationScoringRecordSetInput, where model.VehicleViolationScoringRecordBoolExp) int
		UpdateVehicleViolationScoringRecordByPk      func(childComplexity int, inc *model.VehicleViolationScoringRecordIncInput, set *model.VehicleViolationScoringRecordSetInput, pkColumns model.VehicleViolationScoringRecordPkColumnsInput) int
		UpdateVioCodewfdm                            func(childComplexity int, inc *model.VioCodewfdmIncInput, set *model.VioCodewfdmSetInput, where model.VioCodewfdmBoolExp) int
	}

	Query struct {
		AppEnforcement                              func(childComplexity int, distinctOn []model.AppEnforcementSelectColumn, limit *int, offset *int, orderBy []*model.AppEnforcementOrderBy, where *model.AppEnforcementBoolExp) int
		AppEnforcementAggregate                     func(childComplexity int, distinctOn []model.AppEnforcementSelectColumn, limit *int, offset *int, orderBy []*model.AppEnforcementOrderBy, where *model.AppEnforcementBoolExp) int
		AppEnforcementByPk                          func(childComplexity int, id int64, illegalPhotoID string) int
		DisputeViolationRecord                      func(childComplexity int, distinctOn []model.DisputeViolationRecordSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordOrderBy, where *model.DisputeViolationRecordBoolExp) int
		DisputeViolationRecordAggregate             func(childComplexity int, distinctOn []model.DisputeViolationRecordSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordOrderBy, where *model.DisputeViolationRecordBoolExp) int
		DisputeViolationRecordByPk                  func(childComplexity int, disputeViolationID string, id int64) int
		DisputeViolationRecordLog                   func(childComplexity int, distinctOn []model.DisputeViolationRecordLogSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordLogOrderBy, where *model.DisputeViolationRecordLogBoolExp) int
		DisputeViolationRecordLogAggregate          func(childComplexity int, distinctOn []model.DisputeViolationRecordLogSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordLogOrderBy, where *model.DisputeViolationRecordLogBoolExp) int
		DisputeViolationRecordLogByPk               func(childComplexity int, disputeViolationLogID string, id int64) int
		DriverPeccancyCheck                         func(childComplexity int, distinctOn []model.DriverPeccancyCheckSelectColumn, limit *int, offset *int, orderBy []*model.DriverPeccancyCheckOrderBy, where *model.DriverPeccancyCheckBoolExp) int
		DriverPeccancyCheckAggregate                func(childComplexity int, distinctOn []model.DriverPeccancyCheckSelectColumn, limit *int, offset *int, orderBy []*model.DriverPeccancyCheckOrderBy, where *model.DriverPeccancyCheckBoolExp) int
		DriverPeccancyCheckByPk                     func(childComplexity int, id int64) int
		EnterpriseDeductionItems                    func(childComplexity int, distinctOn []model.EnterpriseDeductionItemsSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseDeductionItemsOrderBy, where *model.EnterpriseDeductionItemsBoolExp) int
		EnterpriseDeductionItemsAggregate           func(childComplexity int, distinctOn []model.EnterpriseDeductionItemsSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseDeductionItemsOrderBy, where *model.EnterpriseDeductionItemsBoolExp) int
		EnterpriseDeductionItemsByPk                func(childComplexity int, enterpriseDeductionItemID string, id int64) int
		EnterpriseDeductionOperationRecord          func(childComplexity int, distinctOn []model.EnterpriseDeductionOperationRecordSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseDeductionOperationRecordOrderBy, where *model.EnterpriseDeductionOperationRecordBoolExp) int
		EnterpriseDeductionOperationRecordAggregate func(childComplexity int, distinctOn []model.EnterpriseDeductionOperationRecordSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseDeductionOperationRecordOrderBy, where *model.EnterpriseDeductionOperationRecordBoolExp) int
		EnterpriseDeductionOperationRecordByPk      func(childComplexity int, enterpriseDuductionOperationID string, id int64) int
		IllegalPhoto                                func(childComplexity int, distinctOn []model.IllegalPhotoSelectColumn, limit *int, offset *int, orderBy []*model.IllegalPhotoOrderBy, where *model.IllegalPhotoBoolExp) int
		IllegalPhotoAggregate                       func(childComplexity int, distinctOn []model.IllegalPhotoSelectColumn, limit *int, offset *int, orderBy []*model.IllegalPhotoOrderBy, where *model.IllegalPhotoBoolExp) int
		IllegalPhotoByPk                            func(childComplexity int, id int64, illegalPhotoID string) int
		RegionalViolationRegister                   func(childComplexity int, distinctOn []model.RegionalViolationRegisterSelectColumn, limit *int, offset *int, orderBy []*model.RegionalViolationRegisterOrderBy, where *model.RegionalViolationRegisterBoolExp) int
		RegionalViolationRegisterAggregate          func(childComplexity int, distinctOn []model.RegionalViolationRegisterSelectColumn, limit *int, offset *int, orderBy []*model.RegionalViolationRegisterOrderBy, where *model.RegionalViolationRegisterBoolExp) int
		RegionalViolationRegisterByPk               func(childComplexity int, id int64, regionalViolationRegisterID string) int
		UserOperationLog                            func(childComplexity int, distinctOn []model.UserOperationLogSelectColumn, limit *int, offset *int, orderBy []*model.UserOperationLogOrderBy, where *model.UserOperationLogBoolExp) int
		UserOperationLogAggregate                   func(childComplexity int, distinctOn []model.UserOperationLogSelectColumn, limit *int, offset *int, orderBy []*model.UserOperationLogOrderBy, where *model.UserOperationLogBoolExp) int
		UserOperationLogByPk                        func(childComplexity int, id int64) int
		VehicleDetainDetails                        func(childComplexity int, distinctOn []model.VehicleDetainDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDetainDetailsOrderBy, where *model.VehicleDetainDetailsBoolExp) int
		VehicleDetainDetailsAggregate               func(childComplexity int, distinctOn []model.VehicleDetainDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDetainDetailsOrderBy, where *model.VehicleDetainDetailsBoolExp) int
		VehicleDetainDetailsByPk                    func(childComplexity int, id int64) int
		VehicleViolationDetails                     func(childComplexity int, distinctOn []model.VehicleViolationDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationDetailsOrderBy, where *model.VehicleViolationDetailsBoolExp) int
		VehicleViolationDetailsAggregate            func(childComplexity int, distinctOn []model.VehicleViolationDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationDetailsOrderBy, where *model.VehicleViolationDetailsBoolExp) int
		VehicleViolationDetailsByPk                 func(childComplexity int, id int64) int
		VehicleViolationScoringItems                func(childComplexity int, distinctOn []model.VehicleViolationScoringItemsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringItemsOrderBy, where *model.VehicleViolationScoringItemsBoolExp) int
		VehicleViolationScoringItemsAggregate       func(childComplexity int, distinctOn []model.VehicleViolationScoringItemsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringItemsOrderBy, where *model.VehicleViolationScoringItemsBoolExp) int
		VehicleViolationScoringItemsByPk            func(childComplexity int, id int64, violationScoringItemID string) int
		VehicleViolationScoringRecord               func(childComplexity int, distinctOn []model.VehicleViolationScoringRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringRecordOrderBy, where *model.VehicleViolationScoringRecordBoolExp) int
		VehicleViolationScoringRecordAggregate      func(childComplexity int, distinctOn []model.VehicleViolationScoringRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringRecordOrderBy, where *model.VehicleViolationScoringRecordBoolExp) int
		VehicleViolationScoringRecordByPk           func(childComplexity int, id int64, violationScoringID string) int
		VioCodewfdm                                 func(childComplexity int, distinctOn []model.VioCodewfdmSelectColumn, limit *int, offset *int, orderBy []*model.VioCodewfdmOrderBy, where *model.VioCodewfdmBoolExp) int
		VioCodewfdmAggregate                        func(childComplexity int, distinctOn []model.VioCodewfdmSelectColumn, limit *int, offset *int, orderBy []*model.VioCodewfdmOrderBy, where *model.VioCodewfdmBoolExp) int
	}

	Subscription struct {
		AppEnforcement                              func(childComplexity int, distinctOn []model.AppEnforcementSelectColumn, limit *int, offset *int, orderBy []*model.AppEnforcementOrderBy, where *model.AppEnforcementBoolExp) int
		AppEnforcementAggregate                     func(childComplexity int, distinctOn []model.AppEnforcementSelectColumn, limit *int, offset *int, orderBy []*model.AppEnforcementOrderBy, where *model.AppEnforcementBoolExp) int
		AppEnforcementByPk                          func(childComplexity int, id int64, illegalPhotoID string) int
		DisputeViolationRecord                      func(childComplexity int, distinctOn []model.DisputeViolationRecordSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordOrderBy, where *model.DisputeViolationRecordBoolExp) int
		DisputeViolationRecordAggregate             func(childComplexity int, distinctOn []model.DisputeViolationRecordSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordOrderBy, where *model.DisputeViolationRecordBoolExp) int
		DisputeViolationRecordByPk                  func(childComplexity int, disputeViolationID string, id int64) int
		DisputeViolationRecordLog                   func(childComplexity int, distinctOn []model.DisputeViolationRecordLogSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordLogOrderBy, where *model.DisputeViolationRecordLogBoolExp) int
		DisputeViolationRecordLogAggregate          func(childComplexity int, distinctOn []model.DisputeViolationRecordLogSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordLogOrderBy, where *model.DisputeViolationRecordLogBoolExp) int
		DisputeViolationRecordLogByPk               func(childComplexity int, disputeViolationLogID string, id int64) int
		DriverPeccancyCheck                         func(childComplexity int, distinctOn []model.DriverPeccancyCheckSelectColumn, limit *int, offset *int, orderBy []*model.DriverPeccancyCheckOrderBy, where *model.DriverPeccancyCheckBoolExp) int
		DriverPeccancyCheckAggregate                func(childComplexity int, distinctOn []model.DriverPeccancyCheckSelectColumn, limit *int, offset *int, orderBy []*model.DriverPeccancyCheckOrderBy, where *model.DriverPeccancyCheckBoolExp) int
		DriverPeccancyCheckByPk                     func(childComplexity int, id int64) int
		EnterpriseDeductionItems                    func(childComplexity int, distinctOn []model.EnterpriseDeductionItemsSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseDeductionItemsOrderBy, where *model.EnterpriseDeductionItemsBoolExp) int
		EnterpriseDeductionItemsAggregate           func(childComplexity int, distinctOn []model.EnterpriseDeductionItemsSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseDeductionItemsOrderBy, where *model.EnterpriseDeductionItemsBoolExp) int
		EnterpriseDeductionItemsByPk                func(childComplexity int, enterpriseDeductionItemID string, id int64) int
		EnterpriseDeductionOperationRecord          func(childComplexity int, distinctOn []model.EnterpriseDeductionOperationRecordSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseDeductionOperationRecordOrderBy, where *model.EnterpriseDeductionOperationRecordBoolExp) int
		EnterpriseDeductionOperationRecordAggregate func(childComplexity int, distinctOn []model.EnterpriseDeductionOperationRecordSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseDeductionOperationRecordOrderBy, where *model.EnterpriseDeductionOperationRecordBoolExp) int
		EnterpriseDeductionOperationRecordByPk      func(childComplexity int, enterpriseDuductionOperationID string, id int64) int
		IllegalPhoto                                func(childComplexity int, distinctOn []model.IllegalPhotoSelectColumn, limit *int, offset *int, orderBy []*model.IllegalPhotoOrderBy, where *model.IllegalPhotoBoolExp) int
		IllegalPhotoAggregate                       func(childComplexity int, distinctOn []model.IllegalPhotoSelectColumn, limit *int, offset *int, orderBy []*model.IllegalPhotoOrderBy, where *model.IllegalPhotoBoolExp) int
		IllegalPhotoByPk                            func(childComplexity int, id int64, illegalPhotoID string) int
		RegionalViolationRegister                   func(childComplexity int, distinctOn []model.RegionalViolationRegisterSelectColumn, limit *int, offset *int, orderBy []*model.RegionalViolationRegisterOrderBy, where *model.RegionalViolationRegisterBoolExp) int
		RegionalViolationRegisterAggregate          func(childComplexity int, distinctOn []model.RegionalViolationRegisterSelectColumn, limit *int, offset *int, orderBy []*model.RegionalViolationRegisterOrderBy, where *model.RegionalViolationRegisterBoolExp) int
		RegionalViolationRegisterByPk               func(childComplexity int, id int64, regionalViolationRegisterID string) int
		UserOperationLog                            func(childComplexity int, distinctOn []model.UserOperationLogSelectColumn, limit *int, offset *int, orderBy []*model.UserOperationLogOrderBy, where *model.UserOperationLogBoolExp) int
		UserOperationLogAggregate                   func(childComplexity int, distinctOn []model.UserOperationLogSelectColumn, limit *int, offset *int, orderBy []*model.UserOperationLogOrderBy, where *model.UserOperationLogBoolExp) int
		UserOperationLogByPk                        func(childComplexity int, id int64) int
		VehicleDetainDetails                        func(childComplexity int, distinctOn []model.VehicleDetainDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDetainDetailsOrderBy, where *model.VehicleDetainDetailsBoolExp) int
		VehicleDetainDetailsAggregate               func(childComplexity int, distinctOn []model.VehicleDetainDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDetainDetailsOrderBy, where *model.VehicleDetainDetailsBoolExp) int
		VehicleDetainDetailsByPk                    func(childComplexity int, id int64) int
		VehicleViolationDetails                     func(childComplexity int, distinctOn []model.VehicleViolationDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationDetailsOrderBy, where *model.VehicleViolationDetailsBoolExp) int
		VehicleViolationDetailsAggregate            func(childComplexity int, distinctOn []model.VehicleViolationDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationDetailsOrderBy, where *model.VehicleViolationDetailsBoolExp) int
		VehicleViolationDetailsByPk                 func(childComplexity int, id int64) int
		VehicleViolationScoringItems                func(childComplexity int, distinctOn []model.VehicleViolationScoringItemsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringItemsOrderBy, where *model.VehicleViolationScoringItemsBoolExp) int
		VehicleViolationScoringItemsAggregate       func(childComplexity int, distinctOn []model.VehicleViolationScoringItemsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringItemsOrderBy, where *model.VehicleViolationScoringItemsBoolExp) int
		VehicleViolationScoringItemsByPk            func(childComplexity int, id int64, violationScoringItemID string) int
		VehicleViolationScoringRecord               func(childComplexity int, distinctOn []model.VehicleViolationScoringRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringRecordOrderBy, where *model.VehicleViolationScoringRecordBoolExp) int
		VehicleViolationScoringRecordAggregate      func(childComplexity int, distinctOn []model.VehicleViolationScoringRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringRecordOrderBy, where *model.VehicleViolationScoringRecordBoolExp) int
		VehicleViolationScoringRecordByPk           func(childComplexity int, id int64, violationScoringID string) int
		VioCodewfdm                                 func(childComplexity int, distinctOn []model.VioCodewfdmSelectColumn, limit *int, offset *int, orderBy []*model.VioCodewfdmOrderBy, where *model.VioCodewfdmBoolExp) int
		VioCodewfdmAggregate                        func(childComplexity int, distinctOn []model.VioCodewfdmSelectColumn, limit *int, offset *int, orderBy []*model.VioCodewfdmOrderBy, where *model.VioCodewfdmBoolExp) int
	}

	VioCodewfdm struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
		Wfms    func(childComplexity int) int
		Wfxw    func(childComplexity int) int
		Xh      func(childComplexity int) int
	}

	VioCodewfdmAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	VioCodewfdmAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.VioCodewfdmSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VioCodewfdmAvgFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
	}

	VioCodewfdmMaxFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
		Wfms    func(childComplexity int) int
		Wfxw    func(childComplexity int) int
		Xh      func(childComplexity int) int
	}

	VioCodewfdmMinFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
		Wfms    func(childComplexity int) int
		Wfxw    func(childComplexity int) int
		Xh      func(childComplexity int) int
	}

	VioCodewfdmMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VioCodewfdmStddevFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
	}

	VioCodewfdmStddevPopFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
	}

	VioCodewfdmStddevSampFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
	}

	VioCodewfdmSumFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
	}

	VioCodewfdmVarPopFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
	}

	VioCodewfdmVarSampFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
	}

	VioCodewfdmVarianceFields struct {
		FkjeMax func(childComplexity int) int
		FkjeMin func(childComplexity int) int
		Wfjfs   func(childComplexity int) int
	}

	AppEnforcement struct {
		Coordinate          func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		CreatedBy           func(childComplexity int) int
		DeletedAt           func(childComplexity int) int
		DeletedBy           func(childComplexity int) int
		EditText            func(childComplexity int) int
		EnterpriseType      func(childComplexity int) int
		ID                  func(childComplexity int) int
		IllegalPhotoID      func(childComplexity int) int
		LocationDescription func(childComplexity int) int
		OperationUser       func(childComplexity int) int
		PicketStatus        func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UpdatedBy           func(childComplexity int) int
		VehicleID           func(childComplexity int) int
		ViolationDetailID   func(childComplexity int) int
	}

	AppEnforcementAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	AppEnforcementAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.AppEnforcementSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	AppEnforcementAvgFields struct {
		ID           func(childComplexity int) int
		PicketStatus func(childComplexity int) int
	}

	AppEnforcementMaxFields struct {
		CreatedAt           func(childComplexity int) int
		CreatedBy           func(childComplexity int) int
		DeletedAt           func(childComplexity int) int
		DeletedBy           func(childComplexity int) int
		EditText            func(childComplexity int) int
		EnterpriseType      func(childComplexity int) int
		ID                  func(childComplexity int) int
		IllegalPhotoID      func(childComplexity int) int
		LocationDescription func(childComplexity int) int
		OperationUser       func(childComplexity int) int
		PicketStatus        func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UpdatedBy           func(childComplexity int) int
		VehicleID           func(childComplexity int) int
		ViolationDetailID   func(childComplexity int) int
	}

	AppEnforcementMinFields struct {
		CreatedAt           func(childComplexity int) int
		CreatedBy           func(childComplexity int) int
		DeletedAt           func(childComplexity int) int
		DeletedBy           func(childComplexity int) int
		EditText            func(childComplexity int) int
		EnterpriseType      func(childComplexity int) int
		ID                  func(childComplexity int) int
		IllegalPhotoID      func(childComplexity int) int
		LocationDescription func(childComplexity int) int
		OperationUser       func(childComplexity int) int
		PicketStatus        func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UpdatedBy           func(childComplexity int) int
		VehicleID           func(childComplexity int) int
		ViolationDetailID   func(childComplexity int) int
	}

	AppEnforcementMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	AppEnforcementStddevFields struct {
		ID           func(childComplexity int) int
		PicketStatus func(childComplexity int) int
	}

	AppEnforcementStddevPopFields struct {
		ID           func(childComplexity int) int
		PicketStatus func(childComplexity int) int
	}

	AppEnforcementStddevSampFields struct {
		ID           func(childComplexity int) int
		PicketStatus func(childComplexity int) int
	}

	AppEnforcementSumFields struct {
		ID           func(childComplexity int) int
		PicketStatus func(childComplexity int) int
	}

	AppEnforcementVarPopFields struct {
		ID           func(childComplexity int) int
		PicketStatus func(childComplexity int) int
	}

	AppEnforcementVarSampFields struct {
		ID           func(childComplexity int) int
		PicketStatus func(childComplexity int) int
	}

	AppEnforcementVarianceFields struct {
		ID           func(childComplexity int) int
		PicketStatus func(childComplexity int) int
	}

	DisputeViolationRecord struct {
		AgentIDNumber               func(childComplexity int) int
		ApproveState                func(childComplexity int) int
		BusinessLicense             func(childComplexity int) int
		ContactAddress              func(childComplexity int) int
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		DisputeViolationID          func(childComplexity int) int
		DriverLicense               func(childComplexity int) int
		DrivingLicense              func(childComplexity int) int
		DrivingLog                  func(childComplexity int) int
		ID                          func(childComplexity int) int
		IDCard                      func(childComplexity int) int
		IsDelete                    func(childComplexity int) int
		LaborContract               func(childComplexity int) int
		LegalPersonIDNumber         func(childComplexity int) int
		OrganizationCode            func(childComplexity int) int
		OtherEvidence               func(childComplexity int) int
		PicEvidence                 func(childComplexity int) int
		Statement                   func(childComplexity int) int
		UpdateTimeIn                func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
		VehicleManagerIDCard        func(childComplexity int) int
		ViolationDetailID           func(childComplexity int) int
		Witness                     func(childComplexity int) int
		WrittenApplicationMaterials func(childComplexity int) int
	}

	DisputeViolationRecordAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	DisputeViolationRecordAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.DisputeViolationRecordSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DisputeViolationRecordAvgFields struct {
		ApproveState func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	DisputeViolationRecordLog struct {
		Approver              func(childComplexity int) int
		DisputeViolationID    func(childComplexity int) int
		DisputeViolationLogID func(childComplexity int) int
		ID                    func(childComplexity int) int
		ReviewActionName      func(childComplexity int) int
		ReviewOpinion         func(childComplexity int) int
		ReviewResult          func(childComplexity int) int
		ReviewTime            func(childComplexity int) int
		Reviewer              func(childComplexity int) int
		UpdateTimeIn          func(childComplexity int) int
	}

	DisputeViolationRecordLogAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	DisputeViolationRecordLogAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.DisputeViolationRecordLogSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DisputeViolationRecordLogAvgFields struct {
		ID func(childComplexity int) int
	}

	DisputeViolationRecordLogMaxFields struct {
		Approver              func(childComplexity int) int
		DisputeViolationID    func(childComplexity int) int
		DisputeViolationLogID func(childComplexity int) int
		ID                    func(childComplexity int) int
		ReviewActionName      func(childComplexity int) int
		ReviewOpinion         func(childComplexity int) int
		ReviewResult          func(childComplexity int) int
		ReviewTime            func(childComplexity int) int
		Reviewer              func(childComplexity int) int
		UpdateTimeIn          func(childComplexity int) int
	}

	DisputeViolationRecordLogMinFields struct {
		Approver              func(childComplexity int) int
		DisputeViolationID    func(childComplexity int) int
		DisputeViolationLogID func(childComplexity int) int
		ID                    func(childComplexity int) int
		ReviewActionName      func(childComplexity int) int
		ReviewOpinion         func(childComplexity int) int
		ReviewResult          func(childComplexity int) int
		ReviewTime            func(childComplexity int) int
		Reviewer              func(childComplexity int) int
		UpdateTimeIn          func(childComplexity int) int
	}

	DisputeViolationRecordLogMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DisputeViolationRecordLogStddevFields struct {
		ID func(childComplexity int) int
	}

	DisputeViolationRecordLogStddevPopFields struct {
		ID func(childComplexity int) int
	}

	DisputeViolationRecordLogStddevSampFields struct {
		ID func(childComplexity int) int
	}

	DisputeViolationRecordLogSumFields struct {
		ID func(childComplexity int) int
	}

	DisputeViolationRecordLogVarPopFields struct {
		ID func(childComplexity int) int
	}

	DisputeViolationRecordLogVarSampFields struct {
		ID func(childComplexity int) int
	}

	DisputeViolationRecordLogVarianceFields struct {
		ID func(childComplexity int) int
	}

	DisputeViolationRecordMaxFields struct {
		AgentIDNumber               func(childComplexity int) int
		ApproveState                func(childComplexity int) int
		BusinessLicense             func(childComplexity int) int
		ContactAddress              func(childComplexity int) int
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		DisputeViolationID          func(childComplexity int) int
		DriverLicense               func(childComplexity int) int
		DrivingLicense              func(childComplexity int) int
		DrivingLog                  func(childComplexity int) int
		ID                          func(childComplexity int) int
		IDCard                      func(childComplexity int) int
		LaborContract               func(childComplexity int) int
		LegalPersonIDNumber         func(childComplexity int) int
		OrganizationCode            func(childComplexity int) int
		PicEvidence                 func(childComplexity int) int
		Statement                   func(childComplexity int) int
		UpdateTimeIn                func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
		VehicleManagerIDCard        func(childComplexity int) int
		ViolationDetailID           func(childComplexity int) int
		Witness                     func(childComplexity int) int
		WrittenApplicationMaterials func(childComplexity int) int
	}

	DisputeViolationRecordMinFields struct {
		AgentIDNumber               func(childComplexity int) int
		ApproveState                func(childComplexity int) int
		BusinessLicense             func(childComplexity int) int
		ContactAddress              func(childComplexity int) int
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		DisputeViolationID          func(childComplexity int) int
		DriverLicense               func(childComplexity int) int
		DrivingLicense              func(childComplexity int) int
		DrivingLog                  func(childComplexity int) int
		ID                          func(childComplexity int) int
		IDCard                      func(childComplexity int) int
		LaborContract               func(childComplexity int) int
		LegalPersonIDNumber         func(childComplexity int) int
		OrganizationCode            func(childComplexity int) int
		PicEvidence                 func(childComplexity int) int
		Statement                   func(childComplexity int) int
		UpdateTimeIn                func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
		VehicleManagerIDCard        func(childComplexity int) int
		ViolationDetailID           func(childComplexity int) int
		Witness                     func(childComplexity int) int
		WrittenApplicationMaterials func(childComplexity int) int
	}

	DisputeViolationRecordMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DisputeViolationRecordStddevFields struct {
		ApproveState func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	DisputeViolationRecordStddevPopFields struct {
		ApproveState func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	DisputeViolationRecordStddevSampFields struct {
		ApproveState func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	DisputeViolationRecordSumFields struct {
		ApproveState func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	DisputeViolationRecordVarPopFields struct {
		ApproveState func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	DisputeViolationRecordVarSampFields struct {
		ApproveState func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	DisputeViolationRecordVarianceFields struct {
		ApproveState func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	DriverPeccancyCheck struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		DriverID     func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		ID           func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		VehicleID    func(childComplexity int) int
	}

	DriverPeccancyCheckAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	DriverPeccancyCheckAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.DriverPeccancyCheckSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DriverPeccancyCheckAvgFields struct {
		ID func(childComplexity int) int
	}

	DriverPeccancyCheckMaxFields struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		DriverID     func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		ID           func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		VehicleID    func(childComplexity int) int
	}

	DriverPeccancyCheckMinFields struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		DriverID     func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		ID           func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		VehicleID    func(childComplexity int) int
	}

	DriverPeccancyCheckMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DriverPeccancyCheckStddevFields struct {
		ID func(childComplexity int) int
	}

	DriverPeccancyCheckStddevPopFields struct {
		ID func(childComplexity int) int
	}

	DriverPeccancyCheckStddevSampFields struct {
		ID func(childComplexity int) int
	}

	DriverPeccancyCheckSumFields struct {
		ID func(childComplexity int) int
	}

	DriverPeccancyCheckVarPopFields struct {
		ID func(childComplexity int) int
	}

	DriverPeccancyCheckVarSampFields struct {
		ID func(childComplexity int) int
	}

	DriverPeccancyCheckVarianceFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseDeductionItems struct {
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		DeductionCategory         func(childComplexity int) int
		DeductionItemDescription  func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		DeletedBy                 func(childComplexity int) int
		DemeritPoints             func(childComplexity int) int
		EnterpriseDeductionItemID func(childComplexity int) int
		ID                        func(childComplexity int) int
		IsDelete                  func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		UpdatedBy                 func(childComplexity int) int
	}

	EnterpriseDeductionItemsAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	EnterpriseDeductionItemsAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.EnterpriseDeductionItemsSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EnterpriseDeductionItemsAvgFields struct {
		DeductionCategory func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	EnterpriseDeductionItemsMaxFields struct {
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		DeductionCategory         func(childComplexity int) int
		DeductionItemDescription  func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		DeletedBy                 func(childComplexity int) int
		DemeritPoints             func(childComplexity int) int
		EnterpriseDeductionItemID func(childComplexity int) int
		ID                        func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		UpdatedBy                 func(childComplexity int) int
	}

	EnterpriseDeductionItemsMinFields struct {
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		DeductionCategory         func(childComplexity int) int
		DeductionItemDescription  func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		DeletedBy                 func(childComplexity int) int
		DemeritPoints             func(childComplexity int) int
		EnterpriseDeductionItemID func(childComplexity int) int
		ID                        func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		UpdatedBy                 func(childComplexity int) int
	}

	EnterpriseDeductionItemsMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EnterpriseDeductionItemsStddevFields struct {
		DeductionCategory func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	EnterpriseDeductionItemsStddevPopFields struct {
		DeductionCategory func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	EnterpriseDeductionItemsStddevSampFields struct {
		DeductionCategory func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	EnterpriseDeductionItemsSumFields struct {
		DeductionCategory func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	EnterpriseDeductionItemsVarPopFields struct {
		DeductionCategory func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	EnterpriseDeductionItemsVarSampFields struct {
		DeductionCategory func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	EnterpriseDeductionItemsVarianceFields struct {
		DeductionCategory func(childComplexity int) int
		DemeritPoints     func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	EnterpriseDeductionOperationRecord struct {
		CreatedAt                      func(childComplexity int) int
		CreatedBy                      func(childComplexity int) int
		DeletedAt                      func(childComplexity int) int
		DeletedBy                      func(childComplexity int) int
		DemeritPoints                  func(childComplexity int) int
		EnterpriseDeductionItemID      func(childComplexity int) int
		EnterpriseDuductionOperationID func(childComplexity int) int
		EnterpriseID                   func(childComplexity int) int
		ID                             func(childComplexity int) int
		IsDelete                       func(childComplexity int) int
		Remarks                        func(childComplexity int) int
		UpdatedAt                      func(childComplexity int) int
		UpdatedBy                      func(childComplexity int) int
	}

	EnterpriseDeductionOperationRecordAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	EnterpriseDeductionOperationRecordAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.EnterpriseDeductionOperationRecordSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EnterpriseDeductionOperationRecordAvgFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	EnterpriseDeductionOperationRecordMaxFields struct {
		CreatedAt                      func(childComplexity int) int
		CreatedBy                      func(childComplexity int) int
		DeletedAt                      func(childComplexity int) int
		DeletedBy                      func(childComplexity int) int
		DemeritPoints                  func(childComplexity int) int
		EnterpriseDeductionItemID      func(childComplexity int) int
		EnterpriseDuductionOperationID func(childComplexity int) int
		EnterpriseID                   func(childComplexity int) int
		ID                             func(childComplexity int) int
		Remarks                        func(childComplexity int) int
		UpdatedAt                      func(childComplexity int) int
		UpdatedBy                      func(childComplexity int) int
	}

	EnterpriseDeductionOperationRecordMinFields struct {
		CreatedAt                      func(childComplexity int) int
		CreatedBy                      func(childComplexity int) int
		DeletedAt                      func(childComplexity int) int
		DeletedBy                      func(childComplexity int) int
		DemeritPoints                  func(childComplexity int) int
		EnterpriseDeductionItemID      func(childComplexity int) int
		EnterpriseDuductionOperationID func(childComplexity int) int
		EnterpriseID                   func(childComplexity int) int
		ID                             func(childComplexity int) int
		Remarks                        func(childComplexity int) int
		UpdatedAt                      func(childComplexity int) int
		UpdatedBy                      func(childComplexity int) int
	}

	EnterpriseDeductionOperationRecordMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EnterpriseDeductionOperationRecordStddevFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	EnterpriseDeductionOperationRecordStddevPopFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	EnterpriseDeductionOperationRecordStddevSampFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	EnterpriseDeductionOperationRecordSumFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	EnterpriseDeductionOperationRecordVarPopFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	EnterpriseDeductionOperationRecordVarSampFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	EnterpriseDeductionOperationRecordVarianceFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	IllegalPhoto struct {
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		DeletedBy      func(childComplexity int) int
		ID             func(childComplexity int) int
		IllegalPhotoID func(childComplexity int) int
		IsDelete       func(childComplexity int) int
		IsSynchronized func(childComplexity int) int
		PictureAddress func(childComplexity int) int
		PictureName    func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
	}

	IllegalPhotoAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	IllegalPhotoAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.IllegalPhotoSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	IllegalPhotoAvgFields struct {
		ID func(childComplexity int) int
	}

	IllegalPhotoMaxFields struct {
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		DeletedBy      func(childComplexity int) int
		ID             func(childComplexity int) int
		IllegalPhotoID func(childComplexity int) int
		PictureAddress func(childComplexity int) int
		PictureName    func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
	}

	IllegalPhotoMinFields struct {
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		DeletedBy      func(childComplexity int) int
		ID             func(childComplexity int) int
		IllegalPhotoID func(childComplexity int) int
		PictureAddress func(childComplexity int) int
		PictureName    func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
	}

	IllegalPhotoMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	IllegalPhotoStddevFields struct {
		ID func(childComplexity int) int
	}

	IllegalPhotoStddevPopFields struct {
		ID func(childComplexity int) int
	}

	IllegalPhotoStddevSampFields struct {
		ID func(childComplexity int) int
	}

	IllegalPhotoSumFields struct {
		ID func(childComplexity int) int
	}

	IllegalPhotoVarPopFields struct {
		ID func(childComplexity int) int
	}

	IllegalPhotoVarSampFields struct {
		ID func(childComplexity int) int
	}

	IllegalPhotoVarianceFields struct {
		ID func(childComplexity int) int
	}

	RegionalViolationRegister struct {
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		DriverID                    func(childComplexity int) int
		ID                          func(childComplexity int) int
		IllegalCode                 func(childComplexity int) int
		IllegalTime                 func(childComplexity int) int
		IllegalType                 func(childComplexity int) int
		IsDelete                    func(childComplexity int) int
		IsRegister                  func(childComplexity int) int
		Operator                    func(childComplexity int) int
		ProcessingAgency            func(childComplexity int) int
		RegionalViolationRegisterID func(childComplexity int) int
		RegisterTime                func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
		VehicleID                   func(childComplexity int) int
		ViolationDetailID           func(childComplexity int) int
	}

	RegionalViolationRegisterAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	RegionalViolationRegisterAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.RegionalViolationRegisterSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	RegionalViolationRegisterAvgFields struct {
		ID          func(childComplexity int) int
		IllegalCode func(childComplexity int) int
		IllegalType func(childComplexity int) int
	}

	RegionalViolationRegisterMaxFields struct {
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		DriverID                    func(childComplexity int) int
		ID                          func(childComplexity int) int
		IllegalCode                 func(childComplexity int) int
		IllegalTime                 func(childComplexity int) int
		IllegalType                 func(childComplexity int) int
		Operator                    func(childComplexity int) int
		ProcessingAgency            func(childComplexity int) int
		RegionalViolationRegisterID func(childComplexity int) int
		RegisterTime                func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
		VehicleID                   func(childComplexity int) int
		ViolationDetailID           func(childComplexity int) int
	}

	RegionalViolationRegisterMinFields struct {
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		DriverID                    func(childComplexity int) int
		ID                          func(childComplexity int) int
		IllegalCode                 func(childComplexity int) int
		IllegalTime                 func(childComplexity int) int
		IllegalType                 func(childComplexity int) int
		Operator                    func(childComplexity int) int
		ProcessingAgency            func(childComplexity int) int
		RegionalViolationRegisterID func(childComplexity int) int
		RegisterTime                func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
		VehicleID                   func(childComplexity int) int
		ViolationDetailID           func(childComplexity int) int
	}

	RegionalViolationRegisterMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	RegionalViolationRegisterStddevFields struct {
		ID          func(childComplexity int) int
		IllegalCode func(childComplexity int) int
		IllegalType func(childComplexity int) int
	}

	RegionalViolationRegisterStddevPopFields struct {
		ID          func(childComplexity int) int
		IllegalCode func(childComplexity int) int
		IllegalType func(childComplexity int) int
	}

	RegionalViolationRegisterStddevSampFields struct {
		ID          func(childComplexity int) int
		IllegalCode func(childComplexity int) int
		IllegalType func(childComplexity int) int
	}

	RegionalViolationRegisterSumFields struct {
		ID          func(childComplexity int) int
		IllegalCode func(childComplexity int) int
		IllegalType func(childComplexity int) int
	}

	RegionalViolationRegisterVarPopFields struct {
		ID          func(childComplexity int) int
		IllegalCode func(childComplexity int) int
		IllegalType func(childComplexity int) int
	}

	RegionalViolationRegisterVarSampFields struct {
		ID          func(childComplexity int) int
		IllegalCode func(childComplexity int) int
		IllegalType func(childComplexity int) int
	}

	RegionalViolationRegisterVarianceFields struct {
		ID          func(childComplexity int) int
		IllegalCode func(childComplexity int) int
		IllegalType func(childComplexity int) int
	}

	UserOperationLog struct {
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		DeletedBy          func(childComplexity int) int
		ID                 func(childComplexity int) int
		IllegalTime        func(childComplexity int) int
		LicensePlateNumber func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
		UserIP             func(childComplexity int) int
	}

	UserOperationLogAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	UserOperationLogAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.UserOperationLogSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	UserOperationLogAvgFields struct {
		ID func(childComplexity int) int
	}

	UserOperationLogMaxFields struct {
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		DeletedBy          func(childComplexity int) int
		ID                 func(childComplexity int) int
		IllegalTime        func(childComplexity int) int
		LicensePlateNumber func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
		UserIP             func(childComplexity int) int
	}

	UserOperationLogMinFields struct {
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		DeletedBy          func(childComplexity int) int
		ID                 func(childComplexity int) int
		IllegalTime        func(childComplexity int) int
		LicensePlateNumber func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
		UserIP             func(childComplexity int) int
	}

	UserOperationLogMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	UserOperationLogStddevFields struct {
		ID func(childComplexity int) int
	}

	UserOperationLogStddevPopFields struct {
		ID func(childComplexity int) int
	}

	UserOperationLogStddevSampFields struct {
		ID func(childComplexity int) int
	}

	UserOperationLogSumFields struct {
		ID func(childComplexity int) int
	}

	UserOperationLogVarPopFields struct {
		ID func(childComplexity int) int
	}

	UserOperationLogVarSampFields struct {
		ID func(childComplexity int) int
	}

	UserOperationLogVarianceFields struct {
		ID func(childComplexity int) int
	}

	VehicleDetainDetails struct {
		BayonetPicture        func(childComplexity int) int
		ID                    func(childComplexity int) int
		IsBayonet             func(childComplexity int) int
		IsCategory            func(childComplexity int) int
		IsDelete              func(childComplexity int) int
		IsIllegal             func(childComplexity int) int
		IsSatelliteJudgment   func(childComplexity int) int
		LicensePlateColor     func(childComplexity int) int
		LicensePlateNumber    func(childComplexity int) int
		RecordTime            func(childComplexity int) int
		RegisterRegion        func(childComplexity int) int
		RegisterUser          func(childComplexity int) int
		Remarks               func(childComplexity int) int
		UpdateTime            func(childComplexity int) int
		VehicleDetainPicture  func(childComplexity int) int
		VehicleDetainStatus   func(childComplexity int) int
		VehicleDetainTime     func(childComplexity int) int
		VehicleReleasePicture func(childComplexity int) int
		VehicleReleaseTime    func(childComplexity int) int
	}

	VehicleDetainDetailsAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	VehicleDetainDetailsAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.VehicleDetainDetailsSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleDetainDetailsAvgFields struct {
		ID                  func(childComplexity int) int
		VehicleDetainStatus func(childComplexity int) int
	}

	VehicleDetainDetailsMaxFields struct {
		BayonetPicture        func(childComplexity int) int
		ID                    func(childComplexity int) int
		LicensePlateColor     func(childComplexity int) int
		LicensePlateNumber    func(childComplexity int) int
		RecordTime            func(childComplexity int) int
		RegisterRegion        func(childComplexity int) int
		RegisterUser          func(childComplexity int) int
		Remarks               func(childComplexity int) int
		UpdateTime            func(childComplexity int) int
		VehicleDetainPicture  func(childComplexity int) int
		VehicleDetainStatus   func(childComplexity int) int
		VehicleDetainTime     func(childComplexity int) int
		VehicleReleasePicture func(childComplexity int) int
		VehicleReleaseTime    func(childComplexity int) int
	}

	VehicleDetainDetailsMinFields struct {
		BayonetPicture        func(childComplexity int) int
		ID                    func(childComplexity int) int
		LicensePlateColor     func(childComplexity int) int
		LicensePlateNumber    func(childComplexity int) int
		RecordTime            func(childComplexity int) int
		RegisterRegion        func(childComplexity int) int
		RegisterUser          func(childComplexity int) int
		Remarks               func(childComplexity int) int
		UpdateTime            func(childComplexity int) int
		VehicleDetainPicture  func(childComplexity int) int
		VehicleDetainStatus   func(childComplexity int) int
		VehicleDetainTime     func(childComplexity int) int
		VehicleReleasePicture func(childComplexity int) int
		VehicleReleaseTime    func(childComplexity int) int
	}

	VehicleDetainDetailsMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleDetainDetailsStddevFields struct {
		ID                  func(childComplexity int) int
		VehicleDetainStatus func(childComplexity int) int
	}

	VehicleDetainDetailsStddevPopFields struct {
		ID                  func(childComplexity int) int
		VehicleDetainStatus func(childComplexity int) int
	}

	VehicleDetainDetailsStddevSampFields struct {
		ID                  func(childComplexity int) int
		VehicleDetainStatus func(childComplexity int) int
	}

	VehicleDetainDetailsSumFields struct {
		ID                  func(childComplexity int) int
		VehicleDetainStatus func(childComplexity int) int
	}

	VehicleDetainDetailsVarPopFields struct {
		ID                  func(childComplexity int) int
		VehicleDetainStatus func(childComplexity int) int
	}

	VehicleDetainDetailsVarSampFields struct {
		ID                  func(childComplexity int) int
		VehicleDetainStatus func(childComplexity int) int
	}

	VehicleDetainDetailsVarianceFields struct {
		ID                  func(childComplexity int) int
		VehicleDetainStatus func(childComplexity int) int
	}

	VehicleViolationDetails struct {
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		DecisionNumber        func(childComplexity int) int
		DeletedAt             func(childComplexity int) int
		DeletedBy             func(childComplexity int) int
		DiscoveryAgency       func(childComplexity int) int
		DriverID              func(childComplexity int) int
		EnterpriseID          func(childComplexity int) int
		HandleAt              func(childComplexity int) int
		HandleBy              func(childComplexity int) int
		ID                    func(childComplexity int) int
		IllegalCode           func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		IllegalLocation       func(childComplexity int) int
		IllegalPhoto          func(childComplexity int) int
		IllegalTime           func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		IsDelete              func(childComplexity int) int
		IsHandle              func(childComplexity int) int
		IsNoticeDriver        func(childComplexity int) int
		IsSend                func(childComplexity int) int
		MeasuredValue         func(childComplexity int) int
		NoticeTime            func(childComplexity int) int
		PartyName             func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
		StandardValue         func(childComplexity int) int
		UpdateTimeIn          func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		UpdatedBy             func(childComplexity int) int
		VehicleID             func(childComplexity int) int
		VehicleInformation    func(childComplexity int) int
		ViolationDetailID     func(childComplexity int) int
	}

	VehicleViolationDetailsAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	VehicleViolationDetailsAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.VehicleViolationDetailsSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleViolationDetailsAvgFields struct {
		ID                    func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
	}

	VehicleViolationDetailsMaxFields struct {
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		DecisionNumber        func(childComplexity int) int
		DeletedAt             func(childComplexity int) int
		DeletedBy             func(childComplexity int) int
		DiscoveryAgency       func(childComplexity int) int
		DriverID              func(childComplexity int) int
		EnterpriseID          func(childComplexity int) int
		HandleAt              func(childComplexity int) int
		HandleBy              func(childComplexity int) int
		ID                    func(childComplexity int) int
		IllegalCode           func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		IllegalLocation       func(childComplexity int) int
		IllegalPhoto          func(childComplexity int) int
		IllegalTime           func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		MeasuredValue         func(childComplexity int) int
		NoticeTime            func(childComplexity int) int
		PartyName             func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
		StandardValue         func(childComplexity int) int
		UpdateTimeIn          func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		UpdatedBy             func(childComplexity int) int
		VehicleID             func(childComplexity int) int
		VehicleInformation    func(childComplexity int) int
		ViolationDetailID     func(childComplexity int) int
	}

	VehicleViolationDetailsMinFields struct {
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		DecisionNumber        func(childComplexity int) int
		DeletedAt             func(childComplexity int) int
		DeletedBy             func(childComplexity int) int
		DiscoveryAgency       func(childComplexity int) int
		DriverID              func(childComplexity int) int
		EnterpriseID          func(childComplexity int) int
		HandleAt              func(childComplexity int) int
		HandleBy              func(childComplexity int) int
		ID                    func(childComplexity int) int
		IllegalCode           func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		IllegalLocation       func(childComplexity int) int
		IllegalPhoto          func(childComplexity int) int
		IllegalTime           func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		MeasuredValue         func(childComplexity int) int
		NoticeTime            func(childComplexity int) int
		PartyName             func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
		StandardValue         func(childComplexity int) int
		UpdateTimeIn          func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		UpdatedBy             func(childComplexity int) int
		VehicleID             func(childComplexity int) int
		VehicleInformation    func(childComplexity int) int
		ViolationDetailID     func(childComplexity int) int
	}

	VehicleViolationDetailsMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleViolationDetailsStddevFields struct {
		ID                    func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
	}

	VehicleViolationDetailsStddevPopFields struct {
		ID                    func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
	}

	VehicleViolationDetailsStddevSampFields struct {
		ID                    func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
	}

	VehicleViolationDetailsSumFields struct {
		ID                    func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
	}

	VehicleViolationDetailsVarPopFields struct {
		ID                    func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
	}

	VehicleViolationDetailsVarSampFields struct {
		ID                    func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
	}

	VehicleViolationDetailsVarianceFields struct {
		ID                    func(childComplexity int) int
		IllegalHandlingStatus func(childComplexity int) int
		InformationSource     func(childComplexity int) int
		PaymentMark           func(childComplexity int) int
	}

	VehicleViolationScoringItems struct {
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		DeductionCategory        func(childComplexity int) int
		DeductionItemDescription func(childComplexity int) int
		DeletedAt                func(childComplexity int) int
		DeletedBy                func(childComplexity int) int
		DemeritPoints            func(childComplexity int) int
		ID                       func(childComplexity int) int
		IsDelete                 func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
		ViolationScoringItemID   func(childComplexity int) int
	}

	VehicleViolationScoringItemsAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	VehicleViolationScoringItemsAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.VehicleViolationScoringItemsSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleViolationScoringItemsAvgFields struct {
		DeductionCategory func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	VehicleViolationScoringItemsMaxFields struct {
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		DeductionCategory        func(childComplexity int) int
		DeductionItemDescription func(childComplexity int) int
		DeletedAt                func(childComplexity int) int
		DeletedBy                func(childComplexity int) int
		DemeritPoints            func(childComplexity int) int
		ID                       func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
		ViolationScoringItemID   func(childComplexity int) int
	}

	VehicleViolationScoringItemsMinFields struct {
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		DeductionCategory        func(childComplexity int) int
		DeductionItemDescription func(childComplexity int) int
		DeletedAt                func(childComplexity int) int
		DeletedBy                func(childComplexity int) int
		DemeritPoints            func(childComplexity int) int
		ID                       func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
		ViolationScoringItemID   func(childComplexity int) int
	}

	VehicleViolationScoringItemsMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleViolationScoringItemsStddevFields struct {
		DeductionCategory func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	VehicleViolationScoringItemsStddevPopFields struct {
		DeductionCategory func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	VehicleViolationScoringItemsStddevSampFields struct {
		DeductionCategory func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	VehicleViolationScoringItemsSumFields struct {
		DeductionCategory func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	VehicleViolationScoringItemsVarPopFields struct {
		DeductionCategory func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	VehicleViolationScoringItemsVarSampFields struct {
		DeductionCategory func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	VehicleViolationScoringItemsVarianceFields struct {
		DeductionCategory func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	VehicleViolationScoringRecord struct {
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DeletedBy              func(childComplexity int) int
		DemeritPoints          func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsDelete               func(childComplexity int) int
		Remarks                func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		VehicleID              func(childComplexity int) int
		ViolationScoringID     func(childComplexity int) int
		ViolationScoringItemID func(childComplexity int) int
	}

	VehicleViolationScoringRecordAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	VehicleViolationScoringRecordAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.VehicleViolationScoringRecordSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleViolationScoringRecordAvgFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	VehicleViolationScoringRecordMaxFields struct {
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DeletedBy              func(childComplexity int) int
		DemeritPoints          func(childComplexity int) int
		ID                     func(childComplexity int) int
		Remarks                func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		VehicleID              func(childComplexity int) int
		ViolationScoringID     func(childComplexity int) int
		ViolationScoringItemID func(childComplexity int) int
	}

	VehicleViolationScoringRecordMinFields struct {
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DeletedBy              func(childComplexity int) int
		DemeritPoints          func(childComplexity int) int
		ID                     func(childComplexity int) int
		Remarks                func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		VehicleID              func(childComplexity int) int
		ViolationScoringID     func(childComplexity int) int
		ViolationScoringItemID func(childComplexity int) int
	}

	VehicleViolationScoringRecordMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleViolationScoringRecordStddevFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	VehicleViolationScoringRecordStddevPopFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	VehicleViolationScoringRecordStddevSampFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	VehicleViolationScoringRecordSumFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	VehicleViolationScoringRecordVarPopFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	VehicleViolationScoringRecordVarSampFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	VehicleViolationScoringRecordVarianceFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteAppEnforcement(ctx context.Context, where model.AppEnforcementBoolExp) (*model.AppEnforcementMutationResponse, error)
	DeleteAppEnforcementByPk(ctx context.Context, id int64, illegalPhotoID string) (*model.AppEnforcement, error)
	InsertAppEnforcement(ctx context.Context, objects []*model.AppEnforcementInsertInput, onConflict *model.AppEnforcementOnConflict) (*model.AppEnforcementMutationResponse, error)
	InsertAppEnforcementOne(ctx context.Context, object model.AppEnforcementInsertInput, onConflict *model.AppEnforcementOnConflict) (*model.AppEnforcement, error)
	UpdateAppEnforcement(ctx context.Context, inc *model.AppEnforcementIncInput, set *model.AppEnforcementSetInput, where model.AppEnforcementBoolExp) (*model.AppEnforcementMutationResponse, error)
	UpdateAppEnforcementByPk(ctx context.Context, inc *model.AppEnforcementIncInput, set *model.AppEnforcementSetInput, pkColumns model.AppEnforcementPkColumnsInput) (*model.AppEnforcement, error)
	DeleteVioCodewfdm(ctx context.Context, where model.VioCodewfdmBoolExp) (*model.VioCodewfdmMutationResponse, error)
	InsertVioCodewfdm(ctx context.Context, objects []*model.VioCodewfdmInsertInput) (*model.VioCodewfdmMutationResponse, error)
	InsertVioCodewfdmOne(ctx context.Context, object model.VioCodewfdmInsertInput) (*model.VioCodewfdm, error)
	UpdateVioCodewfdm(ctx context.Context, inc *model.VioCodewfdmIncInput, set *model.VioCodewfdmSetInput, where model.VioCodewfdmBoolExp) (*model.VioCodewfdmMutationResponse, error)
	DeleteDisputeViolationRecord(ctx context.Context, where model.DisputeViolationRecordBoolExp) (*model.DisputeViolationRecordMutationResponse, error)
	DeleteDisputeViolationRecordByPk(ctx context.Context, disputeViolationID string, id int64) (*model.DisputeViolationRecord, error)
	InsertDisputeViolationRecord(ctx context.Context, objects []*model.DisputeViolationRecordInsertInput, onConflict *model.DisputeViolationRecordOnConflict) (*model.DisputeViolationRecordMutationResponse, error)
	InsertDisputeViolationRecordOne(ctx context.Context, object model.DisputeViolationRecordInsertInput, onConflict *model.DisputeViolationRecordOnConflict) (*model.DisputeViolationRecord, error)
	UpdateDisputeViolationRecord(ctx context.Context, inc *model.DisputeViolationRecordIncInput, set *model.DisputeViolationRecordSetInput, where model.DisputeViolationRecordBoolExp) (*model.DisputeViolationRecordMutationResponse, error)
	UpdateDisputeViolationRecordByPk(ctx context.Context, inc *model.DisputeViolationRecordIncInput, set *model.DisputeViolationRecordSetInput, pkColumns model.DisputeViolationRecordPkColumnsInput) (*model.DisputeViolationRecord, error)
	DeleteDisputeViolationRecordLog(ctx context.Context, where model.DisputeViolationRecordLogBoolExp) (*model.DisputeViolationRecordLogMutationResponse, error)
	DeleteDisputeViolationRecordLogByPk(ctx context.Context, disputeViolationLogID string, id int64) (*model.DisputeViolationRecordLog, error)
	InsertDisputeViolationRecordLog(ctx context.Context, objects []*model.DisputeViolationRecordLogInsertInput, onConflict *model.DisputeViolationRecordLogOnConflict) (*model.DisputeViolationRecordLogMutationResponse, error)
	InsertDisputeViolationRecordLogOne(ctx context.Context, object model.DisputeViolationRecordLogInsertInput, onConflict *model.DisputeViolationRecordLogOnConflict) (*model.DisputeViolationRecordLog, error)
	UpdateDisputeViolationRecordLog(ctx context.Context, inc *model.DisputeViolationRecordLogIncInput, set *model.DisputeViolationRecordLogSetInput, where model.DisputeViolationRecordLogBoolExp) (*model.DisputeViolationRecordLogMutationResponse, error)
	UpdateDisputeViolationRecordLogByPk(ctx context.Context, inc *model.DisputeViolationRecordLogIncInput, set *model.DisputeViolationRecordLogSetInput, pkColumns model.DisputeViolationRecordLogPkColumnsInput) (*model.DisputeViolationRecordLog, error)
	DeleteDriverPeccancyCheck(ctx context.Context, where model.DriverPeccancyCheckBoolExp) (*model.DriverPeccancyCheckMutationResponse, error)
	DeleteDriverPeccancyCheckByPk(ctx context.Context, id int64) (*model.DriverPeccancyCheck, error)
	InsertDriverPeccancyCheck(ctx context.Context, objects []*model.DriverPeccancyCheckInsertInput, onConflict *model.DriverPeccancyCheckOnConflict) (*model.DriverPeccancyCheckMutationResponse, error)
	InsertDriverPeccancyCheckOne(ctx context.Context, object model.DriverPeccancyCheckInsertInput, onConflict *model.DriverPeccancyCheckOnConflict) (*model.DriverPeccancyCheck, error)
	UpdateDriverPeccancyCheck(ctx context.Context, inc *model.DriverPeccancyCheckIncInput, set *model.DriverPeccancyCheckSetInput, where model.DriverPeccancyCheckBoolExp) (*model.DriverPeccancyCheckMutationResponse, error)
	UpdateDriverPeccancyCheckByPk(ctx context.Context, inc *model.DriverPeccancyCheckIncInput, set *model.DriverPeccancyCheckSetInput, pkColumns model.DriverPeccancyCheckPkColumnsInput) (*model.DriverPeccancyCheck, error)
	DeleteEnterpriseDeductionItems(ctx context.Context, where model.EnterpriseDeductionItemsBoolExp) (*model.EnterpriseDeductionItemsMutationResponse, error)
	DeleteEnterpriseDeductionItemsByPk(ctx context.Context, enterpriseDeductionItemID string, id int64) (*model.EnterpriseDeductionItems, error)
	InsertEnterpriseDeductionItems(ctx context.Context, objects []*model.EnterpriseDeductionItemsInsertInput, onConflict *model.EnterpriseDeductionItemsOnConflict) (*model.EnterpriseDeductionItemsMutationResponse, error)
	InsertEnterpriseDeductionItemsOne(ctx context.Context, object model.EnterpriseDeductionItemsInsertInput, onConflict *model.EnterpriseDeductionItemsOnConflict) (*model.EnterpriseDeductionItems, error)
	UpdateEnterpriseDeductionItems(ctx context.Context, inc *model.EnterpriseDeductionItemsIncInput, set *model.EnterpriseDeductionItemsSetInput, where model.EnterpriseDeductionItemsBoolExp) (*model.EnterpriseDeductionItemsMutationResponse, error)
	UpdateEnterpriseDeductionItemsByPk(ctx context.Context, inc *model.EnterpriseDeductionItemsIncInput, set *model.EnterpriseDeductionItemsSetInput, pkColumns model.EnterpriseDeductionItemsPkColumnsInput) (*model.EnterpriseDeductionItems, error)
	DeleteEnterpriseDeductionOperationRecord(ctx context.Context, where model.EnterpriseDeductionOperationRecordBoolExp) (*model.EnterpriseDeductionOperationRecordMutationResponse, error)
	DeleteEnterpriseDeductionOperationRecordByPk(ctx context.Context, enterpriseDuductionOperationID string, id int64) (*model.EnterpriseDeductionOperationRecord, error)
	InsertEnterpriseDeductionOperationRecord(ctx context.Context, objects []*model.EnterpriseDeductionOperationRecordInsertInput, onConflict *model.EnterpriseDeductionOperationRecordOnConflict) (*model.EnterpriseDeductionOperationRecordMutationResponse, error)
	InsertEnterpriseDeductionOperationRecordOne(ctx context.Context, object model.EnterpriseDeductionOperationRecordInsertInput, onConflict *model.EnterpriseDeductionOperationRecordOnConflict) (*model.EnterpriseDeductionOperationRecord, error)
	UpdateEnterpriseDeductionOperationRecord(ctx context.Context, inc *model.EnterpriseDeductionOperationRecordIncInput, set *model.EnterpriseDeductionOperationRecordSetInput, where model.EnterpriseDeductionOperationRecordBoolExp) (*model.EnterpriseDeductionOperationRecordMutationResponse, error)
	UpdateEnterpriseDeductionOperationRecordByPk(ctx context.Context, inc *model.EnterpriseDeductionOperationRecordIncInput, set *model.EnterpriseDeductionOperationRecordSetInput, pkColumns model.EnterpriseDeductionOperationRecordPkColumnsInput) (*model.EnterpriseDeductionOperationRecord, error)
	DeleteIllegalPhoto(ctx context.Context, where model.IllegalPhotoBoolExp) (*model.IllegalPhotoMutationResponse, error)
	DeleteIllegalPhotoByPk(ctx context.Context, id int64, illegalPhotoID string) (*model.IllegalPhoto, error)
	InsertIllegalPhoto(ctx context.Context, objects []*model.IllegalPhotoInsertInput, onConflict *model.IllegalPhotoOnConflict) (*model.IllegalPhotoMutationResponse, error)
	InsertIllegalPhotoOne(ctx context.Context, object model.IllegalPhotoInsertInput, onConflict *model.IllegalPhotoOnConflict) (*model.IllegalPhoto, error)
	UpdateIllegalPhoto(ctx context.Context, inc *model.IllegalPhotoIncInput, set *model.IllegalPhotoSetInput, where model.IllegalPhotoBoolExp) (*model.IllegalPhotoMutationResponse, error)
	UpdateIllegalPhotoByPk(ctx context.Context, inc *model.IllegalPhotoIncInput, set *model.IllegalPhotoSetInput, pkColumns model.IllegalPhotoPkColumnsInput) (*model.IllegalPhoto, error)
	DeleteRegionalViolationRegister(ctx context.Context, where model.RegionalViolationRegisterBoolExp) (*model.RegionalViolationRegisterMutationResponse, error)
	DeleteRegionalViolationRegisterByPk(ctx context.Context, id int64, regionalViolationRegisterID string) (*model.RegionalViolationRegister, error)
	InsertRegionalViolationRegister(ctx context.Context, objects []*model.RegionalViolationRegisterInsertInput, onConflict *model.RegionalViolationRegisterOnConflict) (*model.RegionalViolationRegisterMutationResponse, error)
	InsertRegionalViolationRegisterOne(ctx context.Context, object model.RegionalViolationRegisterInsertInput, onConflict *model.RegionalViolationRegisterOnConflict) (*model.RegionalViolationRegister, error)
	UpdateRegionalViolationRegister(ctx context.Context, inc *model.RegionalViolationRegisterIncInput, set *model.RegionalViolationRegisterSetInput, where model.RegionalViolationRegisterBoolExp) (*model.RegionalViolationRegisterMutationResponse, error)
	UpdateRegionalViolationRegisterByPk(ctx context.Context, inc *model.RegionalViolationRegisterIncInput, set *model.RegionalViolationRegisterSetInput, pkColumns model.RegionalViolationRegisterPkColumnsInput) (*model.RegionalViolationRegister, error)
	DeleteUserOperationLog(ctx context.Context, where model.UserOperationLogBoolExp) (*model.UserOperationLogMutationResponse, error)
	DeleteUserOperationLogByPk(ctx context.Context, id int64) (*model.UserOperationLog, error)
	InsertUserOperationLog(ctx context.Context, objects []*model.UserOperationLogInsertInput, onConflict *model.UserOperationLogOnConflict) (*model.UserOperationLogMutationResponse, error)
	InsertUserOperationLogOne(ctx context.Context, object model.UserOperationLogInsertInput, onConflict *model.UserOperationLogOnConflict) (*model.UserOperationLog, error)
	UpdateUserOperationLog(ctx context.Context, inc *model.UserOperationLogIncInput, set *model.UserOperationLogSetInput, where model.UserOperationLogBoolExp) (*model.UserOperationLogMutationResponse, error)
	UpdateUserOperationLogByPk(ctx context.Context, inc *model.UserOperationLogIncInput, set *model.UserOperationLogSetInput, pkColumns model.UserOperationLogPkColumnsInput) (*model.UserOperationLog, error)
	DeleteVehicleDetainDetails(ctx context.Context, where model.VehicleDetainDetailsBoolExp) (*model.VehicleDetainDetailsMutationResponse, error)
	DeleteVehicleDetainDetailsByPk(ctx context.Context, id int64) (*model.VehicleDetainDetails, error)
	InsertVehicleDetainDetails(ctx context.Context, objects []*model.VehicleDetainDetailsInsertInput, onConflict *model.VehicleDetainDetailsOnConflict) (*model.VehicleDetainDetailsMutationResponse, error)
	InsertVehicleDetainDetailsOne(ctx context.Context, object model.VehicleDetainDetailsInsertInput, onConflict *model.VehicleDetainDetailsOnConflict) (*model.VehicleDetainDetails, error)
	UpdateVehicleDetainDetails(ctx context.Context, inc *model.VehicleDetainDetailsIncInput, set *model.VehicleDetainDetailsSetInput, where model.VehicleDetainDetailsBoolExp) (*model.VehicleDetainDetailsMutationResponse, error)
	UpdateVehicleDetainDetailsByPk(ctx context.Context, inc *model.VehicleDetainDetailsIncInput, set *model.VehicleDetainDetailsSetInput, pkColumns model.VehicleDetainDetailsPkColumnsInput) (*model.VehicleDetainDetails, error)
	DeleteVehicleViolationDetails(ctx context.Context, where model.VehicleViolationDetailsBoolExp) (*model.VehicleViolationDetailsMutationResponse, error)
	DeleteVehicleViolationDetailsByPk(ctx context.Context, id int64) (*model.VehicleViolationDetails, error)
	InsertVehicleViolationDetails(ctx context.Context, objects []*model.VehicleViolationDetailsInsertInput, onConflict *model.VehicleViolationDetailsOnConflict) (*model.VehicleViolationDetailsMutationResponse, error)
	InsertVehicleViolationDetailsOne(ctx context.Context, object model.VehicleViolationDetailsInsertInput, onConflict *model.VehicleViolationDetailsOnConflict) (*model.VehicleViolationDetails, error)
	UpdateVehicleViolationDetails(ctx context.Context, inc *model.VehicleViolationDetailsIncInput, set *model.VehicleViolationDetailsSetInput, where model.VehicleViolationDetailsBoolExp) (*model.VehicleViolationDetailsMutationResponse, error)
	UpdateVehicleViolationDetailsByPk(ctx context.Context, inc *model.VehicleViolationDetailsIncInput, set *model.VehicleViolationDetailsSetInput, pkColumns model.VehicleViolationDetailsPkColumnsInput) (*model.VehicleViolationDetails, error)
	DeleteVehicleViolationScoringItems(ctx context.Context, where model.VehicleViolationScoringItemsBoolExp) (*model.VehicleViolationScoringItemsMutationResponse, error)
	DeleteVehicleViolationScoringItemsByPk(ctx context.Context, id int64, violationScoringItemID string) (*model.VehicleViolationScoringItems, error)
	InsertVehicleViolationScoringItems(ctx context.Context, objects []*model.VehicleViolationScoringItemsInsertInput, onConflict *model.VehicleViolationScoringItemsOnConflict) (*model.VehicleViolationScoringItemsMutationResponse, error)
	InsertVehicleViolationScoringItemsOne(ctx context.Context, object model.VehicleViolationScoringItemsInsertInput, onConflict *model.VehicleViolationScoringItemsOnConflict) (*model.VehicleViolationScoringItems, error)
	UpdateVehicleViolationScoringItems(ctx context.Context, inc *model.VehicleViolationScoringItemsIncInput, set *model.VehicleViolationScoringItemsSetInput, where model.VehicleViolationScoringItemsBoolExp) (*model.VehicleViolationScoringItemsMutationResponse, error)
	UpdateVehicleViolationScoringItemsByPk(ctx context.Context, inc *model.VehicleViolationScoringItemsIncInput, set *model.VehicleViolationScoringItemsSetInput, pkColumns model.VehicleViolationScoringItemsPkColumnsInput) (*model.VehicleViolationScoringItems, error)
	DeleteVehicleViolationScoringRecord(ctx context.Context, where model.VehicleViolationScoringRecordBoolExp) (*model.VehicleViolationScoringRecordMutationResponse, error)
	DeleteVehicleViolationScoringRecordByPk(ctx context.Context, id int64, violationScoringID string) (*model.VehicleViolationScoringRecord, error)
	InsertVehicleViolationScoringRecord(ctx context.Context, objects []*model.VehicleViolationScoringRecordInsertInput, onConflict *model.VehicleViolationScoringRecordOnConflict) (*model.VehicleViolationScoringRecordMutationResponse, error)
	InsertVehicleViolationScoringRecordOne(ctx context.Context, object model.VehicleViolationScoringRecordInsertInput, onConflict *model.VehicleViolationScoringRecordOnConflict) (*model.VehicleViolationScoringRecord, error)
	UpdateVehicleViolationScoringRecord(ctx context.Context, inc *model.VehicleViolationScoringRecordIncInput, set *model.VehicleViolationScoringRecordSetInput, where model.VehicleViolationScoringRecordBoolExp) (*model.VehicleViolationScoringRecordMutationResponse, error)
	UpdateVehicleViolationScoringRecordByPk(ctx context.Context, inc *model.VehicleViolationScoringRecordIncInput, set *model.VehicleViolationScoringRecordSetInput, pkColumns model.VehicleViolationScoringRecordPkColumnsInput) (*model.VehicleViolationScoringRecord, error)
}
type QueryResolver interface {
	AppEnforcement(ctx context.Context, distinctOn []model.AppEnforcementSelectColumn, limit *int, offset *int, orderBy []*model.AppEnforcementOrderBy, where *model.AppEnforcementBoolExp) ([]*model.AppEnforcement, error)
	AppEnforcementAggregate(ctx context.Context, distinctOn []model.AppEnforcementSelectColumn, limit *int, offset *int, orderBy []*model.AppEnforcementOrderBy, where *model.AppEnforcementBoolExp) (*model.AppEnforcementAggregate, error)
	AppEnforcementByPk(ctx context.Context, id int64, illegalPhotoID string) (*model.AppEnforcement, error)
	VioCodewfdm(ctx context.Context, distinctOn []model.VioCodewfdmSelectColumn, limit *int, offset *int, orderBy []*model.VioCodewfdmOrderBy, where *model.VioCodewfdmBoolExp) ([]*model.VioCodewfdm, error)
	VioCodewfdmAggregate(ctx context.Context, distinctOn []model.VioCodewfdmSelectColumn, limit *int, offset *int, orderBy []*model.VioCodewfdmOrderBy, where *model.VioCodewfdmBoolExp) (*model.VioCodewfdmAggregate, error)
	DisputeViolationRecord(ctx context.Context, distinctOn []model.DisputeViolationRecordSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordOrderBy, where *model.DisputeViolationRecordBoolExp) ([]*model.DisputeViolationRecord, error)
	DisputeViolationRecordAggregate(ctx context.Context, distinctOn []model.DisputeViolationRecordSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordOrderBy, where *model.DisputeViolationRecordBoolExp) (*model.DisputeViolationRecordAggregate, error)
	DisputeViolationRecordByPk(ctx context.Context, disputeViolationID string, id int64) (*model.DisputeViolationRecord, error)
	DisputeViolationRecordLog(ctx context.Context, distinctOn []model.DisputeViolationRecordLogSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordLogOrderBy, where *model.DisputeViolationRecordLogBoolExp) ([]*model.DisputeViolationRecordLog, error)
	DisputeViolationRecordLogAggregate(ctx context.Context, distinctOn []model.DisputeViolationRecordLogSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordLogOrderBy, where *model.DisputeViolationRecordLogBoolExp) (*model.DisputeViolationRecordLogAggregate, error)
	DisputeViolationRecordLogByPk(ctx context.Context, disputeViolationLogID string, id int64) (*model.DisputeViolationRecordLog, error)
	DriverPeccancyCheck(ctx context.Context, distinctOn []model.DriverPeccancyCheckSelectColumn, limit *int, offset *int, orderBy []*model.DriverPeccancyCheckOrderBy, where *model.DriverPeccancyCheckBoolExp) ([]*model.DriverPeccancyCheck, error)
	DriverPeccancyCheckAggregate(ctx context.Context, distinctOn []model.DriverPeccancyCheckSelectColumn, limit *int, offset *int, orderBy []*model.DriverPeccancyCheckOrderBy, where *model.DriverPeccancyCheckBoolExp) (*model.DriverPeccancyCheckAggregate, error)
	DriverPeccancyCheckByPk(ctx context.Context, id int64) (*model.DriverPeccancyCheck, error)
	EnterpriseDeductionItems(ctx context.Context, distinctOn []model.EnterpriseDeductionItemsSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseDeductionItemsOrderBy, where *model.EnterpriseDeductionItemsBoolExp) ([]*model.EnterpriseDeductionItems, error)
	EnterpriseDeductionItemsAggregate(ctx context.Context, distinctOn []model.EnterpriseDeductionItemsSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseDeductionItemsOrderBy, where *model.EnterpriseDeductionItemsBoolExp) (*model.EnterpriseDeductionItemsAggregate, error)
	EnterpriseDeductionItemsByPk(ctx context.Context, enterpriseDeductionItemID string, id int64) (*model.EnterpriseDeductionItems, error)
	EnterpriseDeductionOperationRecord(ctx context.Context, distinctOn []model.EnterpriseDeductionOperationRecordSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseDeductionOperationRecordOrderBy, where *model.EnterpriseDeductionOperationRecordBoolExp) ([]*model.EnterpriseDeductionOperationRecord, error)
	EnterpriseDeductionOperationRecordAggregate(ctx context.Context, distinctOn []model.EnterpriseDeductionOperationRecordSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseDeductionOperationRecordOrderBy, where *model.EnterpriseDeductionOperationRecordBoolExp) (*model.EnterpriseDeductionOperationRecordAggregate, error)
	EnterpriseDeductionOperationRecordByPk(ctx context.Context, enterpriseDuductionOperationID string, id int64) (*model.EnterpriseDeductionOperationRecord, error)
	IllegalPhoto(ctx context.Context, distinctOn []model.IllegalPhotoSelectColumn, limit *int, offset *int, orderBy []*model.IllegalPhotoOrderBy, where *model.IllegalPhotoBoolExp) ([]*model.IllegalPhoto, error)
	IllegalPhotoAggregate(ctx context.Context, distinctOn []model.IllegalPhotoSelectColumn, limit *int, offset *int, orderBy []*model.IllegalPhotoOrderBy, where *model.IllegalPhotoBoolExp) (*model.IllegalPhotoAggregate, error)
	IllegalPhotoByPk(ctx context.Context, id int64, illegalPhotoID string) (*model.IllegalPhoto, error)
	RegionalViolationRegister(ctx context.Context, distinctOn []model.RegionalViolationRegisterSelectColumn, limit *int, offset *int, orderBy []*model.RegionalViolationRegisterOrderBy, where *model.RegionalViolationRegisterBoolExp) ([]*model.RegionalViolationRegister, error)
	RegionalViolationRegisterAggregate(ctx context.Context, distinctOn []model.RegionalViolationRegisterSelectColumn, limit *int, offset *int, orderBy []*model.RegionalViolationRegisterOrderBy, where *model.RegionalViolationRegisterBoolExp) (*model.RegionalViolationRegisterAggregate, error)
	RegionalViolationRegisterByPk(ctx context.Context, id int64, regionalViolationRegisterID string) (*model.RegionalViolationRegister, error)
	UserOperationLog(ctx context.Context, distinctOn []model.UserOperationLogSelectColumn, limit *int, offset *int, orderBy []*model.UserOperationLogOrderBy, where *model.UserOperationLogBoolExp) ([]*model.UserOperationLog, error)
	UserOperationLogAggregate(ctx context.Context, distinctOn []model.UserOperationLogSelectColumn, limit *int, offset *int, orderBy []*model.UserOperationLogOrderBy, where *model.UserOperationLogBoolExp) (*model.UserOperationLogAggregate, error)
	UserOperationLogByPk(ctx context.Context, id int64) (*model.UserOperationLog, error)
	VehicleDetainDetails(ctx context.Context, distinctOn []model.VehicleDetainDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDetainDetailsOrderBy, where *model.VehicleDetainDetailsBoolExp) ([]*model.VehicleDetainDetails, error)
	VehicleDetainDetailsAggregate(ctx context.Context, distinctOn []model.VehicleDetainDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDetainDetailsOrderBy, where *model.VehicleDetainDetailsBoolExp) (*model.VehicleDetainDetailsAggregate, error)
	VehicleDetainDetailsByPk(ctx context.Context, id int64) (*model.VehicleDetainDetails, error)
	VehicleViolationDetails(ctx context.Context, distinctOn []model.VehicleViolationDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationDetailsOrderBy, where *model.VehicleViolationDetailsBoolExp) ([]*model.VehicleViolationDetails, error)
	VehicleViolationDetailsAggregate(ctx context.Context, distinctOn []model.VehicleViolationDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationDetailsOrderBy, where *model.VehicleViolationDetailsBoolExp) (*model.VehicleViolationDetailsAggregate, error)
	VehicleViolationDetailsByPk(ctx context.Context, id int64) (*model.VehicleViolationDetails, error)
	VehicleViolationScoringItems(ctx context.Context, distinctOn []model.VehicleViolationScoringItemsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringItemsOrderBy, where *model.VehicleViolationScoringItemsBoolExp) ([]*model.VehicleViolationScoringItems, error)
	VehicleViolationScoringItemsAggregate(ctx context.Context, distinctOn []model.VehicleViolationScoringItemsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringItemsOrderBy, where *model.VehicleViolationScoringItemsBoolExp) (*model.VehicleViolationScoringItemsAggregate, error)
	VehicleViolationScoringItemsByPk(ctx context.Context, id int64, violationScoringItemID string) (*model.VehicleViolationScoringItems, error)
	VehicleViolationScoringRecord(ctx context.Context, distinctOn []model.VehicleViolationScoringRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringRecordOrderBy, where *model.VehicleViolationScoringRecordBoolExp) ([]*model.VehicleViolationScoringRecord, error)
	VehicleViolationScoringRecordAggregate(ctx context.Context, distinctOn []model.VehicleViolationScoringRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringRecordOrderBy, where *model.VehicleViolationScoringRecordBoolExp) (*model.VehicleViolationScoringRecordAggregate, error)
	VehicleViolationScoringRecordByPk(ctx context.Context, id int64, violationScoringID string) (*model.VehicleViolationScoringRecord, error)
}
type SubscriptionResolver interface {
	AppEnforcement(ctx context.Context, distinctOn []model.AppEnforcementSelectColumn, limit *int, offset *int, orderBy []*model.AppEnforcementOrderBy, where *model.AppEnforcementBoolExp) (<-chan []*model.AppEnforcement, error)
	AppEnforcementAggregate(ctx context.Context, distinctOn []model.AppEnforcementSelectColumn, limit *int, offset *int, orderBy []*model.AppEnforcementOrderBy, where *model.AppEnforcementBoolExp) (<-chan *model.AppEnforcementAggregate, error)
	AppEnforcementByPk(ctx context.Context, id int64, illegalPhotoID string) (<-chan *model.AppEnforcement, error)
	VioCodewfdm(ctx context.Context, distinctOn []model.VioCodewfdmSelectColumn, limit *int, offset *int, orderBy []*model.VioCodewfdmOrderBy, where *model.VioCodewfdmBoolExp) (<-chan []*model.VioCodewfdm, error)
	VioCodewfdmAggregate(ctx context.Context, distinctOn []model.VioCodewfdmSelectColumn, limit *int, offset *int, orderBy []*model.VioCodewfdmOrderBy, where *model.VioCodewfdmBoolExp) (<-chan *model.VioCodewfdmAggregate, error)
	DisputeViolationRecord(ctx context.Context, distinctOn []model.DisputeViolationRecordSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordOrderBy, where *model.DisputeViolationRecordBoolExp) (<-chan []*model.DisputeViolationRecord, error)
	DisputeViolationRecordAggregate(ctx context.Context, distinctOn []model.DisputeViolationRecordSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordOrderBy, where *model.DisputeViolationRecordBoolExp) (<-chan *model.DisputeViolationRecordAggregate, error)
	DisputeViolationRecordByPk(ctx context.Context, disputeViolationID string, id int64) (<-chan *model.DisputeViolationRecord, error)
	DisputeViolationRecordLog(ctx context.Context, distinctOn []model.DisputeViolationRecordLogSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordLogOrderBy, where *model.DisputeViolationRecordLogBoolExp) (<-chan []*model.DisputeViolationRecordLog, error)
	DisputeViolationRecordLogAggregate(ctx context.Context, distinctOn []model.DisputeViolationRecordLogSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordLogOrderBy, where *model.DisputeViolationRecordLogBoolExp) (<-chan *model.DisputeViolationRecordLogAggregate, error)
	DisputeViolationRecordLogByPk(ctx context.Context, disputeViolationLogID string, id int64) (<-chan *model.DisputeViolationRecordLog, error)
	DriverPeccancyCheck(ctx context.Context, distinctOn []model.DriverPeccancyCheckSelectColumn, limit *int, offset *int, orderBy []*model.DriverPeccancyCheckOrderBy, where *model.DriverPeccancyCheckBoolExp) (<-chan []*model.DriverPeccancyCheck, error)
	DriverPeccancyCheckAggregate(ctx context.Context, distinctOn []model.DriverPeccancyCheckSelectColumn, limit *int, offset *int, orderBy []*model.DriverPeccancyCheckOrderBy, where *model.DriverPeccancyCheckBoolExp) (<-chan *model.DriverPeccancyCheckAggregate, error)
	DriverPeccancyCheckByPk(ctx context.Context, id int64) (<-chan *model.DriverPeccancyCheck, error)
	EnterpriseDeductionItems(ctx context.Context, distinctOn []model.EnterpriseDeductionItemsSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseDeductionItemsOrderBy, where *model.EnterpriseDeductionItemsBoolExp) (<-chan []*model.EnterpriseDeductionItems, error)
	EnterpriseDeductionItemsAggregate(ctx context.Context, distinctOn []model.EnterpriseDeductionItemsSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseDeductionItemsOrderBy, where *model.EnterpriseDeductionItemsBoolExp) (<-chan *model.EnterpriseDeductionItemsAggregate, error)
	EnterpriseDeductionItemsByPk(ctx context.Context, enterpriseDeductionItemID string, id int64) (<-chan *model.EnterpriseDeductionItems, error)
	EnterpriseDeductionOperationRecord(ctx context.Context, distinctOn []model.EnterpriseDeductionOperationRecordSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseDeductionOperationRecordOrderBy, where *model.EnterpriseDeductionOperationRecordBoolExp) (<-chan []*model.EnterpriseDeductionOperationRecord, error)
	EnterpriseDeductionOperationRecordAggregate(ctx context.Context, distinctOn []model.EnterpriseDeductionOperationRecordSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseDeductionOperationRecordOrderBy, where *model.EnterpriseDeductionOperationRecordBoolExp) (<-chan *model.EnterpriseDeductionOperationRecordAggregate, error)
	EnterpriseDeductionOperationRecordByPk(ctx context.Context, enterpriseDuductionOperationID string, id int64) (<-chan *model.EnterpriseDeductionOperationRecord, error)
	IllegalPhoto(ctx context.Context, distinctOn []model.IllegalPhotoSelectColumn, limit *int, offset *int, orderBy []*model.IllegalPhotoOrderBy, where *model.IllegalPhotoBoolExp) (<-chan []*model.IllegalPhoto, error)
	IllegalPhotoAggregate(ctx context.Context, distinctOn []model.IllegalPhotoSelectColumn, limit *int, offset *int, orderBy []*model.IllegalPhotoOrderBy, where *model.IllegalPhotoBoolExp) (<-chan *model.IllegalPhotoAggregate, error)
	IllegalPhotoByPk(ctx context.Context, id int64, illegalPhotoID string) (<-chan *model.IllegalPhoto, error)
	RegionalViolationRegister(ctx context.Context, distinctOn []model.RegionalViolationRegisterSelectColumn, limit *int, offset *int, orderBy []*model.RegionalViolationRegisterOrderBy, where *model.RegionalViolationRegisterBoolExp) (<-chan []*model.RegionalViolationRegister, error)
	RegionalViolationRegisterAggregate(ctx context.Context, distinctOn []model.RegionalViolationRegisterSelectColumn, limit *int, offset *int, orderBy []*model.RegionalViolationRegisterOrderBy, where *model.RegionalViolationRegisterBoolExp) (<-chan *model.RegionalViolationRegisterAggregate, error)
	RegionalViolationRegisterByPk(ctx context.Context, id int64, regionalViolationRegisterID string) (<-chan *model.RegionalViolationRegister, error)
	UserOperationLog(ctx context.Context, distinctOn []model.UserOperationLogSelectColumn, limit *int, offset *int, orderBy []*model.UserOperationLogOrderBy, where *model.UserOperationLogBoolExp) (<-chan []*model.UserOperationLog, error)
	UserOperationLogAggregate(ctx context.Context, distinctOn []model.UserOperationLogSelectColumn, limit *int, offset *int, orderBy []*model.UserOperationLogOrderBy, where *model.UserOperationLogBoolExp) (<-chan *model.UserOperationLogAggregate, error)
	UserOperationLogByPk(ctx context.Context, id int64) (<-chan *model.UserOperationLog, error)
	VehicleDetainDetails(ctx context.Context, distinctOn []model.VehicleDetainDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDetainDetailsOrderBy, where *model.VehicleDetainDetailsBoolExp) (<-chan []*model.VehicleDetainDetails, error)
	VehicleDetainDetailsAggregate(ctx context.Context, distinctOn []model.VehicleDetainDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDetainDetailsOrderBy, where *model.VehicleDetainDetailsBoolExp) (<-chan *model.VehicleDetainDetailsAggregate, error)
	VehicleDetainDetailsByPk(ctx context.Context, id int64) (<-chan *model.VehicleDetainDetails, error)
	VehicleViolationDetails(ctx context.Context, distinctOn []model.VehicleViolationDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationDetailsOrderBy, where *model.VehicleViolationDetailsBoolExp) (<-chan []*model.VehicleViolationDetails, error)
	VehicleViolationDetailsAggregate(ctx context.Context, distinctOn []model.VehicleViolationDetailsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationDetailsOrderBy, where *model.VehicleViolationDetailsBoolExp) (<-chan *model.VehicleViolationDetailsAggregate, error)
	VehicleViolationDetailsByPk(ctx context.Context, id int64) (<-chan *model.VehicleViolationDetails, error)
	VehicleViolationScoringItems(ctx context.Context, distinctOn []model.VehicleViolationScoringItemsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringItemsOrderBy, where *model.VehicleViolationScoringItemsBoolExp) (<-chan []*model.VehicleViolationScoringItems, error)
	VehicleViolationScoringItemsAggregate(ctx context.Context, distinctOn []model.VehicleViolationScoringItemsSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringItemsOrderBy, where *model.VehicleViolationScoringItemsBoolExp) (<-chan *model.VehicleViolationScoringItemsAggregate, error)
	VehicleViolationScoringItemsByPk(ctx context.Context, id int64, violationScoringItemID string) (<-chan *model.VehicleViolationScoringItems, error)
	VehicleViolationScoringRecord(ctx context.Context, distinctOn []model.VehicleViolationScoringRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringRecordOrderBy, where *model.VehicleViolationScoringRecordBoolExp) (<-chan []*model.VehicleViolationScoringRecord, error)
	VehicleViolationScoringRecordAggregate(ctx context.Context, distinctOn []model.VehicleViolationScoringRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleViolationScoringRecordOrderBy, where *model.VehicleViolationScoringRecordBoolExp) (<-chan *model.VehicleViolationScoringRecordAggregate, error)
	VehicleViolationScoringRecordByPk(ctx context.Context, id int64, violationScoringID string) (<-chan *model.VehicleViolationScoringRecord, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.delete_app_enforcement":
		if e.complexity.Mutation.DeleteAppEnforcement == nil {
			break
		}

		args, err := ec.field_Mutation_delete_app_enforcement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAppEnforcement(childComplexity, args["where"].(model.AppEnforcementBoolExp)), true

	case "Mutation.delete_app_enforcement_by_pk":
		if e.complexity.Mutation.DeleteAppEnforcementByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_app_enforcement_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAppEnforcementByPk(childComplexity, args["id"].(int64), args["illegal_photo_id"].(string)), true

	case "Mutation.delete_dispute_violation_record":
		if e.complexity.Mutation.DeleteDisputeViolationRecord == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dispute_violation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDisputeViolationRecord(childComplexity, args["where"].(model.DisputeViolationRecordBoolExp)), true

	case "Mutation.delete_dispute_violation_record_by_pk":
		if e.complexity.Mutation.DeleteDisputeViolationRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dispute_violation_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDisputeViolationRecordByPk(childComplexity, args["dispute_violation_id"].(string), args["id"].(int64)), true

	case "Mutation.delete_dispute_violation_record_log":
		if e.complexity.Mutation.DeleteDisputeViolationRecordLog == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dispute_violation_record_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDisputeViolationRecordLog(childComplexity, args["where"].(model.DisputeViolationRecordLogBoolExp)), true

	case "Mutation.delete_dispute_violation_record_log_by_pk":
		if e.complexity.Mutation.DeleteDisputeViolationRecordLogByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dispute_violation_record_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDisputeViolationRecordLogByPk(childComplexity, args["dispute_violation_log_id"].(string), args["id"].(int64)), true

	case "Mutation.delete_driver_peccancy_check":
		if e.complexity.Mutation.DeleteDriverPeccancyCheck == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_peccancy_check_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverPeccancyCheck(childComplexity, args["where"].(model.DriverPeccancyCheckBoolExp)), true

	case "Mutation.delete_driver_peccancy_check_by_pk":
		if e.complexity.Mutation.DeleteDriverPeccancyCheckByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_peccancy_check_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverPeccancyCheckByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_enterprise_deduction_items":
		if e.complexity.Mutation.DeleteEnterpriseDeductionItems == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_deduction_items_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseDeductionItems(childComplexity, args["where"].(model.EnterpriseDeductionItemsBoolExp)), true

	case "Mutation.delete_enterprise_deduction_items_by_pk":
		if e.complexity.Mutation.DeleteEnterpriseDeductionItemsByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_deduction_items_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseDeductionItemsByPk(childComplexity, args["enterprise_deduction_item_id"].(string), args["id"].(int64)), true

	case "Mutation.delete_enterprise_deduction_operation_record":
		if e.complexity.Mutation.DeleteEnterpriseDeductionOperationRecord == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_deduction_operation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseDeductionOperationRecord(childComplexity, args["where"].(model.EnterpriseDeductionOperationRecordBoolExp)), true

	case "Mutation.delete_enterprise_deduction_operation_record_by_pk":
		if e.complexity.Mutation.DeleteEnterpriseDeductionOperationRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_deduction_operation_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseDeductionOperationRecordByPk(childComplexity, args["enterprise_duduction_operation_id"].(string), args["id"].(int64)), true

	case "Mutation.delete_illegal_photo":
		if e.complexity.Mutation.DeleteIllegalPhoto == nil {
			break
		}

		args, err := ec.field_Mutation_delete_illegal_photo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIllegalPhoto(childComplexity, args["where"].(model.IllegalPhotoBoolExp)), true

	case "Mutation.delete_illegal_photo_by_pk":
		if e.complexity.Mutation.DeleteIllegalPhotoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_illegal_photo_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIllegalPhotoByPk(childComplexity, args["id"].(int64), args["illegal_photo_id"].(string)), true

	case "Mutation.delete_regional_violation_register":
		if e.complexity.Mutation.DeleteRegionalViolationRegister == nil {
			break
		}

		args, err := ec.field_Mutation_delete_regional_violation_register_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRegionalViolationRegister(childComplexity, args["where"].(model.RegionalViolationRegisterBoolExp)), true

	case "Mutation.delete_regional_violation_register_by_pk":
		if e.complexity.Mutation.DeleteRegionalViolationRegisterByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_regional_violation_register_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRegionalViolationRegisterByPk(childComplexity, args["id"].(int64), args["regional_violation_register_id"].(string)), true

	case "Mutation.delete_user_operation_log":
		if e.complexity.Mutation.DeleteUserOperationLog == nil {
			break
		}

		args, err := ec.field_Mutation_delete_user_operation_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUserOperationLog(childComplexity, args["where"].(model.UserOperationLogBoolExp)), true

	case "Mutation.delete_user_operation_log_by_pk":
		if e.complexity.Mutation.DeleteUserOperationLogByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_user_operation_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUserOperationLogByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_detain_details":
		if e.complexity.Mutation.DeleteVehicleDetainDetails == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_detain_details_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleDetainDetails(childComplexity, args["where"].(model.VehicleDetainDetailsBoolExp)), true

	case "Mutation.delete_vehicle_detain_details_by_pk":
		if e.complexity.Mutation.DeleteVehicleDetainDetailsByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_detain_details_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleDetainDetailsByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_violation_details":
		if e.complexity.Mutation.DeleteVehicleViolationDetails == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_violation_details_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleViolationDetails(childComplexity, args["where"].(model.VehicleViolationDetailsBoolExp)), true

	case "Mutation.delete_vehicle_violation_details_by_pk":
		if e.complexity.Mutation.DeleteVehicleViolationDetailsByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_violation_details_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleViolationDetailsByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_violation_scoring_items":
		if e.complexity.Mutation.DeleteVehicleViolationScoringItems == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_violation_scoring_items_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleViolationScoringItems(childComplexity, args["where"].(model.VehicleViolationScoringItemsBoolExp)), true

	case "Mutation.delete_vehicle_violation_scoring_items_by_pk":
		if e.complexity.Mutation.DeleteVehicleViolationScoringItemsByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_violation_scoring_items_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleViolationScoringItemsByPk(childComplexity, args["id"].(int64), args["violation_scoring_item_id"].(string)), true

	case "Mutation.delete_vehicle_violation_scoring_record":
		if e.complexity.Mutation.DeleteVehicleViolationScoringRecord == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_violation_scoring_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleViolationScoringRecord(childComplexity, args["where"].(model.VehicleViolationScoringRecordBoolExp)), true

	case "Mutation.delete_vehicle_violation_scoring_record_by_pk":
		if e.complexity.Mutation.DeleteVehicleViolationScoringRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_violation_scoring_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleViolationScoringRecordByPk(childComplexity, args["id"].(int64), args["violation_scoring_id"].(string)), true

	case "Mutation.delete_VIO_CODEWFDM":
		if e.complexity.Mutation.DeleteVioCodewfdm == nil {
			break
		}

		args, err := ec.field_Mutation_delete_VIO_CODEWFDM_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVioCodewfdm(childComplexity, args["where"].(model.VioCodewfdmBoolExp)), true

	case "Mutation.insert_app_enforcement":
		if e.complexity.Mutation.InsertAppEnforcement == nil {
			break
		}

		args, err := ec.field_Mutation_insert_app_enforcement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertAppEnforcement(childComplexity, args["objects"].([]*model.AppEnforcementInsertInput), args["on_conflict"].(*model.AppEnforcementOnConflict)), true

	case "Mutation.insert_app_enforcement_one":
		if e.complexity.Mutation.InsertAppEnforcementOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_app_enforcement_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertAppEnforcementOne(childComplexity, args["object"].(model.AppEnforcementInsertInput), args["on_conflict"].(*model.AppEnforcementOnConflict)), true

	case "Mutation.insert_dispute_violation_record":
		if e.complexity.Mutation.InsertDisputeViolationRecord == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dispute_violation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDisputeViolationRecord(childComplexity, args["objects"].([]*model.DisputeViolationRecordInsertInput), args["on_conflict"].(*model.DisputeViolationRecordOnConflict)), true

	case "Mutation.insert_dispute_violation_record_log":
		if e.complexity.Mutation.InsertDisputeViolationRecordLog == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dispute_violation_record_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDisputeViolationRecordLog(childComplexity, args["objects"].([]*model.DisputeViolationRecordLogInsertInput), args["on_conflict"].(*model.DisputeViolationRecordLogOnConflict)), true

	case "Mutation.insert_dispute_violation_record_log_one":
		if e.complexity.Mutation.InsertDisputeViolationRecordLogOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dispute_violation_record_log_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDisputeViolationRecordLogOne(childComplexity, args["object"].(model.DisputeViolationRecordLogInsertInput), args["on_conflict"].(*model.DisputeViolationRecordLogOnConflict)), true

	case "Mutation.insert_dispute_violation_record_one":
		if e.complexity.Mutation.InsertDisputeViolationRecordOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dispute_violation_record_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDisputeViolationRecordOne(childComplexity, args["object"].(model.DisputeViolationRecordInsertInput), args["on_conflict"].(*model.DisputeViolationRecordOnConflict)), true

	case "Mutation.insert_driver_peccancy_check":
		if e.complexity.Mutation.InsertDriverPeccancyCheck == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_peccancy_check_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverPeccancyCheck(childComplexity, args["objects"].([]*model.DriverPeccancyCheckInsertInput), args["on_conflict"].(*model.DriverPeccancyCheckOnConflict)), true

	case "Mutation.insert_driver_peccancy_check_one":
		if e.complexity.Mutation.InsertDriverPeccancyCheckOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_peccancy_check_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverPeccancyCheckOne(childComplexity, args["object"].(model.DriverPeccancyCheckInsertInput), args["on_conflict"].(*model.DriverPeccancyCheckOnConflict)), true

	case "Mutation.insert_enterprise_deduction_items":
		if e.complexity.Mutation.InsertEnterpriseDeductionItems == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_deduction_items_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseDeductionItems(childComplexity, args["objects"].([]*model.EnterpriseDeductionItemsInsertInput), args["on_conflict"].(*model.EnterpriseDeductionItemsOnConflict)), true

	case "Mutation.insert_enterprise_deduction_items_one":
		if e.complexity.Mutation.InsertEnterpriseDeductionItemsOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_deduction_items_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseDeductionItemsOne(childComplexity, args["object"].(model.EnterpriseDeductionItemsInsertInput), args["on_conflict"].(*model.EnterpriseDeductionItemsOnConflict)), true

	case "Mutation.insert_enterprise_deduction_operation_record":
		if e.complexity.Mutation.InsertEnterpriseDeductionOperationRecord == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_deduction_operation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseDeductionOperationRecord(childComplexity, args["objects"].([]*model.EnterpriseDeductionOperationRecordInsertInput), args["on_conflict"].(*model.EnterpriseDeductionOperationRecordOnConflict)), true

	case "Mutation.insert_enterprise_deduction_operation_record_one":
		if e.complexity.Mutation.InsertEnterpriseDeductionOperationRecordOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_deduction_operation_record_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseDeductionOperationRecordOne(childComplexity, args["object"].(model.EnterpriseDeductionOperationRecordInsertInput), args["on_conflict"].(*model.EnterpriseDeductionOperationRecordOnConflict)), true

	case "Mutation.insert_illegal_photo":
		if e.complexity.Mutation.InsertIllegalPhoto == nil {
			break
		}

		args, err := ec.field_Mutation_insert_illegal_photo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertIllegalPhoto(childComplexity, args["objects"].([]*model.IllegalPhotoInsertInput), args["on_conflict"].(*model.IllegalPhotoOnConflict)), true

	case "Mutation.insert_illegal_photo_one":
		if e.complexity.Mutation.InsertIllegalPhotoOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_illegal_photo_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertIllegalPhotoOne(childComplexity, args["object"].(model.IllegalPhotoInsertInput), args["on_conflict"].(*model.IllegalPhotoOnConflict)), true

	case "Mutation.insert_regional_violation_register":
		if e.complexity.Mutation.InsertRegionalViolationRegister == nil {
			break
		}

		args, err := ec.field_Mutation_insert_regional_violation_register_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertRegionalViolationRegister(childComplexity, args["objects"].([]*model.RegionalViolationRegisterInsertInput), args["on_conflict"].(*model.RegionalViolationRegisterOnConflict)), true

	case "Mutation.insert_regional_violation_register_one":
		if e.complexity.Mutation.InsertRegionalViolationRegisterOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_regional_violation_register_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertRegionalViolationRegisterOne(childComplexity, args["object"].(model.RegionalViolationRegisterInsertInput), args["on_conflict"].(*model.RegionalViolationRegisterOnConflict)), true

	case "Mutation.insert_user_operation_log":
		if e.complexity.Mutation.InsertUserOperationLog == nil {
			break
		}

		args, err := ec.field_Mutation_insert_user_operation_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertUserOperationLog(childComplexity, args["objects"].([]*model.UserOperationLogInsertInput), args["on_conflict"].(*model.UserOperationLogOnConflict)), true

	case "Mutation.insert_user_operation_log_one":
		if e.complexity.Mutation.InsertUserOperationLogOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_user_operation_log_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertUserOperationLogOne(childComplexity, args["object"].(model.UserOperationLogInsertInput), args["on_conflict"].(*model.UserOperationLogOnConflict)), true

	case "Mutation.insert_vehicle_detain_details":
		if e.complexity.Mutation.InsertVehicleDetainDetails == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_detain_details_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleDetainDetails(childComplexity, args["objects"].([]*model.VehicleDetainDetailsInsertInput), args["on_conflict"].(*model.VehicleDetainDetailsOnConflict)), true

	case "Mutation.insert_vehicle_detain_details_one":
		if e.complexity.Mutation.InsertVehicleDetainDetailsOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_detain_details_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleDetainDetailsOne(childComplexity, args["object"].(model.VehicleDetainDetailsInsertInput), args["on_conflict"].(*model.VehicleDetainDetailsOnConflict)), true

	case "Mutation.insert_vehicle_violation_details":
		if e.complexity.Mutation.InsertVehicleViolationDetails == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_violation_details_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleViolationDetails(childComplexity, args["objects"].([]*model.VehicleViolationDetailsInsertInput), args["on_conflict"].(*model.VehicleViolationDetailsOnConflict)), true

	case "Mutation.insert_vehicle_violation_details_one":
		if e.complexity.Mutation.InsertVehicleViolationDetailsOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_violation_details_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleViolationDetailsOne(childComplexity, args["object"].(model.VehicleViolationDetailsInsertInput), args["on_conflict"].(*model.VehicleViolationDetailsOnConflict)), true

	case "Mutation.insert_vehicle_violation_scoring_items":
		if e.complexity.Mutation.InsertVehicleViolationScoringItems == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_violation_scoring_items_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleViolationScoringItems(childComplexity, args["objects"].([]*model.VehicleViolationScoringItemsInsertInput), args["on_conflict"].(*model.VehicleViolationScoringItemsOnConflict)), true

	case "Mutation.insert_vehicle_violation_scoring_items_one":
		if e.complexity.Mutation.InsertVehicleViolationScoringItemsOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_violation_scoring_items_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleViolationScoringItemsOne(childComplexity, args["object"].(model.VehicleViolationScoringItemsInsertInput), args["on_conflict"].(*model.VehicleViolationScoringItemsOnConflict)), true

	case "Mutation.insert_vehicle_violation_scoring_record":
		if e.complexity.Mutation.InsertVehicleViolationScoringRecord == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_violation_scoring_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleViolationScoringRecord(childComplexity, args["objects"].([]*model.VehicleViolationScoringRecordInsertInput), args["on_conflict"].(*model.VehicleViolationScoringRecordOnConflict)), true

	case "Mutation.insert_vehicle_violation_scoring_record_one":
		if e.complexity.Mutation.InsertVehicleViolationScoringRecordOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_violation_scoring_record_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleViolationScoringRecordOne(childComplexity, args["object"].(model.VehicleViolationScoringRecordInsertInput), args["on_conflict"].(*model.VehicleViolationScoringRecordOnConflict)), true

	case "Mutation.insert_VIO_CODEWFDM":
		if e.complexity.Mutation.InsertVioCodewfdm == nil {
			break
		}

		args, err := ec.field_Mutation_insert_VIO_CODEWFDM_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVioCodewfdm(childComplexity, args["objects"].([]*model.VioCodewfdmInsertInput)), true

	case "Mutation.insert_VIO_CODEWFDM_one":
		if e.complexity.Mutation.InsertVioCodewfdmOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_VIO_CODEWFDM_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVioCodewfdmOne(childComplexity, args["object"].(model.VioCodewfdmInsertInput)), true

	case "Mutation.update_app_enforcement":
		if e.complexity.Mutation.UpdateAppEnforcement == nil {
			break
		}

		args, err := ec.field_Mutation_update_app_enforcement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAppEnforcement(childComplexity, args["_inc"].(*model.AppEnforcementIncInput), args["_set"].(*model.AppEnforcementSetInput), args["where"].(model.AppEnforcementBoolExp)), true

	case "Mutation.update_app_enforcement_by_pk":
		if e.complexity.Mutation.UpdateAppEnforcementByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_app_enforcement_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAppEnforcementByPk(childComplexity, args["_inc"].(*model.AppEnforcementIncInput), args["_set"].(*model.AppEnforcementSetInput), args["pk_columns"].(model.AppEnforcementPkColumnsInput)), true

	case "Mutation.update_dispute_violation_record":
		if e.complexity.Mutation.UpdateDisputeViolationRecord == nil {
			break
		}

		args, err := ec.field_Mutation_update_dispute_violation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDisputeViolationRecord(childComplexity, args["_inc"].(*model.DisputeViolationRecordIncInput), args["_set"].(*model.DisputeViolationRecordSetInput), args["where"].(model.DisputeViolationRecordBoolExp)), true

	case "Mutation.update_dispute_violation_record_by_pk":
		if e.complexity.Mutation.UpdateDisputeViolationRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_dispute_violation_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDisputeViolationRecordByPk(childComplexity, args["_inc"].(*model.DisputeViolationRecordIncInput), args["_set"].(*model.DisputeViolationRecordSetInput), args["pk_columns"].(model.DisputeViolationRecordPkColumnsInput)), true

	case "Mutation.update_dispute_violation_record_log":
		if e.complexity.Mutation.UpdateDisputeViolationRecordLog == nil {
			break
		}

		args, err := ec.field_Mutation_update_dispute_violation_record_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDisputeViolationRecordLog(childComplexity, args["_inc"].(*model.DisputeViolationRecordLogIncInput), args["_set"].(*model.DisputeViolationRecordLogSetInput), args["where"].(model.DisputeViolationRecordLogBoolExp)), true

	case "Mutation.update_dispute_violation_record_log_by_pk":
		if e.complexity.Mutation.UpdateDisputeViolationRecordLogByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_dispute_violation_record_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDisputeViolationRecordLogByPk(childComplexity, args["_inc"].(*model.DisputeViolationRecordLogIncInput), args["_set"].(*model.DisputeViolationRecordLogSetInput), args["pk_columns"].(model.DisputeViolationRecordLogPkColumnsInput)), true

	case "Mutation.update_driver_peccancy_check":
		if e.complexity.Mutation.UpdateDriverPeccancyCheck == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_peccancy_check_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverPeccancyCheck(childComplexity, args["_inc"].(*model.DriverPeccancyCheckIncInput), args["_set"].(*model.DriverPeccancyCheckSetInput), args["where"].(model.DriverPeccancyCheckBoolExp)), true

	case "Mutation.update_driver_peccancy_check_by_pk":
		if e.complexity.Mutation.UpdateDriverPeccancyCheckByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_peccancy_check_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverPeccancyCheckByPk(childComplexity, args["_inc"].(*model.DriverPeccancyCheckIncInput), args["_set"].(*model.DriverPeccancyCheckSetInput), args["pk_columns"].(model.DriverPeccancyCheckPkColumnsInput)), true

	case "Mutation.update_enterprise_deduction_items":
		if e.complexity.Mutation.UpdateEnterpriseDeductionItems == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_deduction_items_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseDeductionItems(childComplexity, args["_inc"].(*model.EnterpriseDeductionItemsIncInput), args["_set"].(*model.EnterpriseDeductionItemsSetInput), args["where"].(model.EnterpriseDeductionItemsBoolExp)), true

	case "Mutation.update_enterprise_deduction_items_by_pk":
		if e.complexity.Mutation.UpdateEnterpriseDeductionItemsByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_deduction_items_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseDeductionItemsByPk(childComplexity, args["_inc"].(*model.EnterpriseDeductionItemsIncInput), args["_set"].(*model.EnterpriseDeductionItemsSetInput), args["pk_columns"].(model.EnterpriseDeductionItemsPkColumnsInput)), true

	case "Mutation.update_enterprise_deduction_operation_record":
		if e.complexity.Mutation.UpdateEnterpriseDeductionOperationRecord == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_deduction_operation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseDeductionOperationRecord(childComplexity, args["_inc"].(*model.EnterpriseDeductionOperationRecordIncInput), args["_set"].(*model.EnterpriseDeductionOperationRecordSetInput), args["where"].(model.EnterpriseDeductionOperationRecordBoolExp)), true

	case "Mutation.update_enterprise_deduction_operation_record_by_pk":
		if e.complexity.Mutation.UpdateEnterpriseDeductionOperationRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_deduction_operation_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseDeductionOperationRecordByPk(childComplexity, args["_inc"].(*model.EnterpriseDeductionOperationRecordIncInput), args["_set"].(*model.EnterpriseDeductionOperationRecordSetInput), args["pk_columns"].(model.EnterpriseDeductionOperationRecordPkColumnsInput)), true

	case "Mutation.update_illegal_photo":
		if e.complexity.Mutation.UpdateIllegalPhoto == nil {
			break
		}

		args, err := ec.field_Mutation_update_illegal_photo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIllegalPhoto(childComplexity, args["_inc"].(*model.IllegalPhotoIncInput), args["_set"].(*model.IllegalPhotoSetInput), args["where"].(model.IllegalPhotoBoolExp)), true

	case "Mutation.update_illegal_photo_by_pk":
		if e.complexity.Mutation.UpdateIllegalPhotoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_illegal_photo_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIllegalPhotoByPk(childComplexity, args["_inc"].(*model.IllegalPhotoIncInput), args["_set"].(*model.IllegalPhotoSetInput), args["pk_columns"].(model.IllegalPhotoPkColumnsInput)), true

	case "Mutation.update_regional_violation_register":
		if e.complexity.Mutation.UpdateRegionalViolationRegister == nil {
			break
		}

		args, err := ec.field_Mutation_update_regional_violation_register_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRegionalViolationRegister(childComplexity, args["_inc"].(*model.RegionalViolationRegisterIncInput), args["_set"].(*model.RegionalViolationRegisterSetInput), args["where"].(model.RegionalViolationRegisterBoolExp)), true

	case "Mutation.update_regional_violation_register_by_pk":
		if e.complexity.Mutation.UpdateRegionalViolationRegisterByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_regional_violation_register_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRegionalViolationRegisterByPk(childComplexity, args["_inc"].(*model.RegionalViolationRegisterIncInput), args["_set"].(*model.RegionalViolationRegisterSetInput), args["pk_columns"].(model.RegionalViolationRegisterPkColumnsInput)), true

	case "Mutation.update_user_operation_log":
		if e.complexity.Mutation.UpdateUserOperationLog == nil {
			break
		}

		args, err := ec.field_Mutation_update_user_operation_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserOperationLog(childComplexity, args["_inc"].(*model.UserOperationLogIncInput), args["_set"].(*model.UserOperationLogSetInput), args["where"].(model.UserOperationLogBoolExp)), true

	case "Mutation.update_user_operation_log_by_pk":
		if e.complexity.Mutation.UpdateUserOperationLogByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_user_operation_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserOperationLogByPk(childComplexity, args["_inc"].(*model.UserOperationLogIncInput), args["_set"].(*model.UserOperationLogSetInput), args["pk_columns"].(model.UserOperationLogPkColumnsInput)), true

	case "Mutation.update_vehicle_detain_details":
		if e.complexity.Mutation.UpdateVehicleDetainDetails == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_detain_details_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleDetainDetails(childComplexity, args["_inc"].(*model.VehicleDetainDetailsIncInput), args["_set"].(*model.VehicleDetainDetailsSetInput), args["where"].(model.VehicleDetainDetailsBoolExp)), true

	case "Mutation.update_vehicle_detain_details_by_pk":
		if e.complexity.Mutation.UpdateVehicleDetainDetailsByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_detain_details_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleDetainDetailsByPk(childComplexity, args["_inc"].(*model.VehicleDetainDetailsIncInput), args["_set"].(*model.VehicleDetainDetailsSetInput), args["pk_columns"].(model.VehicleDetainDetailsPkColumnsInput)), true

	case "Mutation.update_vehicle_violation_details":
		if e.complexity.Mutation.UpdateVehicleViolationDetails == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_violation_details_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleViolationDetails(childComplexity, args["_inc"].(*model.VehicleViolationDetailsIncInput), args["_set"].(*model.VehicleViolationDetailsSetInput), args["where"].(model.VehicleViolationDetailsBoolExp)), true

	case "Mutation.update_vehicle_violation_details_by_pk":
		if e.complexity.Mutation.UpdateVehicleViolationDetailsByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_violation_details_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleViolationDetailsByPk(childComplexity, args["_inc"].(*model.VehicleViolationDetailsIncInput), args["_set"].(*model.VehicleViolationDetailsSetInput), args["pk_columns"].(model.VehicleViolationDetailsPkColumnsInput)), true

	case "Mutation.update_vehicle_violation_scoring_items":
		if e.complexity.Mutation.UpdateVehicleViolationScoringItems == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_violation_scoring_items_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleViolationScoringItems(childComplexity, args["_inc"].(*model.VehicleViolationScoringItemsIncInput), args["_set"].(*model.VehicleViolationScoringItemsSetInput), args["where"].(model.VehicleViolationScoringItemsBoolExp)), true

	case "Mutation.update_vehicle_violation_scoring_items_by_pk":
		if e.complexity.Mutation.UpdateVehicleViolationScoringItemsByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_violation_scoring_items_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleViolationScoringItemsByPk(childComplexity, args["_inc"].(*model.VehicleViolationScoringItemsIncInput), args["_set"].(*model.VehicleViolationScoringItemsSetInput), args["pk_columns"].(model.VehicleViolationScoringItemsPkColumnsInput)), true

	case "Mutation.update_vehicle_violation_scoring_record":
		if e.complexity.Mutation.UpdateVehicleViolationScoringRecord == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_violation_scoring_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleViolationScoringRecord(childComplexity, args["_inc"].(*model.VehicleViolationScoringRecordIncInput), args["_set"].(*model.VehicleViolationScoringRecordSetInput), args["where"].(model.VehicleViolationScoringRecordBoolExp)), true

	case "Mutation.update_vehicle_violation_scoring_record_by_pk":
		if e.complexity.Mutation.UpdateVehicleViolationScoringRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_violation_scoring_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleViolationScoringRecordByPk(childComplexity, args["_inc"].(*model.VehicleViolationScoringRecordIncInput), args["_set"].(*model.VehicleViolationScoringRecordSetInput), args["pk_columns"].(model.VehicleViolationScoringRecordPkColumnsInput)), true

	case "Mutation.update_VIO_CODEWFDM":
		if e.complexity.Mutation.UpdateVioCodewfdm == nil {
			break
		}

		args, err := ec.field_Mutation_update_VIO_CODEWFDM_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVioCodewfdm(childComplexity, args["_inc"].(*model.VioCodewfdmIncInput), args["_set"].(*model.VioCodewfdmSetInput), args["where"].(model.VioCodewfdmBoolExp)), true

	case "Query.app_enforcement":
		if e.complexity.Query.AppEnforcement == nil {
			break
		}

		args, err := ec.field_Query_app_enforcement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppEnforcement(childComplexity, args["distinct_on"].([]model.AppEnforcementSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AppEnforcementOrderBy), args["where"].(*model.AppEnforcementBoolExp)), true

	case "Query.app_enforcement_aggregate":
		if e.complexity.Query.AppEnforcementAggregate == nil {
			break
		}

		args, err := ec.field_Query_app_enforcement_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppEnforcementAggregate(childComplexity, args["distinct_on"].([]model.AppEnforcementSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AppEnforcementOrderBy), args["where"].(*model.AppEnforcementBoolExp)), true

	case "Query.app_enforcement_by_pk":
		if e.complexity.Query.AppEnforcementByPk == nil {
			break
		}

		args, err := ec.field_Query_app_enforcement_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppEnforcementByPk(childComplexity, args["id"].(int64), args["illegal_photo_id"].(string)), true

	case "Query.dispute_violation_record":
		if e.complexity.Query.DisputeViolationRecord == nil {
			break
		}

		args, err := ec.field_Query_dispute_violation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DisputeViolationRecord(childComplexity, args["distinct_on"].([]model.DisputeViolationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordOrderBy), args["where"].(*model.DisputeViolationRecordBoolExp)), true

	case "Query.dispute_violation_record_aggregate":
		if e.complexity.Query.DisputeViolationRecordAggregate == nil {
			break
		}

		args, err := ec.field_Query_dispute_violation_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DisputeViolationRecordAggregate(childComplexity, args["distinct_on"].([]model.DisputeViolationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordOrderBy), args["where"].(*model.DisputeViolationRecordBoolExp)), true

	case "Query.dispute_violation_record_by_pk":
		if e.complexity.Query.DisputeViolationRecordByPk == nil {
			break
		}

		args, err := ec.field_Query_dispute_violation_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DisputeViolationRecordByPk(childComplexity, args["dispute_violation_id"].(string), args["id"].(int64)), true

	case "Query.dispute_violation_record_log":
		if e.complexity.Query.DisputeViolationRecordLog == nil {
			break
		}

		args, err := ec.field_Query_dispute_violation_record_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DisputeViolationRecordLog(childComplexity, args["distinct_on"].([]model.DisputeViolationRecordLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordLogOrderBy), args["where"].(*model.DisputeViolationRecordLogBoolExp)), true

	case "Query.dispute_violation_record_log_aggregate":
		if e.complexity.Query.DisputeViolationRecordLogAggregate == nil {
			break
		}

		args, err := ec.field_Query_dispute_violation_record_log_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DisputeViolationRecordLogAggregate(childComplexity, args["distinct_on"].([]model.DisputeViolationRecordLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordLogOrderBy), args["where"].(*model.DisputeViolationRecordLogBoolExp)), true

	case "Query.dispute_violation_record_log_by_pk":
		if e.complexity.Query.DisputeViolationRecordLogByPk == nil {
			break
		}

		args, err := ec.field_Query_dispute_violation_record_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DisputeViolationRecordLogByPk(childComplexity, args["dispute_violation_log_id"].(string), args["id"].(int64)), true

	case "Query.driver_peccancy_check":
		if e.complexity.Query.DriverPeccancyCheck == nil {
			break
		}

		args, err := ec.field_Query_driver_peccancy_check_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverPeccancyCheck(childComplexity, args["distinct_on"].([]model.DriverPeccancyCheckSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverPeccancyCheckOrderBy), args["where"].(*model.DriverPeccancyCheckBoolExp)), true

	case "Query.driver_peccancy_check_aggregate":
		if e.complexity.Query.DriverPeccancyCheckAggregate == nil {
			break
		}

		args, err := ec.field_Query_driver_peccancy_check_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverPeccancyCheckAggregate(childComplexity, args["distinct_on"].([]model.DriverPeccancyCheckSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverPeccancyCheckOrderBy), args["where"].(*model.DriverPeccancyCheckBoolExp)), true

	case "Query.driver_peccancy_check_by_pk":
		if e.complexity.Query.DriverPeccancyCheckByPk == nil {
			break
		}

		args, err := ec.field_Query_driver_peccancy_check_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverPeccancyCheckByPk(childComplexity, args["id"].(int64)), true

	case "Query.enterprise_deduction_items":
		if e.complexity.Query.EnterpriseDeductionItems == nil {
			break
		}

		args, err := ec.field_Query_enterprise_deduction_items_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseDeductionItems(childComplexity, args["distinct_on"].([]model.EnterpriseDeductionItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseDeductionItemsOrderBy), args["where"].(*model.EnterpriseDeductionItemsBoolExp)), true

	case "Query.enterprise_deduction_items_aggregate":
		if e.complexity.Query.EnterpriseDeductionItemsAggregate == nil {
			break
		}

		args, err := ec.field_Query_enterprise_deduction_items_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseDeductionItemsAggregate(childComplexity, args["distinct_on"].([]model.EnterpriseDeductionItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseDeductionItemsOrderBy), args["where"].(*model.EnterpriseDeductionItemsBoolExp)), true

	case "Query.enterprise_deduction_items_by_pk":
		if e.complexity.Query.EnterpriseDeductionItemsByPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_deduction_items_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseDeductionItemsByPk(childComplexity, args["enterprise_deduction_item_id"].(string), args["id"].(int64)), true

	case "Query.enterprise_deduction_operation_record":
		if e.complexity.Query.EnterpriseDeductionOperationRecord == nil {
			break
		}

		args, err := ec.field_Query_enterprise_deduction_operation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseDeductionOperationRecord(childComplexity, args["distinct_on"].([]model.EnterpriseDeductionOperationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseDeductionOperationRecordOrderBy), args["where"].(*model.EnterpriseDeductionOperationRecordBoolExp)), true

	case "Query.enterprise_deduction_operation_record_aggregate":
		if e.complexity.Query.EnterpriseDeductionOperationRecordAggregate == nil {
			break
		}

		args, err := ec.field_Query_enterprise_deduction_operation_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseDeductionOperationRecordAggregate(childComplexity, args["distinct_on"].([]model.EnterpriseDeductionOperationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseDeductionOperationRecordOrderBy), args["where"].(*model.EnterpriseDeductionOperationRecordBoolExp)), true

	case "Query.enterprise_deduction_operation_record_by_pk":
		if e.complexity.Query.EnterpriseDeductionOperationRecordByPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_deduction_operation_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseDeductionOperationRecordByPk(childComplexity, args["enterprise_duduction_operation_id"].(string), args["id"].(int64)), true

	case "Query.illegal_photo":
		if e.complexity.Query.IllegalPhoto == nil {
			break
		}

		args, err := ec.field_Query_illegal_photo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IllegalPhoto(childComplexity, args["distinct_on"].([]model.IllegalPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.IllegalPhotoOrderBy), args["where"].(*model.IllegalPhotoBoolExp)), true

	case "Query.illegal_photo_aggregate":
		if e.complexity.Query.IllegalPhotoAggregate == nil {
			break
		}

		args, err := ec.field_Query_illegal_photo_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IllegalPhotoAggregate(childComplexity, args["distinct_on"].([]model.IllegalPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.IllegalPhotoOrderBy), args["where"].(*model.IllegalPhotoBoolExp)), true

	case "Query.illegal_photo_by_pk":
		if e.complexity.Query.IllegalPhotoByPk == nil {
			break
		}

		args, err := ec.field_Query_illegal_photo_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IllegalPhotoByPk(childComplexity, args["id"].(int64), args["illegal_photo_id"].(string)), true

	case "Query.regional_violation_register":
		if e.complexity.Query.RegionalViolationRegister == nil {
			break
		}

		args, err := ec.field_Query_regional_violation_register_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RegionalViolationRegister(childComplexity, args["distinct_on"].([]model.RegionalViolationRegisterSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionalViolationRegisterOrderBy), args["where"].(*model.RegionalViolationRegisterBoolExp)), true

	case "Query.regional_violation_register_aggregate":
		if e.complexity.Query.RegionalViolationRegisterAggregate == nil {
			break
		}

		args, err := ec.field_Query_regional_violation_register_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RegionalViolationRegisterAggregate(childComplexity, args["distinct_on"].([]model.RegionalViolationRegisterSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionalViolationRegisterOrderBy), args["where"].(*model.RegionalViolationRegisterBoolExp)), true

	case "Query.regional_violation_register_by_pk":
		if e.complexity.Query.RegionalViolationRegisterByPk == nil {
			break
		}

		args, err := ec.field_Query_regional_violation_register_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RegionalViolationRegisterByPk(childComplexity, args["id"].(int64), args["regional_violation_register_id"].(string)), true

	case "Query.user_operation_log":
		if e.complexity.Query.UserOperationLog == nil {
			break
		}

		args, err := ec.field_Query_user_operation_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserOperationLog(childComplexity, args["distinct_on"].([]model.UserOperationLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.UserOperationLogOrderBy), args["where"].(*model.UserOperationLogBoolExp)), true

	case "Query.user_operation_log_aggregate":
		if e.complexity.Query.UserOperationLogAggregate == nil {
			break
		}

		args, err := ec.field_Query_user_operation_log_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserOperationLogAggregate(childComplexity, args["distinct_on"].([]model.UserOperationLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.UserOperationLogOrderBy), args["where"].(*model.UserOperationLogBoolExp)), true

	case "Query.user_operation_log_by_pk":
		if e.complexity.Query.UserOperationLogByPk == nil {
			break
		}

		args, err := ec.field_Query_user_operation_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserOperationLogByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_detain_details":
		if e.complexity.Query.VehicleDetainDetails == nil {
			break
		}

		args, err := ec.field_Query_vehicle_detain_details_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleDetainDetails(childComplexity, args["distinct_on"].([]model.VehicleDetainDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDetainDetailsOrderBy), args["where"].(*model.VehicleDetainDetailsBoolExp)), true

	case "Query.vehicle_detain_details_aggregate":
		if e.complexity.Query.VehicleDetainDetailsAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_detain_details_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleDetainDetailsAggregate(childComplexity, args["distinct_on"].([]model.VehicleDetainDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDetainDetailsOrderBy), args["where"].(*model.VehicleDetainDetailsBoolExp)), true

	case "Query.vehicle_detain_details_by_pk":
		if e.complexity.Query.VehicleDetainDetailsByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_detain_details_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleDetainDetailsByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_violation_details":
		if e.complexity.Query.VehicleViolationDetails == nil {
			break
		}

		args, err := ec.field_Query_vehicle_violation_details_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleViolationDetails(childComplexity, args["distinct_on"].([]model.VehicleViolationDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationDetailsOrderBy), args["where"].(*model.VehicleViolationDetailsBoolExp)), true

	case "Query.vehicle_violation_details_aggregate":
		if e.complexity.Query.VehicleViolationDetailsAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_violation_details_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleViolationDetailsAggregate(childComplexity, args["distinct_on"].([]model.VehicleViolationDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationDetailsOrderBy), args["where"].(*model.VehicleViolationDetailsBoolExp)), true

	case "Query.vehicle_violation_details_by_pk":
		if e.complexity.Query.VehicleViolationDetailsByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_violation_details_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleViolationDetailsByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_violation_scoring_items":
		if e.complexity.Query.VehicleViolationScoringItems == nil {
			break
		}

		args, err := ec.field_Query_vehicle_violation_scoring_items_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleViolationScoringItems(childComplexity, args["distinct_on"].([]model.VehicleViolationScoringItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringItemsOrderBy), args["where"].(*model.VehicleViolationScoringItemsBoolExp)), true

	case "Query.vehicle_violation_scoring_items_aggregate":
		if e.complexity.Query.VehicleViolationScoringItemsAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_violation_scoring_items_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleViolationScoringItemsAggregate(childComplexity, args["distinct_on"].([]model.VehicleViolationScoringItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringItemsOrderBy), args["where"].(*model.VehicleViolationScoringItemsBoolExp)), true

	case "Query.vehicle_violation_scoring_items_by_pk":
		if e.complexity.Query.VehicleViolationScoringItemsByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_violation_scoring_items_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleViolationScoringItemsByPk(childComplexity, args["id"].(int64), args["violation_scoring_item_id"].(string)), true

	case "Query.vehicle_violation_scoring_record":
		if e.complexity.Query.VehicleViolationScoringRecord == nil {
			break
		}

		args, err := ec.field_Query_vehicle_violation_scoring_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleViolationScoringRecord(childComplexity, args["distinct_on"].([]model.VehicleViolationScoringRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringRecordOrderBy), args["where"].(*model.VehicleViolationScoringRecordBoolExp)), true

	case "Query.vehicle_violation_scoring_record_aggregate":
		if e.complexity.Query.VehicleViolationScoringRecordAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_violation_scoring_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleViolationScoringRecordAggregate(childComplexity, args["distinct_on"].([]model.VehicleViolationScoringRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringRecordOrderBy), args["where"].(*model.VehicleViolationScoringRecordBoolExp)), true

	case "Query.vehicle_violation_scoring_record_by_pk":
		if e.complexity.Query.VehicleViolationScoringRecordByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_violation_scoring_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleViolationScoringRecordByPk(childComplexity, args["id"].(int64), args["violation_scoring_id"].(string)), true

	case "Query.VIO_CODEWFDM":
		if e.complexity.Query.VioCodewfdm == nil {
			break
		}

		args, err := ec.field_Query_VIO_CODEWFDM_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VioCodewfdm(childComplexity, args["distinct_on"].([]model.VioCodewfdmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VioCodewfdmOrderBy), args["where"].(*model.VioCodewfdmBoolExp)), true

	case "Query.VIO_CODEWFDM_aggregate":
		if e.complexity.Query.VioCodewfdmAggregate == nil {
			break
		}

		args, err := ec.field_Query_VIO_CODEWFDM_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VioCodewfdmAggregate(childComplexity, args["distinct_on"].([]model.VioCodewfdmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VioCodewfdmOrderBy), args["where"].(*model.VioCodewfdmBoolExp)), true

	case "Subscription.app_enforcement":
		if e.complexity.Subscription.AppEnforcement == nil {
			break
		}

		args, err := ec.field_Subscription_app_enforcement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.AppEnforcement(childComplexity, args["distinct_on"].([]model.AppEnforcementSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AppEnforcementOrderBy), args["where"].(*model.AppEnforcementBoolExp)), true

	case "Subscription.app_enforcement_aggregate":
		if e.complexity.Subscription.AppEnforcementAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_app_enforcement_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.AppEnforcementAggregate(childComplexity, args["distinct_on"].([]model.AppEnforcementSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AppEnforcementOrderBy), args["where"].(*model.AppEnforcementBoolExp)), true

	case "Subscription.app_enforcement_by_pk":
		if e.complexity.Subscription.AppEnforcementByPk == nil {
			break
		}

		args, err := ec.field_Subscription_app_enforcement_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.AppEnforcementByPk(childComplexity, args["id"].(int64), args["illegal_photo_id"].(string)), true

	case "Subscription.dispute_violation_record":
		if e.complexity.Subscription.DisputeViolationRecord == nil {
			break
		}

		args, err := ec.field_Subscription_dispute_violation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DisputeViolationRecord(childComplexity, args["distinct_on"].([]model.DisputeViolationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordOrderBy), args["where"].(*model.DisputeViolationRecordBoolExp)), true

	case "Subscription.dispute_violation_record_aggregate":
		if e.complexity.Subscription.DisputeViolationRecordAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_dispute_violation_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DisputeViolationRecordAggregate(childComplexity, args["distinct_on"].([]model.DisputeViolationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordOrderBy), args["where"].(*model.DisputeViolationRecordBoolExp)), true

	case "Subscription.dispute_violation_record_by_pk":
		if e.complexity.Subscription.DisputeViolationRecordByPk == nil {
			break
		}

		args, err := ec.field_Subscription_dispute_violation_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DisputeViolationRecordByPk(childComplexity, args["dispute_violation_id"].(string), args["id"].(int64)), true

	case "Subscription.dispute_violation_record_log":
		if e.complexity.Subscription.DisputeViolationRecordLog == nil {
			break
		}

		args, err := ec.field_Subscription_dispute_violation_record_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DisputeViolationRecordLog(childComplexity, args["distinct_on"].([]model.DisputeViolationRecordLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordLogOrderBy), args["where"].(*model.DisputeViolationRecordLogBoolExp)), true

	case "Subscription.dispute_violation_record_log_aggregate":
		if e.complexity.Subscription.DisputeViolationRecordLogAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_dispute_violation_record_log_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DisputeViolationRecordLogAggregate(childComplexity, args["distinct_on"].([]model.DisputeViolationRecordLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordLogOrderBy), args["where"].(*model.DisputeViolationRecordLogBoolExp)), true

	case "Subscription.dispute_violation_record_log_by_pk":
		if e.complexity.Subscription.DisputeViolationRecordLogByPk == nil {
			break
		}

		args, err := ec.field_Subscription_dispute_violation_record_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DisputeViolationRecordLogByPk(childComplexity, args["dispute_violation_log_id"].(string), args["id"].(int64)), true

	case "Subscription.driver_peccancy_check":
		if e.complexity.Subscription.DriverPeccancyCheck == nil {
			break
		}

		args, err := ec.field_Subscription_driver_peccancy_check_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DriverPeccancyCheck(childComplexity, args["distinct_on"].([]model.DriverPeccancyCheckSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverPeccancyCheckOrderBy), args["where"].(*model.DriverPeccancyCheckBoolExp)), true

	case "Subscription.driver_peccancy_check_aggregate":
		if e.complexity.Subscription.DriverPeccancyCheckAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_driver_peccancy_check_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DriverPeccancyCheckAggregate(childComplexity, args["distinct_on"].([]model.DriverPeccancyCheckSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverPeccancyCheckOrderBy), args["where"].(*model.DriverPeccancyCheckBoolExp)), true

	case "Subscription.driver_peccancy_check_by_pk":
		if e.complexity.Subscription.DriverPeccancyCheckByPk == nil {
			break
		}

		args, err := ec.field_Subscription_driver_peccancy_check_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DriverPeccancyCheckByPk(childComplexity, args["id"].(int64)), true

	case "Subscription.enterprise_deduction_items":
		if e.complexity.Subscription.EnterpriseDeductionItems == nil {
			break
		}

		args, err := ec.field_Subscription_enterprise_deduction_items_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.EnterpriseDeductionItems(childComplexity, args["distinct_on"].([]model.EnterpriseDeductionItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseDeductionItemsOrderBy), args["where"].(*model.EnterpriseDeductionItemsBoolExp)), true

	case "Subscription.enterprise_deduction_items_aggregate":
		if e.complexity.Subscription.EnterpriseDeductionItemsAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_enterprise_deduction_items_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.EnterpriseDeductionItemsAggregate(childComplexity, args["distinct_on"].([]model.EnterpriseDeductionItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseDeductionItemsOrderBy), args["where"].(*model.EnterpriseDeductionItemsBoolExp)), true

	case "Subscription.enterprise_deduction_items_by_pk":
		if e.complexity.Subscription.EnterpriseDeductionItemsByPk == nil {
			break
		}

		args, err := ec.field_Subscription_enterprise_deduction_items_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.EnterpriseDeductionItemsByPk(childComplexity, args["enterprise_deduction_item_id"].(string), args["id"].(int64)), true

	case "Subscription.enterprise_deduction_operation_record":
		if e.complexity.Subscription.EnterpriseDeductionOperationRecord == nil {
			break
		}

		args, err := ec.field_Subscription_enterprise_deduction_operation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.EnterpriseDeductionOperationRecord(childComplexity, args["distinct_on"].([]model.EnterpriseDeductionOperationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseDeductionOperationRecordOrderBy), args["where"].(*model.EnterpriseDeductionOperationRecordBoolExp)), true

	case "Subscription.enterprise_deduction_operation_record_aggregate":
		if e.complexity.Subscription.EnterpriseDeductionOperationRecordAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_enterprise_deduction_operation_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.EnterpriseDeductionOperationRecordAggregate(childComplexity, args["distinct_on"].([]model.EnterpriseDeductionOperationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseDeductionOperationRecordOrderBy), args["where"].(*model.EnterpriseDeductionOperationRecordBoolExp)), true

	case "Subscription.enterprise_deduction_operation_record_by_pk":
		if e.complexity.Subscription.EnterpriseDeductionOperationRecordByPk == nil {
			break
		}

		args, err := ec.field_Subscription_enterprise_deduction_operation_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.EnterpriseDeductionOperationRecordByPk(childComplexity, args["enterprise_duduction_operation_id"].(string), args["id"].(int64)), true

	case "Subscription.illegal_photo":
		if e.complexity.Subscription.IllegalPhoto == nil {
			break
		}

		args, err := ec.field_Subscription_illegal_photo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.IllegalPhoto(childComplexity, args["distinct_on"].([]model.IllegalPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.IllegalPhotoOrderBy), args["where"].(*model.IllegalPhotoBoolExp)), true

	case "Subscription.illegal_photo_aggregate":
		if e.complexity.Subscription.IllegalPhotoAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_illegal_photo_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.IllegalPhotoAggregate(childComplexity, args["distinct_on"].([]model.IllegalPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.IllegalPhotoOrderBy), args["where"].(*model.IllegalPhotoBoolExp)), true

	case "Subscription.illegal_photo_by_pk":
		if e.complexity.Subscription.IllegalPhotoByPk == nil {
			break
		}

		args, err := ec.field_Subscription_illegal_photo_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.IllegalPhotoByPk(childComplexity, args["id"].(int64), args["illegal_photo_id"].(string)), true

	case "Subscription.regional_violation_register":
		if e.complexity.Subscription.RegionalViolationRegister == nil {
			break
		}

		args, err := ec.field_Subscription_regional_violation_register_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.RegionalViolationRegister(childComplexity, args["distinct_on"].([]model.RegionalViolationRegisterSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionalViolationRegisterOrderBy), args["where"].(*model.RegionalViolationRegisterBoolExp)), true

	case "Subscription.regional_violation_register_aggregate":
		if e.complexity.Subscription.RegionalViolationRegisterAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_regional_violation_register_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.RegionalViolationRegisterAggregate(childComplexity, args["distinct_on"].([]model.RegionalViolationRegisterSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionalViolationRegisterOrderBy), args["where"].(*model.RegionalViolationRegisterBoolExp)), true

	case "Subscription.regional_violation_register_by_pk":
		if e.complexity.Subscription.RegionalViolationRegisterByPk == nil {
			break
		}

		args, err := ec.field_Subscription_regional_violation_register_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.RegionalViolationRegisterByPk(childComplexity, args["id"].(int64), args["regional_violation_register_id"].(string)), true

	case "Subscription.user_operation_log":
		if e.complexity.Subscription.UserOperationLog == nil {
			break
		}

		args, err := ec.field_Subscription_user_operation_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.UserOperationLog(childComplexity, args["distinct_on"].([]model.UserOperationLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.UserOperationLogOrderBy), args["where"].(*model.UserOperationLogBoolExp)), true

	case "Subscription.user_operation_log_aggregate":
		if e.complexity.Subscription.UserOperationLogAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_user_operation_log_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.UserOperationLogAggregate(childComplexity, args["distinct_on"].([]model.UserOperationLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.UserOperationLogOrderBy), args["where"].(*model.UserOperationLogBoolExp)), true

	case "Subscription.user_operation_log_by_pk":
		if e.complexity.Subscription.UserOperationLogByPk == nil {
			break
		}

		args, err := ec.field_Subscription_user_operation_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.UserOperationLogByPk(childComplexity, args["id"].(int64)), true

	case "Subscription.vehicle_detain_details":
		if e.complexity.Subscription.VehicleDetainDetails == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_detain_details_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleDetainDetails(childComplexity, args["distinct_on"].([]model.VehicleDetainDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDetainDetailsOrderBy), args["where"].(*model.VehicleDetainDetailsBoolExp)), true

	case "Subscription.vehicle_detain_details_aggregate":
		if e.complexity.Subscription.VehicleDetainDetailsAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_detain_details_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleDetainDetailsAggregate(childComplexity, args["distinct_on"].([]model.VehicleDetainDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDetainDetailsOrderBy), args["where"].(*model.VehicleDetainDetailsBoolExp)), true

	case "Subscription.vehicle_detain_details_by_pk":
		if e.complexity.Subscription.VehicleDetainDetailsByPk == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_detain_details_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleDetainDetailsByPk(childComplexity, args["id"].(int64)), true

	case "Subscription.vehicle_violation_details":
		if e.complexity.Subscription.VehicleViolationDetails == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_violation_details_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleViolationDetails(childComplexity, args["distinct_on"].([]model.VehicleViolationDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationDetailsOrderBy), args["where"].(*model.VehicleViolationDetailsBoolExp)), true

	case "Subscription.vehicle_violation_details_aggregate":
		if e.complexity.Subscription.VehicleViolationDetailsAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_violation_details_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleViolationDetailsAggregate(childComplexity, args["distinct_on"].([]model.VehicleViolationDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationDetailsOrderBy), args["where"].(*model.VehicleViolationDetailsBoolExp)), true

	case "Subscription.vehicle_violation_details_by_pk":
		if e.complexity.Subscription.VehicleViolationDetailsByPk == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_violation_details_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleViolationDetailsByPk(childComplexity, args["id"].(int64)), true

	case "Subscription.vehicle_violation_scoring_items":
		if e.complexity.Subscription.VehicleViolationScoringItems == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_violation_scoring_items_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleViolationScoringItems(childComplexity, args["distinct_on"].([]model.VehicleViolationScoringItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringItemsOrderBy), args["where"].(*model.VehicleViolationScoringItemsBoolExp)), true

	case "Subscription.vehicle_violation_scoring_items_aggregate":
		if e.complexity.Subscription.VehicleViolationScoringItemsAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_violation_scoring_items_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleViolationScoringItemsAggregate(childComplexity, args["distinct_on"].([]model.VehicleViolationScoringItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringItemsOrderBy), args["where"].(*model.VehicleViolationScoringItemsBoolExp)), true

	case "Subscription.vehicle_violation_scoring_items_by_pk":
		if e.complexity.Subscription.VehicleViolationScoringItemsByPk == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_violation_scoring_items_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleViolationScoringItemsByPk(childComplexity, args["id"].(int64), args["violation_scoring_item_id"].(string)), true

	case "Subscription.vehicle_violation_scoring_record":
		if e.complexity.Subscription.VehicleViolationScoringRecord == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_violation_scoring_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleViolationScoringRecord(childComplexity, args["distinct_on"].([]model.VehicleViolationScoringRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringRecordOrderBy), args["where"].(*model.VehicleViolationScoringRecordBoolExp)), true

	case "Subscription.vehicle_violation_scoring_record_aggregate":
		if e.complexity.Subscription.VehicleViolationScoringRecordAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_violation_scoring_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleViolationScoringRecordAggregate(childComplexity, args["distinct_on"].([]model.VehicleViolationScoringRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringRecordOrderBy), args["where"].(*model.VehicleViolationScoringRecordBoolExp)), true

	case "Subscription.vehicle_violation_scoring_record_by_pk":
		if e.complexity.Subscription.VehicleViolationScoringRecordByPk == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_violation_scoring_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleViolationScoringRecordByPk(childComplexity, args["id"].(int64), args["violation_scoring_id"].(string)), true

	case "Subscription.VIO_CODEWFDM":
		if e.complexity.Subscription.VioCodewfdm == nil {
			break
		}

		args, err := ec.field_Subscription_VIO_CODEWFDM_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VioCodewfdm(childComplexity, args["distinct_on"].([]model.VioCodewfdmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VioCodewfdmOrderBy), args["where"].(*model.VioCodewfdmBoolExp)), true

	case "Subscription.VIO_CODEWFDM_aggregate":
		if e.complexity.Subscription.VioCodewfdmAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_VIO_CODEWFDM_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VioCodewfdmAggregate(childComplexity, args["distinct_on"].([]model.VioCodewfdmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VioCodewfdmOrderBy), args["where"].(*model.VioCodewfdmBoolExp)), true

	case "VIO_CODEWFDM.FKJE_MAX":
		if e.complexity.VioCodewfdm.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdm.FkjeMax(childComplexity), true

	case "VIO_CODEWFDM.FKJE_MIN":
		if e.complexity.VioCodewfdm.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdm.FkjeMin(childComplexity), true

	case "VIO_CODEWFDM.WFJFS":
		if e.complexity.VioCodewfdm.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdm.Wfjfs(childComplexity), true

	case "VIO_CODEWFDM.WFMS":
		if e.complexity.VioCodewfdm.Wfms == nil {
			break
		}

		return e.complexity.VioCodewfdm.Wfms(childComplexity), true

	case "VIO_CODEWFDM.WFXW":
		if e.complexity.VioCodewfdm.Wfxw == nil {
			break
		}

		return e.complexity.VioCodewfdm.Wfxw(childComplexity), true

	case "VIO_CODEWFDM.XH":
		if e.complexity.VioCodewfdm.Xh == nil {
			break
		}

		return e.complexity.VioCodewfdm.Xh(childComplexity), true

	case "VIO_CODEWFDM_aggregate.aggregate":
		if e.complexity.VioCodewfdmAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregate.Aggregate(childComplexity), true

	case "VIO_CODEWFDM_aggregate.nodes":
		if e.complexity.VioCodewfdmAggregate.Nodes == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregate.Nodes(childComplexity), true

	case "VIO_CODEWFDM_aggregate_fields.avg":
		if e.complexity.VioCodewfdmAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.Avg(childComplexity), true

	case "VIO_CODEWFDM_aggregate_fields.count":
		if e.complexity.VioCodewfdmAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_VIO_CODEWFDM_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.VioCodewfdmAggregateFields.Count(childComplexity, args["columns"].([]model.VioCodewfdmSelectColumn), args["distinct"].(*bool)), true

	case "VIO_CODEWFDM_aggregate_fields.max":
		if e.complexity.VioCodewfdmAggregateFields.Max == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.Max(childComplexity), true

	case "VIO_CODEWFDM_aggregate_fields.min":
		if e.complexity.VioCodewfdmAggregateFields.Min == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.Min(childComplexity), true

	case "VIO_CODEWFDM_aggregate_fields.stddev":
		if e.complexity.VioCodewfdmAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.Stddev(childComplexity), true

	case "VIO_CODEWFDM_aggregate_fields.stddev_pop":
		if e.complexity.VioCodewfdmAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.StddevPop(childComplexity), true

	case "VIO_CODEWFDM_aggregate_fields.stddev_samp":
		if e.complexity.VioCodewfdmAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.StddevSamp(childComplexity), true

	case "VIO_CODEWFDM_aggregate_fields.sum":
		if e.complexity.VioCodewfdmAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.Sum(childComplexity), true

	case "VIO_CODEWFDM_aggregate_fields.var_pop":
		if e.complexity.VioCodewfdmAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.VarPop(childComplexity), true

	case "VIO_CODEWFDM_aggregate_fields.var_samp":
		if e.complexity.VioCodewfdmAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.VarSamp(childComplexity), true

	case "VIO_CODEWFDM_aggregate_fields.variance":
		if e.complexity.VioCodewfdmAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VioCodewfdmAggregateFields.Variance(childComplexity), true

	case "VIO_CODEWFDM_avg_fields.FKJE_MAX":
		if e.complexity.VioCodewfdmAvgFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmAvgFields.FkjeMax(childComplexity), true

	case "VIO_CODEWFDM_avg_fields.FKJE_MIN":
		if e.complexity.VioCodewfdmAvgFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmAvgFields.FkjeMin(childComplexity), true

	case "VIO_CODEWFDM_avg_fields.WFJFS":
		if e.complexity.VioCodewfdmAvgFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmAvgFields.Wfjfs(childComplexity), true

	case "VIO_CODEWFDM_max_fields.FKJE_MAX":
		if e.complexity.VioCodewfdmMaxFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmMaxFields.FkjeMax(childComplexity), true

	case "VIO_CODEWFDM_max_fields.FKJE_MIN":
		if e.complexity.VioCodewfdmMaxFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmMaxFields.FkjeMin(childComplexity), true

	case "VIO_CODEWFDM_max_fields.WFJFS":
		if e.complexity.VioCodewfdmMaxFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmMaxFields.Wfjfs(childComplexity), true

	case "VIO_CODEWFDM_max_fields.WFMS":
		if e.complexity.VioCodewfdmMaxFields.Wfms == nil {
			break
		}

		return e.complexity.VioCodewfdmMaxFields.Wfms(childComplexity), true

	case "VIO_CODEWFDM_max_fields.WFXW":
		if e.complexity.VioCodewfdmMaxFields.Wfxw == nil {
			break
		}

		return e.complexity.VioCodewfdmMaxFields.Wfxw(childComplexity), true

	case "VIO_CODEWFDM_max_fields.XH":
		if e.complexity.VioCodewfdmMaxFields.Xh == nil {
			break
		}

		return e.complexity.VioCodewfdmMaxFields.Xh(childComplexity), true

	case "VIO_CODEWFDM_min_fields.FKJE_MAX":
		if e.complexity.VioCodewfdmMinFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmMinFields.FkjeMax(childComplexity), true

	case "VIO_CODEWFDM_min_fields.FKJE_MIN":
		if e.complexity.VioCodewfdmMinFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmMinFields.FkjeMin(childComplexity), true

	case "VIO_CODEWFDM_min_fields.WFJFS":
		if e.complexity.VioCodewfdmMinFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmMinFields.Wfjfs(childComplexity), true

	case "VIO_CODEWFDM_min_fields.WFMS":
		if e.complexity.VioCodewfdmMinFields.Wfms == nil {
			break
		}

		return e.complexity.VioCodewfdmMinFields.Wfms(childComplexity), true

	case "VIO_CODEWFDM_min_fields.WFXW":
		if e.complexity.VioCodewfdmMinFields.Wfxw == nil {
			break
		}

		return e.complexity.VioCodewfdmMinFields.Wfxw(childComplexity), true

	case "VIO_CODEWFDM_min_fields.XH":
		if e.complexity.VioCodewfdmMinFields.Xh == nil {
			break
		}

		return e.complexity.VioCodewfdmMinFields.Xh(childComplexity), true

	case "VIO_CODEWFDM_mutation_response.affected_rows":
		if e.complexity.VioCodewfdmMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VioCodewfdmMutationResponse.AffectedRows(childComplexity), true

	case "VIO_CODEWFDM_mutation_response.returning":
		if e.complexity.VioCodewfdmMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VioCodewfdmMutationResponse.Returning(childComplexity), true

	case "VIO_CODEWFDM_stddev_fields.FKJE_MAX":
		if e.complexity.VioCodewfdmStddevFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmStddevFields.FkjeMax(childComplexity), true

	case "VIO_CODEWFDM_stddev_fields.FKJE_MIN":
		if e.complexity.VioCodewfdmStddevFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmStddevFields.FkjeMin(childComplexity), true

	case "VIO_CODEWFDM_stddev_fields.WFJFS":
		if e.complexity.VioCodewfdmStddevFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmStddevFields.Wfjfs(childComplexity), true

	case "VIO_CODEWFDM_stddev_pop_fields.FKJE_MAX":
		if e.complexity.VioCodewfdmStddevPopFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmStddevPopFields.FkjeMax(childComplexity), true

	case "VIO_CODEWFDM_stddev_pop_fields.FKJE_MIN":
		if e.complexity.VioCodewfdmStddevPopFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmStddevPopFields.FkjeMin(childComplexity), true

	case "VIO_CODEWFDM_stddev_pop_fields.WFJFS":
		if e.complexity.VioCodewfdmStddevPopFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmStddevPopFields.Wfjfs(childComplexity), true

	case "VIO_CODEWFDM_stddev_samp_fields.FKJE_MAX":
		if e.complexity.VioCodewfdmStddevSampFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmStddevSampFields.FkjeMax(childComplexity), true

	case "VIO_CODEWFDM_stddev_samp_fields.FKJE_MIN":
		if e.complexity.VioCodewfdmStddevSampFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmStddevSampFields.FkjeMin(childComplexity), true

	case "VIO_CODEWFDM_stddev_samp_fields.WFJFS":
		if e.complexity.VioCodewfdmStddevSampFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmStddevSampFields.Wfjfs(childComplexity), true

	case "VIO_CODEWFDM_sum_fields.FKJE_MAX":
		if e.complexity.VioCodewfdmSumFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmSumFields.FkjeMax(childComplexity), true

	case "VIO_CODEWFDM_sum_fields.FKJE_MIN":
		if e.complexity.VioCodewfdmSumFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmSumFields.FkjeMin(childComplexity), true

	case "VIO_CODEWFDM_sum_fields.WFJFS":
		if e.complexity.VioCodewfdmSumFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmSumFields.Wfjfs(childComplexity), true

	case "VIO_CODEWFDM_var_pop_fields.FKJE_MAX":
		if e.complexity.VioCodewfdmVarPopFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmVarPopFields.FkjeMax(childComplexity), true

	case "VIO_CODEWFDM_var_pop_fields.FKJE_MIN":
		if e.complexity.VioCodewfdmVarPopFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmVarPopFields.FkjeMin(childComplexity), true

	case "VIO_CODEWFDM_var_pop_fields.WFJFS":
		if e.complexity.VioCodewfdmVarPopFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmVarPopFields.Wfjfs(childComplexity), true

	case "VIO_CODEWFDM_var_samp_fields.FKJE_MAX":
		if e.complexity.VioCodewfdmVarSampFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmVarSampFields.FkjeMax(childComplexity), true

	case "VIO_CODEWFDM_var_samp_fields.FKJE_MIN":
		if e.complexity.VioCodewfdmVarSampFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmVarSampFields.FkjeMin(childComplexity), true

	case "VIO_CODEWFDM_var_samp_fields.WFJFS":
		if e.complexity.VioCodewfdmVarSampFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmVarSampFields.Wfjfs(childComplexity), true

	case "VIO_CODEWFDM_variance_fields.FKJE_MAX":
		if e.complexity.VioCodewfdmVarianceFields.FkjeMax == nil {
			break
		}

		return e.complexity.VioCodewfdmVarianceFields.FkjeMax(childComplexity), true

	case "VIO_CODEWFDM_variance_fields.FKJE_MIN":
		if e.complexity.VioCodewfdmVarianceFields.FkjeMin == nil {
			break
		}

		return e.complexity.VioCodewfdmVarianceFields.FkjeMin(childComplexity), true

	case "VIO_CODEWFDM_variance_fields.WFJFS":
		if e.complexity.VioCodewfdmVarianceFields.Wfjfs == nil {
			break
		}

		return e.complexity.VioCodewfdmVarianceFields.Wfjfs(childComplexity), true

	case "app_enforcement.coordinate":
		if e.complexity.AppEnforcement.Coordinate == nil {
			break
		}

		return e.complexity.AppEnforcement.Coordinate(childComplexity), true

	case "app_enforcement.created_at":
		if e.complexity.AppEnforcement.CreatedAt == nil {
			break
		}

		return e.complexity.AppEnforcement.CreatedAt(childComplexity), true

	case "app_enforcement.created_by":
		if e.complexity.AppEnforcement.CreatedBy == nil {
			break
		}

		return e.complexity.AppEnforcement.CreatedBy(childComplexity), true

	case "app_enforcement.deleted_at":
		if e.complexity.AppEnforcement.DeletedAt == nil {
			break
		}

		return e.complexity.AppEnforcement.DeletedAt(childComplexity), true

	case "app_enforcement.deleted_by":
		if e.complexity.AppEnforcement.DeletedBy == nil {
			break
		}

		return e.complexity.AppEnforcement.DeletedBy(childComplexity), true

	case "app_enforcement.edit_text":
		if e.complexity.AppEnforcement.EditText == nil {
			break
		}

		return e.complexity.AppEnforcement.EditText(childComplexity), true

	case "app_enforcement.enterprise_type":
		if e.complexity.AppEnforcement.EnterpriseType == nil {
			break
		}

		return e.complexity.AppEnforcement.EnterpriseType(childComplexity), true

	case "app_enforcement.id":
		if e.complexity.AppEnforcement.ID == nil {
			break
		}

		return e.complexity.AppEnforcement.ID(childComplexity), true

	case "app_enforcement.illegal_photo_id":
		if e.complexity.AppEnforcement.IllegalPhotoID == nil {
			break
		}

		return e.complexity.AppEnforcement.IllegalPhotoID(childComplexity), true

	case "app_enforcement.location_description":
		if e.complexity.AppEnforcement.LocationDescription == nil {
			break
		}

		return e.complexity.AppEnforcement.LocationDescription(childComplexity), true

	case "app_enforcement.operation_user":
		if e.complexity.AppEnforcement.OperationUser == nil {
			break
		}

		return e.complexity.AppEnforcement.OperationUser(childComplexity), true

	case "app_enforcement.picket_status":
		if e.complexity.AppEnforcement.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcement.PicketStatus(childComplexity), true

	case "app_enforcement.updated_at":
		if e.complexity.AppEnforcement.UpdatedAt == nil {
			break
		}

		return e.complexity.AppEnforcement.UpdatedAt(childComplexity), true

	case "app_enforcement.updated_by":
		if e.complexity.AppEnforcement.UpdatedBy == nil {
			break
		}

		return e.complexity.AppEnforcement.UpdatedBy(childComplexity), true

	case "app_enforcement.vehicle_id":
		if e.complexity.AppEnforcement.VehicleID == nil {
			break
		}

		return e.complexity.AppEnforcement.VehicleID(childComplexity), true

	case "app_enforcement.violation_detail_id":
		if e.complexity.AppEnforcement.ViolationDetailID == nil {
			break
		}

		return e.complexity.AppEnforcement.ViolationDetailID(childComplexity), true

	case "app_enforcement_aggregate.aggregate":
		if e.complexity.AppEnforcementAggregate.Aggregate == nil {
			break
		}

		return e.complexity.AppEnforcementAggregate.Aggregate(childComplexity), true

	case "app_enforcement_aggregate.nodes":
		if e.complexity.AppEnforcementAggregate.Nodes == nil {
			break
		}

		return e.complexity.AppEnforcementAggregate.Nodes(childComplexity), true

	case "app_enforcement_aggregate_fields.avg":
		if e.complexity.AppEnforcementAggregateFields.Avg == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.Avg(childComplexity), true

	case "app_enforcement_aggregate_fields.count":
		if e.complexity.AppEnforcementAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_app_enforcement_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AppEnforcementAggregateFields.Count(childComplexity, args["columns"].([]model.AppEnforcementSelectColumn), args["distinct"].(*bool)), true

	case "app_enforcement_aggregate_fields.max":
		if e.complexity.AppEnforcementAggregateFields.Max == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.Max(childComplexity), true

	case "app_enforcement_aggregate_fields.min":
		if e.complexity.AppEnforcementAggregateFields.Min == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.Min(childComplexity), true

	case "app_enforcement_aggregate_fields.stddev":
		if e.complexity.AppEnforcementAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.Stddev(childComplexity), true

	case "app_enforcement_aggregate_fields.stddev_pop":
		if e.complexity.AppEnforcementAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.StddevPop(childComplexity), true

	case "app_enforcement_aggregate_fields.stddev_samp":
		if e.complexity.AppEnforcementAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.StddevSamp(childComplexity), true

	case "app_enforcement_aggregate_fields.sum":
		if e.complexity.AppEnforcementAggregateFields.Sum == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.Sum(childComplexity), true

	case "app_enforcement_aggregate_fields.var_pop":
		if e.complexity.AppEnforcementAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.VarPop(childComplexity), true

	case "app_enforcement_aggregate_fields.var_samp":
		if e.complexity.AppEnforcementAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.VarSamp(childComplexity), true

	case "app_enforcement_aggregate_fields.variance":
		if e.complexity.AppEnforcementAggregateFields.Variance == nil {
			break
		}

		return e.complexity.AppEnforcementAggregateFields.Variance(childComplexity), true

	case "app_enforcement_avg_fields.id":
		if e.complexity.AppEnforcementAvgFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementAvgFields.ID(childComplexity), true

	case "app_enforcement_avg_fields.picket_status":
		if e.complexity.AppEnforcementAvgFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementAvgFields.PicketStatus(childComplexity), true

	case "app_enforcement_max_fields.created_at":
		if e.complexity.AppEnforcementMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.CreatedAt(childComplexity), true

	case "app_enforcement_max_fields.created_by":
		if e.complexity.AppEnforcementMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.CreatedBy(childComplexity), true

	case "app_enforcement_max_fields.deleted_at":
		if e.complexity.AppEnforcementMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.DeletedAt(childComplexity), true

	case "app_enforcement_max_fields.deleted_by":
		if e.complexity.AppEnforcementMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.DeletedBy(childComplexity), true

	case "app_enforcement_max_fields.edit_text":
		if e.complexity.AppEnforcementMaxFields.EditText == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.EditText(childComplexity), true

	case "app_enforcement_max_fields.enterprise_type":
		if e.complexity.AppEnforcementMaxFields.EnterpriseType == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.EnterpriseType(childComplexity), true

	case "app_enforcement_max_fields.id":
		if e.complexity.AppEnforcementMaxFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.ID(childComplexity), true

	case "app_enforcement_max_fields.illegal_photo_id":
		if e.complexity.AppEnforcementMaxFields.IllegalPhotoID == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.IllegalPhotoID(childComplexity), true

	case "app_enforcement_max_fields.location_description":
		if e.complexity.AppEnforcementMaxFields.LocationDescription == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.LocationDescription(childComplexity), true

	case "app_enforcement_max_fields.operation_user":
		if e.complexity.AppEnforcementMaxFields.OperationUser == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.OperationUser(childComplexity), true

	case "app_enforcement_max_fields.picket_status":
		if e.complexity.AppEnforcementMaxFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.PicketStatus(childComplexity), true

	case "app_enforcement_max_fields.updated_at":
		if e.complexity.AppEnforcementMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.UpdatedAt(childComplexity), true

	case "app_enforcement_max_fields.updated_by":
		if e.complexity.AppEnforcementMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.UpdatedBy(childComplexity), true

	case "app_enforcement_max_fields.vehicle_id":
		if e.complexity.AppEnforcementMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.VehicleID(childComplexity), true

	case "app_enforcement_max_fields.violation_detail_id":
		if e.complexity.AppEnforcementMaxFields.ViolationDetailID == nil {
			break
		}

		return e.complexity.AppEnforcementMaxFields.ViolationDetailID(childComplexity), true

	case "app_enforcement_min_fields.created_at":
		if e.complexity.AppEnforcementMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.CreatedAt(childComplexity), true

	case "app_enforcement_min_fields.created_by":
		if e.complexity.AppEnforcementMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.CreatedBy(childComplexity), true

	case "app_enforcement_min_fields.deleted_at":
		if e.complexity.AppEnforcementMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.DeletedAt(childComplexity), true

	case "app_enforcement_min_fields.deleted_by":
		if e.complexity.AppEnforcementMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.DeletedBy(childComplexity), true

	case "app_enforcement_min_fields.edit_text":
		if e.complexity.AppEnforcementMinFields.EditText == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.EditText(childComplexity), true

	case "app_enforcement_min_fields.enterprise_type":
		if e.complexity.AppEnforcementMinFields.EnterpriseType == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.EnterpriseType(childComplexity), true

	case "app_enforcement_min_fields.id":
		if e.complexity.AppEnforcementMinFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.ID(childComplexity), true

	case "app_enforcement_min_fields.illegal_photo_id":
		if e.complexity.AppEnforcementMinFields.IllegalPhotoID == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.IllegalPhotoID(childComplexity), true

	case "app_enforcement_min_fields.location_description":
		if e.complexity.AppEnforcementMinFields.LocationDescription == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.LocationDescription(childComplexity), true

	case "app_enforcement_min_fields.operation_user":
		if e.complexity.AppEnforcementMinFields.OperationUser == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.OperationUser(childComplexity), true

	case "app_enforcement_min_fields.picket_status":
		if e.complexity.AppEnforcementMinFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.PicketStatus(childComplexity), true

	case "app_enforcement_min_fields.updated_at":
		if e.complexity.AppEnforcementMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.UpdatedAt(childComplexity), true

	case "app_enforcement_min_fields.updated_by":
		if e.complexity.AppEnforcementMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.UpdatedBy(childComplexity), true

	case "app_enforcement_min_fields.vehicle_id":
		if e.complexity.AppEnforcementMinFields.VehicleID == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.VehicleID(childComplexity), true

	case "app_enforcement_min_fields.violation_detail_id":
		if e.complexity.AppEnforcementMinFields.ViolationDetailID == nil {
			break
		}

		return e.complexity.AppEnforcementMinFields.ViolationDetailID(childComplexity), true

	case "app_enforcement_mutation_response.affected_rows":
		if e.complexity.AppEnforcementMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.AppEnforcementMutationResponse.AffectedRows(childComplexity), true

	case "app_enforcement_mutation_response.returning":
		if e.complexity.AppEnforcementMutationResponse.Returning == nil {
			break
		}

		return e.complexity.AppEnforcementMutationResponse.Returning(childComplexity), true

	case "app_enforcement_stddev_fields.id":
		if e.complexity.AppEnforcementStddevFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementStddevFields.ID(childComplexity), true

	case "app_enforcement_stddev_fields.picket_status":
		if e.complexity.AppEnforcementStddevFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementStddevFields.PicketStatus(childComplexity), true

	case "app_enforcement_stddev_pop_fields.id":
		if e.complexity.AppEnforcementStddevPopFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementStddevPopFields.ID(childComplexity), true

	case "app_enforcement_stddev_pop_fields.picket_status":
		if e.complexity.AppEnforcementStddevPopFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementStddevPopFields.PicketStatus(childComplexity), true

	case "app_enforcement_stddev_samp_fields.id":
		if e.complexity.AppEnforcementStddevSampFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementStddevSampFields.ID(childComplexity), true

	case "app_enforcement_stddev_samp_fields.picket_status":
		if e.complexity.AppEnforcementStddevSampFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementStddevSampFields.PicketStatus(childComplexity), true

	case "app_enforcement_sum_fields.id":
		if e.complexity.AppEnforcementSumFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementSumFields.ID(childComplexity), true

	case "app_enforcement_sum_fields.picket_status":
		if e.complexity.AppEnforcementSumFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementSumFields.PicketStatus(childComplexity), true

	case "app_enforcement_var_pop_fields.id":
		if e.complexity.AppEnforcementVarPopFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementVarPopFields.ID(childComplexity), true

	case "app_enforcement_var_pop_fields.picket_status":
		if e.complexity.AppEnforcementVarPopFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementVarPopFields.PicketStatus(childComplexity), true

	case "app_enforcement_var_samp_fields.id":
		if e.complexity.AppEnforcementVarSampFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementVarSampFields.ID(childComplexity), true

	case "app_enforcement_var_samp_fields.picket_status":
		if e.complexity.AppEnforcementVarSampFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementVarSampFields.PicketStatus(childComplexity), true

	case "app_enforcement_variance_fields.id":
		if e.complexity.AppEnforcementVarianceFields.ID == nil {
			break
		}

		return e.complexity.AppEnforcementVarianceFields.ID(childComplexity), true

	case "app_enforcement_variance_fields.picket_status":
		if e.complexity.AppEnforcementVarianceFields.PicketStatus == nil {
			break
		}

		return e.complexity.AppEnforcementVarianceFields.PicketStatus(childComplexity), true

	case "dispute_violation_record.agent_id_number":
		if e.complexity.DisputeViolationRecord.AgentIDNumber == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.AgentIDNumber(childComplexity), true

	case "dispute_violation_record.approve_state":
		if e.complexity.DisputeViolationRecord.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.ApproveState(childComplexity), true

	case "dispute_violation_record.business_license":
		if e.complexity.DisputeViolationRecord.BusinessLicense == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.BusinessLicense(childComplexity), true

	case "dispute_violation_record.contact_address":
		if e.complexity.DisputeViolationRecord.ContactAddress == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.ContactAddress(childComplexity), true

	case "dispute_violation_record.created_at":
		if e.complexity.DisputeViolationRecord.CreatedAt == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.CreatedAt(childComplexity), true

	case "dispute_violation_record.created_by":
		if e.complexity.DisputeViolationRecord.CreatedBy == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.CreatedBy(childComplexity), true

	case "dispute_violation_record.deleted_at":
		if e.complexity.DisputeViolationRecord.DeletedAt == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.DeletedAt(childComplexity), true

	case "dispute_violation_record.deleted_by":
		if e.complexity.DisputeViolationRecord.DeletedBy == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.DeletedBy(childComplexity), true

	case "dispute_violation_record.dispute_violation_id":
		if e.complexity.DisputeViolationRecord.DisputeViolationID == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.DisputeViolationID(childComplexity), true

	case "dispute_violation_record.driver_license":
		if e.complexity.DisputeViolationRecord.DriverLicense == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.DriverLicense(childComplexity), true

	case "dispute_violation_record.driving_license":
		if e.complexity.DisputeViolationRecord.DrivingLicense == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.DrivingLicense(childComplexity), true

	case "dispute_violation_record.driving_log":
		if e.complexity.DisputeViolationRecord.DrivingLog == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.DrivingLog(childComplexity), true

	case "dispute_violation_record.id":
		if e.complexity.DisputeViolationRecord.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.ID(childComplexity), true

	case "dispute_violation_record.id_card":
		if e.complexity.DisputeViolationRecord.IDCard == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.IDCard(childComplexity), true

	case "dispute_violation_record.is_delete":
		if e.complexity.DisputeViolationRecord.IsDelete == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.IsDelete(childComplexity), true

	case "dispute_violation_record.labor_contract":
		if e.complexity.DisputeViolationRecord.LaborContract == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.LaborContract(childComplexity), true

	case "dispute_violation_record.legal_person_id_number":
		if e.complexity.DisputeViolationRecord.LegalPersonIDNumber == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.LegalPersonIDNumber(childComplexity), true

	case "dispute_violation_record.organization_code":
		if e.complexity.DisputeViolationRecord.OrganizationCode == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.OrganizationCode(childComplexity), true

	case "dispute_violation_record.other_evidence":
		if e.complexity.DisputeViolationRecord.OtherEvidence == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.OtherEvidence(childComplexity), true

	case "dispute_violation_record.pic_evidence":
		if e.complexity.DisputeViolationRecord.PicEvidence == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.PicEvidence(childComplexity), true

	case "dispute_violation_record.statement":
		if e.complexity.DisputeViolationRecord.Statement == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.Statement(childComplexity), true

	case "dispute_violation_record.update_time_in":
		if e.complexity.DisputeViolationRecord.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.UpdateTimeIn(childComplexity), true

	case "dispute_violation_record.updated_at":
		if e.complexity.DisputeViolationRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.UpdatedAt(childComplexity), true

	case "dispute_violation_record.updated_by":
		if e.complexity.DisputeViolationRecord.UpdatedBy == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.UpdatedBy(childComplexity), true

	case "dispute_violation_record.vehicle_manager_id_card":
		if e.complexity.DisputeViolationRecord.VehicleManagerIDCard == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.VehicleManagerIDCard(childComplexity), true

	case "dispute_violation_record.violation_detail_id":
		if e.complexity.DisputeViolationRecord.ViolationDetailID == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.ViolationDetailID(childComplexity), true

	case "dispute_violation_record.witness":
		if e.complexity.DisputeViolationRecord.Witness == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.Witness(childComplexity), true

	case "dispute_violation_record.written_application_materials":
		if e.complexity.DisputeViolationRecord.WrittenApplicationMaterials == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.WrittenApplicationMaterials(childComplexity), true

	case "dispute_violation_record_aggregate.aggregate":
		if e.complexity.DisputeViolationRecordAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregate.Aggregate(childComplexity), true

	case "dispute_violation_record_aggregate.nodes":
		if e.complexity.DisputeViolationRecordAggregate.Nodes == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregate.Nodes(childComplexity), true

	case "dispute_violation_record_aggregate_fields.avg":
		if e.complexity.DisputeViolationRecordAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.Avg(childComplexity), true

	case "dispute_violation_record_aggregate_fields.count":
		if e.complexity.DisputeViolationRecordAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_dispute_violation_record_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DisputeViolationRecordAggregateFields.Count(childComplexity, args["columns"].([]model.DisputeViolationRecordSelectColumn), args["distinct"].(*bool)), true

	case "dispute_violation_record_aggregate_fields.max":
		if e.complexity.DisputeViolationRecordAggregateFields.Max == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.Max(childComplexity), true

	case "dispute_violation_record_aggregate_fields.min":
		if e.complexity.DisputeViolationRecordAggregateFields.Min == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.Min(childComplexity), true

	case "dispute_violation_record_aggregate_fields.stddev":
		if e.complexity.DisputeViolationRecordAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.Stddev(childComplexity), true

	case "dispute_violation_record_aggregate_fields.stddev_pop":
		if e.complexity.DisputeViolationRecordAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.StddevPop(childComplexity), true

	case "dispute_violation_record_aggregate_fields.stddev_samp":
		if e.complexity.DisputeViolationRecordAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.StddevSamp(childComplexity), true

	case "dispute_violation_record_aggregate_fields.sum":
		if e.complexity.DisputeViolationRecordAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.Sum(childComplexity), true

	case "dispute_violation_record_aggregate_fields.var_pop":
		if e.complexity.DisputeViolationRecordAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.VarPop(childComplexity), true

	case "dispute_violation_record_aggregate_fields.var_samp":
		if e.complexity.DisputeViolationRecordAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.VarSamp(childComplexity), true

	case "dispute_violation_record_aggregate_fields.variance":
		if e.complexity.DisputeViolationRecordAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.Variance(childComplexity), true

	case "dispute_violation_record_avg_fields.approve_state":
		if e.complexity.DisputeViolationRecordAvgFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAvgFields.ApproveState(childComplexity), true

	case "dispute_violation_record_avg_fields.id":
		if e.complexity.DisputeViolationRecordAvgFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAvgFields.ID(childComplexity), true

	case "dispute_violation_record_log.approver":
		if e.complexity.DisputeViolationRecordLog.Approver == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.Approver(childComplexity), true

	case "dispute_violation_record_log.dispute_violation_id":
		if e.complexity.DisputeViolationRecordLog.DisputeViolationID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.DisputeViolationID(childComplexity), true

	case "dispute_violation_record_log.dispute_violation_log_id":
		if e.complexity.DisputeViolationRecordLog.DisputeViolationLogID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.DisputeViolationLogID(childComplexity), true

	case "dispute_violation_record_log.id":
		if e.complexity.DisputeViolationRecordLog.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.ID(childComplexity), true

	case "dispute_violation_record_log.review_action_name":
		if e.complexity.DisputeViolationRecordLog.ReviewActionName == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.ReviewActionName(childComplexity), true

	case "dispute_violation_record_log.review_opinion":
		if e.complexity.DisputeViolationRecordLog.ReviewOpinion == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.ReviewOpinion(childComplexity), true

	case "dispute_violation_record_log.review_result":
		if e.complexity.DisputeViolationRecordLog.ReviewResult == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.ReviewResult(childComplexity), true

	case "dispute_violation_record_log.review_time":
		if e.complexity.DisputeViolationRecordLog.ReviewTime == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.ReviewTime(childComplexity), true

	case "dispute_violation_record_log.reviewer":
		if e.complexity.DisputeViolationRecordLog.Reviewer == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.Reviewer(childComplexity), true

	case "dispute_violation_record_log.update_time_in":
		if e.complexity.DisputeViolationRecordLog.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.UpdateTimeIn(childComplexity), true

	case "dispute_violation_record_log_aggregate.aggregate":
		if e.complexity.DisputeViolationRecordLogAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregate.Aggregate(childComplexity), true

	case "dispute_violation_record_log_aggregate.nodes":
		if e.complexity.DisputeViolationRecordLogAggregate.Nodes == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregate.Nodes(childComplexity), true

	case "dispute_violation_record_log_aggregate_fields.avg":
		if e.complexity.DisputeViolationRecordLogAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.Avg(childComplexity), true

	case "dispute_violation_record_log_aggregate_fields.count":
		if e.complexity.DisputeViolationRecordLogAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_dispute_violation_record_log_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.Count(childComplexity, args["columns"].([]model.DisputeViolationRecordLogSelectColumn), args["distinct"].(*bool)), true

	case "dispute_violation_record_log_aggregate_fields.max":
		if e.complexity.DisputeViolationRecordLogAggregateFields.Max == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.Max(childComplexity), true

	case "dispute_violation_record_log_aggregate_fields.min":
		if e.complexity.DisputeViolationRecordLogAggregateFields.Min == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.Min(childComplexity), true

	case "dispute_violation_record_log_aggregate_fields.stddev":
		if e.complexity.DisputeViolationRecordLogAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.Stddev(childComplexity), true

	case "dispute_violation_record_log_aggregate_fields.stddev_pop":
		if e.complexity.DisputeViolationRecordLogAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.StddevPop(childComplexity), true

	case "dispute_violation_record_log_aggregate_fields.stddev_samp":
		if e.complexity.DisputeViolationRecordLogAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.StddevSamp(childComplexity), true

	case "dispute_violation_record_log_aggregate_fields.sum":
		if e.complexity.DisputeViolationRecordLogAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.Sum(childComplexity), true

	case "dispute_violation_record_log_aggregate_fields.var_pop":
		if e.complexity.DisputeViolationRecordLogAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.VarPop(childComplexity), true

	case "dispute_violation_record_log_aggregate_fields.var_samp":
		if e.complexity.DisputeViolationRecordLogAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.VarSamp(childComplexity), true

	case "dispute_violation_record_log_aggregate_fields.variance":
		if e.complexity.DisputeViolationRecordLogAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.Variance(childComplexity), true

	case "dispute_violation_record_log_avg_fields.id":
		if e.complexity.DisputeViolationRecordLogAvgFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAvgFields.ID(childComplexity), true

	case "dispute_violation_record_log_max_fields.approver":
		if e.complexity.DisputeViolationRecordLogMaxFields.Approver == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.Approver(childComplexity), true

	case "dispute_violation_record_log_max_fields.dispute_violation_id":
		if e.complexity.DisputeViolationRecordLogMaxFields.DisputeViolationID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.DisputeViolationID(childComplexity), true

	case "dispute_violation_record_log_max_fields.dispute_violation_log_id":
		if e.complexity.DisputeViolationRecordLogMaxFields.DisputeViolationLogID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.DisputeViolationLogID(childComplexity), true

	case "dispute_violation_record_log_max_fields.id":
		if e.complexity.DisputeViolationRecordLogMaxFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.ID(childComplexity), true

	case "dispute_violation_record_log_max_fields.review_action_name":
		if e.complexity.DisputeViolationRecordLogMaxFields.ReviewActionName == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.ReviewActionName(childComplexity), true

	case "dispute_violation_record_log_max_fields.review_opinion":
		if e.complexity.DisputeViolationRecordLogMaxFields.ReviewOpinion == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.ReviewOpinion(childComplexity), true

	case "dispute_violation_record_log_max_fields.review_result":
		if e.complexity.DisputeViolationRecordLogMaxFields.ReviewResult == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.ReviewResult(childComplexity), true

	case "dispute_violation_record_log_max_fields.review_time":
		if e.complexity.DisputeViolationRecordLogMaxFields.ReviewTime == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.ReviewTime(childComplexity), true

	case "dispute_violation_record_log_max_fields.reviewer":
		if e.complexity.DisputeViolationRecordLogMaxFields.Reviewer == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.Reviewer(childComplexity), true

	case "dispute_violation_record_log_max_fields.update_time_in":
		if e.complexity.DisputeViolationRecordLogMaxFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.UpdateTimeIn(childComplexity), true

	case "dispute_violation_record_log_min_fields.approver":
		if e.complexity.DisputeViolationRecordLogMinFields.Approver == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.Approver(childComplexity), true

	case "dispute_violation_record_log_min_fields.dispute_violation_id":
		if e.complexity.DisputeViolationRecordLogMinFields.DisputeViolationID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.DisputeViolationID(childComplexity), true

	case "dispute_violation_record_log_min_fields.dispute_violation_log_id":
		if e.complexity.DisputeViolationRecordLogMinFields.DisputeViolationLogID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.DisputeViolationLogID(childComplexity), true

	case "dispute_violation_record_log_min_fields.id":
		if e.complexity.DisputeViolationRecordLogMinFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.ID(childComplexity), true

	case "dispute_violation_record_log_min_fields.review_action_name":
		if e.complexity.DisputeViolationRecordLogMinFields.ReviewActionName == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.ReviewActionName(childComplexity), true

	case "dispute_violation_record_log_min_fields.review_opinion":
		if e.complexity.DisputeViolationRecordLogMinFields.ReviewOpinion == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.ReviewOpinion(childComplexity), true

	case "dispute_violation_record_log_min_fields.review_result":
		if e.complexity.DisputeViolationRecordLogMinFields.ReviewResult == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.ReviewResult(childComplexity), true

	case "dispute_violation_record_log_min_fields.review_time":
		if e.complexity.DisputeViolationRecordLogMinFields.ReviewTime == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.ReviewTime(childComplexity), true

	case "dispute_violation_record_log_min_fields.reviewer":
		if e.complexity.DisputeViolationRecordLogMinFields.Reviewer == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.Reviewer(childComplexity), true

	case "dispute_violation_record_log_min_fields.update_time_in":
		if e.complexity.DisputeViolationRecordLogMinFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.UpdateTimeIn(childComplexity), true

	case "dispute_violation_record_log_mutation_response.affected_rows":
		if e.complexity.DisputeViolationRecordLogMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMutationResponse.AffectedRows(childComplexity), true

	case "dispute_violation_record_log_mutation_response.returning":
		if e.complexity.DisputeViolationRecordLogMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMutationResponse.Returning(childComplexity), true

	case "dispute_violation_record_log_stddev_fields.id":
		if e.complexity.DisputeViolationRecordLogStddevFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogStddevFields.ID(childComplexity), true

	case "dispute_violation_record_log_stddev_pop_fields.id":
		if e.complexity.DisputeViolationRecordLogStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogStddevPopFields.ID(childComplexity), true

	case "dispute_violation_record_log_stddev_samp_fields.id":
		if e.complexity.DisputeViolationRecordLogStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogStddevSampFields.ID(childComplexity), true

	case "dispute_violation_record_log_sum_fields.id":
		if e.complexity.DisputeViolationRecordLogSumFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogSumFields.ID(childComplexity), true

	case "dispute_violation_record_log_var_pop_fields.id":
		if e.complexity.DisputeViolationRecordLogVarPopFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogVarPopFields.ID(childComplexity), true

	case "dispute_violation_record_log_var_samp_fields.id":
		if e.complexity.DisputeViolationRecordLogVarSampFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogVarSampFields.ID(childComplexity), true

	case "dispute_violation_record_log_variance_fields.id":
		if e.complexity.DisputeViolationRecordLogVarianceFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogVarianceFields.ID(childComplexity), true

	case "dispute_violation_record_max_fields.agent_id_number":
		if e.complexity.DisputeViolationRecordMaxFields.AgentIDNumber == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.AgentIDNumber(childComplexity), true

	case "dispute_violation_record_max_fields.approve_state":
		if e.complexity.DisputeViolationRecordMaxFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.ApproveState(childComplexity), true

	case "dispute_violation_record_max_fields.business_license":
		if e.complexity.DisputeViolationRecordMaxFields.BusinessLicense == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.BusinessLicense(childComplexity), true

	case "dispute_violation_record_max_fields.contact_address":
		if e.complexity.DisputeViolationRecordMaxFields.ContactAddress == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.ContactAddress(childComplexity), true

	case "dispute_violation_record_max_fields.created_at":
		if e.complexity.DisputeViolationRecordMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.CreatedAt(childComplexity), true

	case "dispute_violation_record_max_fields.created_by":
		if e.complexity.DisputeViolationRecordMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.CreatedBy(childComplexity), true

	case "dispute_violation_record_max_fields.deleted_at":
		if e.complexity.DisputeViolationRecordMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.DeletedAt(childComplexity), true

	case "dispute_violation_record_max_fields.deleted_by":
		if e.complexity.DisputeViolationRecordMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.DeletedBy(childComplexity), true

	case "dispute_violation_record_max_fields.dispute_violation_id":
		if e.complexity.DisputeViolationRecordMaxFields.DisputeViolationID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.DisputeViolationID(childComplexity), true

	case "dispute_violation_record_max_fields.driver_license":
		if e.complexity.DisputeViolationRecordMaxFields.DriverLicense == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.DriverLicense(childComplexity), true

	case "dispute_violation_record_max_fields.driving_license":
		if e.complexity.DisputeViolationRecordMaxFields.DrivingLicense == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.DrivingLicense(childComplexity), true

	case "dispute_violation_record_max_fields.driving_log":
		if e.complexity.DisputeViolationRecordMaxFields.DrivingLog == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.DrivingLog(childComplexity), true

	case "dispute_violation_record_max_fields.id":
		if e.complexity.DisputeViolationRecordMaxFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.ID(childComplexity), true

	case "dispute_violation_record_max_fields.id_card":
		if e.complexity.DisputeViolationRecordMaxFields.IDCard == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.IDCard(childComplexity), true

	case "dispute_violation_record_max_fields.labor_contract":
		if e.complexity.DisputeViolationRecordMaxFields.LaborContract == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.LaborContract(childComplexity), true

	case "dispute_violation_record_max_fields.legal_person_id_number":
		if e.complexity.DisputeViolationRecordMaxFields.LegalPersonIDNumber == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.LegalPersonIDNumber(childComplexity), true

	case "dispute_violation_record_max_fields.organization_code":
		if e.complexity.DisputeViolationRecordMaxFields.OrganizationCode == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.OrganizationCode(childComplexity), true

	case "dispute_violation_record_max_fields.pic_evidence":
		if e.complexity.DisputeViolationRecordMaxFields.PicEvidence == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.PicEvidence(childComplexity), true

	case "dispute_violation_record_max_fields.statement":
		if e.complexity.DisputeViolationRecordMaxFields.Statement == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.Statement(childComplexity), true

	case "dispute_violation_record_max_fields.update_time_in":
		if e.complexity.DisputeViolationRecordMaxFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.UpdateTimeIn(childComplexity), true

	case "dispute_violation_record_max_fields.updated_at":
		if e.complexity.DisputeViolationRecordMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.UpdatedAt(childComplexity), true

	case "dispute_violation_record_max_fields.updated_by":
		if e.complexity.DisputeViolationRecordMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.UpdatedBy(childComplexity), true

	case "dispute_violation_record_max_fields.vehicle_manager_id_card":
		if e.complexity.DisputeViolationRecordMaxFields.VehicleManagerIDCard == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.VehicleManagerIDCard(childComplexity), true

	case "dispute_violation_record_max_fields.violation_detail_id":
		if e.complexity.DisputeViolationRecordMaxFields.ViolationDetailID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.ViolationDetailID(childComplexity), true

	case "dispute_violation_record_max_fields.witness":
		if e.complexity.DisputeViolationRecordMaxFields.Witness == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.Witness(childComplexity), true

	case "dispute_violation_record_max_fields.written_application_materials":
		if e.complexity.DisputeViolationRecordMaxFields.WrittenApplicationMaterials == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.WrittenApplicationMaterials(childComplexity), true

	case "dispute_violation_record_min_fields.agent_id_number":
		if e.complexity.DisputeViolationRecordMinFields.AgentIDNumber == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.AgentIDNumber(childComplexity), true

	case "dispute_violation_record_min_fields.approve_state":
		if e.complexity.DisputeViolationRecordMinFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.ApproveState(childComplexity), true

	case "dispute_violation_record_min_fields.business_license":
		if e.complexity.DisputeViolationRecordMinFields.BusinessLicense == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.BusinessLicense(childComplexity), true

	case "dispute_violation_record_min_fields.contact_address":
		if e.complexity.DisputeViolationRecordMinFields.ContactAddress == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.ContactAddress(childComplexity), true

	case "dispute_violation_record_min_fields.created_at":
		if e.complexity.DisputeViolationRecordMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.CreatedAt(childComplexity), true

	case "dispute_violation_record_min_fields.created_by":
		if e.complexity.DisputeViolationRecordMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.CreatedBy(childComplexity), true

	case "dispute_violation_record_min_fields.deleted_at":
		if e.complexity.DisputeViolationRecordMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.DeletedAt(childComplexity), true

	case "dispute_violation_record_min_fields.deleted_by":
		if e.complexity.DisputeViolationRecordMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.DeletedBy(childComplexity), true

	case "dispute_violation_record_min_fields.dispute_violation_id":
		if e.complexity.DisputeViolationRecordMinFields.DisputeViolationID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.DisputeViolationID(childComplexity), true

	case "dispute_violation_record_min_fields.driver_license":
		if e.complexity.DisputeViolationRecordMinFields.DriverLicense == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.DriverLicense(childComplexity), true

	case "dispute_violation_record_min_fields.driving_license":
		if e.complexity.DisputeViolationRecordMinFields.DrivingLicense == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.DrivingLicense(childComplexity), true

	case "dispute_violation_record_min_fields.driving_log":
		if e.complexity.DisputeViolationRecordMinFields.DrivingLog == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.DrivingLog(childComplexity), true

	case "dispute_violation_record_min_fields.id":
		if e.complexity.DisputeViolationRecordMinFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.ID(childComplexity), true

	case "dispute_violation_record_min_fields.id_card":
		if e.complexity.DisputeViolationRecordMinFields.IDCard == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.IDCard(childComplexity), true

	case "dispute_violation_record_min_fields.labor_contract":
		if e.complexity.DisputeViolationRecordMinFields.LaborContract == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.LaborContract(childComplexity), true

	case "dispute_violation_record_min_fields.legal_person_id_number":
		if e.complexity.DisputeViolationRecordMinFields.LegalPersonIDNumber == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.LegalPersonIDNumber(childComplexity), true

	case "dispute_violation_record_min_fields.organization_code":
		if e.complexity.DisputeViolationRecordMinFields.OrganizationCode == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.OrganizationCode(childComplexity), true

	case "dispute_violation_record_min_fields.pic_evidence":
		if e.complexity.DisputeViolationRecordMinFields.PicEvidence == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.PicEvidence(childComplexity), true

	case "dispute_violation_record_min_fields.statement":
		if e.complexity.DisputeViolationRecordMinFields.Statement == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.Statement(childComplexity), true

	case "dispute_violation_record_min_fields.update_time_in":
		if e.complexity.DisputeViolationRecordMinFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.UpdateTimeIn(childComplexity), true

	case "dispute_violation_record_min_fields.updated_at":
		if e.complexity.DisputeViolationRecordMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.UpdatedAt(childComplexity), true

	case "dispute_violation_record_min_fields.updated_by":
		if e.complexity.DisputeViolationRecordMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.UpdatedBy(childComplexity), true

	case "dispute_violation_record_min_fields.vehicle_manager_id_card":
		if e.complexity.DisputeViolationRecordMinFields.VehicleManagerIDCard == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.VehicleManagerIDCard(childComplexity), true

	case "dispute_violation_record_min_fields.violation_detail_id":
		if e.complexity.DisputeViolationRecordMinFields.ViolationDetailID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.ViolationDetailID(childComplexity), true

	case "dispute_violation_record_min_fields.witness":
		if e.complexity.DisputeViolationRecordMinFields.Witness == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.Witness(childComplexity), true

	case "dispute_violation_record_min_fields.written_application_materials":
		if e.complexity.DisputeViolationRecordMinFields.WrittenApplicationMaterials == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.WrittenApplicationMaterials(childComplexity), true

	case "dispute_violation_record_mutation_response.affected_rows":
		if e.complexity.DisputeViolationRecordMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMutationResponse.AffectedRows(childComplexity), true

	case "dispute_violation_record_mutation_response.returning":
		if e.complexity.DisputeViolationRecordMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMutationResponse.Returning(childComplexity), true

	case "dispute_violation_record_stddev_fields.approve_state":
		if e.complexity.DisputeViolationRecordStddevFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordStddevFields.ApproveState(childComplexity), true

	case "dispute_violation_record_stddev_fields.id":
		if e.complexity.DisputeViolationRecordStddevFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordStddevFields.ID(childComplexity), true

	case "dispute_violation_record_stddev_pop_fields.approve_state":
		if e.complexity.DisputeViolationRecordStddevPopFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordStddevPopFields.ApproveState(childComplexity), true

	case "dispute_violation_record_stddev_pop_fields.id":
		if e.complexity.DisputeViolationRecordStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordStddevPopFields.ID(childComplexity), true

	case "dispute_violation_record_stddev_samp_fields.approve_state":
		if e.complexity.DisputeViolationRecordStddevSampFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordStddevSampFields.ApproveState(childComplexity), true

	case "dispute_violation_record_stddev_samp_fields.id":
		if e.complexity.DisputeViolationRecordStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordStddevSampFields.ID(childComplexity), true

	case "dispute_violation_record_sum_fields.approve_state":
		if e.complexity.DisputeViolationRecordSumFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordSumFields.ApproveState(childComplexity), true

	case "dispute_violation_record_sum_fields.id":
		if e.complexity.DisputeViolationRecordSumFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordSumFields.ID(childComplexity), true

	case "dispute_violation_record_var_pop_fields.approve_state":
		if e.complexity.DisputeViolationRecordVarPopFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordVarPopFields.ApproveState(childComplexity), true

	case "dispute_violation_record_var_pop_fields.id":
		if e.complexity.DisputeViolationRecordVarPopFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordVarPopFields.ID(childComplexity), true

	case "dispute_violation_record_var_samp_fields.approve_state":
		if e.complexity.DisputeViolationRecordVarSampFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordVarSampFields.ApproveState(childComplexity), true

	case "dispute_violation_record_var_samp_fields.id":
		if e.complexity.DisputeViolationRecordVarSampFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordVarSampFields.ID(childComplexity), true

	case "dispute_violation_record_variance_fields.approve_state":
		if e.complexity.DisputeViolationRecordVarianceFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordVarianceFields.ApproveState(childComplexity), true

	case "dispute_violation_record_variance_fields.id":
		if e.complexity.DisputeViolationRecordVarianceFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordVarianceFields.ID(childComplexity), true

	case "driver_peccancy_check.created_at":
		if e.complexity.DriverPeccancyCheck.CreatedAt == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.CreatedAt(childComplexity), true

	case "driver_peccancy_check.created_by":
		if e.complexity.DriverPeccancyCheck.CreatedBy == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.CreatedBy(childComplexity), true

	case "driver_peccancy_check.deleted_at":
		if e.complexity.DriverPeccancyCheck.DeletedAt == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.DeletedAt(childComplexity), true

	case "driver_peccancy_check.deleted_by":
		if e.complexity.DriverPeccancyCheck.DeletedBy == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.DeletedBy(childComplexity), true

	case "driver_peccancy_check.driver_id":
		if e.complexity.DriverPeccancyCheck.DriverID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.DriverID(childComplexity), true

	case "driver_peccancy_check.enterprise_id":
		if e.complexity.DriverPeccancyCheck.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.EnterpriseID(childComplexity), true

	case "driver_peccancy_check.id":
		if e.complexity.DriverPeccancyCheck.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.ID(childComplexity), true

	case "driver_peccancy_check.updated_at":
		if e.complexity.DriverPeccancyCheck.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.UpdatedAt(childComplexity), true

	case "driver_peccancy_check.updated_by":
		if e.complexity.DriverPeccancyCheck.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.UpdatedBy(childComplexity), true

	case "driver_peccancy_check.vehicle_id":
		if e.complexity.DriverPeccancyCheck.VehicleID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheck.VehicleID(childComplexity), true

	case "driver_peccancy_check_aggregate.aggregate":
		if e.complexity.DriverPeccancyCheckAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregate.Aggregate(childComplexity), true

	case "driver_peccancy_check_aggregate.nodes":
		if e.complexity.DriverPeccancyCheckAggregate.Nodes == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregate.Nodes(childComplexity), true

	case "driver_peccancy_check_aggregate_fields.avg":
		if e.complexity.DriverPeccancyCheckAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.Avg(childComplexity), true

	case "driver_peccancy_check_aggregate_fields.count":
		if e.complexity.DriverPeccancyCheckAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_driver_peccancy_check_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.Count(childComplexity, args["columns"].([]model.DriverPeccancyCheckSelectColumn), args["distinct"].(*bool)), true

	case "driver_peccancy_check_aggregate_fields.max":
		if e.complexity.DriverPeccancyCheckAggregateFields.Max == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.Max(childComplexity), true

	case "driver_peccancy_check_aggregate_fields.min":
		if e.complexity.DriverPeccancyCheckAggregateFields.Min == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.Min(childComplexity), true

	case "driver_peccancy_check_aggregate_fields.stddev":
		if e.complexity.DriverPeccancyCheckAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.Stddev(childComplexity), true

	case "driver_peccancy_check_aggregate_fields.stddev_pop":
		if e.complexity.DriverPeccancyCheckAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.StddevPop(childComplexity), true

	case "driver_peccancy_check_aggregate_fields.stddev_samp":
		if e.complexity.DriverPeccancyCheckAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.StddevSamp(childComplexity), true

	case "driver_peccancy_check_aggregate_fields.sum":
		if e.complexity.DriverPeccancyCheckAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.Sum(childComplexity), true

	case "driver_peccancy_check_aggregate_fields.var_pop":
		if e.complexity.DriverPeccancyCheckAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.VarPop(childComplexity), true

	case "driver_peccancy_check_aggregate_fields.var_samp":
		if e.complexity.DriverPeccancyCheckAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.VarSamp(childComplexity), true

	case "driver_peccancy_check_aggregate_fields.variance":
		if e.complexity.DriverPeccancyCheckAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAggregateFields.Variance(childComplexity), true

	case "driver_peccancy_check_avg_fields.id":
		if e.complexity.DriverPeccancyCheckAvgFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckAvgFields.ID(childComplexity), true

	case "driver_peccancy_check_max_fields.created_at":
		if e.complexity.DriverPeccancyCheckMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.CreatedAt(childComplexity), true

	case "driver_peccancy_check_max_fields.created_by":
		if e.complexity.DriverPeccancyCheckMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.CreatedBy(childComplexity), true

	case "driver_peccancy_check_max_fields.deleted_at":
		if e.complexity.DriverPeccancyCheckMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.DeletedAt(childComplexity), true

	case "driver_peccancy_check_max_fields.deleted_by":
		if e.complexity.DriverPeccancyCheckMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.DeletedBy(childComplexity), true

	case "driver_peccancy_check_max_fields.driver_id":
		if e.complexity.DriverPeccancyCheckMaxFields.DriverID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.DriverID(childComplexity), true

	case "driver_peccancy_check_max_fields.enterprise_id":
		if e.complexity.DriverPeccancyCheckMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.EnterpriseID(childComplexity), true

	case "driver_peccancy_check_max_fields.id":
		if e.complexity.DriverPeccancyCheckMaxFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.ID(childComplexity), true

	case "driver_peccancy_check_max_fields.updated_at":
		if e.complexity.DriverPeccancyCheckMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.UpdatedAt(childComplexity), true

	case "driver_peccancy_check_max_fields.updated_by":
		if e.complexity.DriverPeccancyCheckMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.UpdatedBy(childComplexity), true

	case "driver_peccancy_check_max_fields.vehicle_id":
		if e.complexity.DriverPeccancyCheckMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMaxFields.VehicleID(childComplexity), true

	case "driver_peccancy_check_min_fields.created_at":
		if e.complexity.DriverPeccancyCheckMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.CreatedAt(childComplexity), true

	case "driver_peccancy_check_min_fields.created_by":
		if e.complexity.DriverPeccancyCheckMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.CreatedBy(childComplexity), true

	case "driver_peccancy_check_min_fields.deleted_at":
		if e.complexity.DriverPeccancyCheckMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.DeletedAt(childComplexity), true

	case "driver_peccancy_check_min_fields.deleted_by":
		if e.complexity.DriverPeccancyCheckMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.DeletedBy(childComplexity), true

	case "driver_peccancy_check_min_fields.driver_id":
		if e.complexity.DriverPeccancyCheckMinFields.DriverID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.DriverID(childComplexity), true

	case "driver_peccancy_check_min_fields.enterprise_id":
		if e.complexity.DriverPeccancyCheckMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.EnterpriseID(childComplexity), true

	case "driver_peccancy_check_min_fields.id":
		if e.complexity.DriverPeccancyCheckMinFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.ID(childComplexity), true

	case "driver_peccancy_check_min_fields.updated_at":
		if e.complexity.DriverPeccancyCheckMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.UpdatedAt(childComplexity), true

	case "driver_peccancy_check_min_fields.updated_by":
		if e.complexity.DriverPeccancyCheckMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.UpdatedBy(childComplexity), true

	case "driver_peccancy_check_min_fields.vehicle_id":
		if e.complexity.DriverPeccancyCheckMinFields.VehicleID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMinFields.VehicleID(childComplexity), true

	case "driver_peccancy_check_mutation_response.affected_rows":
		if e.complexity.DriverPeccancyCheckMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMutationResponse.AffectedRows(childComplexity), true

	case "driver_peccancy_check_mutation_response.returning":
		if e.complexity.DriverPeccancyCheckMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckMutationResponse.Returning(childComplexity), true

	case "driver_peccancy_check_stddev_fields.id":
		if e.complexity.DriverPeccancyCheckStddevFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckStddevFields.ID(childComplexity), true

	case "driver_peccancy_check_stddev_pop_fields.id":
		if e.complexity.DriverPeccancyCheckStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckStddevPopFields.ID(childComplexity), true

	case "driver_peccancy_check_stddev_samp_fields.id":
		if e.complexity.DriverPeccancyCheckStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckStddevSampFields.ID(childComplexity), true

	case "driver_peccancy_check_sum_fields.id":
		if e.complexity.DriverPeccancyCheckSumFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckSumFields.ID(childComplexity), true

	case "driver_peccancy_check_var_pop_fields.id":
		if e.complexity.DriverPeccancyCheckVarPopFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckVarPopFields.ID(childComplexity), true

	case "driver_peccancy_check_var_samp_fields.id":
		if e.complexity.DriverPeccancyCheckVarSampFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckVarSampFields.ID(childComplexity), true

	case "driver_peccancy_check_variance_fields.id":
		if e.complexity.DriverPeccancyCheckVarianceFields.ID == nil {
			break
		}

		return e.complexity.DriverPeccancyCheckVarianceFields.ID(childComplexity), true

	case "enterprise_deduction_items.created_at":
		if e.complexity.EnterpriseDeductionItems.CreatedAt == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItems.CreatedAt(childComplexity), true

	case "enterprise_deduction_items.created_by":
		if e.complexity.EnterpriseDeductionItems.CreatedBy == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItems.CreatedBy(childComplexity), true

	case "enterprise_deduction_items.deduction_category":
		if e.complexity.EnterpriseDeductionItems.DeductionCategory == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItems.DeductionCategory(childComplexity), true

	case "enterprise_deduction_items.deduction_item_description":
		if e.complexity.EnterpriseDeductionItems.DeductionItemDescription == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItems.DeductionItemDescription(childComplexity), true

	case "enterprise_deduction_items.deleted_at":
		if e.complexity.EnterpriseDeductionItems.DeletedAt == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItems.DeletedAt(childComplexity), true

	case "enterprise_deduction_items.deleted_by":
		if e.complexity.EnterpriseDeductionItems.DeletedBy == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItems.DeletedBy(childComplexity), true

	case "enterprise_deduction_items.demerit_points":
		if e.complexity.EnterpriseDeductionItems.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItems.DemeritPoints(childComplexity), true

	case "enterprise_deduction_items.enterprise_deduction_item_id":
		if e.complexity.EnterpriseDeductionItems.EnterpriseDeductionItemID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItems.EnterpriseDeductionItemID(childComplexity), true

	case "enterprise_deduction_items.id":
		if e.complexity.EnterpriseDeductionItems.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItems.ID(childComplexity), true

	case "enterprise_deduction_items.is_delete":
		if e.complexity.EnterpriseDeductionItems.IsDelete == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItems.IsDelete(childComplexity), true

	case "enterprise_deduction_items.updated_at":
		if e.complexity.EnterpriseDeductionItems.UpdatedAt == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItems.UpdatedAt(childComplexity), true

	case "enterprise_deduction_items.updated_by":
		if e.complexity.EnterpriseDeductionItems.UpdatedBy == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItems.UpdatedBy(childComplexity), true

	case "enterprise_deduction_items_aggregate.aggregate":
		if e.complexity.EnterpriseDeductionItemsAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsAggregate.Aggregate(childComplexity), true

	case "enterprise_deduction_items_aggregate.nodes":
		if e.complexity.EnterpriseDeductionItemsAggregate.Nodes == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsAggregate.Nodes(childComplexity), true

	case "enterprise_deduction_items_aggregate_fields.avg":
		if e.complexity.EnterpriseDeductionItemsAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsAggregateFields.Avg(childComplexity), true

	case "enterprise_deduction_items_aggregate_fields.count":
		if e.complexity.EnterpriseDeductionItemsAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_enterprise_deduction_items_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.EnterpriseDeductionItemsAggregateFields.Count(childComplexity, args["columns"].([]model.EnterpriseDeductionItemsSelectColumn), args["distinct"].(*bool)), true

	case "enterprise_deduction_items_aggregate_fields.max":
		if e.complexity.EnterpriseDeductionItemsAggregateFields.Max == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsAggregateFields.Max(childComplexity), true

	case "enterprise_deduction_items_aggregate_fields.min":
		if e.complexity.EnterpriseDeductionItemsAggregateFields.Min == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsAggregateFields.Min(childComplexity), true

	case "enterprise_deduction_items_aggregate_fields.stddev":
		if e.complexity.EnterpriseDeductionItemsAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsAggregateFields.Stddev(childComplexity), true

	case "enterprise_deduction_items_aggregate_fields.stddev_pop":
		if e.complexity.EnterpriseDeductionItemsAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsAggregateFields.StddevPop(childComplexity), true

	case "enterprise_deduction_items_aggregate_fields.stddev_samp":
		if e.complexity.EnterpriseDeductionItemsAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsAggregateFields.StddevSamp(childComplexity), true

	case "enterprise_deduction_items_aggregate_fields.sum":
		if e.complexity.EnterpriseDeductionItemsAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsAggregateFields.Sum(childComplexity), true

	case "enterprise_deduction_items_aggregate_fields.var_pop":
		if e.complexity.EnterpriseDeductionItemsAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsAggregateFields.VarPop(childComplexity), true

	case "enterprise_deduction_items_aggregate_fields.var_samp":
		if e.complexity.EnterpriseDeductionItemsAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsAggregateFields.VarSamp(childComplexity), true

	case "enterprise_deduction_items_aggregate_fields.variance":
		if e.complexity.EnterpriseDeductionItemsAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsAggregateFields.Variance(childComplexity), true

	case "enterprise_deduction_items_avg_fields.deduction_category":
		if e.complexity.EnterpriseDeductionItemsAvgFields.DeductionCategory == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsAvgFields.DeductionCategory(childComplexity), true

	case "enterprise_deduction_items_avg_fields.demerit_points":
		if e.complexity.EnterpriseDeductionItemsAvgFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsAvgFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_items_avg_fields.id":
		if e.complexity.EnterpriseDeductionItemsAvgFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsAvgFields.ID(childComplexity), true

	case "enterprise_deduction_items_max_fields.created_at":
		if e.complexity.EnterpriseDeductionItemsMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMaxFields.CreatedAt(childComplexity), true

	case "enterprise_deduction_items_max_fields.created_by":
		if e.complexity.EnterpriseDeductionItemsMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMaxFields.CreatedBy(childComplexity), true

	case "enterprise_deduction_items_max_fields.deduction_category":
		if e.complexity.EnterpriseDeductionItemsMaxFields.DeductionCategory == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMaxFields.DeductionCategory(childComplexity), true

	case "enterprise_deduction_items_max_fields.deduction_item_description":
		if e.complexity.EnterpriseDeductionItemsMaxFields.DeductionItemDescription == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMaxFields.DeductionItemDescription(childComplexity), true

	case "enterprise_deduction_items_max_fields.deleted_at":
		if e.complexity.EnterpriseDeductionItemsMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMaxFields.DeletedAt(childComplexity), true

	case "enterprise_deduction_items_max_fields.deleted_by":
		if e.complexity.EnterpriseDeductionItemsMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMaxFields.DeletedBy(childComplexity), true

	case "enterprise_deduction_items_max_fields.demerit_points":
		if e.complexity.EnterpriseDeductionItemsMaxFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMaxFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_items_max_fields.enterprise_deduction_item_id":
		if e.complexity.EnterpriseDeductionItemsMaxFields.EnterpriseDeductionItemID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMaxFields.EnterpriseDeductionItemID(childComplexity), true

	case "enterprise_deduction_items_max_fields.id":
		if e.complexity.EnterpriseDeductionItemsMaxFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMaxFields.ID(childComplexity), true

	case "enterprise_deduction_items_max_fields.updated_at":
		if e.complexity.EnterpriseDeductionItemsMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMaxFields.UpdatedAt(childComplexity), true

	case "enterprise_deduction_items_max_fields.updated_by":
		if e.complexity.EnterpriseDeductionItemsMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMaxFields.UpdatedBy(childComplexity), true

	case "enterprise_deduction_items_min_fields.created_at":
		if e.complexity.EnterpriseDeductionItemsMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMinFields.CreatedAt(childComplexity), true

	case "enterprise_deduction_items_min_fields.created_by":
		if e.complexity.EnterpriseDeductionItemsMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMinFields.CreatedBy(childComplexity), true

	case "enterprise_deduction_items_min_fields.deduction_category":
		if e.complexity.EnterpriseDeductionItemsMinFields.DeductionCategory == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMinFields.DeductionCategory(childComplexity), true

	case "enterprise_deduction_items_min_fields.deduction_item_description":
		if e.complexity.EnterpriseDeductionItemsMinFields.DeductionItemDescription == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMinFields.DeductionItemDescription(childComplexity), true

	case "enterprise_deduction_items_min_fields.deleted_at":
		if e.complexity.EnterpriseDeductionItemsMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMinFields.DeletedAt(childComplexity), true

	case "enterprise_deduction_items_min_fields.deleted_by":
		if e.complexity.EnterpriseDeductionItemsMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMinFields.DeletedBy(childComplexity), true

	case "enterprise_deduction_items_min_fields.demerit_points":
		if e.complexity.EnterpriseDeductionItemsMinFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMinFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_items_min_fields.enterprise_deduction_item_id":
		if e.complexity.EnterpriseDeductionItemsMinFields.EnterpriseDeductionItemID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMinFields.EnterpriseDeductionItemID(childComplexity), true

	case "enterprise_deduction_items_min_fields.id":
		if e.complexity.EnterpriseDeductionItemsMinFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMinFields.ID(childComplexity), true

	case "enterprise_deduction_items_min_fields.updated_at":
		if e.complexity.EnterpriseDeductionItemsMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMinFields.UpdatedAt(childComplexity), true

	case "enterprise_deduction_items_min_fields.updated_by":
		if e.complexity.EnterpriseDeductionItemsMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMinFields.UpdatedBy(childComplexity), true

	case "enterprise_deduction_items_mutation_response.affected_rows":
		if e.complexity.EnterpriseDeductionItemsMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMutationResponse.AffectedRows(childComplexity), true

	case "enterprise_deduction_items_mutation_response.returning":
		if e.complexity.EnterpriseDeductionItemsMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsMutationResponse.Returning(childComplexity), true

	case "enterprise_deduction_items_stddev_fields.deduction_category":
		if e.complexity.EnterpriseDeductionItemsStddevFields.DeductionCategory == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsStddevFields.DeductionCategory(childComplexity), true

	case "enterprise_deduction_items_stddev_fields.demerit_points":
		if e.complexity.EnterpriseDeductionItemsStddevFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsStddevFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_items_stddev_fields.id":
		if e.complexity.EnterpriseDeductionItemsStddevFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsStddevFields.ID(childComplexity), true

	case "enterprise_deduction_items_stddev_pop_fields.deduction_category":
		if e.complexity.EnterpriseDeductionItemsStddevPopFields.DeductionCategory == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsStddevPopFields.DeductionCategory(childComplexity), true

	case "enterprise_deduction_items_stddev_pop_fields.demerit_points":
		if e.complexity.EnterpriseDeductionItemsStddevPopFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsStddevPopFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_items_stddev_pop_fields.id":
		if e.complexity.EnterpriseDeductionItemsStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsStddevPopFields.ID(childComplexity), true

	case "enterprise_deduction_items_stddev_samp_fields.deduction_category":
		if e.complexity.EnterpriseDeductionItemsStddevSampFields.DeductionCategory == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsStddevSampFields.DeductionCategory(childComplexity), true

	case "enterprise_deduction_items_stddev_samp_fields.demerit_points":
		if e.complexity.EnterpriseDeductionItemsStddevSampFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsStddevSampFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_items_stddev_samp_fields.id":
		if e.complexity.EnterpriseDeductionItemsStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsStddevSampFields.ID(childComplexity), true

	case "enterprise_deduction_items_sum_fields.deduction_category":
		if e.complexity.EnterpriseDeductionItemsSumFields.DeductionCategory == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsSumFields.DeductionCategory(childComplexity), true

	case "enterprise_deduction_items_sum_fields.demerit_points":
		if e.complexity.EnterpriseDeductionItemsSumFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsSumFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_items_sum_fields.id":
		if e.complexity.EnterpriseDeductionItemsSumFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsSumFields.ID(childComplexity), true

	case "enterprise_deduction_items_var_pop_fields.deduction_category":
		if e.complexity.EnterpriseDeductionItemsVarPopFields.DeductionCategory == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsVarPopFields.DeductionCategory(childComplexity), true

	case "enterprise_deduction_items_var_pop_fields.demerit_points":
		if e.complexity.EnterpriseDeductionItemsVarPopFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsVarPopFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_items_var_pop_fields.id":
		if e.complexity.EnterpriseDeductionItemsVarPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsVarPopFields.ID(childComplexity), true

	case "enterprise_deduction_items_var_samp_fields.deduction_category":
		if e.complexity.EnterpriseDeductionItemsVarSampFields.DeductionCategory == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsVarSampFields.DeductionCategory(childComplexity), true

	case "enterprise_deduction_items_var_samp_fields.demerit_points":
		if e.complexity.EnterpriseDeductionItemsVarSampFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsVarSampFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_items_var_samp_fields.id":
		if e.complexity.EnterpriseDeductionItemsVarSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsVarSampFields.ID(childComplexity), true

	case "enterprise_deduction_items_variance_fields.deduction_category":
		if e.complexity.EnterpriseDeductionItemsVarianceFields.DeductionCategory == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsVarianceFields.DeductionCategory(childComplexity), true

	case "enterprise_deduction_items_variance_fields.demerit_points":
		if e.complexity.EnterpriseDeductionItemsVarianceFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsVarianceFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_items_variance_fields.id":
		if e.complexity.EnterpriseDeductionItemsVarianceFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionItemsVarianceFields.ID(childComplexity), true

	case "enterprise_deduction_operation_record.created_at":
		if e.complexity.EnterpriseDeductionOperationRecord.CreatedAt == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecord.CreatedAt(childComplexity), true

	case "enterprise_deduction_operation_record.created_by":
		if e.complexity.EnterpriseDeductionOperationRecord.CreatedBy == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecord.CreatedBy(childComplexity), true

	case "enterprise_deduction_operation_record.deleted_at":
		if e.complexity.EnterpriseDeductionOperationRecord.DeletedAt == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecord.DeletedAt(childComplexity), true

	case "enterprise_deduction_operation_record.deleted_by":
		if e.complexity.EnterpriseDeductionOperationRecord.DeletedBy == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecord.DeletedBy(childComplexity), true

	case "enterprise_deduction_operation_record.demerit_points":
		if e.complexity.EnterpriseDeductionOperationRecord.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecord.DemeritPoints(childComplexity), true

	case "enterprise_deduction_operation_record.enterprise_deduction_item_id":
		if e.complexity.EnterpriseDeductionOperationRecord.EnterpriseDeductionItemID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecord.EnterpriseDeductionItemID(childComplexity), true

	case "enterprise_deduction_operation_record.enterprise_duduction_operation_id":
		if e.complexity.EnterpriseDeductionOperationRecord.EnterpriseDuductionOperationID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecord.EnterpriseDuductionOperationID(childComplexity), true

	case "enterprise_deduction_operation_record.enterprise_id":
		if e.complexity.EnterpriseDeductionOperationRecord.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecord.EnterpriseID(childComplexity), true

	case "enterprise_deduction_operation_record.id":
		if e.complexity.EnterpriseDeductionOperationRecord.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecord.ID(childComplexity), true

	case "enterprise_deduction_operation_record.is_delete":
		if e.complexity.EnterpriseDeductionOperationRecord.IsDelete == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecord.IsDelete(childComplexity), true

	case "enterprise_deduction_operation_record.remarks":
		if e.complexity.EnterpriseDeductionOperationRecord.Remarks == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecord.Remarks(childComplexity), true

	case "enterprise_deduction_operation_record.updated_at":
		if e.complexity.EnterpriseDeductionOperationRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecord.UpdatedAt(childComplexity), true

	case "enterprise_deduction_operation_record.updated_by":
		if e.complexity.EnterpriseDeductionOperationRecord.UpdatedBy == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecord.UpdatedBy(childComplexity), true

	case "enterprise_deduction_operation_record_aggregate.aggregate":
		if e.complexity.EnterpriseDeductionOperationRecordAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordAggregate.Aggregate(childComplexity), true

	case "enterprise_deduction_operation_record_aggregate.nodes":
		if e.complexity.EnterpriseDeductionOperationRecordAggregate.Nodes == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordAggregate.Nodes(childComplexity), true

	case "enterprise_deduction_operation_record_aggregate_fields.avg":
		if e.complexity.EnterpriseDeductionOperationRecordAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordAggregateFields.Avg(childComplexity), true

	case "enterprise_deduction_operation_record_aggregate_fields.count":
		if e.complexity.EnterpriseDeductionOperationRecordAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_enterprise_deduction_operation_record_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.EnterpriseDeductionOperationRecordAggregateFields.Count(childComplexity, args["columns"].([]model.EnterpriseDeductionOperationRecordSelectColumn), args["distinct"].(*bool)), true

	case "enterprise_deduction_operation_record_aggregate_fields.max":
		if e.complexity.EnterpriseDeductionOperationRecordAggregateFields.Max == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordAggregateFields.Max(childComplexity), true

	case "enterprise_deduction_operation_record_aggregate_fields.min":
		if e.complexity.EnterpriseDeductionOperationRecordAggregateFields.Min == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordAggregateFields.Min(childComplexity), true

	case "enterprise_deduction_operation_record_aggregate_fields.stddev":
		if e.complexity.EnterpriseDeductionOperationRecordAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordAggregateFields.Stddev(childComplexity), true

	case "enterprise_deduction_operation_record_aggregate_fields.stddev_pop":
		if e.complexity.EnterpriseDeductionOperationRecordAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordAggregateFields.StddevPop(childComplexity), true

	case "enterprise_deduction_operation_record_aggregate_fields.stddev_samp":
		if e.complexity.EnterpriseDeductionOperationRecordAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordAggregateFields.StddevSamp(childComplexity), true

	case "enterprise_deduction_operation_record_aggregate_fields.sum":
		if e.complexity.EnterpriseDeductionOperationRecordAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordAggregateFields.Sum(childComplexity), true

	case "enterprise_deduction_operation_record_aggregate_fields.var_pop":
		if e.complexity.EnterpriseDeductionOperationRecordAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordAggregateFields.VarPop(childComplexity), true

	case "enterprise_deduction_operation_record_aggregate_fields.var_samp":
		if e.complexity.EnterpriseDeductionOperationRecordAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordAggregateFields.VarSamp(childComplexity), true

	case "enterprise_deduction_operation_record_aggregate_fields.variance":
		if e.complexity.EnterpriseDeductionOperationRecordAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordAggregateFields.Variance(childComplexity), true

	case "enterprise_deduction_operation_record_avg_fields.demerit_points":
		if e.complexity.EnterpriseDeductionOperationRecordAvgFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordAvgFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_operation_record_avg_fields.id":
		if e.complexity.EnterpriseDeductionOperationRecordAvgFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordAvgFields.ID(childComplexity), true

	case "enterprise_deduction_operation_record_max_fields.created_at":
		if e.complexity.EnterpriseDeductionOperationRecordMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMaxFields.CreatedAt(childComplexity), true

	case "enterprise_deduction_operation_record_max_fields.created_by":
		if e.complexity.EnterpriseDeductionOperationRecordMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMaxFields.CreatedBy(childComplexity), true

	case "enterprise_deduction_operation_record_max_fields.deleted_at":
		if e.complexity.EnterpriseDeductionOperationRecordMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMaxFields.DeletedAt(childComplexity), true

	case "enterprise_deduction_operation_record_max_fields.deleted_by":
		if e.complexity.EnterpriseDeductionOperationRecordMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMaxFields.DeletedBy(childComplexity), true

	case "enterprise_deduction_operation_record_max_fields.demerit_points":
		if e.complexity.EnterpriseDeductionOperationRecordMaxFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMaxFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_operation_record_max_fields.enterprise_deduction_item_id":
		if e.complexity.EnterpriseDeductionOperationRecordMaxFields.EnterpriseDeductionItemID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMaxFields.EnterpriseDeductionItemID(childComplexity), true

	case "enterprise_deduction_operation_record_max_fields.enterprise_duduction_operation_id":
		if e.complexity.EnterpriseDeductionOperationRecordMaxFields.EnterpriseDuductionOperationID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMaxFields.EnterpriseDuductionOperationID(childComplexity), true

	case "enterprise_deduction_operation_record_max_fields.enterprise_id":
		if e.complexity.EnterpriseDeductionOperationRecordMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMaxFields.EnterpriseID(childComplexity), true

	case "enterprise_deduction_operation_record_max_fields.id":
		if e.complexity.EnterpriseDeductionOperationRecordMaxFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMaxFields.ID(childComplexity), true

	case "enterprise_deduction_operation_record_max_fields.remarks":
		if e.complexity.EnterpriseDeductionOperationRecordMaxFields.Remarks == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMaxFields.Remarks(childComplexity), true

	case "enterprise_deduction_operation_record_max_fields.updated_at":
		if e.complexity.EnterpriseDeductionOperationRecordMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMaxFields.UpdatedAt(childComplexity), true

	case "enterprise_deduction_operation_record_max_fields.updated_by":
		if e.complexity.EnterpriseDeductionOperationRecordMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMaxFields.UpdatedBy(childComplexity), true

	case "enterprise_deduction_operation_record_min_fields.created_at":
		if e.complexity.EnterpriseDeductionOperationRecordMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMinFields.CreatedAt(childComplexity), true

	case "enterprise_deduction_operation_record_min_fields.created_by":
		if e.complexity.EnterpriseDeductionOperationRecordMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMinFields.CreatedBy(childComplexity), true

	case "enterprise_deduction_operation_record_min_fields.deleted_at":
		if e.complexity.EnterpriseDeductionOperationRecordMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMinFields.DeletedAt(childComplexity), true

	case "enterprise_deduction_operation_record_min_fields.deleted_by":
		if e.complexity.EnterpriseDeductionOperationRecordMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMinFields.DeletedBy(childComplexity), true

	case "enterprise_deduction_operation_record_min_fields.demerit_points":
		if e.complexity.EnterpriseDeductionOperationRecordMinFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMinFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_operation_record_min_fields.enterprise_deduction_item_id":
		if e.complexity.EnterpriseDeductionOperationRecordMinFields.EnterpriseDeductionItemID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMinFields.EnterpriseDeductionItemID(childComplexity), true

	case "enterprise_deduction_operation_record_min_fields.enterprise_duduction_operation_id":
		if e.complexity.EnterpriseDeductionOperationRecordMinFields.EnterpriseDuductionOperationID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMinFields.EnterpriseDuductionOperationID(childComplexity), true

	case "enterprise_deduction_operation_record_min_fields.enterprise_id":
		if e.complexity.EnterpriseDeductionOperationRecordMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMinFields.EnterpriseID(childComplexity), true

	case "enterprise_deduction_operation_record_min_fields.id":
		if e.complexity.EnterpriseDeductionOperationRecordMinFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMinFields.ID(childComplexity), true

	case "enterprise_deduction_operation_record_min_fields.remarks":
		if e.complexity.EnterpriseDeductionOperationRecordMinFields.Remarks == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMinFields.Remarks(childComplexity), true

	case "enterprise_deduction_operation_record_min_fields.updated_at":
		if e.complexity.EnterpriseDeductionOperationRecordMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMinFields.UpdatedAt(childComplexity), true

	case "enterprise_deduction_operation_record_min_fields.updated_by":
		if e.complexity.EnterpriseDeductionOperationRecordMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMinFields.UpdatedBy(childComplexity), true

	case "enterprise_deduction_operation_record_mutation_response.affected_rows":
		if e.complexity.EnterpriseDeductionOperationRecordMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMutationResponse.AffectedRows(childComplexity), true

	case "enterprise_deduction_operation_record_mutation_response.returning":
		if e.complexity.EnterpriseDeductionOperationRecordMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordMutationResponse.Returning(childComplexity), true

	case "enterprise_deduction_operation_record_stddev_fields.demerit_points":
		if e.complexity.EnterpriseDeductionOperationRecordStddevFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordStddevFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_operation_record_stddev_fields.id":
		if e.complexity.EnterpriseDeductionOperationRecordStddevFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordStddevFields.ID(childComplexity), true

	case "enterprise_deduction_operation_record_stddev_pop_fields.demerit_points":
		if e.complexity.EnterpriseDeductionOperationRecordStddevPopFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordStddevPopFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_operation_record_stddev_pop_fields.id":
		if e.complexity.EnterpriseDeductionOperationRecordStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordStddevPopFields.ID(childComplexity), true

	case "enterprise_deduction_operation_record_stddev_samp_fields.demerit_points":
		if e.complexity.EnterpriseDeductionOperationRecordStddevSampFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordStddevSampFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_operation_record_stddev_samp_fields.id":
		if e.complexity.EnterpriseDeductionOperationRecordStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordStddevSampFields.ID(childComplexity), true

	case "enterprise_deduction_operation_record_sum_fields.demerit_points":
		if e.complexity.EnterpriseDeductionOperationRecordSumFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordSumFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_operation_record_sum_fields.id":
		if e.complexity.EnterpriseDeductionOperationRecordSumFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordSumFields.ID(childComplexity), true

	case "enterprise_deduction_operation_record_var_pop_fields.demerit_points":
		if e.complexity.EnterpriseDeductionOperationRecordVarPopFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordVarPopFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_operation_record_var_pop_fields.id":
		if e.complexity.EnterpriseDeductionOperationRecordVarPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordVarPopFields.ID(childComplexity), true

	case "enterprise_deduction_operation_record_var_samp_fields.demerit_points":
		if e.complexity.EnterpriseDeductionOperationRecordVarSampFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordVarSampFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_operation_record_var_samp_fields.id":
		if e.complexity.EnterpriseDeductionOperationRecordVarSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordVarSampFields.ID(childComplexity), true

	case "enterprise_deduction_operation_record_variance_fields.demerit_points":
		if e.complexity.EnterpriseDeductionOperationRecordVarianceFields.DemeritPoints == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordVarianceFields.DemeritPoints(childComplexity), true

	case "enterprise_deduction_operation_record_variance_fields.id":
		if e.complexity.EnterpriseDeductionOperationRecordVarianceFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseDeductionOperationRecordVarianceFields.ID(childComplexity), true

	case "illegal_photo.created_at":
		if e.complexity.IllegalPhoto.CreatedAt == nil {
			break
		}

		return e.complexity.IllegalPhoto.CreatedAt(childComplexity), true

	case "illegal_photo.created_by":
		if e.complexity.IllegalPhoto.CreatedBy == nil {
			break
		}

		return e.complexity.IllegalPhoto.CreatedBy(childComplexity), true

	case "illegal_photo.deleted_at":
		if e.complexity.IllegalPhoto.DeletedAt == nil {
			break
		}

		return e.complexity.IllegalPhoto.DeletedAt(childComplexity), true

	case "illegal_photo.deleted_by":
		if e.complexity.IllegalPhoto.DeletedBy == nil {
			break
		}

		return e.complexity.IllegalPhoto.DeletedBy(childComplexity), true

	case "illegal_photo.id":
		if e.complexity.IllegalPhoto.ID == nil {
			break
		}

		return e.complexity.IllegalPhoto.ID(childComplexity), true

	case "illegal_photo.illegal_photo_id":
		if e.complexity.IllegalPhoto.IllegalPhotoID == nil {
			break
		}

		return e.complexity.IllegalPhoto.IllegalPhotoID(childComplexity), true

	case "illegal_photo.is_delete":
		if e.complexity.IllegalPhoto.IsDelete == nil {
			break
		}

		return e.complexity.IllegalPhoto.IsDelete(childComplexity), true

	case "illegal_photo.is_synchronized":
		if e.complexity.IllegalPhoto.IsSynchronized == nil {
			break
		}

		return e.complexity.IllegalPhoto.IsSynchronized(childComplexity), true

	case "illegal_photo.picture_address":
		if e.complexity.IllegalPhoto.PictureAddress == nil {
			break
		}

		return e.complexity.IllegalPhoto.PictureAddress(childComplexity), true

	case "illegal_photo.picture_name":
		if e.complexity.IllegalPhoto.PictureName == nil {
			break
		}

		return e.complexity.IllegalPhoto.PictureName(childComplexity), true

	case "illegal_photo.updated_at":
		if e.complexity.IllegalPhoto.UpdatedAt == nil {
			break
		}

		return e.complexity.IllegalPhoto.UpdatedAt(childComplexity), true

	case "illegal_photo.updated_by":
		if e.complexity.IllegalPhoto.UpdatedBy == nil {
			break
		}

		return e.complexity.IllegalPhoto.UpdatedBy(childComplexity), true

	case "illegal_photo_aggregate.aggregate":
		if e.complexity.IllegalPhotoAggregate.Aggregate == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregate.Aggregate(childComplexity), true

	case "illegal_photo_aggregate.nodes":
		if e.complexity.IllegalPhotoAggregate.Nodes == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregate.Nodes(childComplexity), true

	case "illegal_photo_aggregate_fields.avg":
		if e.complexity.IllegalPhotoAggregateFields.Avg == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.Avg(childComplexity), true

	case "illegal_photo_aggregate_fields.count":
		if e.complexity.IllegalPhotoAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_illegal_photo_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.IllegalPhotoAggregateFields.Count(childComplexity, args["columns"].([]model.IllegalPhotoSelectColumn), args["distinct"].(*bool)), true

	case "illegal_photo_aggregate_fields.max":
		if e.complexity.IllegalPhotoAggregateFields.Max == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.Max(childComplexity), true

	case "illegal_photo_aggregate_fields.min":
		if e.complexity.IllegalPhotoAggregateFields.Min == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.Min(childComplexity), true

	case "illegal_photo_aggregate_fields.stddev":
		if e.complexity.IllegalPhotoAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.Stddev(childComplexity), true

	case "illegal_photo_aggregate_fields.stddev_pop":
		if e.complexity.IllegalPhotoAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.StddevPop(childComplexity), true

	case "illegal_photo_aggregate_fields.stddev_samp":
		if e.complexity.IllegalPhotoAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.StddevSamp(childComplexity), true

	case "illegal_photo_aggregate_fields.sum":
		if e.complexity.IllegalPhotoAggregateFields.Sum == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.Sum(childComplexity), true

	case "illegal_photo_aggregate_fields.var_pop":
		if e.complexity.IllegalPhotoAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.VarPop(childComplexity), true

	case "illegal_photo_aggregate_fields.var_samp":
		if e.complexity.IllegalPhotoAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.VarSamp(childComplexity), true

	case "illegal_photo_aggregate_fields.variance":
		if e.complexity.IllegalPhotoAggregateFields.Variance == nil {
			break
		}

		return e.complexity.IllegalPhotoAggregateFields.Variance(childComplexity), true

	case "illegal_photo_avg_fields.id":
		if e.complexity.IllegalPhotoAvgFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoAvgFields.ID(childComplexity), true

	case "illegal_photo_max_fields.created_at":
		if e.complexity.IllegalPhotoMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.CreatedAt(childComplexity), true

	case "illegal_photo_max_fields.created_by":
		if e.complexity.IllegalPhotoMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.CreatedBy(childComplexity), true

	case "illegal_photo_max_fields.deleted_at":
		if e.complexity.IllegalPhotoMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.DeletedAt(childComplexity), true

	case "illegal_photo_max_fields.deleted_by":
		if e.complexity.IllegalPhotoMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.DeletedBy(childComplexity), true

	case "illegal_photo_max_fields.id":
		if e.complexity.IllegalPhotoMaxFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.ID(childComplexity), true

	case "illegal_photo_max_fields.illegal_photo_id":
		if e.complexity.IllegalPhotoMaxFields.IllegalPhotoID == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.IllegalPhotoID(childComplexity), true

	case "illegal_photo_max_fields.picture_address":
		if e.complexity.IllegalPhotoMaxFields.PictureAddress == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.PictureAddress(childComplexity), true

	case "illegal_photo_max_fields.picture_name":
		if e.complexity.IllegalPhotoMaxFields.PictureName == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.PictureName(childComplexity), true

	case "illegal_photo_max_fields.updated_at":
		if e.complexity.IllegalPhotoMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.UpdatedAt(childComplexity), true

	case "illegal_photo_max_fields.updated_by":
		if e.complexity.IllegalPhotoMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.IllegalPhotoMaxFields.UpdatedBy(childComplexity), true

	case "illegal_photo_min_fields.created_at":
		if e.complexity.IllegalPhotoMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.CreatedAt(childComplexity), true

	case "illegal_photo_min_fields.created_by":
		if e.complexity.IllegalPhotoMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.CreatedBy(childComplexity), true

	case "illegal_photo_min_fields.deleted_at":
		if e.complexity.IllegalPhotoMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.DeletedAt(childComplexity), true

	case "illegal_photo_min_fields.deleted_by":
		if e.complexity.IllegalPhotoMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.DeletedBy(childComplexity), true

	case "illegal_photo_min_fields.id":
		if e.complexity.IllegalPhotoMinFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.ID(childComplexity), true

	case "illegal_photo_min_fields.illegal_photo_id":
		if e.complexity.IllegalPhotoMinFields.IllegalPhotoID == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.IllegalPhotoID(childComplexity), true

	case "illegal_photo_min_fields.picture_address":
		if e.complexity.IllegalPhotoMinFields.PictureAddress == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.PictureAddress(childComplexity), true

	case "illegal_photo_min_fields.picture_name":
		if e.complexity.IllegalPhotoMinFields.PictureName == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.PictureName(childComplexity), true

	case "illegal_photo_min_fields.updated_at":
		if e.complexity.IllegalPhotoMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.UpdatedAt(childComplexity), true

	case "illegal_photo_min_fields.updated_by":
		if e.complexity.IllegalPhotoMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.IllegalPhotoMinFields.UpdatedBy(childComplexity), true

	case "illegal_photo_mutation_response.affected_rows":
		if e.complexity.IllegalPhotoMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.IllegalPhotoMutationResponse.AffectedRows(childComplexity), true

	case "illegal_photo_mutation_response.returning":
		if e.complexity.IllegalPhotoMutationResponse.Returning == nil {
			break
		}

		return e.complexity.IllegalPhotoMutationResponse.Returning(childComplexity), true

	case "illegal_photo_stddev_fields.id":
		if e.complexity.IllegalPhotoStddevFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoStddevFields.ID(childComplexity), true

	case "illegal_photo_stddev_pop_fields.id":
		if e.complexity.IllegalPhotoStddevPopFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoStddevPopFields.ID(childComplexity), true

	case "illegal_photo_stddev_samp_fields.id":
		if e.complexity.IllegalPhotoStddevSampFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoStddevSampFields.ID(childComplexity), true

	case "illegal_photo_sum_fields.id":
		if e.complexity.IllegalPhotoSumFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoSumFields.ID(childComplexity), true

	case "illegal_photo_var_pop_fields.id":
		if e.complexity.IllegalPhotoVarPopFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoVarPopFields.ID(childComplexity), true

	case "illegal_photo_var_samp_fields.id":
		if e.complexity.IllegalPhotoVarSampFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoVarSampFields.ID(childComplexity), true

	case "illegal_photo_variance_fields.id":
		if e.complexity.IllegalPhotoVarianceFields.ID == nil {
			break
		}

		return e.complexity.IllegalPhotoVarianceFields.ID(childComplexity), true

	case "regional_violation_register.created_at":
		if e.complexity.RegionalViolationRegister.CreatedAt == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.CreatedAt(childComplexity), true

	case "regional_violation_register.created_by":
		if e.complexity.RegionalViolationRegister.CreatedBy == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.CreatedBy(childComplexity), true

	case "regional_violation_register.deleted_at":
		if e.complexity.RegionalViolationRegister.DeletedAt == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.DeletedAt(childComplexity), true

	case "regional_violation_register.deleted_by":
		if e.complexity.RegionalViolationRegister.DeletedBy == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.DeletedBy(childComplexity), true

	case "regional_violation_register.driver_id":
		if e.complexity.RegionalViolationRegister.DriverID == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.DriverID(childComplexity), true

	case "regional_violation_register.id":
		if e.complexity.RegionalViolationRegister.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.ID(childComplexity), true

	case "regional_violation_register.illegal_code":
		if e.complexity.RegionalViolationRegister.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.IllegalCode(childComplexity), true

	case "regional_violation_register.illegal_time":
		if e.complexity.RegionalViolationRegister.IllegalTime == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.IllegalTime(childComplexity), true

	case "regional_violation_register.illegal_type":
		if e.complexity.RegionalViolationRegister.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.IllegalType(childComplexity), true

	case "regional_violation_register.is_delete":
		if e.complexity.RegionalViolationRegister.IsDelete == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.IsDelete(childComplexity), true

	case "regional_violation_register.is_register":
		if e.complexity.RegionalViolationRegister.IsRegister == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.IsRegister(childComplexity), true

	case "regional_violation_register.operator":
		if e.complexity.RegionalViolationRegister.Operator == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.Operator(childComplexity), true

	case "regional_violation_register.processing_agency":
		if e.complexity.RegionalViolationRegister.ProcessingAgency == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.ProcessingAgency(childComplexity), true

	case "regional_violation_register.regional_violation_register_id":
		if e.complexity.RegionalViolationRegister.RegionalViolationRegisterID == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.RegionalViolationRegisterID(childComplexity), true

	case "regional_violation_register.register_time":
		if e.complexity.RegionalViolationRegister.RegisterTime == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.RegisterTime(childComplexity), true

	case "regional_violation_register.updated_at":
		if e.complexity.RegionalViolationRegister.UpdatedAt == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.UpdatedAt(childComplexity), true

	case "regional_violation_register.updated_by":
		if e.complexity.RegionalViolationRegister.UpdatedBy == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.UpdatedBy(childComplexity), true

	case "regional_violation_register.vehicle_id":
		if e.complexity.RegionalViolationRegister.VehicleID == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.VehicleID(childComplexity), true

	case "regional_violation_register.violation_detail_id":
		if e.complexity.RegionalViolationRegister.ViolationDetailID == nil {
			break
		}

		return e.complexity.RegionalViolationRegister.ViolationDetailID(childComplexity), true

	case "regional_violation_register_aggregate.aggregate":
		if e.complexity.RegionalViolationRegisterAggregate.Aggregate == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregate.Aggregate(childComplexity), true

	case "regional_violation_register_aggregate.nodes":
		if e.complexity.RegionalViolationRegisterAggregate.Nodes == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregate.Nodes(childComplexity), true

	case "regional_violation_register_aggregate_fields.avg":
		if e.complexity.RegionalViolationRegisterAggregateFields.Avg == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.Avg(childComplexity), true

	case "regional_violation_register_aggregate_fields.count":
		if e.complexity.RegionalViolationRegisterAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_regional_violation_register_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.Count(childComplexity, args["columns"].([]model.RegionalViolationRegisterSelectColumn), args["distinct"].(*bool)), true

	case "regional_violation_register_aggregate_fields.max":
		if e.complexity.RegionalViolationRegisterAggregateFields.Max == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.Max(childComplexity), true

	case "regional_violation_register_aggregate_fields.min":
		if e.complexity.RegionalViolationRegisterAggregateFields.Min == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.Min(childComplexity), true

	case "regional_violation_register_aggregate_fields.stddev":
		if e.complexity.RegionalViolationRegisterAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.Stddev(childComplexity), true

	case "regional_violation_register_aggregate_fields.stddev_pop":
		if e.complexity.RegionalViolationRegisterAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.StddevPop(childComplexity), true

	case "regional_violation_register_aggregate_fields.stddev_samp":
		if e.complexity.RegionalViolationRegisterAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.StddevSamp(childComplexity), true

	case "regional_violation_register_aggregate_fields.sum":
		if e.complexity.RegionalViolationRegisterAggregateFields.Sum == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.Sum(childComplexity), true

	case "regional_violation_register_aggregate_fields.var_pop":
		if e.complexity.RegionalViolationRegisterAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.VarPop(childComplexity), true

	case "regional_violation_register_aggregate_fields.var_samp":
		if e.complexity.RegionalViolationRegisterAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.VarSamp(childComplexity), true

	case "regional_violation_register_aggregate_fields.variance":
		if e.complexity.RegionalViolationRegisterAggregateFields.Variance == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAggregateFields.Variance(childComplexity), true

	case "regional_violation_register_avg_fields.id":
		if e.complexity.RegionalViolationRegisterAvgFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAvgFields.ID(childComplexity), true

	case "regional_violation_register_avg_fields.illegal_code":
		if e.complexity.RegionalViolationRegisterAvgFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAvgFields.IllegalCode(childComplexity), true

	case "regional_violation_register_avg_fields.illegal_type":
		if e.complexity.RegionalViolationRegisterAvgFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterAvgFields.IllegalType(childComplexity), true

	case "regional_violation_register_max_fields.created_at":
		if e.complexity.RegionalViolationRegisterMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.CreatedAt(childComplexity), true

	case "regional_violation_register_max_fields.created_by":
		if e.complexity.RegionalViolationRegisterMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.CreatedBy(childComplexity), true

	case "regional_violation_register_max_fields.deleted_at":
		if e.complexity.RegionalViolationRegisterMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.DeletedAt(childComplexity), true

	case "regional_violation_register_max_fields.deleted_by":
		if e.complexity.RegionalViolationRegisterMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.DeletedBy(childComplexity), true

	case "regional_violation_register_max_fields.driver_id":
		if e.complexity.RegionalViolationRegisterMaxFields.DriverID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.DriverID(childComplexity), true

	case "regional_violation_register_max_fields.id":
		if e.complexity.RegionalViolationRegisterMaxFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.ID(childComplexity), true

	case "regional_violation_register_max_fields.illegal_code":
		if e.complexity.RegionalViolationRegisterMaxFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.IllegalCode(childComplexity), true

	case "regional_violation_register_max_fields.illegal_time":
		if e.complexity.RegionalViolationRegisterMaxFields.IllegalTime == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.IllegalTime(childComplexity), true

	case "regional_violation_register_max_fields.illegal_type":
		if e.complexity.RegionalViolationRegisterMaxFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.IllegalType(childComplexity), true

	case "regional_violation_register_max_fields.operator":
		if e.complexity.RegionalViolationRegisterMaxFields.Operator == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.Operator(childComplexity), true

	case "regional_violation_register_max_fields.processing_agency":
		if e.complexity.RegionalViolationRegisterMaxFields.ProcessingAgency == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.ProcessingAgency(childComplexity), true

	case "regional_violation_register_max_fields.regional_violation_register_id":
		if e.complexity.RegionalViolationRegisterMaxFields.RegionalViolationRegisterID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.RegionalViolationRegisterID(childComplexity), true

	case "regional_violation_register_max_fields.register_time":
		if e.complexity.RegionalViolationRegisterMaxFields.RegisterTime == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.RegisterTime(childComplexity), true

	case "regional_violation_register_max_fields.updated_at":
		if e.complexity.RegionalViolationRegisterMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.UpdatedAt(childComplexity), true

	case "regional_violation_register_max_fields.updated_by":
		if e.complexity.RegionalViolationRegisterMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.UpdatedBy(childComplexity), true

	case "regional_violation_register_max_fields.vehicle_id":
		if e.complexity.RegionalViolationRegisterMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.VehicleID(childComplexity), true

	case "regional_violation_register_max_fields.violation_detail_id":
		if e.complexity.RegionalViolationRegisterMaxFields.ViolationDetailID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMaxFields.ViolationDetailID(childComplexity), true

	case "regional_violation_register_min_fields.created_at":
		if e.complexity.RegionalViolationRegisterMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.CreatedAt(childComplexity), true

	case "regional_violation_register_min_fields.created_by":
		if e.complexity.RegionalViolationRegisterMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.CreatedBy(childComplexity), true

	case "regional_violation_register_min_fields.deleted_at":
		if e.complexity.RegionalViolationRegisterMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.DeletedAt(childComplexity), true

	case "regional_violation_register_min_fields.deleted_by":
		if e.complexity.RegionalViolationRegisterMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.DeletedBy(childComplexity), true

	case "regional_violation_register_min_fields.driver_id":
		if e.complexity.RegionalViolationRegisterMinFields.DriverID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.DriverID(childComplexity), true

	case "regional_violation_register_min_fields.id":
		if e.complexity.RegionalViolationRegisterMinFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.ID(childComplexity), true

	case "regional_violation_register_min_fields.illegal_code":
		if e.complexity.RegionalViolationRegisterMinFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.IllegalCode(childComplexity), true

	case "regional_violation_register_min_fields.illegal_time":
		if e.complexity.RegionalViolationRegisterMinFields.IllegalTime == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.IllegalTime(childComplexity), true

	case "regional_violation_register_min_fields.illegal_type":
		if e.complexity.RegionalViolationRegisterMinFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.IllegalType(childComplexity), true

	case "regional_violation_register_min_fields.operator":
		if e.complexity.RegionalViolationRegisterMinFields.Operator == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.Operator(childComplexity), true

	case "regional_violation_register_min_fields.processing_agency":
		if e.complexity.RegionalViolationRegisterMinFields.ProcessingAgency == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.ProcessingAgency(childComplexity), true

	case "regional_violation_register_min_fields.regional_violation_register_id":
		if e.complexity.RegionalViolationRegisterMinFields.RegionalViolationRegisterID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.RegionalViolationRegisterID(childComplexity), true

	case "regional_violation_register_min_fields.register_time":
		if e.complexity.RegionalViolationRegisterMinFields.RegisterTime == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.RegisterTime(childComplexity), true

	case "regional_violation_register_min_fields.updated_at":
		if e.complexity.RegionalViolationRegisterMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.UpdatedAt(childComplexity), true

	case "regional_violation_register_min_fields.updated_by":
		if e.complexity.RegionalViolationRegisterMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.UpdatedBy(childComplexity), true

	case "regional_violation_register_min_fields.vehicle_id":
		if e.complexity.RegionalViolationRegisterMinFields.VehicleID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.VehicleID(childComplexity), true

	case "regional_violation_register_min_fields.violation_detail_id":
		if e.complexity.RegionalViolationRegisterMinFields.ViolationDetailID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMinFields.ViolationDetailID(childComplexity), true

	case "regional_violation_register_mutation_response.affected_rows":
		if e.complexity.RegionalViolationRegisterMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMutationResponse.AffectedRows(childComplexity), true

	case "regional_violation_register_mutation_response.returning":
		if e.complexity.RegionalViolationRegisterMutationResponse.Returning == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterMutationResponse.Returning(childComplexity), true

	case "regional_violation_register_stddev_fields.id":
		if e.complexity.RegionalViolationRegisterStddevFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterStddevFields.ID(childComplexity), true

	case "regional_violation_register_stddev_fields.illegal_code":
		if e.complexity.RegionalViolationRegisterStddevFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterStddevFields.IllegalCode(childComplexity), true

	case "regional_violation_register_stddev_fields.illegal_type":
		if e.complexity.RegionalViolationRegisterStddevFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterStddevFields.IllegalType(childComplexity), true

	case "regional_violation_register_stddev_pop_fields.id":
		if e.complexity.RegionalViolationRegisterStddevPopFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterStddevPopFields.ID(childComplexity), true

	case "regional_violation_register_stddev_pop_fields.illegal_code":
		if e.complexity.RegionalViolationRegisterStddevPopFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterStddevPopFields.IllegalCode(childComplexity), true

	case "regional_violation_register_stddev_pop_fields.illegal_type":
		if e.complexity.RegionalViolationRegisterStddevPopFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterStddevPopFields.IllegalType(childComplexity), true

	case "regional_violation_register_stddev_samp_fields.id":
		if e.complexity.RegionalViolationRegisterStddevSampFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterStddevSampFields.ID(childComplexity), true

	case "regional_violation_register_stddev_samp_fields.illegal_code":
		if e.complexity.RegionalViolationRegisterStddevSampFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterStddevSampFields.IllegalCode(childComplexity), true

	case "regional_violation_register_stddev_samp_fields.illegal_type":
		if e.complexity.RegionalViolationRegisterStddevSampFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterStddevSampFields.IllegalType(childComplexity), true

	case "regional_violation_register_sum_fields.id":
		if e.complexity.RegionalViolationRegisterSumFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterSumFields.ID(childComplexity), true

	case "regional_violation_register_sum_fields.illegal_code":
		if e.complexity.RegionalViolationRegisterSumFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterSumFields.IllegalCode(childComplexity), true

	case "regional_violation_register_sum_fields.illegal_type":
		if e.complexity.RegionalViolationRegisterSumFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterSumFields.IllegalType(childComplexity), true

	case "regional_violation_register_var_pop_fields.id":
		if e.complexity.RegionalViolationRegisterVarPopFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterVarPopFields.ID(childComplexity), true

	case "regional_violation_register_var_pop_fields.illegal_code":
		if e.complexity.RegionalViolationRegisterVarPopFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterVarPopFields.IllegalCode(childComplexity), true

	case "regional_violation_register_var_pop_fields.illegal_type":
		if e.complexity.RegionalViolationRegisterVarPopFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterVarPopFields.IllegalType(childComplexity), true

	case "regional_violation_register_var_samp_fields.id":
		if e.complexity.RegionalViolationRegisterVarSampFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterVarSampFields.ID(childComplexity), true

	case "regional_violation_register_var_samp_fields.illegal_code":
		if e.complexity.RegionalViolationRegisterVarSampFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterVarSampFields.IllegalCode(childComplexity), true

	case "regional_violation_register_var_samp_fields.illegal_type":
		if e.complexity.RegionalViolationRegisterVarSampFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterVarSampFields.IllegalType(childComplexity), true

	case "regional_violation_register_variance_fields.id":
		if e.complexity.RegionalViolationRegisterVarianceFields.ID == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterVarianceFields.ID(childComplexity), true

	case "regional_violation_register_variance_fields.illegal_code":
		if e.complexity.RegionalViolationRegisterVarianceFields.IllegalCode == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterVarianceFields.IllegalCode(childComplexity), true

	case "regional_violation_register_variance_fields.illegal_type":
		if e.complexity.RegionalViolationRegisterVarianceFields.IllegalType == nil {
			break
		}

		return e.complexity.RegionalViolationRegisterVarianceFields.IllegalType(childComplexity), true

	case "user_operation_log.created_at":
		if e.complexity.UserOperationLog.CreatedAt == nil {
			break
		}

		return e.complexity.UserOperationLog.CreatedAt(childComplexity), true

	case "user_operation_log.created_by":
		if e.complexity.UserOperationLog.CreatedBy == nil {
			break
		}

		return e.complexity.UserOperationLog.CreatedBy(childComplexity), true

	case "user_operation_log.deleted_at":
		if e.complexity.UserOperationLog.DeletedAt == nil {
			break
		}

		return e.complexity.UserOperationLog.DeletedAt(childComplexity), true

	case "user_operation_log.deleted_by":
		if e.complexity.UserOperationLog.DeletedBy == nil {
			break
		}

		return e.complexity.UserOperationLog.DeletedBy(childComplexity), true

	case "user_operation_log.id":
		if e.complexity.UserOperationLog.ID == nil {
			break
		}

		return e.complexity.UserOperationLog.ID(childComplexity), true

	case "user_operation_log.illegal_time":
		if e.complexity.UserOperationLog.IllegalTime == nil {
			break
		}

		return e.complexity.UserOperationLog.IllegalTime(childComplexity), true

	case "user_operation_log.license_plate_number":
		if e.complexity.UserOperationLog.LicensePlateNumber == nil {
			break
		}

		return e.complexity.UserOperationLog.LicensePlateNumber(childComplexity), true

	case "user_operation_log.updated_at":
		if e.complexity.UserOperationLog.UpdatedAt == nil {
			break
		}

		return e.complexity.UserOperationLog.UpdatedAt(childComplexity), true

	case "user_operation_log.updated_by":
		if e.complexity.UserOperationLog.UpdatedBy == nil {
			break
		}

		return e.complexity.UserOperationLog.UpdatedBy(childComplexity), true

	case "user_operation_log.user_ip":
		if e.complexity.UserOperationLog.UserIP == nil {
			break
		}

		return e.complexity.UserOperationLog.UserIP(childComplexity), true

	case "user_operation_log_aggregate.aggregate":
		if e.complexity.UserOperationLogAggregate.Aggregate == nil {
			break
		}

		return e.complexity.UserOperationLogAggregate.Aggregate(childComplexity), true

	case "user_operation_log_aggregate.nodes":
		if e.complexity.UserOperationLogAggregate.Nodes == nil {
			break
		}

		return e.complexity.UserOperationLogAggregate.Nodes(childComplexity), true

	case "user_operation_log_aggregate_fields.avg":
		if e.complexity.UserOperationLogAggregateFields.Avg == nil {
			break
		}

		return e.complexity.UserOperationLogAggregateFields.Avg(childComplexity), true

	case "user_operation_log_aggregate_fields.count":
		if e.complexity.UserOperationLogAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_user_operation_log_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserOperationLogAggregateFields.Count(childComplexity, args["columns"].([]model.UserOperationLogSelectColumn), args["distinct"].(*bool)), true

	case "user_operation_log_aggregate_fields.max":
		if e.complexity.UserOperationLogAggregateFields.Max == nil {
			break
		}

		return e.complexity.UserOperationLogAggregateFields.Max(childComplexity), true

	case "user_operation_log_aggregate_fields.min":
		if e.complexity.UserOperationLogAggregateFields.Min == nil {
			break
		}

		return e.complexity.UserOperationLogAggregateFields.Min(childComplexity), true

	case "user_operation_log_aggregate_fields.stddev":
		if e.complexity.UserOperationLogAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.UserOperationLogAggregateFields.Stddev(childComplexity), true

	case "user_operation_log_aggregate_fields.stddev_pop":
		if e.complexity.UserOperationLogAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.UserOperationLogAggregateFields.StddevPop(childComplexity), true

	case "user_operation_log_aggregate_fields.stddev_samp":
		if e.complexity.UserOperationLogAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.UserOperationLogAggregateFields.StddevSamp(childComplexity), true

	case "user_operation_log_aggregate_fields.sum":
		if e.complexity.UserOperationLogAggregateFields.Sum == nil {
			break
		}

		return e.complexity.UserOperationLogAggregateFields.Sum(childComplexity), true

	case "user_operation_log_aggregate_fields.var_pop":
		if e.complexity.UserOperationLogAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.UserOperationLogAggregateFields.VarPop(childComplexity), true

	case "user_operation_log_aggregate_fields.var_samp":
		if e.complexity.UserOperationLogAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.UserOperationLogAggregateFields.VarSamp(childComplexity), true

	case "user_operation_log_aggregate_fields.variance":
		if e.complexity.UserOperationLogAggregateFields.Variance == nil {
			break
		}

		return e.complexity.UserOperationLogAggregateFields.Variance(childComplexity), true

	case "user_operation_log_avg_fields.id":
		if e.complexity.UserOperationLogAvgFields.ID == nil {
			break
		}

		return e.complexity.UserOperationLogAvgFields.ID(childComplexity), true

	case "user_operation_log_max_fields.created_at":
		if e.complexity.UserOperationLogMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.UserOperationLogMaxFields.CreatedAt(childComplexity), true

	case "user_operation_log_max_fields.created_by":
		if e.complexity.UserOperationLogMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.UserOperationLogMaxFields.CreatedBy(childComplexity), true

	case "user_operation_log_max_fields.deleted_at":
		if e.complexity.UserOperationLogMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.UserOperationLogMaxFields.DeletedAt(childComplexity), true

	case "user_operation_log_max_fields.deleted_by":
		if e.complexity.UserOperationLogMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.UserOperationLogMaxFields.DeletedBy(childComplexity), true

	case "user_operation_log_max_fields.id":
		if e.complexity.UserOperationLogMaxFields.ID == nil {
			break
		}

		return e.complexity.UserOperationLogMaxFields.ID(childComplexity), true

	case "user_operation_log_max_fields.illegal_time":
		if e.complexity.UserOperationLogMaxFields.IllegalTime == nil {
			break
		}

		return e.complexity.UserOperationLogMaxFields.IllegalTime(childComplexity), true

	case "user_operation_log_max_fields.license_plate_number":
		if e.complexity.UserOperationLogMaxFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.UserOperationLogMaxFields.LicensePlateNumber(childComplexity), true

	case "user_operation_log_max_fields.updated_at":
		if e.complexity.UserOperationLogMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.UserOperationLogMaxFields.UpdatedAt(childComplexity), true

	case "user_operation_log_max_fields.updated_by":
		if e.complexity.UserOperationLogMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.UserOperationLogMaxFields.UpdatedBy(childComplexity), true

	case "user_operation_log_max_fields.user_ip":
		if e.complexity.UserOperationLogMaxFields.UserIP == nil {
			break
		}

		return e.complexity.UserOperationLogMaxFields.UserIP(childComplexity), true

	case "user_operation_log_min_fields.created_at":
		if e.complexity.UserOperationLogMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.UserOperationLogMinFields.CreatedAt(childComplexity), true

	case "user_operation_log_min_fields.created_by":
		if e.complexity.UserOperationLogMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.UserOperationLogMinFields.CreatedBy(childComplexity), true

	case "user_operation_log_min_fields.deleted_at":
		if e.complexity.UserOperationLogMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.UserOperationLogMinFields.DeletedAt(childComplexity), true

	case "user_operation_log_min_fields.deleted_by":
		if e.complexity.UserOperationLogMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.UserOperationLogMinFields.DeletedBy(childComplexity), true

	case "user_operation_log_min_fields.id":
		if e.complexity.UserOperationLogMinFields.ID == nil {
			break
		}

		return e.complexity.UserOperationLogMinFields.ID(childComplexity), true

	case "user_operation_log_min_fields.illegal_time":
		if e.complexity.UserOperationLogMinFields.IllegalTime == nil {
			break
		}

		return e.complexity.UserOperationLogMinFields.IllegalTime(childComplexity), true

	case "user_operation_log_min_fields.license_plate_number":
		if e.complexity.UserOperationLogMinFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.UserOperationLogMinFields.LicensePlateNumber(childComplexity), true

	case "user_operation_log_min_fields.updated_at":
		if e.complexity.UserOperationLogMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.UserOperationLogMinFields.UpdatedAt(childComplexity), true

	case "user_operation_log_min_fields.updated_by":
		if e.complexity.UserOperationLogMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.UserOperationLogMinFields.UpdatedBy(childComplexity), true

	case "user_operation_log_min_fields.user_ip":
		if e.complexity.UserOperationLogMinFields.UserIP == nil {
			break
		}

		return e.complexity.UserOperationLogMinFields.UserIP(childComplexity), true

	case "user_operation_log_mutation_response.affected_rows":
		if e.complexity.UserOperationLogMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.UserOperationLogMutationResponse.AffectedRows(childComplexity), true

	case "user_operation_log_mutation_response.returning":
		if e.complexity.UserOperationLogMutationResponse.Returning == nil {
			break
		}

		return e.complexity.UserOperationLogMutationResponse.Returning(childComplexity), true

	case "user_operation_log_stddev_fields.id":
		if e.complexity.UserOperationLogStddevFields.ID == nil {
			break
		}

		return e.complexity.UserOperationLogStddevFields.ID(childComplexity), true

	case "user_operation_log_stddev_pop_fields.id":
		if e.complexity.UserOperationLogStddevPopFields.ID == nil {
			break
		}

		return e.complexity.UserOperationLogStddevPopFields.ID(childComplexity), true

	case "user_operation_log_stddev_samp_fields.id":
		if e.complexity.UserOperationLogStddevSampFields.ID == nil {
			break
		}

		return e.complexity.UserOperationLogStddevSampFields.ID(childComplexity), true

	case "user_operation_log_sum_fields.id":
		if e.complexity.UserOperationLogSumFields.ID == nil {
			break
		}

		return e.complexity.UserOperationLogSumFields.ID(childComplexity), true

	case "user_operation_log_var_pop_fields.id":
		if e.complexity.UserOperationLogVarPopFields.ID == nil {
			break
		}

		return e.complexity.UserOperationLogVarPopFields.ID(childComplexity), true

	case "user_operation_log_var_samp_fields.id":
		if e.complexity.UserOperationLogVarSampFields.ID == nil {
			break
		}

		return e.complexity.UserOperationLogVarSampFields.ID(childComplexity), true

	case "user_operation_log_variance_fields.id":
		if e.complexity.UserOperationLogVarianceFields.ID == nil {
			break
		}

		return e.complexity.UserOperationLogVarianceFields.ID(childComplexity), true

	case "vehicle_detain_details.bayonet_picture":
		if e.complexity.VehicleDetainDetails.BayonetPicture == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.BayonetPicture(childComplexity), true

	case "vehicle_detain_details.id":
		if e.complexity.VehicleDetainDetails.ID == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.ID(childComplexity), true

	case "vehicle_detain_details.is_bayonet":
		if e.complexity.VehicleDetainDetails.IsBayonet == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.IsBayonet(childComplexity), true

	case "vehicle_detain_details.is_category":
		if e.complexity.VehicleDetainDetails.IsCategory == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.IsCategory(childComplexity), true

	case "vehicle_detain_details.is_delete":
		if e.complexity.VehicleDetainDetails.IsDelete == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.IsDelete(childComplexity), true

	case "vehicle_detain_details.is_illegal":
		if e.complexity.VehicleDetainDetails.IsIllegal == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.IsIllegal(childComplexity), true

	case "vehicle_detain_details.is_satellite_judgment":
		if e.complexity.VehicleDetainDetails.IsSatelliteJudgment == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.IsSatelliteJudgment(childComplexity), true

	case "vehicle_detain_details.license_plate_color":
		if e.complexity.VehicleDetainDetails.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.LicensePlateColor(childComplexity), true

	case "vehicle_detain_details.license_plate_number":
		if e.complexity.VehicleDetainDetails.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.LicensePlateNumber(childComplexity), true

	case "vehicle_detain_details.record_time":
		if e.complexity.VehicleDetainDetails.RecordTime == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.RecordTime(childComplexity), true

	case "vehicle_detain_details.register_region":
		if e.complexity.VehicleDetainDetails.RegisterRegion == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.RegisterRegion(childComplexity), true

	case "vehicle_detain_details.register_user":
		if e.complexity.VehicleDetainDetails.RegisterUser == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.RegisterUser(childComplexity), true

	case "vehicle_detain_details.remarks":
		if e.complexity.VehicleDetainDetails.Remarks == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.Remarks(childComplexity), true

	case "vehicle_detain_details.update_time":
		if e.complexity.VehicleDetainDetails.UpdateTime == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.UpdateTime(childComplexity), true

	case "vehicle_detain_details.vehicle_detain_picture":
		if e.complexity.VehicleDetainDetails.VehicleDetainPicture == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.VehicleDetainPicture(childComplexity), true

	case "vehicle_detain_details.vehicle_detain_status":
		if e.complexity.VehicleDetainDetails.VehicleDetainStatus == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.VehicleDetainStatus(childComplexity), true

	case "vehicle_detain_details.vehicle_detain_time":
		if e.complexity.VehicleDetainDetails.VehicleDetainTime == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.VehicleDetainTime(childComplexity), true

	case "vehicle_detain_details.vehicle_release_picture":
		if e.complexity.VehicleDetainDetails.VehicleReleasePicture == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.VehicleReleasePicture(childComplexity), true

	case "vehicle_detain_details.vehicle_release_time":
		if e.complexity.VehicleDetainDetails.VehicleReleaseTime == nil {
			break
		}

		return e.complexity.VehicleDetainDetails.VehicleReleaseTime(childComplexity), true

	case "vehicle_detain_details_aggregate.aggregate":
		if e.complexity.VehicleDetainDetailsAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsAggregate.Aggregate(childComplexity), true

	case "vehicle_detain_details_aggregate.nodes":
		if e.complexity.VehicleDetainDetailsAggregate.Nodes == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsAggregate.Nodes(childComplexity), true

	case "vehicle_detain_details_aggregate_fields.avg":
		if e.complexity.VehicleDetainDetailsAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsAggregateFields.Avg(childComplexity), true

	case "vehicle_detain_details_aggregate_fields.count":
		if e.complexity.VehicleDetainDetailsAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_vehicle_detain_details_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.VehicleDetainDetailsAggregateFields.Count(childComplexity, args["columns"].([]model.VehicleDetainDetailsSelectColumn), args["distinct"].(*bool)), true

	case "vehicle_detain_details_aggregate_fields.max":
		if e.complexity.VehicleDetainDetailsAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsAggregateFields.Max(childComplexity), true

	case "vehicle_detain_details_aggregate_fields.min":
		if e.complexity.VehicleDetainDetailsAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsAggregateFields.Min(childComplexity), true

	case "vehicle_detain_details_aggregate_fields.stddev":
		if e.complexity.VehicleDetainDetailsAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsAggregateFields.Stddev(childComplexity), true

	case "vehicle_detain_details_aggregate_fields.stddev_pop":
		if e.complexity.VehicleDetainDetailsAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsAggregateFields.StddevPop(childComplexity), true

	case "vehicle_detain_details_aggregate_fields.stddev_samp":
		if e.complexity.VehicleDetainDetailsAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsAggregateFields.StddevSamp(childComplexity), true

	case "vehicle_detain_details_aggregate_fields.sum":
		if e.complexity.VehicleDetainDetailsAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsAggregateFields.Sum(childComplexity), true

	case "vehicle_detain_details_aggregate_fields.var_pop":
		if e.complexity.VehicleDetainDetailsAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsAggregateFields.VarPop(childComplexity), true

	case "vehicle_detain_details_aggregate_fields.var_samp":
		if e.complexity.VehicleDetainDetailsAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsAggregateFields.VarSamp(childComplexity), true

	case "vehicle_detain_details_aggregate_fields.variance":
		if e.complexity.VehicleDetainDetailsAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsAggregateFields.Variance(childComplexity), true

	case "vehicle_detain_details_avg_fields.id":
		if e.complexity.VehicleDetainDetailsAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsAvgFields.ID(childComplexity), true

	case "vehicle_detain_details_avg_fields.vehicle_detain_status":
		if e.complexity.VehicleDetainDetailsAvgFields.VehicleDetainStatus == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsAvgFields.VehicleDetainStatus(childComplexity), true

	case "vehicle_detain_details_max_fields.bayonet_picture":
		if e.complexity.VehicleDetainDetailsMaxFields.BayonetPicture == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMaxFields.BayonetPicture(childComplexity), true

	case "vehicle_detain_details_max_fields.id":
		if e.complexity.VehicleDetainDetailsMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMaxFields.ID(childComplexity), true

	case "vehicle_detain_details_max_fields.license_plate_color":
		if e.complexity.VehicleDetainDetailsMaxFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMaxFields.LicensePlateColor(childComplexity), true

	case "vehicle_detain_details_max_fields.license_plate_number":
		if e.complexity.VehicleDetainDetailsMaxFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMaxFields.LicensePlateNumber(childComplexity), true

	case "vehicle_detain_details_max_fields.record_time":
		if e.complexity.VehicleDetainDetailsMaxFields.RecordTime == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMaxFields.RecordTime(childComplexity), true

	case "vehicle_detain_details_max_fields.register_region":
		if e.complexity.VehicleDetainDetailsMaxFields.RegisterRegion == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMaxFields.RegisterRegion(childComplexity), true

	case "vehicle_detain_details_max_fields.register_user":
		if e.complexity.VehicleDetainDetailsMaxFields.RegisterUser == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMaxFields.RegisterUser(childComplexity), true

	case "vehicle_detain_details_max_fields.remarks":
		if e.complexity.VehicleDetainDetailsMaxFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMaxFields.Remarks(childComplexity), true

	case "vehicle_detain_details_max_fields.update_time":
		if e.complexity.VehicleDetainDetailsMaxFields.UpdateTime == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMaxFields.UpdateTime(childComplexity), true

	case "vehicle_detain_details_max_fields.vehicle_detain_picture":
		if e.complexity.VehicleDetainDetailsMaxFields.VehicleDetainPicture == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMaxFields.VehicleDetainPicture(childComplexity), true

	case "vehicle_detain_details_max_fields.vehicle_detain_status":
		if e.complexity.VehicleDetainDetailsMaxFields.VehicleDetainStatus == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMaxFields.VehicleDetainStatus(childComplexity), true

	case "vehicle_detain_details_max_fields.vehicle_detain_time":
		if e.complexity.VehicleDetainDetailsMaxFields.VehicleDetainTime == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMaxFields.VehicleDetainTime(childComplexity), true

	case "vehicle_detain_details_max_fields.vehicle_release_picture":
		if e.complexity.VehicleDetainDetailsMaxFields.VehicleReleasePicture == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMaxFields.VehicleReleasePicture(childComplexity), true

	case "vehicle_detain_details_max_fields.vehicle_release_time":
		if e.complexity.VehicleDetainDetailsMaxFields.VehicleReleaseTime == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMaxFields.VehicleReleaseTime(childComplexity), true

	case "vehicle_detain_details_min_fields.bayonet_picture":
		if e.complexity.VehicleDetainDetailsMinFields.BayonetPicture == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMinFields.BayonetPicture(childComplexity), true

	case "vehicle_detain_details_min_fields.id":
		if e.complexity.VehicleDetainDetailsMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMinFields.ID(childComplexity), true

	case "vehicle_detain_details_min_fields.license_plate_color":
		if e.complexity.VehicleDetainDetailsMinFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMinFields.LicensePlateColor(childComplexity), true

	case "vehicle_detain_details_min_fields.license_plate_number":
		if e.complexity.VehicleDetainDetailsMinFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMinFields.LicensePlateNumber(childComplexity), true

	case "vehicle_detain_details_min_fields.record_time":
		if e.complexity.VehicleDetainDetailsMinFields.RecordTime == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMinFields.RecordTime(childComplexity), true

	case "vehicle_detain_details_min_fields.register_region":
		if e.complexity.VehicleDetainDetailsMinFields.RegisterRegion == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMinFields.RegisterRegion(childComplexity), true

	case "vehicle_detain_details_min_fields.register_user":
		if e.complexity.VehicleDetainDetailsMinFields.RegisterUser == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMinFields.RegisterUser(childComplexity), true

	case "vehicle_detain_details_min_fields.remarks":
		if e.complexity.VehicleDetainDetailsMinFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMinFields.Remarks(childComplexity), true

	case "vehicle_detain_details_min_fields.update_time":
		if e.complexity.VehicleDetainDetailsMinFields.UpdateTime == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMinFields.UpdateTime(childComplexity), true

	case "vehicle_detain_details_min_fields.vehicle_detain_picture":
		if e.complexity.VehicleDetainDetailsMinFields.VehicleDetainPicture == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMinFields.VehicleDetainPicture(childComplexity), true

	case "vehicle_detain_details_min_fields.vehicle_detain_status":
		if e.complexity.VehicleDetainDetailsMinFields.VehicleDetainStatus == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMinFields.VehicleDetainStatus(childComplexity), true

	case "vehicle_detain_details_min_fields.vehicle_detain_time":
		if e.complexity.VehicleDetainDetailsMinFields.VehicleDetainTime == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMinFields.VehicleDetainTime(childComplexity), true

	case "vehicle_detain_details_min_fields.vehicle_release_picture":
		if e.complexity.VehicleDetainDetailsMinFields.VehicleReleasePicture == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMinFields.VehicleReleasePicture(childComplexity), true

	case "vehicle_detain_details_min_fields.vehicle_release_time":
		if e.complexity.VehicleDetainDetailsMinFields.VehicleReleaseTime == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMinFields.VehicleReleaseTime(childComplexity), true

	case "vehicle_detain_details_mutation_response.affected_rows":
		if e.complexity.VehicleDetainDetailsMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMutationResponse.AffectedRows(childComplexity), true

	case "vehicle_detain_details_mutation_response.returning":
		if e.complexity.VehicleDetainDetailsMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsMutationResponse.Returning(childComplexity), true

	case "vehicle_detain_details_stddev_fields.id":
		if e.complexity.VehicleDetainDetailsStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsStddevFields.ID(childComplexity), true

	case "vehicle_detain_details_stddev_fields.vehicle_detain_status":
		if e.complexity.VehicleDetainDetailsStddevFields.VehicleDetainStatus == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsStddevFields.VehicleDetainStatus(childComplexity), true

	case "vehicle_detain_details_stddev_pop_fields.id":
		if e.complexity.VehicleDetainDetailsStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsStddevPopFields.ID(childComplexity), true

	case "vehicle_detain_details_stddev_pop_fields.vehicle_detain_status":
		if e.complexity.VehicleDetainDetailsStddevPopFields.VehicleDetainStatus == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsStddevPopFields.VehicleDetainStatus(childComplexity), true

	case "vehicle_detain_details_stddev_samp_fields.id":
		if e.complexity.VehicleDetainDetailsStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsStddevSampFields.ID(childComplexity), true

	case "vehicle_detain_details_stddev_samp_fields.vehicle_detain_status":
		if e.complexity.VehicleDetainDetailsStddevSampFields.VehicleDetainStatus == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsStddevSampFields.VehicleDetainStatus(childComplexity), true

	case "vehicle_detain_details_sum_fields.id":
		if e.complexity.VehicleDetainDetailsSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsSumFields.ID(childComplexity), true

	case "vehicle_detain_details_sum_fields.vehicle_detain_status":
		if e.complexity.VehicleDetainDetailsSumFields.VehicleDetainStatus == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsSumFields.VehicleDetainStatus(childComplexity), true

	case "vehicle_detain_details_var_pop_fields.id":
		if e.complexity.VehicleDetainDetailsVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsVarPopFields.ID(childComplexity), true

	case "vehicle_detain_details_var_pop_fields.vehicle_detain_status":
		if e.complexity.VehicleDetainDetailsVarPopFields.VehicleDetainStatus == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsVarPopFields.VehicleDetainStatus(childComplexity), true

	case "vehicle_detain_details_var_samp_fields.id":
		if e.complexity.VehicleDetainDetailsVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsVarSampFields.ID(childComplexity), true

	case "vehicle_detain_details_var_samp_fields.vehicle_detain_status":
		if e.complexity.VehicleDetainDetailsVarSampFields.VehicleDetainStatus == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsVarSampFields.VehicleDetainStatus(childComplexity), true

	case "vehicle_detain_details_variance_fields.id":
		if e.complexity.VehicleDetainDetailsVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsVarianceFields.ID(childComplexity), true

	case "vehicle_detain_details_variance_fields.vehicle_detain_status":
		if e.complexity.VehicleDetainDetailsVarianceFields.VehicleDetainStatus == nil {
			break
		}

		return e.complexity.VehicleDetainDetailsVarianceFields.VehicleDetainStatus(childComplexity), true

	case "vehicle_violation_details.created_at":
		if e.complexity.VehicleViolationDetails.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.CreatedAt(childComplexity), true

	case "vehicle_violation_details.created_by":
		if e.complexity.VehicleViolationDetails.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.CreatedBy(childComplexity), true

	case "vehicle_violation_details.decision_number":
		if e.complexity.VehicleViolationDetails.DecisionNumber == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.DecisionNumber(childComplexity), true

	case "vehicle_violation_details.deleted_at":
		if e.complexity.VehicleViolationDetails.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.DeletedAt(childComplexity), true

	case "vehicle_violation_details.deleted_by":
		if e.complexity.VehicleViolationDetails.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.DeletedBy(childComplexity), true

	case "vehicle_violation_details.discovery_agency":
		if e.complexity.VehicleViolationDetails.DiscoveryAgency == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.DiscoveryAgency(childComplexity), true

	case "vehicle_violation_details.driver_id":
		if e.complexity.VehicleViolationDetails.DriverID == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.DriverID(childComplexity), true

	case "vehicle_violation_details.enterprise_id":
		if e.complexity.VehicleViolationDetails.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.EnterpriseID(childComplexity), true

	case "vehicle_violation_details.handle_at":
		if e.complexity.VehicleViolationDetails.HandleAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.HandleAt(childComplexity), true

	case "vehicle_violation_details.handle_by":
		if e.complexity.VehicleViolationDetails.HandleBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.HandleBy(childComplexity), true

	case "vehicle_violation_details.id":
		if e.complexity.VehicleViolationDetails.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.ID(childComplexity), true

	case "vehicle_violation_details.illegal_code":
		if e.complexity.VehicleViolationDetails.IllegalCode == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.IllegalCode(childComplexity), true

	case "vehicle_violation_details.illegal_handling_status":
		if e.complexity.VehicleViolationDetails.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.IllegalHandlingStatus(childComplexity), true

	case "vehicle_violation_details.illegal_location":
		if e.complexity.VehicleViolationDetails.IllegalLocation == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.IllegalLocation(childComplexity), true

	case "vehicle_violation_details.illegal_photo":
		if e.complexity.VehicleViolationDetails.IllegalPhoto == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.IllegalPhoto(childComplexity), true

	case "vehicle_violation_details.illegal_time":
		if e.complexity.VehicleViolationDetails.IllegalTime == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.IllegalTime(childComplexity), true

	case "vehicle_violation_details.information_source":
		if e.complexity.VehicleViolationDetails.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.InformationSource(childComplexity), true

	case "vehicle_violation_details.is_delete":
		if e.complexity.VehicleViolationDetails.IsDelete == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.IsDelete(childComplexity), true

	case "vehicle_violation_details.is_handle":
		if e.complexity.VehicleViolationDetails.IsHandle == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.IsHandle(childComplexity), true

	case "vehicle_violation_details.is_notice_driver":
		if e.complexity.VehicleViolationDetails.IsNoticeDriver == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.IsNoticeDriver(childComplexity), true

	case "vehicle_violation_details.is_send":
		if e.complexity.VehicleViolationDetails.IsSend == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.IsSend(childComplexity), true

	case "vehicle_violation_details.measured_value":
		if e.complexity.VehicleViolationDetails.MeasuredValue == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.MeasuredValue(childComplexity), true

	case "vehicle_violation_details.notice_time":
		if e.complexity.VehicleViolationDetails.NoticeTime == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.NoticeTime(childComplexity), true

	case "vehicle_violation_details.party_name":
		if e.complexity.VehicleViolationDetails.PartyName == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.PartyName(childComplexity), true

	case "vehicle_violation_details.payment_mark":
		if e.complexity.VehicleViolationDetails.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.PaymentMark(childComplexity), true

	case "vehicle_violation_details.standard_value":
		if e.complexity.VehicleViolationDetails.StandardValue == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.StandardValue(childComplexity), true

	case "vehicle_violation_details.update_time_in":
		if e.complexity.VehicleViolationDetails.UpdateTimeIn == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.UpdateTimeIn(childComplexity), true

	case "vehicle_violation_details.updated_at":
		if e.complexity.VehicleViolationDetails.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.UpdatedAt(childComplexity), true

	case "vehicle_violation_details.updated_by":
		if e.complexity.VehicleViolationDetails.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.UpdatedBy(childComplexity), true

	case "vehicle_violation_details.vehicle_id":
		if e.complexity.VehicleViolationDetails.VehicleID == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.VehicleID(childComplexity), true

	case "vehicle_violation_details.vehicle_information":
		if e.complexity.VehicleViolationDetails.VehicleInformation == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.VehicleInformation(childComplexity), true

	case "vehicle_violation_details.violation_detail_id":
		if e.complexity.VehicleViolationDetails.ViolationDetailID == nil {
			break
		}

		return e.complexity.VehicleViolationDetails.ViolationDetailID(childComplexity), true

	case "vehicle_violation_details_aggregate.aggregate":
		if e.complexity.VehicleViolationDetailsAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregate.Aggregate(childComplexity), true

	case "vehicle_violation_details_aggregate.nodes":
		if e.complexity.VehicleViolationDetailsAggregate.Nodes == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregate.Nodes(childComplexity), true

	case "vehicle_violation_details_aggregate_fields.avg":
		if e.complexity.VehicleViolationDetailsAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.Avg(childComplexity), true

	case "vehicle_violation_details_aggregate_fields.count":
		if e.complexity.VehicleViolationDetailsAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_vehicle_violation_details_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.Count(childComplexity, args["columns"].([]model.VehicleViolationDetailsSelectColumn), args["distinct"].(*bool)), true

	case "vehicle_violation_details_aggregate_fields.max":
		if e.complexity.VehicleViolationDetailsAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.Max(childComplexity), true

	case "vehicle_violation_details_aggregate_fields.min":
		if e.complexity.VehicleViolationDetailsAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.Min(childComplexity), true

	case "vehicle_violation_details_aggregate_fields.stddev":
		if e.complexity.VehicleViolationDetailsAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.Stddev(childComplexity), true

	case "vehicle_violation_details_aggregate_fields.stddev_pop":
		if e.complexity.VehicleViolationDetailsAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.StddevPop(childComplexity), true

	case "vehicle_violation_details_aggregate_fields.stddev_samp":
		if e.complexity.VehicleViolationDetailsAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.StddevSamp(childComplexity), true

	case "vehicle_violation_details_aggregate_fields.sum":
		if e.complexity.VehicleViolationDetailsAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.Sum(childComplexity), true

	case "vehicle_violation_details_aggregate_fields.var_pop":
		if e.complexity.VehicleViolationDetailsAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.VarPop(childComplexity), true

	case "vehicle_violation_details_aggregate_fields.var_samp":
		if e.complexity.VehicleViolationDetailsAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.VarSamp(childComplexity), true

	case "vehicle_violation_details_aggregate_fields.variance":
		if e.complexity.VehicleViolationDetailsAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAggregateFields.Variance(childComplexity), true

	case "vehicle_violation_details_avg_fields.id":
		if e.complexity.VehicleViolationDetailsAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAvgFields.ID(childComplexity), true

	case "vehicle_violation_details_avg_fields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsAvgFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAvgFields.IllegalHandlingStatus(childComplexity), true

	case "vehicle_violation_details_avg_fields.information_source":
		if e.complexity.VehicleViolationDetailsAvgFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAvgFields.InformationSource(childComplexity), true

	case "vehicle_violation_details_avg_fields.payment_mark":
		if e.complexity.VehicleViolationDetailsAvgFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsAvgFields.PaymentMark(childComplexity), true

	case "vehicle_violation_details_max_fields.created_at":
		if e.complexity.VehicleViolationDetailsMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.CreatedAt(childComplexity), true

	case "vehicle_violation_details_max_fields.created_by":
		if e.complexity.VehicleViolationDetailsMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.CreatedBy(childComplexity), true

	case "vehicle_violation_details_max_fields.decision_number":
		if e.complexity.VehicleViolationDetailsMaxFields.DecisionNumber == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.DecisionNumber(childComplexity), true

	case "vehicle_violation_details_max_fields.deleted_at":
		if e.complexity.VehicleViolationDetailsMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.DeletedAt(childComplexity), true

	case "vehicle_violation_details_max_fields.deleted_by":
		if e.complexity.VehicleViolationDetailsMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.DeletedBy(childComplexity), true

	case "vehicle_violation_details_max_fields.discovery_agency":
		if e.complexity.VehicleViolationDetailsMaxFields.DiscoveryAgency == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.DiscoveryAgency(childComplexity), true

	case "vehicle_violation_details_max_fields.driver_id":
		if e.complexity.VehicleViolationDetailsMaxFields.DriverID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.DriverID(childComplexity), true

	case "vehicle_violation_details_max_fields.enterprise_id":
		if e.complexity.VehicleViolationDetailsMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.EnterpriseID(childComplexity), true

	case "vehicle_violation_details_max_fields.handle_at":
		if e.complexity.VehicleViolationDetailsMaxFields.HandleAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.HandleAt(childComplexity), true

	case "vehicle_violation_details_max_fields.handle_by":
		if e.complexity.VehicleViolationDetailsMaxFields.HandleBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.HandleBy(childComplexity), true

	case "vehicle_violation_details_max_fields.id":
		if e.complexity.VehicleViolationDetailsMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.ID(childComplexity), true

	case "vehicle_violation_details_max_fields.illegal_code":
		if e.complexity.VehicleViolationDetailsMaxFields.IllegalCode == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.IllegalCode(childComplexity), true

	case "vehicle_violation_details_max_fields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsMaxFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.IllegalHandlingStatus(childComplexity), true

	case "vehicle_violation_details_max_fields.illegal_location":
		if e.complexity.VehicleViolationDetailsMaxFields.IllegalLocation == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.IllegalLocation(childComplexity), true

	case "vehicle_violation_details_max_fields.illegal_photo":
		if e.complexity.VehicleViolationDetailsMaxFields.IllegalPhoto == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.IllegalPhoto(childComplexity), true

	case "vehicle_violation_details_max_fields.illegal_time":
		if e.complexity.VehicleViolationDetailsMaxFields.IllegalTime == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.IllegalTime(childComplexity), true

	case "vehicle_violation_details_max_fields.information_source":
		if e.complexity.VehicleViolationDetailsMaxFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.InformationSource(childComplexity), true

	case "vehicle_violation_details_max_fields.measured_value":
		if e.complexity.VehicleViolationDetailsMaxFields.MeasuredValue == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.MeasuredValue(childComplexity), true

	case "vehicle_violation_details_max_fields.notice_time":
		if e.complexity.VehicleViolationDetailsMaxFields.NoticeTime == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.NoticeTime(childComplexity), true

	case "vehicle_violation_details_max_fields.party_name":
		if e.complexity.VehicleViolationDetailsMaxFields.PartyName == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.PartyName(childComplexity), true

	case "vehicle_violation_details_max_fields.payment_mark":
		if e.complexity.VehicleViolationDetailsMaxFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.PaymentMark(childComplexity), true

	case "vehicle_violation_details_max_fields.standard_value":
		if e.complexity.VehicleViolationDetailsMaxFields.StandardValue == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.StandardValue(childComplexity), true

	case "vehicle_violation_details_max_fields.update_time_in":
		if e.complexity.VehicleViolationDetailsMaxFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.UpdateTimeIn(childComplexity), true

	case "vehicle_violation_details_max_fields.updated_at":
		if e.complexity.VehicleViolationDetailsMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.UpdatedAt(childComplexity), true

	case "vehicle_violation_details_max_fields.updated_by":
		if e.complexity.VehicleViolationDetailsMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.UpdatedBy(childComplexity), true

	case "vehicle_violation_details_max_fields.vehicle_id":
		if e.complexity.VehicleViolationDetailsMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.VehicleID(childComplexity), true

	case "vehicle_violation_details_max_fields.vehicle_information":
		if e.complexity.VehicleViolationDetailsMaxFields.VehicleInformation == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.VehicleInformation(childComplexity), true

	case "vehicle_violation_details_max_fields.violation_detail_id":
		if e.complexity.VehicleViolationDetailsMaxFields.ViolationDetailID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMaxFields.ViolationDetailID(childComplexity), true

	case "vehicle_violation_details_min_fields.created_at":
		if e.complexity.VehicleViolationDetailsMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.CreatedAt(childComplexity), true

	case "vehicle_violation_details_min_fields.created_by":
		if e.complexity.VehicleViolationDetailsMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.CreatedBy(childComplexity), true

	case "vehicle_violation_details_min_fields.decision_number":
		if e.complexity.VehicleViolationDetailsMinFields.DecisionNumber == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.DecisionNumber(childComplexity), true

	case "vehicle_violation_details_min_fields.deleted_at":
		if e.complexity.VehicleViolationDetailsMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.DeletedAt(childComplexity), true

	case "vehicle_violation_details_min_fields.deleted_by":
		if e.complexity.VehicleViolationDetailsMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.DeletedBy(childComplexity), true

	case "vehicle_violation_details_min_fields.discovery_agency":
		if e.complexity.VehicleViolationDetailsMinFields.DiscoveryAgency == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.DiscoveryAgency(childComplexity), true

	case "vehicle_violation_details_min_fields.driver_id":
		if e.complexity.VehicleViolationDetailsMinFields.DriverID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.DriverID(childComplexity), true

	case "vehicle_violation_details_min_fields.enterprise_id":
		if e.complexity.VehicleViolationDetailsMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.EnterpriseID(childComplexity), true

	case "vehicle_violation_details_min_fields.handle_at":
		if e.complexity.VehicleViolationDetailsMinFields.HandleAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.HandleAt(childComplexity), true

	case "vehicle_violation_details_min_fields.handle_by":
		if e.complexity.VehicleViolationDetailsMinFields.HandleBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.HandleBy(childComplexity), true

	case "vehicle_violation_details_min_fields.id":
		if e.complexity.VehicleViolationDetailsMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.ID(childComplexity), true

	case "vehicle_violation_details_min_fields.illegal_code":
		if e.complexity.VehicleViolationDetailsMinFields.IllegalCode == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.IllegalCode(childComplexity), true

	case "vehicle_violation_details_min_fields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsMinFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.IllegalHandlingStatus(childComplexity), true

	case "vehicle_violation_details_min_fields.illegal_location":
		if e.complexity.VehicleViolationDetailsMinFields.IllegalLocation == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.IllegalLocation(childComplexity), true

	case "vehicle_violation_details_min_fields.illegal_photo":
		if e.complexity.VehicleViolationDetailsMinFields.IllegalPhoto == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.IllegalPhoto(childComplexity), true

	case "vehicle_violation_details_min_fields.illegal_time":
		if e.complexity.VehicleViolationDetailsMinFields.IllegalTime == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.IllegalTime(childComplexity), true

	case "vehicle_violation_details_min_fields.information_source":
		if e.complexity.VehicleViolationDetailsMinFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.InformationSource(childComplexity), true

	case "vehicle_violation_details_min_fields.measured_value":
		if e.complexity.VehicleViolationDetailsMinFields.MeasuredValue == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.MeasuredValue(childComplexity), true

	case "vehicle_violation_details_min_fields.notice_time":
		if e.complexity.VehicleViolationDetailsMinFields.NoticeTime == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.NoticeTime(childComplexity), true

	case "vehicle_violation_details_min_fields.party_name":
		if e.complexity.VehicleViolationDetailsMinFields.PartyName == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.PartyName(childComplexity), true

	case "vehicle_violation_details_min_fields.payment_mark":
		if e.complexity.VehicleViolationDetailsMinFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.PaymentMark(childComplexity), true

	case "vehicle_violation_details_min_fields.standard_value":
		if e.complexity.VehicleViolationDetailsMinFields.StandardValue == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.StandardValue(childComplexity), true

	case "vehicle_violation_details_min_fields.update_time_in":
		if e.complexity.VehicleViolationDetailsMinFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.UpdateTimeIn(childComplexity), true

	case "vehicle_violation_details_min_fields.updated_at":
		if e.complexity.VehicleViolationDetailsMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.UpdatedAt(childComplexity), true

	case "vehicle_violation_details_min_fields.updated_by":
		if e.complexity.VehicleViolationDetailsMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.UpdatedBy(childComplexity), true

	case "vehicle_violation_details_min_fields.vehicle_id":
		if e.complexity.VehicleViolationDetailsMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.VehicleID(childComplexity), true

	case "vehicle_violation_details_min_fields.vehicle_information":
		if e.complexity.VehicleViolationDetailsMinFields.VehicleInformation == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.VehicleInformation(childComplexity), true

	case "vehicle_violation_details_min_fields.violation_detail_id":
		if e.complexity.VehicleViolationDetailsMinFields.ViolationDetailID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMinFields.ViolationDetailID(childComplexity), true

	case "vehicle_violation_details_mutation_response.affected_rows":
		if e.complexity.VehicleViolationDetailsMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMutationResponse.AffectedRows(childComplexity), true

	case "vehicle_violation_details_mutation_response.returning":
		if e.complexity.VehicleViolationDetailsMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsMutationResponse.Returning(childComplexity), true

	case "vehicle_violation_details_stddev_fields.id":
		if e.complexity.VehicleViolationDetailsStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevFields.ID(childComplexity), true

	case "vehicle_violation_details_stddev_fields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsStddevFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevFields.IllegalHandlingStatus(childComplexity), true

	case "vehicle_violation_details_stddev_fields.information_source":
		if e.complexity.VehicleViolationDetailsStddevFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevFields.InformationSource(childComplexity), true

	case "vehicle_violation_details_stddev_fields.payment_mark":
		if e.complexity.VehicleViolationDetailsStddevFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevFields.PaymentMark(childComplexity), true

	case "vehicle_violation_details_stddev_pop_fields.id":
		if e.complexity.VehicleViolationDetailsStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevPopFields.ID(childComplexity), true

	case "vehicle_violation_details_stddev_pop_fields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsStddevPopFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevPopFields.IllegalHandlingStatus(childComplexity), true

	case "vehicle_violation_details_stddev_pop_fields.information_source":
		if e.complexity.VehicleViolationDetailsStddevPopFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevPopFields.InformationSource(childComplexity), true

	case "vehicle_violation_details_stddev_pop_fields.payment_mark":
		if e.complexity.VehicleViolationDetailsStddevPopFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevPopFields.PaymentMark(childComplexity), true

	case "vehicle_violation_details_stddev_samp_fields.id":
		if e.complexity.VehicleViolationDetailsStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevSampFields.ID(childComplexity), true

	case "vehicle_violation_details_stddev_samp_fields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsStddevSampFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevSampFields.IllegalHandlingStatus(childComplexity), true

	case "vehicle_violation_details_stddev_samp_fields.information_source":
		if e.complexity.VehicleViolationDetailsStddevSampFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevSampFields.InformationSource(childComplexity), true

	case "vehicle_violation_details_stddev_samp_fields.payment_mark":
		if e.complexity.VehicleViolationDetailsStddevSampFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsStddevSampFields.PaymentMark(childComplexity), true

	case "vehicle_violation_details_sum_fields.id":
		if e.complexity.VehicleViolationDetailsSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsSumFields.ID(childComplexity), true

	case "vehicle_violation_details_sum_fields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsSumFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsSumFields.IllegalHandlingStatus(childComplexity), true

	case "vehicle_violation_details_sum_fields.information_source":
		if e.complexity.VehicleViolationDetailsSumFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsSumFields.InformationSource(childComplexity), true

	case "vehicle_violation_details_sum_fields.payment_mark":
		if e.complexity.VehicleViolationDetailsSumFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsSumFields.PaymentMark(childComplexity), true

	case "vehicle_violation_details_var_pop_fields.id":
		if e.complexity.VehicleViolationDetailsVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarPopFields.ID(childComplexity), true

	case "vehicle_violation_details_var_pop_fields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsVarPopFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarPopFields.IllegalHandlingStatus(childComplexity), true

	case "vehicle_violation_details_var_pop_fields.information_source":
		if e.complexity.VehicleViolationDetailsVarPopFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarPopFields.InformationSource(childComplexity), true

	case "vehicle_violation_details_var_pop_fields.payment_mark":
		if e.complexity.VehicleViolationDetailsVarPopFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarPopFields.PaymentMark(childComplexity), true

	case "vehicle_violation_details_var_samp_fields.id":
		if e.complexity.VehicleViolationDetailsVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarSampFields.ID(childComplexity), true

	case "vehicle_violation_details_var_samp_fields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsVarSampFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarSampFields.IllegalHandlingStatus(childComplexity), true

	case "vehicle_violation_details_var_samp_fields.information_source":
		if e.complexity.VehicleViolationDetailsVarSampFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarSampFields.InformationSource(childComplexity), true

	case "vehicle_violation_details_var_samp_fields.payment_mark":
		if e.complexity.VehicleViolationDetailsVarSampFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarSampFields.PaymentMark(childComplexity), true

	case "vehicle_violation_details_variance_fields.id":
		if e.complexity.VehicleViolationDetailsVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarianceFields.ID(childComplexity), true

	case "vehicle_violation_details_variance_fields.illegal_handling_status":
		if e.complexity.VehicleViolationDetailsVarianceFields.IllegalHandlingStatus == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarianceFields.IllegalHandlingStatus(childComplexity), true

	case "vehicle_violation_details_variance_fields.information_source":
		if e.complexity.VehicleViolationDetailsVarianceFields.InformationSource == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarianceFields.InformationSource(childComplexity), true

	case "vehicle_violation_details_variance_fields.payment_mark":
		if e.complexity.VehicleViolationDetailsVarianceFields.PaymentMark == nil {
			break
		}

		return e.complexity.VehicleViolationDetailsVarianceFields.PaymentMark(childComplexity), true

	case "vehicle_violation_scoring_items.created_at":
		if e.complexity.VehicleViolationScoringItems.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.CreatedAt(childComplexity), true

	case "vehicle_violation_scoring_items.created_by":
		if e.complexity.VehicleViolationScoringItems.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.CreatedBy(childComplexity), true

	case "vehicle_violation_scoring_items.deduction_category":
		if e.complexity.VehicleViolationScoringItems.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.DeductionCategory(childComplexity), true

	case "vehicle_violation_scoring_items.deduction_item_description":
		if e.complexity.VehicleViolationScoringItems.DeductionItemDescription == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.DeductionItemDescription(childComplexity), true

	case "vehicle_violation_scoring_items.deleted_at":
		if e.complexity.VehicleViolationScoringItems.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.DeletedAt(childComplexity), true

	case "vehicle_violation_scoring_items.deleted_by":
		if e.complexity.VehicleViolationScoringItems.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.DeletedBy(childComplexity), true

	case "vehicle_violation_scoring_items.demerit_points":
		if e.complexity.VehicleViolationScoringItems.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.DemeritPoints(childComplexity), true

	case "vehicle_violation_scoring_items.id":
		if e.complexity.VehicleViolationScoringItems.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.ID(childComplexity), true

	case "vehicle_violation_scoring_items.is_delete":
		if e.complexity.VehicleViolationScoringItems.IsDelete == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.IsDelete(childComplexity), true

	case "vehicle_violation_scoring_items.updated_at":
		if e.complexity.VehicleViolationScoringItems.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.UpdatedAt(childComplexity), true

	case "vehicle_violation_scoring_items.updated_by":
		if e.complexity.VehicleViolationScoringItems.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.UpdatedBy(childComplexity), true

	case "vehicle_violation_scoring_items.violation_scoring_item_id":
		if e.complexity.VehicleViolationScoringItems.ViolationScoringItemID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItems.ViolationScoringItemID(childComplexity), true

	case "vehicle_violation_scoring_items_aggregate.aggregate":
		if e.complexity.VehicleViolationScoringItemsAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregate.Aggregate(childComplexity), true

	case "vehicle_violation_scoring_items_aggregate.nodes":
		if e.complexity.VehicleViolationScoringItemsAggregate.Nodes == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregate.Nodes(childComplexity), true

	case "vehicle_violation_scoring_items_aggregate_fields.avg":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.Avg(childComplexity), true

	case "vehicle_violation_scoring_items_aggregate_fields.count":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_vehicle_violation_scoring_items_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.Count(childComplexity, args["columns"].([]model.VehicleViolationScoringItemsSelectColumn), args["distinct"].(*bool)), true

	case "vehicle_violation_scoring_items_aggregate_fields.max":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.Max(childComplexity), true

	case "vehicle_violation_scoring_items_aggregate_fields.min":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.Min(childComplexity), true

	case "vehicle_violation_scoring_items_aggregate_fields.stddev":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.Stddev(childComplexity), true

	case "vehicle_violation_scoring_items_aggregate_fields.stddev_pop":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.StddevPop(childComplexity), true

	case "vehicle_violation_scoring_items_aggregate_fields.stddev_samp":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.StddevSamp(childComplexity), true

	case "vehicle_violation_scoring_items_aggregate_fields.sum":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.Sum(childComplexity), true

	case "vehicle_violation_scoring_items_aggregate_fields.var_pop":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.VarPop(childComplexity), true

	case "vehicle_violation_scoring_items_aggregate_fields.var_samp":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.VarSamp(childComplexity), true

	case "vehicle_violation_scoring_items_aggregate_fields.variance":
		if e.complexity.VehicleViolationScoringItemsAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAggregateFields.Variance(childComplexity), true

	case "vehicle_violation_scoring_items_avg_fields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsAvgFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAvgFields.DeductionCategory(childComplexity), true

	case "vehicle_violation_scoring_items_avg_fields.id":
		if e.complexity.VehicleViolationScoringItemsAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsAvgFields.ID(childComplexity), true

	case "vehicle_violation_scoring_items_max_fields.created_at":
		if e.complexity.VehicleViolationScoringItemsMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.CreatedAt(childComplexity), true

	case "vehicle_violation_scoring_items_max_fields.created_by":
		if e.complexity.VehicleViolationScoringItemsMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.CreatedBy(childComplexity), true

	case "vehicle_violation_scoring_items_max_fields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsMaxFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.DeductionCategory(childComplexity), true

	case "vehicle_violation_scoring_items_max_fields.deduction_item_description":
		if e.complexity.VehicleViolationScoringItemsMaxFields.DeductionItemDescription == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.DeductionItemDescription(childComplexity), true

	case "vehicle_violation_scoring_items_max_fields.deleted_at":
		if e.complexity.VehicleViolationScoringItemsMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.DeletedAt(childComplexity), true

	case "vehicle_violation_scoring_items_max_fields.deleted_by":
		if e.complexity.VehicleViolationScoringItemsMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.DeletedBy(childComplexity), true

	case "vehicle_violation_scoring_items_max_fields.demerit_points":
		if e.complexity.VehicleViolationScoringItemsMaxFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.DemeritPoints(childComplexity), true

	case "vehicle_violation_scoring_items_max_fields.id":
		if e.complexity.VehicleViolationScoringItemsMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.ID(childComplexity), true

	case "vehicle_violation_scoring_items_max_fields.updated_at":
		if e.complexity.VehicleViolationScoringItemsMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.UpdatedAt(childComplexity), true

	case "vehicle_violation_scoring_items_max_fields.updated_by":
		if e.complexity.VehicleViolationScoringItemsMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.UpdatedBy(childComplexity), true

	case "vehicle_violation_scoring_items_max_fields.violation_scoring_item_id":
		if e.complexity.VehicleViolationScoringItemsMaxFields.ViolationScoringItemID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMaxFields.ViolationScoringItemID(childComplexity), true

	case "vehicle_violation_scoring_items_min_fields.created_at":
		if e.complexity.VehicleViolationScoringItemsMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.CreatedAt(childComplexity), true

	case "vehicle_violation_scoring_items_min_fields.created_by":
		if e.complexity.VehicleViolationScoringItemsMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.CreatedBy(childComplexity), true

	case "vehicle_violation_scoring_items_min_fields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsMinFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.DeductionCategory(childComplexity), true

	case "vehicle_violation_scoring_items_min_fields.deduction_item_description":
		if e.complexity.VehicleViolationScoringItemsMinFields.DeductionItemDescription == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.DeductionItemDescription(childComplexity), true

	case "vehicle_violation_scoring_items_min_fields.deleted_at":
		if e.complexity.VehicleViolationScoringItemsMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.DeletedAt(childComplexity), true

	case "vehicle_violation_scoring_items_min_fields.deleted_by":
		if e.complexity.VehicleViolationScoringItemsMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.DeletedBy(childComplexity), true

	case "vehicle_violation_scoring_items_min_fields.demerit_points":
		if e.complexity.VehicleViolationScoringItemsMinFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.DemeritPoints(childComplexity), true

	case "vehicle_violation_scoring_items_min_fields.id":
		if e.complexity.VehicleViolationScoringItemsMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.ID(childComplexity), true

	case "vehicle_violation_scoring_items_min_fields.updated_at":
		if e.complexity.VehicleViolationScoringItemsMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.UpdatedAt(childComplexity), true

	case "vehicle_violation_scoring_items_min_fields.updated_by":
		if e.complexity.VehicleViolationScoringItemsMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.UpdatedBy(childComplexity), true

	case "vehicle_violation_scoring_items_min_fields.violation_scoring_item_id":
		if e.complexity.VehicleViolationScoringItemsMinFields.ViolationScoringItemID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMinFields.ViolationScoringItemID(childComplexity), true

	case "vehicle_violation_scoring_items_mutation_response.affected_rows":
		if e.complexity.VehicleViolationScoringItemsMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMutationResponse.AffectedRows(childComplexity), true

	case "vehicle_violation_scoring_items_mutation_response.returning":
		if e.complexity.VehicleViolationScoringItemsMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsMutationResponse.Returning(childComplexity), true

	case "vehicle_violation_scoring_items_stddev_fields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsStddevFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsStddevFields.DeductionCategory(childComplexity), true

	case "vehicle_violation_scoring_items_stddev_fields.id":
		if e.complexity.VehicleViolationScoringItemsStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsStddevFields.ID(childComplexity), true

	case "vehicle_violation_scoring_items_stddev_pop_fields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsStddevPopFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsStddevPopFields.DeductionCategory(childComplexity), true

	case "vehicle_violation_scoring_items_stddev_pop_fields.id":
		if e.complexity.VehicleViolationScoringItemsStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsStddevPopFields.ID(childComplexity), true

	case "vehicle_violation_scoring_items_stddev_samp_fields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsStddevSampFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsStddevSampFields.DeductionCategory(childComplexity), true

	case "vehicle_violation_scoring_items_stddev_samp_fields.id":
		if e.complexity.VehicleViolationScoringItemsStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsStddevSampFields.ID(childComplexity), true

	case "vehicle_violation_scoring_items_sum_fields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsSumFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsSumFields.DeductionCategory(childComplexity), true

	case "vehicle_violation_scoring_items_sum_fields.id":
		if e.complexity.VehicleViolationScoringItemsSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsSumFields.ID(childComplexity), true

	case "vehicle_violation_scoring_items_var_pop_fields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsVarPopFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsVarPopFields.DeductionCategory(childComplexity), true

	case "vehicle_violation_scoring_items_var_pop_fields.id":
		if e.complexity.VehicleViolationScoringItemsVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsVarPopFields.ID(childComplexity), true

	case "vehicle_violation_scoring_items_var_samp_fields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsVarSampFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsVarSampFields.DeductionCategory(childComplexity), true

	case "vehicle_violation_scoring_items_var_samp_fields.id":
		if e.complexity.VehicleViolationScoringItemsVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsVarSampFields.ID(childComplexity), true

	case "vehicle_violation_scoring_items_variance_fields.deduction_category":
		if e.complexity.VehicleViolationScoringItemsVarianceFields.DeductionCategory == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsVarianceFields.DeductionCategory(childComplexity), true

	case "vehicle_violation_scoring_items_variance_fields.id":
		if e.complexity.VehicleViolationScoringItemsVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringItemsVarianceFields.ID(childComplexity), true

	case "vehicle_violation_scoring_record.created_at":
		if e.complexity.VehicleViolationScoringRecord.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.CreatedAt(childComplexity), true

	case "vehicle_violation_scoring_record.created_by":
		if e.complexity.VehicleViolationScoringRecord.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.CreatedBy(childComplexity), true

	case "vehicle_violation_scoring_record.deleted_at":
		if e.complexity.VehicleViolationScoringRecord.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.DeletedAt(childComplexity), true

	case "vehicle_violation_scoring_record.deleted_by":
		if e.complexity.VehicleViolationScoringRecord.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.DeletedBy(childComplexity), true

	case "vehicle_violation_scoring_record.demerit_points":
		if e.complexity.VehicleViolationScoringRecord.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.DemeritPoints(childComplexity), true

	case "vehicle_violation_scoring_record.id":
		if e.complexity.VehicleViolationScoringRecord.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.ID(childComplexity), true

	case "vehicle_violation_scoring_record.is_delete":
		if e.complexity.VehicleViolationScoringRecord.IsDelete == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.IsDelete(childComplexity), true

	case "vehicle_violation_scoring_record.remarks":
		if e.complexity.VehicleViolationScoringRecord.Remarks == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.Remarks(childComplexity), true

	case "vehicle_violation_scoring_record.updated_at":
		if e.complexity.VehicleViolationScoringRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.UpdatedAt(childComplexity), true

	case "vehicle_violation_scoring_record.updated_by":
		if e.complexity.VehicleViolationScoringRecord.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.UpdatedBy(childComplexity), true

	case "vehicle_violation_scoring_record.vehicle_id":
		if e.complexity.VehicleViolationScoringRecord.VehicleID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.VehicleID(childComplexity), true

	case "vehicle_violation_scoring_record.violation_scoring_id":
		if e.complexity.VehicleViolationScoringRecord.ViolationScoringID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.ViolationScoringID(childComplexity), true

	case "vehicle_violation_scoring_record.violation_scoring_item_id":
		if e.complexity.VehicleViolationScoringRecord.ViolationScoringItemID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecord.ViolationScoringItemID(childComplexity), true

	case "vehicle_violation_scoring_record_aggregate.aggregate":
		if e.complexity.VehicleViolationScoringRecordAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregate.Aggregate(childComplexity), true

	case "vehicle_violation_scoring_record_aggregate.nodes":
		if e.complexity.VehicleViolationScoringRecordAggregate.Nodes == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregate.Nodes(childComplexity), true

	case "vehicle_violation_scoring_record_aggregate_fields.avg":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.Avg(childComplexity), true

	case "vehicle_violation_scoring_record_aggregate_fields.count":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_vehicle_violation_scoring_record_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.Count(childComplexity, args["columns"].([]model.VehicleViolationScoringRecordSelectColumn), args["distinct"].(*bool)), true

	case "vehicle_violation_scoring_record_aggregate_fields.max":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.Max(childComplexity), true

	case "vehicle_violation_scoring_record_aggregate_fields.min":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.Min(childComplexity), true

	case "vehicle_violation_scoring_record_aggregate_fields.stddev":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.Stddev(childComplexity), true

	case "vehicle_violation_scoring_record_aggregate_fields.stddev_pop":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.StddevPop(childComplexity), true

	case "vehicle_violation_scoring_record_aggregate_fields.stddev_samp":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.StddevSamp(childComplexity), true

	case "vehicle_violation_scoring_record_aggregate_fields.sum":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.Sum(childComplexity), true

	case "vehicle_violation_scoring_record_aggregate_fields.var_pop":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.VarPop(childComplexity), true

	case "vehicle_violation_scoring_record_aggregate_fields.var_samp":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.VarSamp(childComplexity), true

	case "vehicle_violation_scoring_record_aggregate_fields.variance":
		if e.complexity.VehicleViolationScoringRecordAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAggregateFields.Variance(childComplexity), true

	case "vehicle_violation_scoring_record_avg_fields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordAvgFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAvgFields.DemeritPoints(childComplexity), true

	case "vehicle_violation_scoring_record_avg_fields.id":
		if e.complexity.VehicleViolationScoringRecordAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordAvgFields.ID(childComplexity), true

	case "vehicle_violation_scoring_record_max_fields.created_at":
		if e.complexity.VehicleViolationScoringRecordMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.CreatedAt(childComplexity), true

	case "vehicle_violation_scoring_record_max_fields.created_by":
		if e.complexity.VehicleViolationScoringRecordMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.CreatedBy(childComplexity), true

	case "vehicle_violation_scoring_record_max_fields.deleted_at":
		if e.complexity.VehicleViolationScoringRecordMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.DeletedAt(childComplexity), true

	case "vehicle_violation_scoring_record_max_fields.deleted_by":
		if e.complexity.VehicleViolationScoringRecordMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.DeletedBy(childComplexity), true

	case "vehicle_violation_scoring_record_max_fields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordMaxFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.DemeritPoints(childComplexity), true

	case "vehicle_violation_scoring_record_max_fields.id":
		if e.complexity.VehicleViolationScoringRecordMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.ID(childComplexity), true

	case "vehicle_violation_scoring_record_max_fields.remarks":
		if e.complexity.VehicleViolationScoringRecordMaxFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.Remarks(childComplexity), true

	case "vehicle_violation_scoring_record_max_fields.updated_at":
		if e.complexity.VehicleViolationScoringRecordMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.UpdatedAt(childComplexity), true

	case "vehicle_violation_scoring_record_max_fields.updated_by":
		if e.complexity.VehicleViolationScoringRecordMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.UpdatedBy(childComplexity), true

	case "vehicle_violation_scoring_record_max_fields.vehicle_id":
		if e.complexity.VehicleViolationScoringRecordMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.VehicleID(childComplexity), true

	case "vehicle_violation_scoring_record_max_fields.violation_scoring_id":
		if e.complexity.VehicleViolationScoringRecordMaxFields.ViolationScoringID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.ViolationScoringID(childComplexity), true

	case "vehicle_violation_scoring_record_max_fields.violation_scoring_item_id":
		if e.complexity.VehicleViolationScoringRecordMaxFields.ViolationScoringItemID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMaxFields.ViolationScoringItemID(childComplexity), true

	case "vehicle_violation_scoring_record_min_fields.created_at":
		if e.complexity.VehicleViolationScoringRecordMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.CreatedAt(childComplexity), true

	case "vehicle_violation_scoring_record_min_fields.created_by":
		if e.complexity.VehicleViolationScoringRecordMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.CreatedBy(childComplexity), true

	case "vehicle_violation_scoring_record_min_fields.deleted_at":
		if e.complexity.VehicleViolationScoringRecordMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.DeletedAt(childComplexity), true

	case "vehicle_violation_scoring_record_min_fields.deleted_by":
		if e.complexity.VehicleViolationScoringRecordMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.DeletedBy(childComplexity), true

	case "vehicle_violation_scoring_record_min_fields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordMinFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.DemeritPoints(childComplexity), true

	case "vehicle_violation_scoring_record_min_fields.id":
		if e.complexity.VehicleViolationScoringRecordMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.ID(childComplexity), true

	case "vehicle_violation_scoring_record_min_fields.remarks":
		if e.complexity.VehicleViolationScoringRecordMinFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.Remarks(childComplexity), true

	case "vehicle_violation_scoring_record_min_fields.updated_at":
		if e.complexity.VehicleViolationScoringRecordMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.UpdatedAt(childComplexity), true

	case "vehicle_violation_scoring_record_min_fields.updated_by":
		if e.complexity.VehicleViolationScoringRecordMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.UpdatedBy(childComplexity), true

	case "vehicle_violation_scoring_record_min_fields.vehicle_id":
		if e.complexity.VehicleViolationScoringRecordMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.VehicleID(childComplexity), true

	case "vehicle_violation_scoring_record_min_fields.violation_scoring_id":
		if e.complexity.VehicleViolationScoringRecordMinFields.ViolationScoringID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.ViolationScoringID(childComplexity), true

	case "vehicle_violation_scoring_record_min_fields.violation_scoring_item_id":
		if e.complexity.VehicleViolationScoringRecordMinFields.ViolationScoringItemID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMinFields.ViolationScoringItemID(childComplexity), true

	case "vehicle_violation_scoring_record_mutation_response.affected_rows":
		if e.complexity.VehicleViolationScoringRecordMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMutationResponse.AffectedRows(childComplexity), true

	case "vehicle_violation_scoring_record_mutation_response.returning":
		if e.complexity.VehicleViolationScoringRecordMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordMutationResponse.Returning(childComplexity), true

	case "vehicle_violation_scoring_record_stddev_fields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordStddevFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordStddevFields.DemeritPoints(childComplexity), true

	case "vehicle_violation_scoring_record_stddev_fields.id":
		if e.complexity.VehicleViolationScoringRecordStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordStddevFields.ID(childComplexity), true

	case "vehicle_violation_scoring_record_stddev_pop_fields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordStddevPopFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordStddevPopFields.DemeritPoints(childComplexity), true

	case "vehicle_violation_scoring_record_stddev_pop_fields.id":
		if e.complexity.VehicleViolationScoringRecordStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordStddevPopFields.ID(childComplexity), true

	case "vehicle_violation_scoring_record_stddev_samp_fields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordStddevSampFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordStddevSampFields.DemeritPoints(childComplexity), true

	case "vehicle_violation_scoring_record_stddev_samp_fields.id":
		if e.complexity.VehicleViolationScoringRecordStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordStddevSampFields.ID(childComplexity), true

	case "vehicle_violation_scoring_record_sum_fields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordSumFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordSumFields.DemeritPoints(childComplexity), true

	case "vehicle_violation_scoring_record_sum_fields.id":
		if e.complexity.VehicleViolationScoringRecordSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordSumFields.ID(childComplexity), true

	case "vehicle_violation_scoring_record_var_pop_fields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordVarPopFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordVarPopFields.DemeritPoints(childComplexity), true

	case "vehicle_violation_scoring_record_var_pop_fields.id":
		if e.complexity.VehicleViolationScoringRecordVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordVarPopFields.ID(childComplexity), true

	case "vehicle_violation_scoring_record_var_samp_fields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordVarSampFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordVarSampFields.DemeritPoints(childComplexity), true

	case "vehicle_violation_scoring_record_var_samp_fields.id":
		if e.complexity.VehicleViolationScoringRecordVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordVarSampFields.ID(childComplexity), true

	case "vehicle_violation_scoring_record_variance_fields.demerit_points":
		if e.complexity.VehicleViolationScoringRecordVarianceFields.DemeritPoints == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordVarianceFields.DemeritPoints(childComplexity), true

	case "vehicle_violation_scoring_record_variance_fields.id":
		if e.complexity.VehicleViolationScoringRecordVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleViolationScoringRecordVarianceFields.ID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/VIO_CODEWFDM.graphqls", Input: `

extend type Mutation {
    """
    delete data from the table: "VIO_CODEWFDM"
  """
    delete_VIO_CODEWFDM(
        """filter the rows which have to be deleted"""
        where: VIO_CODEWFDM_bool_exp!
    ): VIO_CODEWFDM_mutation_response

    """
    insert data into the table: "VIO_CODEWFDM"
  """
    insert_VIO_CODEWFDM(
        """the rows to be inserted"""
        objects: [VIO_CODEWFDM_insert_input!]!
    ): VIO_CODEWFDM_mutation_response

    """
    insert a single row into the table: "VIO_CODEWFDM"
  """
    insert_VIO_CODEWFDM_one(
        """the row to be inserted"""
        object: VIO_CODEWFDM_insert_input!
    ): VIO_CODEWFDM

    """
    update data of the table: "VIO_CODEWFDM"
  """
    update_VIO_CODEWFDM(
        """increments the integer columns with given value of the filtered values"""
        _inc: VIO_CODEWFDM_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: VIO_CODEWFDM_set_input

        """filter the rows which have to be updated"""
        where: VIO_CODEWFDM_bool_exp!
    ): VIO_CODEWFDM_mutation_response
}


extend type Query {
    """
    fetch data from the table: "VIO_CODEWFDM"
  """
    VIO_CODEWFDM(
        """distinct select on columns"""
        distinct_on: [VIO_CODEWFDM_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [VIO_CODEWFDM_order_by!]

        """filter the rows returned"""
        where: VIO_CODEWFDM_bool_exp
    ): [VIO_CODEWFDM!]!

    """
    fetch aggregated fields from the table: "VIO_CODEWFDM"
  """
    VIO_CODEWFDM_aggregate(
        """distinct select on columns"""
        distinct_on: [VIO_CODEWFDM_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [VIO_CODEWFDM_order_by!]

        """filter the rows returned"""
        where: VIO_CODEWFDM_bool_exp
    ): VIO_CODEWFDM_aggregate!
}



extend type Subscription {
    """
    fetch data from the table: "VIO_CODEWFDM"
  """
    VIO_CODEWFDM(
        """distinct select on columns"""
        distinct_on: [VIO_CODEWFDM_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [VIO_CODEWFDM_order_by!]

        """filter the rows returned"""
        where: VIO_CODEWFDM_bool_exp
    ): [VIO_CODEWFDM!]!

    """
    fetch aggregated fields from the table: "VIO_CODEWFDM"
  """
    VIO_CODEWFDM_aggregate(
        """distinct select on columns"""
        distinct_on: [VIO_CODEWFDM_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [VIO_CODEWFDM_order_by!]

        """filter the rows returned"""
        where: VIO_CODEWFDM_bool_exp
    ): VIO_CODEWFDM_aggregate!
}

"""
违法描述字典表(交警提供数据表，暂无修改)


columns and relationships of "VIO_CODEWFDM"

"""
type VIO_CODEWFDM {
    """最大罚款金额"""
    FKJE_MAX: numeric

    """最小罚款金额"""
    FKJE_MIN: numeric

    """违法计分数"""
    WFJFS: numeric

    """违法描述"""
    WFMS: String

    """违法行为"""
    WFXW: String!

    """序号"""
    XH: String
}

"""
aggregated selection of "VIO_CODEWFDM"
"""
type VIO_CODEWFDM_aggregate {
    aggregate: VIO_CODEWFDM_aggregate_fields
    nodes: [VIO_CODEWFDM!]!
}

"""
aggregate fields of "VIO_CODEWFDM"
"""
type VIO_CODEWFDM_aggregate_fields {
    avg: VIO_CODEWFDM_avg_fields
    count(columns: [VIO_CODEWFDM_select_column!], distinct: Boolean): Int
    max: VIO_CODEWFDM_max_fields
    min: VIO_CODEWFDM_min_fields
    stddev: VIO_CODEWFDM_stddev_fields
    stddev_pop: VIO_CODEWFDM_stddev_pop_fields
    stddev_samp: VIO_CODEWFDM_stddev_samp_fields
    sum: VIO_CODEWFDM_sum_fields
    var_pop: VIO_CODEWFDM_var_pop_fields
    var_samp: VIO_CODEWFDM_var_samp_fields
    variance: VIO_CODEWFDM_variance_fields
}

"""
order by aggregate values of table "VIO_CODEWFDM"
"""
input VIO_CODEWFDM_aggregate_order_by {
    avg: VIO_CODEWFDM_avg_order_by
    count: order_by
    max: VIO_CODEWFDM_max_order_by
    min: VIO_CODEWFDM_min_order_by
    stddev: VIO_CODEWFDM_stddev_order_by
    stddev_pop: VIO_CODEWFDM_stddev_pop_order_by
    stddev_samp: VIO_CODEWFDM_stddev_samp_order_by
    sum: VIO_CODEWFDM_sum_order_by
    var_pop: VIO_CODEWFDM_var_pop_order_by
    var_samp: VIO_CODEWFDM_var_samp_order_by
    variance: VIO_CODEWFDM_variance_order_by
}

"""
input type for inserting array relation for remote table "VIO_CODEWFDM"
"""
input VIO_CODEWFDM_arr_rel_insert_input {
    data: [VIO_CODEWFDM_insert_input!]!
}

"""aggregate avg on columns"""
type VIO_CODEWFDM_avg_fields {
    FKJE_MAX: Float
    FKJE_MIN: Float
    WFJFS: Float
}

"""
order by avg() on columns of table "VIO_CODEWFDM"
"""
input VIO_CODEWFDM_avg_order_by {
    FKJE_MAX: order_by
    FKJE_MIN: order_by
    WFJFS: order_by
}

"""
Boolean expression to filter rows from the table "VIO_CODEWFDM". All fields are combined with a logical 'AND'.
"""
input VIO_CODEWFDM_bool_exp {
    FKJE_MAX: numeric_comparison_exp
    FKJE_MIN: numeric_comparison_exp
    WFJFS: numeric_comparison_exp
    WFMS: String_comparison_exp
    WFXW: String_comparison_exp
    XH: String_comparison_exp
    _and: [VIO_CODEWFDM_bool_exp]
    _not: VIO_CODEWFDM_bool_exp
    _or: [VIO_CODEWFDM_bool_exp]
}

"""
input type for incrementing integer column in table "VIO_CODEWFDM"
"""
input VIO_CODEWFDM_inc_input {
    FKJE_MAX: numeric
    FKJE_MIN: numeric
    WFJFS: numeric
}

"""
input type for inserting data into table "VIO_CODEWFDM"
"""
input VIO_CODEWFDM_insert_input {
    FKJE_MAX: numeric
    FKJE_MIN: numeric
    WFJFS: numeric
    WFMS: String
    WFXW: String
    XH: String
}

"""aggregate max on columns"""
type VIO_CODEWFDM_max_fields {
    FKJE_MAX: numeric
    FKJE_MIN: numeric
    WFJFS: numeric
    WFMS: String
    WFXW: String
    XH: String
}

"""
order by max() on columns of table "VIO_CODEWFDM"
"""
input VIO_CODEWFDM_max_order_by {
    FKJE_MAX: order_by
    FKJE_MIN: order_by
    WFJFS: order_by
    WFMS: order_by
    WFXW: order_by
    XH: order_by
}

"""aggregate min on columns"""
type VIO_CODEWFDM_min_fields {
    FKJE_MAX: numeric
    FKJE_MIN: numeric
    WFJFS: numeric
    WFMS: String
    WFXW: String
    XH: String
}

"""
order by min() on columns of table "VIO_CODEWFDM"
"""
input VIO_CODEWFDM_min_order_by {
    FKJE_MAX: order_by
    FKJE_MIN: order_by
    WFJFS: order_by
    WFMS: order_by
    WFXW: order_by
    XH: order_by
}

"""
response of any mutation on the table "VIO_CODEWFDM"
"""
type VIO_CODEWFDM_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [VIO_CODEWFDM!]!
}

"""
input type for inserting object relation for remote table "VIO_CODEWFDM"
"""
input VIO_CODEWFDM_obj_rel_insert_input {
    data: VIO_CODEWFDM_insert_input!
}

"""
ordering options when selecting data from "VIO_CODEWFDM"
"""
input VIO_CODEWFDM_order_by {
    FKJE_MAX: order_by
    FKJE_MIN: order_by
    WFJFS: order_by
    WFMS: order_by
    WFXW: order_by
    XH: order_by
}

"""
select columns of table "VIO_CODEWFDM"
"""
enum VIO_CODEWFDM_select_column {
    """column name"""
    FKJE_MAX

    """column name"""
    FKJE_MIN

    """column name"""
    WFJFS

    """column name"""
    WFMS

    """column name"""
    WFXW

    """column name"""
    XH
}

"""
input type for updating data in table "VIO_CODEWFDM"
"""
input VIO_CODEWFDM_set_input {
    FKJE_MAX: numeric
    FKJE_MIN: numeric
    WFJFS: numeric
    WFMS: String
    WFXW: String
    XH: String
}

"""aggregate stddev on columns"""
type VIO_CODEWFDM_stddev_fields {
    FKJE_MAX: Float
    FKJE_MIN: Float
    WFJFS: Float
}

"""
order by stddev() on columns of table "VIO_CODEWFDM"
"""
input VIO_CODEWFDM_stddev_order_by {
    FKJE_MAX: order_by
    FKJE_MIN: order_by
    WFJFS: order_by
}

"""aggregate stddev_pop on columns"""
type VIO_CODEWFDM_stddev_pop_fields {
    FKJE_MAX: Float
    FKJE_MIN: Float
    WFJFS: Float
}

"""
order by stddev_pop() on columns of table "VIO_CODEWFDM"
"""
input VIO_CODEWFDM_stddev_pop_order_by {
    FKJE_MAX: order_by
    FKJE_MIN: order_by
    WFJFS: order_by
}

"""aggregate stddev_samp on columns"""
type VIO_CODEWFDM_stddev_samp_fields {
    FKJE_MAX: Float
    FKJE_MIN: Float
    WFJFS: Float
}

"""
order by stddev_samp() on columns of table "VIO_CODEWFDM"
"""
input VIO_CODEWFDM_stddev_samp_order_by {
    FKJE_MAX: order_by
    FKJE_MIN: order_by
    WFJFS: order_by
}

"""aggregate sum on columns"""
type VIO_CODEWFDM_sum_fields {
    FKJE_MAX: numeric
    FKJE_MIN: numeric
    WFJFS: numeric
}

"""
order by sum() on columns of table "VIO_CODEWFDM"
"""
input VIO_CODEWFDM_sum_order_by {
    FKJE_MAX: order_by
    FKJE_MIN: order_by
    WFJFS: order_by
}

"""aggregate var_pop on columns"""
type VIO_CODEWFDM_var_pop_fields {
    FKJE_MAX: Float
    FKJE_MIN: Float
    WFJFS: Float
}

"""
order by var_pop() on columns of table "VIO_CODEWFDM"
"""
input VIO_CODEWFDM_var_pop_order_by {
    FKJE_MAX: order_by
    FKJE_MIN: order_by
    WFJFS: order_by
}

"""aggregate var_samp on columns"""
type VIO_CODEWFDM_var_samp_fields {
    FKJE_MAX: Float
    FKJE_MIN: Float
    WFJFS: Float
}

"""
order by var_samp() on columns of table "VIO_CODEWFDM"
"""
input VIO_CODEWFDM_var_samp_order_by {
    FKJE_MAX: order_by
    FKJE_MIN: order_by
    WFJFS: order_by
}

"""aggregate variance on columns"""
type VIO_CODEWFDM_variance_fields {
    FKJE_MAX: Float
    FKJE_MIN: Float
    WFJFS: Float
}

"""
order by variance() on columns of table "VIO_CODEWFDM"
"""
input VIO_CODEWFDM_variance_order_by {
    FKJE_MAX: order_by
    FKJE_MIN: order_by
    WFJFS: order_by
}

`, BuiltIn: false},
	{Name: "graph/graphqls/app_enforcement.graphqls", Input: `
"""
APP现场执法表


columns and relationships of "app_enforcement"

"""
type app_enforcement {
    """空间数据类型point表示经度(longitude)和纬度(latitude)"""
    coordinate: point

    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """编辑文本"""
    edit_text: String

    """企业类型字典"""
    enterprise_type: String

    """主键"""
    id: bigint!

    """联合主键"""
    illegal_photo_id: String!

    """位置描述"""
    location_description: String

    """操作用户"""
    operation_user: String

    """纠察状态"""
    picket_status: Int

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String

    """vehicle_info 车辆信息表 的vehicle_id"""
    vehicle_id: String

    """违法明细表ID(vehicle_violation_details的violation_detail_id)"""
    violation_detail_id: String
}

"""
aggregated selection of "app_enforcement"
"""
type app_enforcement_aggregate {
    aggregate: app_enforcement_aggregate_fields
    nodes: [app_enforcement!]!
}

"""
aggregate fields of "app_enforcement"
"""
type app_enforcement_aggregate_fields {
    avg: app_enforcement_avg_fields
    count(columns: [app_enforcement_select_column!], distinct: Boolean): Int
    max: app_enforcement_max_fields
    min: app_enforcement_min_fields
    stddev: app_enforcement_stddev_fields
    stddev_pop: app_enforcement_stddev_pop_fields
    stddev_samp: app_enforcement_stddev_samp_fields
    sum: app_enforcement_sum_fields
    var_pop: app_enforcement_var_pop_fields
    var_samp: app_enforcement_var_samp_fields
    variance: app_enforcement_variance_fields
}

"""
order by aggregate values of table "app_enforcement"
"""
input app_enforcement_aggregate_order_by {
    avg: app_enforcement_avg_order_by
    count: order_by
    max: app_enforcement_max_order_by
    min: app_enforcement_min_order_by
    stddev: app_enforcement_stddev_order_by
    stddev_pop: app_enforcement_stddev_pop_order_by
    stddev_samp: app_enforcement_stddev_samp_order_by
    sum: app_enforcement_sum_order_by
    var_pop: app_enforcement_var_pop_order_by
    var_samp: app_enforcement_var_samp_order_by
    variance: app_enforcement_variance_order_by
}

"""
input type for inserting array relation for remote table "app_enforcement"
"""
input app_enforcement_arr_rel_insert_input {
    data: [app_enforcement_insert_input!]!
    on_conflict: app_enforcement_on_conflict
}

"""aggregate avg on columns"""
type app_enforcement_avg_fields {
    id: Float
    picket_status: Float
}

"""
order by avg() on columns of table "app_enforcement"
"""
input app_enforcement_avg_order_by {
    id: order_by
    picket_status: order_by
}

"""
Boolean expression to filter rows from the table "app_enforcement". All fields are combined with a logical 'AND'.
"""
input app_enforcement_bool_exp {
    _and: [app_enforcement_bool_exp]
    _not: app_enforcement_bool_exp
    _or: [app_enforcement_bool_exp]
    coordinate: point_comparison_exp
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    edit_text: String_comparison_exp
    enterprise_type: String_comparison_exp
    id: bigint_comparison_exp
    illegal_photo_id: String_comparison_exp
    location_description: String_comparison_exp
    operation_user: String_comparison_exp
    picket_status: Int_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    vehicle_id: String_comparison_exp
    violation_detail_id: String_comparison_exp
}

"""
unique or primary key constraints on table "app_enforcement"
"""
enum app_enforcement_constraint {
    """unique or primary key constraint"""
    app_enforcement_pkey
}

"""
input type for incrementing integer column in table "app_enforcement"
"""
input app_enforcement_inc_input {
    id: bigint
    picket_status: Int
}

"""
input type for inserting data into table "app_enforcement"
"""
input app_enforcement_insert_input {
    coordinate: point
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    edit_text: String
    enterprise_type: String
    id: bigint
    illegal_photo_id: String
    location_description: String
    operation_user: String
    picket_status: Int
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    violation_detail_id: String
}

"""aggregate max on columns"""
type app_enforcement_max_fields {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    edit_text: String
    enterprise_type: String
    id: bigint
    illegal_photo_id: String
    location_description: String
    operation_user: String
    picket_status: Int
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    violation_detail_id: String
}

"""
order by max() on columns of table "app_enforcement"
"""
input app_enforcement_max_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    edit_text: order_by
    enterprise_type: order_by
    id: order_by
    illegal_photo_id: order_by
    location_description: order_by
    operation_user: order_by
    picket_status: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
    violation_detail_id: order_by
}

"""aggregate min on columns"""
type app_enforcement_min_fields {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    edit_text: String
    enterprise_type: String
    id: bigint
    illegal_photo_id: String
    location_description: String
    operation_user: String
    picket_status: Int
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    violation_detail_id: String
}

"""
order by min() on columns of table "app_enforcement"
"""
input app_enforcement_min_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    edit_text: order_by
    enterprise_type: order_by
    id: order_by
    illegal_photo_id: order_by
    location_description: order_by
    operation_user: order_by
    picket_status: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
    violation_detail_id: order_by
}

"""
response of any mutation on the table "app_enforcement"
"""
type app_enforcement_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [app_enforcement!]!
}

"""
input type for inserting object relation for remote table "app_enforcement"
"""
input app_enforcement_obj_rel_insert_input {
    data: app_enforcement_insert_input!
    on_conflict: app_enforcement_on_conflict
}

"""
on conflict condition type for table "app_enforcement"
"""
input app_enforcement_on_conflict {
    constraint: app_enforcement_constraint!
    update_columns: [app_enforcement_update_column!]!
    where: app_enforcement_bool_exp
}

"""
ordering options when selecting data from "app_enforcement"
"""
input app_enforcement_order_by {
    coordinate: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    edit_text: order_by
    enterprise_type: order_by
    id: order_by
    illegal_photo_id: order_by
    location_description: order_by
    operation_user: order_by
    picket_status: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
    violation_detail_id: order_by
}

"""
primary key columns input for table: "app_enforcement"
"""
input app_enforcement_pk_columns_input {
    """主键"""
    id: bigint!

    """联合主键"""
    illegal_photo_id: String!
}

"""
select columns of table "app_enforcement"
"""
enum app_enforcement_select_column {
    """column name"""
    coordinate

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    edit_text

    """column name"""
    enterprise_type

    """column name"""
    id

    """column name"""
    illegal_photo_id

    """column name"""
    location_description

    """column name"""
    operation_user

    """column name"""
    picket_status

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    vehicle_id

    """column name"""
    violation_detail_id
}

"""
input type for updating data in table "app_enforcement"
"""
input app_enforcement_set_input {
    coordinate: point
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    edit_text: String
    enterprise_type: String
    id: bigint
    illegal_photo_id: String
    location_description: String
    operation_user: String
    picket_status: Int
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    violation_detail_id: String
}

"""aggregate stddev on columns"""
type app_enforcement_stddev_fields {
    id: Float
    picket_status: Float
}

"""
order by stddev() on columns of table "app_enforcement"
"""
input app_enforcement_stddev_order_by {
    id: order_by
    picket_status: order_by
}

"""aggregate stddev_pop on columns"""
type app_enforcement_stddev_pop_fields {
    id: Float
    picket_status: Float
}

"""
order by stddev_pop() on columns of table "app_enforcement"
"""
input app_enforcement_stddev_pop_order_by {
    id: order_by
    picket_status: order_by
}

"""aggregate stddev_samp on columns"""
type app_enforcement_stddev_samp_fields {
    id: Float
    picket_status: Float
}

"""
order by stddev_samp() on columns of table "app_enforcement"
"""
input app_enforcement_stddev_samp_order_by {
    id: order_by
    picket_status: order_by
}

"""aggregate sum on columns"""
type app_enforcement_sum_fields {
    id: bigint
    picket_status: Int
}

"""
order by sum() on columns of table "app_enforcement"
"""
input app_enforcement_sum_order_by {
    id: order_by
    picket_status: order_by
}

"""
update columns of table "app_enforcement"
"""
enum app_enforcement_update_column {
    """column name"""
    coordinate

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    edit_text

    """column name"""
    enterprise_type

    """column name"""
    id

    """column name"""
    illegal_photo_id

    """column name"""
    location_description

    """column name"""
    operation_user

    """column name"""
    picket_status

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    vehicle_id

    """column name"""
    violation_detail_id
}

"""aggregate var_pop on columns"""
type app_enforcement_var_pop_fields {
    id: Float
    picket_status: Float
}

"""
order by var_pop() on columns of table "app_enforcement"
"""
input app_enforcement_var_pop_order_by {
    id: order_by
    picket_status: order_by
}

"""aggregate var_samp on columns"""
type app_enforcement_var_samp_fields {
    id: Float
    picket_status: Float
}

"""
order by var_samp() on columns of table "app_enforcement"
"""
input app_enforcement_var_samp_order_by {
    id: order_by
    picket_status: order_by
}

"""aggregate variance on columns"""
type app_enforcement_variance_fields {
    id: Float
    picket_status: Float
}

"""
order by variance() on columns of table "app_enforcement"
"""
input app_enforcement_variance_order_by {
    id: order_by
    picket_status: order_by
}



"""mutation root"""
type Mutation {
    """
    delete data from the table: "app_enforcement"
  """
    delete_app_enforcement(
        """filter the rows which have to be deleted"""
        where: app_enforcement_bool_exp!
    ): app_enforcement_mutation_response

    """
    delete single row from the table: "app_enforcement"
  """
    delete_app_enforcement_by_pk(
        """主键"""
        id: bigint!

        """联合主键"""
        illegal_photo_id: String!
    ): app_enforcement

    """
    insert data into the table: "app_enforcement"
  """
    insert_app_enforcement(
        """the rows to be inserted"""
        objects: [app_enforcement_insert_input!]!

        """on conflict condition"""
        on_conflict: app_enforcement_on_conflict
    ): app_enforcement_mutation_response

    """
    insert a single row into the table: "app_enforcement"
  """
    insert_app_enforcement_one(
        """the row to be inserted"""
        object: app_enforcement_insert_input!

        """on conflict condition"""
        on_conflict: app_enforcement_on_conflict
    ): app_enforcement

    """
    update data of the table: "app_enforcement"
  """
    update_app_enforcement(
        """increments the integer columns with given value of the filtered values"""
        _inc: app_enforcement_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: app_enforcement_set_input

        """filter the rows which have to be updated"""
        where: app_enforcement_bool_exp!
    ): app_enforcement_mutation_response

    """
    update single row of the table: "app_enforcement"
  """
    update_app_enforcement_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: app_enforcement_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: app_enforcement_set_input
        pk_columns: app_enforcement_pk_columns_input!
    ): app_enforcement
}


"""query root"""
type Query {
    """
    fetch data from the table: "app_enforcement"
  """
    app_enforcement(
        """distinct select on columns"""
        distinct_on: [app_enforcement_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [app_enforcement_order_by!]

        """filter the rows returned"""
        where: app_enforcement_bool_exp
    ): [app_enforcement!]!

    """
    fetch aggregated fields from the table: "app_enforcement"
  """
    app_enforcement_aggregate(
        """distinct select on columns"""
        distinct_on: [app_enforcement_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [app_enforcement_order_by!]

        """filter the rows returned"""
        where: app_enforcement_bool_exp
    ): app_enforcement_aggregate!

    """fetch data from the table: "app_enforcement" using primary key columns"""
    app_enforcement_by_pk(
        """主键"""
        id: bigint!

        """联合主键"""
        illegal_photo_id: String!
    ): app_enforcement
}


"""subscription root"""
type Subscription {
    """
    fetch data from the table: "app_enforcement"
  """
    app_enforcement(
        """distinct select on columns"""
        distinct_on: [app_enforcement_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [app_enforcement_order_by!]

        """filter the rows returned"""
        where: app_enforcement_bool_exp
    ): [app_enforcement!]!

    """
    fetch aggregated fields from the table: "app_enforcement"
  """
    app_enforcement_aggregate(
        """distinct select on columns"""
        distinct_on: [app_enforcement_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [app_enforcement_order_by!]

        """filter the rows returned"""
        where: app_enforcement_bool_exp
    ): app_enforcement_aggregate!

    """fetch data from the table: "app_enforcement" using primary key columns"""
    app_enforcement_by_pk(
        """主键"""
        id: bigint!

        """联合主键"""
        illegal_photo_id: String!
    ): app_enforcement
}

`, BuiltIn: false},
	{Name: "graph/graphqls/dispute_violation_record.graphqls", Input: `
"""
违章争议记录表


columns and relationships of "dispute_violation_record"

"""
type dispute_violation_record {
    """委托代理人身份证"""
    agent_id_number: String

    """审批状态(车辆违法审批状态字典)"""
    approve_state: Int

    """机动车所有人营业执照"""
    business_license: String

    """联系地址"""
    contact_address: String

    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """联合主键"""
    dispute_violation_id: String!

    """行为人驾驶证"""
    driver_license: String

    """机动车行驶证"""
    driving_license: String

    """行车日志"""
    driving_log: String

    """主键"""
    id: bigint!

    """行为人身份证"""
    id_card: String

    """是否删除"""
    is_delete: Boolean

    """劳动合同或租赁合同"""
    labor_contract: String

    """法定代表人身份证"""
    legal_person_id_number: String

    """机动车所有人组织机构代码证"""
    organization_code: String

    """其他证据材料"""
    other_evidence: _text

    """图像证据材料"""
    pic_evidence: String

    """当事人陈述"""
    statement: String

    """内网更新时间"""
    update_time_in: timestamptz

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String

    """机动车管理人身份证"""
    vehicle_manager_id_card: String

    """违章明细表id(vehicle_violation _details 表的violation_detail_id)"""
    violation_detail_id: String

    """证人证言"""
    witness: String

    """书面申请材料"""
    written_application_materials: String
}

"""
aggregated selection of "dispute_violation_record"
"""
type dispute_violation_record_aggregate {
    aggregate: dispute_violation_record_aggregate_fields
    nodes: [dispute_violation_record!]!
}

"""
aggregate fields of "dispute_violation_record"
"""
type dispute_violation_record_aggregate_fields {
    avg: dispute_violation_record_avg_fields
    count(columns: [dispute_violation_record_select_column!], distinct: Boolean): Int
    max: dispute_violation_record_max_fields
    min: dispute_violation_record_min_fields
    stddev: dispute_violation_record_stddev_fields
    stddev_pop: dispute_violation_record_stddev_pop_fields
    stddev_samp: dispute_violation_record_stddev_samp_fields
    sum: dispute_violation_record_sum_fields
    var_pop: dispute_violation_record_var_pop_fields
    var_samp: dispute_violation_record_var_samp_fields
    variance: dispute_violation_record_variance_fields
}

"""
order by aggregate values of table "dispute_violation_record"
"""
input dispute_violation_record_aggregate_order_by {
    avg: dispute_violation_record_avg_order_by
    count: order_by
    max: dispute_violation_record_max_order_by
    min: dispute_violation_record_min_order_by
    stddev: dispute_violation_record_stddev_order_by
    stddev_pop: dispute_violation_record_stddev_pop_order_by
    stddev_samp: dispute_violation_record_stddev_samp_order_by
    sum: dispute_violation_record_sum_order_by
    var_pop: dispute_violation_record_var_pop_order_by
    var_samp: dispute_violation_record_var_samp_order_by
    variance: dispute_violation_record_variance_order_by
}

"""
input type for inserting array relation for remote table "dispute_violation_record"
"""
input dispute_violation_record_arr_rel_insert_input {
    data: [dispute_violation_record_insert_input!]!
    on_conflict: dispute_violation_record_on_conflict
}

"""aggregate avg on columns"""
type dispute_violation_record_avg_fields {
    approve_state: Float
    id: Float
}

"""
order by avg() on columns of table "dispute_violation_record"
"""
input dispute_violation_record_avg_order_by {
    approve_state: order_by
    id: order_by
}

"""
Boolean expression to filter rows from the table "dispute_violation_record". All fields are combined with a logical 'AND'.
"""
input dispute_violation_record_bool_exp {
    _and: [dispute_violation_record_bool_exp]
    _not: dispute_violation_record_bool_exp
    _or: [dispute_violation_record_bool_exp]
    agent_id_number: String_comparison_exp
    approve_state: Int_comparison_exp
    business_license: String_comparison_exp
    contact_address: String_comparison_exp
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    dispute_violation_id: String_comparison_exp
    driver_license: String_comparison_exp
    driving_license: String_comparison_exp
    driving_log: String_comparison_exp
    id: bigint_comparison_exp
    id_card: String_comparison_exp
    is_delete: Boolean_comparison_exp
    labor_contract: String_comparison_exp
    legal_person_id_number: String_comparison_exp
    organization_code: String_comparison_exp
    other_evidence: _text_comparison_exp
    pic_evidence: String_comparison_exp
    statement: String_comparison_exp
    update_time_in: timestamptz_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    vehicle_manager_id_card: String_comparison_exp
    violation_detail_id: String_comparison_exp
    witness: String_comparison_exp
    written_application_materials: String_comparison_exp
}

"""
unique or primary key constraints on table "dispute_violation_record"
"""
enum dispute_violation_record_constraint {
    """unique or primary key constraint"""
    dispute_violation_record_pkey
}

"""
input type for incrementing integer column in table "dispute_violation_record"
"""
input dispute_violation_record_inc_input {
    approve_state: Int
    id: bigint
}

"""
input type for inserting data into table "dispute_violation_record"
"""
input dispute_violation_record_insert_input {
    agent_id_number: String
    approve_state: Int
    business_license: String
    contact_address: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    dispute_violation_id: String
    driver_license: String
    driving_license: String
    driving_log: String
    id: bigint
    id_card: String
    is_delete: Boolean
    labor_contract: String
    legal_person_id_number: String
    organization_code: String
    other_evidence: _text
    pic_evidence: String
    statement: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_manager_id_card: String
    violation_detail_id: String
    witness: String
    written_application_materials: String
}

"""aggregate max on columns"""
type dispute_violation_record_max_fields {
    agent_id_number: String
    approve_state: Int
    business_license: String
    contact_address: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    dispute_violation_id: String
    driver_license: String
    driving_license: String
    driving_log: String
    id: bigint
    id_card: String
    labor_contract: String
    legal_person_id_number: String
    organization_code: String
    pic_evidence: String
    statement: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_manager_id_card: String
    violation_detail_id: String
    witness: String
    written_application_materials: String
}

"""
order by max() on columns of table "dispute_violation_record"
"""
input dispute_violation_record_max_order_by {
    agent_id_number: order_by
    approve_state: order_by
    business_license: order_by
    contact_address: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    dispute_violation_id: order_by
    driver_license: order_by
    driving_license: order_by
    driving_log: order_by
    id: order_by
    id_card: order_by
    labor_contract: order_by
    legal_person_id_number: order_by
    organization_code: order_by
    pic_evidence: order_by
    statement: order_by
    update_time_in: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_manager_id_card: order_by
    violation_detail_id: order_by
    witness: order_by
    written_application_materials: order_by
}

"""aggregate min on columns"""
type dispute_violation_record_min_fields {
    agent_id_number: String
    approve_state: Int
    business_license: String
    contact_address: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    dispute_violation_id: String
    driver_license: String
    driving_license: String
    driving_log: String
    id: bigint
    id_card: String
    labor_contract: String
    legal_person_id_number: String
    organization_code: String
    pic_evidence: String
    statement: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_manager_id_card: String
    violation_detail_id: String
    witness: String
    written_application_materials: String
}

"""
order by min() on columns of table "dispute_violation_record"
"""
input dispute_violation_record_min_order_by {
    agent_id_number: order_by
    approve_state: order_by
    business_license: order_by
    contact_address: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    dispute_violation_id: order_by
    driver_license: order_by
    driving_license: order_by
    driving_log: order_by
    id: order_by
    id_card: order_by
    labor_contract: order_by
    legal_person_id_number: order_by
    organization_code: order_by
    pic_evidence: order_by
    statement: order_by
    update_time_in: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_manager_id_card: order_by
    violation_detail_id: order_by
    witness: order_by
    written_application_materials: order_by
}

"""
response of any mutation on the table "dispute_violation_record"
"""
type dispute_violation_record_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [dispute_violation_record!]!
}

"""
input type for inserting object relation for remote table "dispute_violation_record"
"""
input dispute_violation_record_obj_rel_insert_input {
    data: dispute_violation_record_insert_input!
    on_conflict: dispute_violation_record_on_conflict
}

"""
on conflict condition type for table "dispute_violation_record"
"""
input dispute_violation_record_on_conflict {
    constraint: dispute_violation_record_constraint!
    update_columns: [dispute_violation_record_update_column!]!
    where: dispute_violation_record_bool_exp
}

"""
ordering options when selecting data from "dispute_violation_record"
"""
input dispute_violation_record_order_by {
    agent_id_number: order_by
    approve_state: order_by
    business_license: order_by
    contact_address: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    dispute_violation_id: order_by
    driver_license: order_by
    driving_license: order_by
    driving_log: order_by
    id: order_by
    id_card: order_by
    is_delete: order_by
    labor_contract: order_by
    legal_person_id_number: order_by
    organization_code: order_by
    other_evidence: order_by
    pic_evidence: order_by
    statement: order_by
    update_time_in: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_manager_id_card: order_by
    violation_detail_id: order_by
    witness: order_by
    written_application_materials: order_by
}

"""
primary key columns input for table: "dispute_violation_record"
"""
input dispute_violation_record_pk_columns_input {
    """联合主键"""
    dispute_violation_id: String!

    """主键"""
    id: bigint!
}

"""
select columns of table "dispute_violation_record"
"""
enum dispute_violation_record_select_column {
    """column name"""
    agent_id_number

    """column name"""
    approve_state

    """column name"""
    business_license

    """column name"""
    contact_address

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    dispute_violation_id

    """column name"""
    driver_license

    """column name"""
    driving_license

    """column name"""
    driving_log

    """column name"""
    id

    """column name"""
    id_card

    """column name"""
    is_delete

    """column name"""
    labor_contract

    """column name"""
    legal_person_id_number

    """column name"""
    organization_code

    """column name"""
    other_evidence

    """column name"""
    pic_evidence

    """column name"""
    statement

    """column name"""
    update_time_in

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    vehicle_manager_id_card

    """column name"""
    violation_detail_id

    """column name"""
    witness

    """column name"""
    written_application_materials
}

"""
input type for updating data in table "dispute_violation_record"
"""
input dispute_violation_record_set_input {
    agent_id_number: String
    approve_state: Int
    business_license: String
    contact_address: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    dispute_violation_id: String
    driver_license: String
    driving_license: String
    driving_log: String
    id: bigint
    id_card: String
    is_delete: Boolean
    labor_contract: String
    legal_person_id_number: String
    organization_code: String
    other_evidence: _text
    pic_evidence: String
    statement: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_manager_id_card: String
    violation_detail_id: String
    witness: String
    written_application_materials: String
}

"""aggregate stddev on columns"""
type dispute_violation_record_stddev_fields {
    approve_state: Float
    id: Float
}

"""
order by stddev() on columns of table "dispute_violation_record"
"""
input dispute_violation_record_stddev_order_by {
    approve_state: order_by
    id: order_by
}

"""aggregate stddev_pop on columns"""
type dispute_violation_record_stddev_pop_fields {
    approve_state: Float
    id: Float
}

"""
order by stddev_pop() on columns of table "dispute_violation_record"
"""
input dispute_violation_record_stddev_pop_order_by {
    approve_state: order_by
    id: order_by
}

"""aggregate stddev_samp on columns"""
type dispute_violation_record_stddev_samp_fields {
    approve_state: Float
    id: Float
}

"""
order by stddev_samp() on columns of table "dispute_violation_record"
"""
input dispute_violation_record_stddev_samp_order_by {
    approve_state: order_by
    id: order_by
}

"""aggregate sum on columns"""
type dispute_violation_record_sum_fields {
    approve_state: Int
    id: bigint
}

"""
order by sum() on columns of table "dispute_violation_record"
"""
input dispute_violation_record_sum_order_by {
    approve_state: order_by
    id: order_by
}

"""
update columns of table "dispute_violation_record"
"""
enum dispute_violation_record_update_column {
    """column name"""
    agent_id_number

    """column name"""
    approve_state

    """column name"""
    business_license

    """column name"""
    contact_address

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    dispute_violation_id

    """column name"""
    driver_license

    """column name"""
    driving_license

    """column name"""
    driving_log

    """column name"""
    id

    """column name"""
    id_card

    """column name"""
    is_delete

    """column name"""
    labor_contract

    """column name"""
    legal_person_id_number

    """column name"""
    organization_code

    """column name"""
    other_evidence

    """column name"""
    pic_evidence

    """column name"""
    statement

    """column name"""
    update_time_in

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    vehicle_manager_id_card

    """column name"""
    violation_detail_id

    """column name"""
    witness

    """column name"""
    written_application_materials
}

"""aggregate var_pop on columns"""
type dispute_violation_record_var_pop_fields {
    approve_state: Float
    id: Float
}

"""
order by var_pop() on columns of table "dispute_violation_record"
"""
input dispute_violation_record_var_pop_order_by {
    approve_state: order_by
    id: order_by
}

"""aggregate var_samp on columns"""
type dispute_violation_record_var_samp_fields {
    approve_state: Float
    id: Float
}

"""
order by var_samp() on columns of table "dispute_violation_record"
"""
input dispute_violation_record_var_samp_order_by {
    approve_state: order_by
    id: order_by
}

"""aggregate variance on columns"""
type dispute_violation_record_variance_fields {
    approve_state: Float
    id: Float
}

"""
order by variance() on columns of table "dispute_violation_record"
"""
input dispute_violation_record_variance_order_by {
    approve_state: order_by
    id: order_by
}


extend type Mutation {
    """
    delete data from the table: "dispute_violation_record"
  """
    delete_dispute_violation_record(
        """filter the rows which have to be deleted"""
        where: dispute_violation_record_bool_exp!
    ): dispute_violation_record_mutation_response

    """
    delete single row from the table: "dispute_violation_record"
  """
    delete_dispute_violation_record_by_pk(
        """联合主键"""
        dispute_violation_id: String!

        """主键"""
        id: bigint!
    ): dispute_violation_record

    """
    insert data into the table: "dispute_violation_record"
  """
    insert_dispute_violation_record(
        """the rows to be inserted"""
        objects: [dispute_violation_record_insert_input!]!

        """on conflict condition"""
        on_conflict: dispute_violation_record_on_conflict
    ): dispute_violation_record_mutation_response

    """
    insert a single row into the table: "dispute_violation_record"
  """
    insert_dispute_violation_record_one(
        """the row to be inserted"""
        object: dispute_violation_record_insert_input!

        """on conflict condition"""
        on_conflict: dispute_violation_record_on_conflict
    ): dispute_violation_record

    """
    update data of the table: "dispute_violation_record"
  """
    update_dispute_violation_record(
        """increments the integer columns with given value of the filtered values"""
        _inc: dispute_violation_record_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: dispute_violation_record_set_input

        """filter the rows which have to be updated"""
        where: dispute_violation_record_bool_exp!
    ): dispute_violation_record_mutation_response

    """
    update single row of the table: "dispute_violation_record"
  """
    update_dispute_violation_record_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: dispute_violation_record_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: dispute_violation_record_set_input
        pk_columns: dispute_violation_record_pk_columns_input!
    ): dispute_violation_record
}


extend type Query {
    """
    fetch data from the table: "dispute_violation_record"
  """
    dispute_violation_record(
        """distinct select on columns"""
        distinct_on: [dispute_violation_record_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dispute_violation_record_order_by!]

        """filter the rows returned"""
        where: dispute_violation_record_bool_exp
    ): [dispute_violation_record!]!

    """
    fetch aggregated fields from the table: "dispute_violation_record"
  """
    dispute_violation_record_aggregate(
        """distinct select on columns"""
        distinct_on: [dispute_violation_record_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dispute_violation_record_order_by!]

        """filter the rows returned"""
        where: dispute_violation_record_bool_exp
    ): dispute_violation_record_aggregate!

    """
    fetch data from the table: "dispute_violation_record" using primary key columns
    """
    dispute_violation_record_by_pk(
        """联合主键"""
        dispute_violation_id: String!

        """主键"""
        id: bigint!
    ): dispute_violation_record
}


extend type Subscription {
    """
    fetch data from the table: "dispute_violation_record"
  """
    dispute_violation_record(
        """distinct select on columns"""
        distinct_on: [dispute_violation_record_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dispute_violation_record_order_by!]

        """filter the rows returned"""
        where: dispute_violation_record_bool_exp
    ): [dispute_violation_record!]!

    """
    fetch aggregated fields from the table: "dispute_violation_record"
  """
    dispute_violation_record_aggregate(
        """distinct select on columns"""
        distinct_on: [dispute_violation_record_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dispute_violation_record_order_by!]

        """filter the rows returned"""
        where: dispute_violation_record_bool_exp
    ): dispute_violation_record_aggregate!

    """
    fetch data from the table: "dispute_violation_record" using primary key columns
    """
    dispute_violation_record_by_pk(
        """联合主键"""
        dispute_violation_id: String!

        """主键"""
        id: bigint!
    ): dispute_violation_record
}

`, BuiltIn: false},
	{Name: "graph/graphqls/dispute_violation_record_log.graphqls", Input: `

"""
违章争议审批日志表


columns and relationships of "dispute_violation_record_log"

"""
type dispute_violation_record_log {
    """审批人"""
    approver: String

    """违章争议记录表id(dispute_violation_record的dispute_violation_id)"""
    dispute_violation_id: String

    """
    联合主键

    """
    dispute_violation_log_id: String!

    """主键"""
    id: bigint!

    """审核动作名称"""
    review_action_name: String

    """审核意见"""
    review_opinion: String

    """审核结果"""
    review_result: String

    """审核时间"""
    review_time: timestamptz

    """审核人"""
    reviewer: String

    """内网更新时间"""
    update_time_in: timestamptz
}

"""
aggregated selection of "dispute_violation_record_log"
"""
type dispute_violation_record_log_aggregate {
    aggregate: dispute_violation_record_log_aggregate_fields
    nodes: [dispute_violation_record_log!]!
}

"""
aggregate fields of "dispute_violation_record_log"
"""
type dispute_violation_record_log_aggregate_fields {
    avg: dispute_violation_record_log_avg_fields
    count(columns: [dispute_violation_record_log_select_column!], distinct: Boolean): Int
    max: dispute_violation_record_log_max_fields
    min: dispute_violation_record_log_min_fields
    stddev: dispute_violation_record_log_stddev_fields
    stddev_pop: dispute_violation_record_log_stddev_pop_fields
    stddev_samp: dispute_violation_record_log_stddev_samp_fields
    sum: dispute_violation_record_log_sum_fields
    var_pop: dispute_violation_record_log_var_pop_fields
    var_samp: dispute_violation_record_log_var_samp_fields
    variance: dispute_violation_record_log_variance_fields
}

"""
order by aggregate values of table "dispute_violation_record_log"
"""
input dispute_violation_record_log_aggregate_order_by {
    avg: dispute_violation_record_log_avg_order_by
    count: order_by
    max: dispute_violation_record_log_max_order_by
    min: dispute_violation_record_log_min_order_by
    stddev: dispute_violation_record_log_stddev_order_by
    stddev_pop: dispute_violation_record_log_stddev_pop_order_by
    stddev_samp: dispute_violation_record_log_stddev_samp_order_by
    sum: dispute_violation_record_log_sum_order_by
    var_pop: dispute_violation_record_log_var_pop_order_by
    var_samp: dispute_violation_record_log_var_samp_order_by
    variance: dispute_violation_record_log_variance_order_by
}

"""
input type for inserting array relation for remote table "dispute_violation_record_log"
"""
input dispute_violation_record_log_arr_rel_insert_input {
    data: [dispute_violation_record_log_insert_input!]!
    on_conflict: dispute_violation_record_log_on_conflict
}

"""aggregate avg on columns"""
type dispute_violation_record_log_avg_fields {
    id: Float
}

"""
order by avg() on columns of table "dispute_violation_record_log"
"""
input dispute_violation_record_log_avg_order_by {
    id: order_by
}

"""
Boolean expression to filter rows from the table "dispute_violation_record_log".
All fields are combined with a logical 'AND'.
"""
input dispute_violation_record_log_bool_exp {
    _and: [dispute_violation_record_log_bool_exp]
    _not: dispute_violation_record_log_bool_exp
    _or: [dispute_violation_record_log_bool_exp]
    approver: String_comparison_exp
    dispute_violation_id: String_comparison_exp
    dispute_violation_log_id: String_comparison_exp
    id: bigint_comparison_exp
    review_action_name: String_comparison_exp
    review_opinion: String_comparison_exp
    review_result: String_comparison_exp
    review_time: timestamptz_comparison_exp
    reviewer: String_comparison_exp
    update_time_in: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "dispute_violation_record_log"
"""
enum dispute_violation_record_log_constraint {
    """unique or primary key constraint"""
    dispute_violation_record_log_pkey
}

"""
input type for incrementing integer column in table "dispute_violation_record_log"
"""
input dispute_violation_record_log_inc_input {
    id: bigint
}

"""
input type for inserting data into table "dispute_violation_record_log"
"""
input dispute_violation_record_log_insert_input {
    approver: String
    dispute_violation_id: String
    dispute_violation_log_id: String
    id: bigint
    review_action_name: String
    review_opinion: String
    review_result: String
    review_time: timestamptz
    reviewer: String
    update_time_in: timestamptz
}

"""aggregate max on columns"""
type dispute_violation_record_log_max_fields {
    approver: String
    dispute_violation_id: String
    dispute_violation_log_id: String
    id: bigint
    review_action_name: String
    review_opinion: String
    review_result: String
    review_time: timestamptz
    reviewer: String
    update_time_in: timestamptz
}

"""
order by max() on columns of table "dispute_violation_record_log"
"""
input dispute_violation_record_log_max_order_by {
    approver: order_by
    dispute_violation_id: order_by
    dispute_violation_log_id: order_by
    id: order_by
    review_action_name: order_by
    review_opinion: order_by
    review_result: order_by
    review_time: order_by
    reviewer: order_by
    update_time_in: order_by
}

"""aggregate min on columns"""
type dispute_violation_record_log_min_fields {
    approver: String
    dispute_violation_id: String
    dispute_violation_log_id: String
    id: bigint
    review_action_name: String
    review_opinion: String
    review_result: String
    review_time: timestamptz
    reviewer: String
    update_time_in: timestamptz
}

"""
order by min() on columns of table "dispute_violation_record_log"
"""
input dispute_violation_record_log_min_order_by {
    approver: order_by
    dispute_violation_id: order_by
    dispute_violation_log_id: order_by
    id: order_by
    review_action_name: order_by
    review_opinion: order_by
    review_result: order_by
    review_time: order_by
    reviewer: order_by
    update_time_in: order_by
}

"""
response of any mutation on the table "dispute_violation_record_log"
"""
type dispute_violation_record_log_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [dispute_violation_record_log!]!
}

"""
input type for inserting object relation for remote table "dispute_violation_record_log"
"""
input dispute_violation_record_log_obj_rel_insert_input {
    data: dispute_violation_record_log_insert_input!
    on_conflict: dispute_violation_record_log_on_conflict
}

"""
on conflict condition type for table "dispute_violation_record_log"
"""
input dispute_violation_record_log_on_conflict {
    constraint: dispute_violation_record_log_constraint!
    update_columns: [dispute_violation_record_log_update_column!]!
    where: dispute_violation_record_log_bool_exp
}

"""
ordering options when selecting data from "dispute_violation_record_log"
"""
input dispute_violation_record_log_order_by {
    approver: order_by
    dispute_violation_id: order_by
    dispute_violation_log_id: order_by
    id: order_by
    review_action_name: order_by
    review_opinion: order_by
    review_result: order_by
    review_time: order_by
    reviewer: order_by
    update_time_in: order_by
}

"""
primary key columns input for table: "dispute_violation_record_log"
"""
input dispute_violation_record_log_pk_columns_input {
    """
    联合主键

    """
    dispute_violation_log_id: String!

    """主键"""
    id: bigint!
}

"""
select columns of table "dispute_violation_record_log"
"""
enum dispute_violation_record_log_select_column {
    """column name"""
    approver

    """column name"""
    dispute_violation_id

    """column name"""
    dispute_violation_log_id

    """column name"""
    id

    """column name"""
    review_action_name

    """column name"""
    review_opinion

    """column name"""
    review_result

    """column name"""
    review_time

    """column name"""
    reviewer

    """column name"""
    update_time_in
}

"""
input type for updating data in table "dispute_violation_record_log"
"""
input dispute_violation_record_log_set_input {
    approver: String
    dispute_violation_id: String
    dispute_violation_log_id: String
    id: bigint
    review_action_name: String
    review_opinion: String
    review_result: String
    review_time: timestamptz
    reviewer: String
    update_time_in: timestamptz
}

"""aggregate stddev on columns"""
type dispute_violation_record_log_stddev_fields {
    id: Float
}

"""
order by stddev() on columns of table "dispute_violation_record_log"
"""
input dispute_violation_record_log_stddev_order_by {
    id: order_by
}

"""aggregate stddev_pop on columns"""
type dispute_violation_record_log_stddev_pop_fields {
    id: Float
}

"""
order by stddev_pop() on columns of table "dispute_violation_record_log"
"""
input dispute_violation_record_log_stddev_pop_order_by {
    id: order_by
}

"""aggregate stddev_samp on columns"""
type dispute_violation_record_log_stddev_samp_fields {
    id: Float
}

"""
order by stddev_samp() on columns of table "dispute_violation_record_log"
"""
input dispute_violation_record_log_stddev_samp_order_by {
    id: order_by
}

"""aggregate sum on columns"""
type dispute_violation_record_log_sum_fields {
    id: bigint
}

"""
order by sum() on columns of table "dispute_violation_record_log"
"""
input dispute_violation_record_log_sum_order_by {
    id: order_by
}

"""
update columns of table "dispute_violation_record_log"
"""
enum dispute_violation_record_log_update_column {
    """column name"""
    approver

    """column name"""
    dispute_violation_id

    """column name"""
    dispute_violation_log_id

    """column name"""
    id

    """column name"""
    review_action_name

    """column name"""
    review_opinion

    """column name"""
    review_result

    """column name"""
    review_time

    """column name"""
    reviewer

    """column name"""
    update_time_in
}

"""aggregate var_pop on columns"""
type dispute_violation_record_log_var_pop_fields {
    id: Float
}

"""
order by var_pop() on columns of table "dispute_violation_record_log"
"""
input dispute_violation_record_log_var_pop_order_by {
    id: order_by
}

"""aggregate var_samp on columns"""
type dispute_violation_record_log_var_samp_fields {
    id: Float
}

"""
order by var_samp() on columns of table "dispute_violation_record_log"
"""
input dispute_violation_record_log_var_samp_order_by {
    id: order_by
}

"""aggregate variance on columns"""
type dispute_violation_record_log_variance_fields {
    id: Float
}

"""
order by variance() on columns of table "dispute_violation_record_log"
"""
input dispute_violation_record_log_variance_order_by {
    id: order_by
}

extend type Mutation {
    """
    delete data from the table: "dispute_violation_record_log"
  """
    delete_dispute_violation_record_log(
        """filter the rows which have to be deleted"""
        where: dispute_violation_record_log_bool_exp!
    ): dispute_violation_record_log_mutation_response

    """
    delete single row from the table: "dispute_violation_record_log"
  """
    delete_dispute_violation_record_log_by_pk(
        """
        联合主键

        """
        dispute_violation_log_id: String!

        """主键"""
        id: bigint!
    ): dispute_violation_record_log

    """
    insert data into the table: "dispute_violation_record_log"
  """
    insert_dispute_violation_record_log(
        """the rows to be inserted"""
        objects: [dispute_violation_record_log_insert_input!]!

        """on conflict condition"""
        on_conflict: dispute_violation_record_log_on_conflict
    ): dispute_violation_record_log_mutation_response

    """
    insert a single row into the table: "dispute_violation_record_log"
  """
    insert_dispute_violation_record_log_one(
        """the row to be inserted"""
        object: dispute_violation_record_log_insert_input!

        """on conflict condition"""
        on_conflict: dispute_violation_record_log_on_conflict
    ): dispute_violation_record_log

    """
    update data of the table: "dispute_violation_record_log"
  """
    update_dispute_violation_record_log(
        """increments the integer columns with given value of the filtered values"""
        _inc: dispute_violation_record_log_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: dispute_violation_record_log_set_input

        """filter the rows which have to be updated"""
        where: dispute_violation_record_log_bool_exp!
    ): dispute_violation_record_log_mutation_response

    """
    update single row of the table: "dispute_violation_record_log"
  """
    update_dispute_violation_record_log_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: dispute_violation_record_log_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: dispute_violation_record_log_set_input
        pk_columns: dispute_violation_record_log_pk_columns_input!
    ): dispute_violation_record_log
}


extend type Query {
    """
    fetch data from the table: "dispute_violation_record_log"
  """
    dispute_violation_record_log(
        """distinct select on columns"""
        distinct_on: [dispute_violation_record_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dispute_violation_record_log_order_by!]

        """filter the rows returned"""
        where: dispute_violation_record_log_bool_exp
    ): [dispute_violation_record_log!]!

    """
    fetch aggregated fields from the table: "dispute_violation_record_log"
  """
    dispute_violation_record_log_aggregate(
        """distinct select on columns"""
        distinct_on: [dispute_violation_record_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dispute_violation_record_log_order_by!]

        """filter the rows returned"""
        where: dispute_violation_record_log_bool_exp
    ): dispute_violation_record_log_aggregate!

    """
    fetch data from the table: "dispute_violation_record_log" using primary key columns
    """
    dispute_violation_record_log_by_pk(
        """
        联合主键

        """
        dispute_violation_log_id: String!

        """主键"""
        id: bigint!
    ): dispute_violation_record_log
}


extend type Subscription {
    """
    fetch data from the table: "dispute_violation_record_log"
  """
    dispute_violation_record_log(
        """distinct select on columns"""
        distinct_on: [dispute_violation_record_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dispute_violation_record_log_order_by!]

        """filter the rows returned"""
        where: dispute_violation_record_log_bool_exp
    ): [dispute_violation_record_log!]!

    """
    fetch aggregated fields from the table: "dispute_violation_record_log"
  """
    dispute_violation_record_log_aggregate(
        """distinct select on columns"""
        distinct_on: [dispute_violation_record_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dispute_violation_record_log_order_by!]

        """filter the rows returned"""
        where: dispute_violation_record_log_bool_exp
    ): dispute_violation_record_log_aggregate!

    """
    fetch data from the table: "dispute_violation_record_log" using primary key columns
    """
    dispute_violation_record_log_by_pk(
        """
        联合主键

        """
        dispute_violation_log_id: String!

        """主键"""
        id: bigint!
    ): dispute_violation_record_log
}

`, BuiltIn: false},
	{Name: "graph/graphqls/driver_peccancy_check.graphqls", Input: `
"""
驾驶员违法核实记录表


columns and relationships of "driver_peccancy_check"

"""
type driver_peccancy_check {
    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """违章驾驶员id"""
    driver_id: String

    """所在企业id"""
    enterprise_id: String

    """主键"""
    id: bigint!

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String

    """违章车辆id"""
    vehicle_id: String
}

"""
aggregated selection of "driver_peccancy_check"
"""
type driver_peccancy_check_aggregate {
    aggregate: driver_peccancy_check_aggregate_fields
    nodes: [driver_peccancy_check!]!
}

"""
aggregate fields of "driver_peccancy_check"
"""
type driver_peccancy_check_aggregate_fields {
    avg: driver_peccancy_check_avg_fields
    count(columns: [driver_peccancy_check_select_column!], distinct: Boolean): Int
    max: driver_peccancy_check_max_fields
    min: driver_peccancy_check_min_fields
    stddev: driver_peccancy_check_stddev_fields
    stddev_pop: driver_peccancy_check_stddev_pop_fields
    stddev_samp: driver_peccancy_check_stddev_samp_fields
    sum: driver_peccancy_check_sum_fields
    var_pop: driver_peccancy_check_var_pop_fields
    var_samp: driver_peccancy_check_var_samp_fields
    variance: driver_peccancy_check_variance_fields
}

"""
order by aggregate values of table "driver_peccancy_check"
"""
input driver_peccancy_check_aggregate_order_by {
    avg: driver_peccancy_check_avg_order_by
    count: order_by
    max: driver_peccancy_check_max_order_by
    min: driver_peccancy_check_min_order_by
    stddev: driver_peccancy_check_stddev_order_by
    stddev_pop: driver_peccancy_check_stddev_pop_order_by
    stddev_samp: driver_peccancy_check_stddev_samp_order_by
    sum: driver_peccancy_check_sum_order_by
    var_pop: driver_peccancy_check_var_pop_order_by
    var_samp: driver_peccancy_check_var_samp_order_by
    variance: driver_peccancy_check_variance_order_by
}

"""
input type for inserting array relation for remote table "driver_peccancy_check"
"""
input driver_peccancy_check_arr_rel_insert_input {
    data: [driver_peccancy_check_insert_input!]!
    on_conflict: driver_peccancy_check_on_conflict
}

"""aggregate avg on columns"""
type driver_peccancy_check_avg_fields {
    id: Float
}

"""
order by avg() on columns of table "driver_peccancy_check"
"""
input driver_peccancy_check_avg_order_by {
    id: order_by
}

"""
Boolean expression to filter rows from the table "driver_peccancy_check". All fields are combined with a logical 'AND'.
"""
input driver_peccancy_check_bool_exp {
    _and: [driver_peccancy_check_bool_exp]
    _not: driver_peccancy_check_bool_exp
    _or: [driver_peccancy_check_bool_exp]
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    driver_id: String_comparison_exp
    enterprise_id: String_comparison_exp
    id: bigint_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    vehicle_id: String_comparison_exp
}

"""
unique or primary key constraints on table "driver_peccancy_check"
"""
enum driver_peccancy_check_constraint {
    """unique or primary key constraint"""
    driver_peccancy_check_pkey
}

"""
input type for incrementing integer column in table "driver_peccancy_check"
"""
input driver_peccancy_check_inc_input {
    id: bigint
}

"""
input type for inserting data into table "driver_peccancy_check"
"""
input driver_peccancy_check_insert_input {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_id: String
    enterprise_id: String
    id: bigint
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
}

"""aggregate max on columns"""
type driver_peccancy_check_max_fields {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_id: String
    enterprise_id: String
    id: bigint
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
}

"""
order by max() on columns of table "driver_peccancy_check"
"""
input driver_peccancy_check_max_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    driver_id: order_by
    enterprise_id: order_by
    id: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
}

"""aggregate min on columns"""
type driver_peccancy_check_min_fields {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_id: String
    enterprise_id: String
    id: bigint
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
}

"""
order by min() on columns of table "driver_peccancy_check"
"""
input driver_peccancy_check_min_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    driver_id: order_by
    enterprise_id: order_by
    id: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
}

"""
response of any mutation on the table "driver_peccancy_check"
"""
type driver_peccancy_check_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [driver_peccancy_check!]!
}

"""
input type for inserting object relation for remote table "driver_peccancy_check"
"""
input driver_peccancy_check_obj_rel_insert_input {
    data: driver_peccancy_check_insert_input!
    on_conflict: driver_peccancy_check_on_conflict
}

"""
on conflict condition type for table "driver_peccancy_check"
"""
input driver_peccancy_check_on_conflict {
    constraint: driver_peccancy_check_constraint!
    update_columns: [driver_peccancy_check_update_column!]!
    where: driver_peccancy_check_bool_exp
}

"""
ordering options when selecting data from "driver_peccancy_check"
"""
input driver_peccancy_check_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    driver_id: order_by
    enterprise_id: order_by
    id: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
}

"""
primary key columns input for table: "driver_peccancy_check"
"""
input driver_peccancy_check_pk_columns_input {
    """主键"""
    id: bigint!
}

"""
select columns of table "driver_peccancy_check"
"""
enum driver_peccancy_check_select_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    driver_id

    """column name"""
    enterprise_id

    """column name"""
    id

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    vehicle_id
}

"""
input type for updating data in table "driver_peccancy_check"
"""
input driver_peccancy_check_set_input {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_id: String
    enterprise_id: String
    id: bigint
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
}

"""aggregate stddev on columns"""
type driver_peccancy_check_stddev_fields {
    id: Float
}

"""
order by stddev() on columns of table "driver_peccancy_check"
"""
input driver_peccancy_check_stddev_order_by {
    id: order_by
}

"""aggregate stddev_pop on columns"""
type driver_peccancy_check_stddev_pop_fields {
    id: Float
}

"""
order by stddev_pop() on columns of table "driver_peccancy_check"
"""
input driver_peccancy_check_stddev_pop_order_by {
    id: order_by
}

"""aggregate stddev_samp on columns"""
type driver_peccancy_check_stddev_samp_fields {
    id: Float
}

"""
order by stddev_samp() on columns of table "driver_peccancy_check"
"""
input driver_peccancy_check_stddev_samp_order_by {
    id: order_by
}

"""aggregate sum on columns"""
type driver_peccancy_check_sum_fields {
    id: bigint
}

"""
order by sum() on columns of table "driver_peccancy_check"
"""
input driver_peccancy_check_sum_order_by {
    id: order_by
}

"""
update columns of table "driver_peccancy_check"
"""
enum driver_peccancy_check_update_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    driver_id

    """column name"""
    enterprise_id

    """column name"""
    id

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    vehicle_id
}

"""aggregate var_pop on columns"""
type driver_peccancy_check_var_pop_fields {
    id: Float
}

"""
order by var_pop() on columns of table "driver_peccancy_check"
"""
input driver_peccancy_check_var_pop_order_by {
    id: order_by
}

"""aggregate var_samp on columns"""
type driver_peccancy_check_var_samp_fields {
    id: Float
}

"""
order by var_samp() on columns of table "driver_peccancy_check"
"""
input driver_peccancy_check_var_samp_order_by {
    id: order_by
}

"""aggregate variance on columns"""
type driver_peccancy_check_variance_fields {
    id: Float
}

"""
order by variance() on columns of table "driver_peccancy_check"
"""
input driver_peccancy_check_variance_order_by {
    id: order_by
}

extend type Mutation {
    """
    delete data from the table: "driver_peccancy_check"
  """
    delete_driver_peccancy_check(
        """filter the rows which have to be deleted"""
        where: driver_peccancy_check_bool_exp!
    ): driver_peccancy_check_mutation_response

    """
    delete single row from the table: "driver_peccancy_check"
  """
    delete_driver_peccancy_check_by_pk(
        """主键"""
        id: bigint!
    ): driver_peccancy_check

    """
    insert data into the table: "driver_peccancy_check"
  """
    insert_driver_peccancy_check(
        """the rows to be inserted"""
        objects: [driver_peccancy_check_insert_input!]!

        """on conflict condition"""
        on_conflict: driver_peccancy_check_on_conflict
    ): driver_peccancy_check_mutation_response

    """
    insert a single row into the table: "driver_peccancy_check"
  """
    insert_driver_peccancy_check_one(
        """the row to be inserted"""
        object: driver_peccancy_check_insert_input!

        """on conflict condition"""
        on_conflict: driver_peccancy_check_on_conflict
    ): driver_peccancy_check

    """
    update data of the table: "driver_peccancy_check"
  """
    update_driver_peccancy_check(
        """increments the integer columns with given value of the filtered values"""
        _inc: driver_peccancy_check_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: driver_peccancy_check_set_input

        """filter the rows which have to be updated"""
        where: driver_peccancy_check_bool_exp!
    ): driver_peccancy_check_mutation_response

    """
    update single row of the table: "driver_peccancy_check"
  """
    update_driver_peccancy_check_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: driver_peccancy_check_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: driver_peccancy_check_set_input
        pk_columns: driver_peccancy_check_pk_columns_input!
    ): driver_peccancy_check
}


extend type Query {
    """
    fetch data from the table: "driver_peccancy_check"
  """
    driver_peccancy_check(
        """distinct select on columns"""
        distinct_on: [driver_peccancy_check_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [driver_peccancy_check_order_by!]

        """filter the rows returned"""
        where: driver_peccancy_check_bool_exp
    ): [driver_peccancy_check!]!

    """
    fetch aggregated fields from the table: "driver_peccancy_check"
  """
    driver_peccancy_check_aggregate(
        """distinct select on columns"""
        distinct_on: [driver_peccancy_check_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [driver_peccancy_check_order_by!]

        """filter the rows returned"""
        where: driver_peccancy_check_bool_exp
    ): driver_peccancy_check_aggregate!

    """
    fetch data from the table: "driver_peccancy_check" using primary key columns
    """
    driver_peccancy_check_by_pk(
        """主键"""
        id: bigint!
    ): driver_peccancy_check
}


extend type Subscription {
    """
    fetch data from the table: "driver_peccancy_check"
  """
    driver_peccancy_check(
        """distinct select on columns"""
        distinct_on: [driver_peccancy_check_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [driver_peccancy_check_order_by!]

        """filter the rows returned"""
        where: driver_peccancy_check_bool_exp
    ): [driver_peccancy_check!]!

    """
    fetch aggregated fields from the table: "driver_peccancy_check"
  """
    driver_peccancy_check_aggregate(
        """distinct select on columns"""
        distinct_on: [driver_peccancy_check_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [driver_peccancy_check_order_by!]

        """filter the rows returned"""
        where: driver_peccancy_check_bool_exp
    ): driver_peccancy_check_aggregate!

    """
    fetch data from the table: "driver_peccancy_check" using primary key columns
    """
    driver_peccancy_check_by_pk(
        """主键"""
        id: bigint!
    ): driver_peccancy_check
}

`, BuiltIn: false},
	{Name: "graph/graphqls/enterprise_deduction_items.graphqls", Input: `

"""
企业扣分事项表


columns and relationships of "enterprise_deduction_items"

"""
type enterprise_deduction_items {
    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """扣分事项类别(车辆评分扣分类别字典)"""
    deduction_category: Int

    """扣分事项描述"""
    deduction_item_description: String

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """扣分分值"""
    demerit_points: numeric

    """联合主键"""
    enterprise_deduction_item_id: String!

    """主键"""
    id: bigint!

    """是否删除"""
    is_delete: Boolean

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String
}

"""
aggregated selection of "enterprise_deduction_items"
"""
type enterprise_deduction_items_aggregate {
    aggregate: enterprise_deduction_items_aggregate_fields
    nodes: [enterprise_deduction_items!]!
}

"""
aggregate fields of "enterprise_deduction_items"
"""
type enterprise_deduction_items_aggregate_fields {
    avg: enterprise_deduction_items_avg_fields
    count(columns: [enterprise_deduction_items_select_column!], distinct: Boolean): Int
    max: enterprise_deduction_items_max_fields
    min: enterprise_deduction_items_min_fields
    stddev: enterprise_deduction_items_stddev_fields
    stddev_pop: enterprise_deduction_items_stddev_pop_fields
    stddev_samp: enterprise_deduction_items_stddev_samp_fields
    sum: enterprise_deduction_items_sum_fields
    var_pop: enterprise_deduction_items_var_pop_fields
    var_samp: enterprise_deduction_items_var_samp_fields
    variance: enterprise_deduction_items_variance_fields
}

"""
order by aggregate values of table "enterprise_deduction_items"
"""
input enterprise_deduction_items_aggregate_order_by {
    avg: enterprise_deduction_items_avg_order_by
    count: order_by
    max: enterprise_deduction_items_max_order_by
    min: enterprise_deduction_items_min_order_by
    stddev: enterprise_deduction_items_stddev_order_by
    stddev_pop: enterprise_deduction_items_stddev_pop_order_by
    stddev_samp: enterprise_deduction_items_stddev_samp_order_by
    sum: enterprise_deduction_items_sum_order_by
    var_pop: enterprise_deduction_items_var_pop_order_by
    var_samp: enterprise_deduction_items_var_samp_order_by
    variance: enterprise_deduction_items_variance_order_by
}

"""
input type for inserting array relation for remote table "enterprise_deduction_items"
"""
input enterprise_deduction_items_arr_rel_insert_input {
    data: [enterprise_deduction_items_insert_input!]!
    on_conflict: enterprise_deduction_items_on_conflict
}

"""aggregate avg on columns"""
type enterprise_deduction_items_avg_fields {
    deduction_category: Float
    demerit_points: Float
    id: Float
}

"""
order by avg() on columns of table "enterprise_deduction_items"
"""
input enterprise_deduction_items_avg_order_by {
    deduction_category: order_by
    demerit_points: order_by
    id: order_by
}

"""
Boolean expression to filter rows from the table "enterprise_deduction_items". All fields are combined with a logical 'AND'.
"""
input enterprise_deduction_items_bool_exp {
    _and: [enterprise_deduction_items_bool_exp]
    _not: enterprise_deduction_items_bool_exp
    _or: [enterprise_deduction_items_bool_exp]
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deduction_category: Int_comparison_exp
    deduction_item_description: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    demerit_points: numeric_comparison_exp
    enterprise_deduction_item_id: String_comparison_exp
    id: bigint_comparison_exp
    is_delete: Boolean_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
}

"""
unique or primary key constraints on table "enterprise_deduction_items"
"""
enum enterprise_deduction_items_constraint {
    """unique or primary key constraint"""
    enterprise_deduction_items_pkey
}

"""
input type for incrementing integer column in table "enterprise_deduction_items"
"""
input enterprise_deduction_items_inc_input {
    deduction_category: Int
    demerit_points: numeric
    id: bigint
}

"""
input type for inserting data into table "enterprise_deduction_items"
"""
input enterprise_deduction_items_insert_input {
    created_at: timestamptz
    created_by: String
    deduction_category: Int
    deduction_item_description: String
    deleted_at: timestamptz
    deleted_by: String
    demerit_points: numeric
    enterprise_deduction_item_id: String
    id: bigint
    is_delete: Boolean
    updated_at: timestamptz
    updated_by: String
}

"""aggregate max on columns"""
type enterprise_deduction_items_max_fields {
    created_at: timestamptz
    created_by: String
    deduction_category: Int
    deduction_item_description: String
    deleted_at: timestamptz
    deleted_by: String
    demerit_points: numeric
    enterprise_deduction_item_id: String
    id: bigint
    updated_at: timestamptz
    updated_by: String
}

"""
order by max() on columns of table "enterprise_deduction_items"
"""
input enterprise_deduction_items_max_order_by {
    created_at: order_by
    created_by: order_by
    deduction_category: order_by
    deduction_item_description: order_by
    deleted_at: order_by
    deleted_by: order_by
    demerit_points: order_by
    enterprise_deduction_item_id: order_by
    id: order_by
    updated_at: order_by
    updated_by: order_by
}

"""aggregate min on columns"""
type enterprise_deduction_items_min_fields {
    created_at: timestamptz
    created_by: String
    deduction_category: Int
    deduction_item_description: String
    deleted_at: timestamptz
    deleted_by: String
    demerit_points: numeric
    enterprise_deduction_item_id: String
    id: bigint
    updated_at: timestamptz
    updated_by: String
}

"""
order by min() on columns of table "enterprise_deduction_items"
"""
input enterprise_deduction_items_min_order_by {
    created_at: order_by
    created_by: order_by
    deduction_category: order_by
    deduction_item_description: order_by
    deleted_at: order_by
    deleted_by: order_by
    demerit_points: order_by
    enterprise_deduction_item_id: order_by
    id: order_by
    updated_at: order_by
    updated_by: order_by
}

"""
response of any mutation on the table "enterprise_deduction_items"
"""
type enterprise_deduction_items_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [enterprise_deduction_items!]!
}

"""
input type for inserting object relation for remote table "enterprise_deduction_items"
"""
input enterprise_deduction_items_obj_rel_insert_input {
    data: enterprise_deduction_items_insert_input!
    on_conflict: enterprise_deduction_items_on_conflict
}

"""
on conflict condition type for table "enterprise_deduction_items"
"""
input enterprise_deduction_items_on_conflict {
    constraint: enterprise_deduction_items_constraint!
    update_columns: [enterprise_deduction_items_update_column!]!
    where: enterprise_deduction_items_bool_exp
}

"""
ordering options when selecting data from "enterprise_deduction_items"
"""
input enterprise_deduction_items_order_by {
    created_at: order_by
    created_by: order_by
    deduction_category: order_by
    deduction_item_description: order_by
    deleted_at: order_by
    deleted_by: order_by
    demerit_points: order_by
    enterprise_deduction_item_id: order_by
    id: order_by
    is_delete: order_by
    updated_at: order_by
    updated_by: order_by
}

"""
primary key columns input for table: "enterprise_deduction_items"
"""
input enterprise_deduction_items_pk_columns_input {
    """联合主键"""
    enterprise_deduction_item_id: String!

    """主键"""
    id: bigint!
}

"""
select columns of table "enterprise_deduction_items"
"""
enum enterprise_deduction_items_select_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deduction_category

    """column name"""
    deduction_item_description

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    demerit_points

    """column name"""
    enterprise_deduction_item_id

    """column name"""
    id

    """column name"""
    is_delete

    """column name"""
    updated_at

    """column name"""
    updated_by
}

"""
input type for updating data in table "enterprise_deduction_items"
"""
input enterprise_deduction_items_set_input {
    created_at: timestamptz
    created_by: String
    deduction_category: Int
    deduction_item_description: String
    deleted_at: timestamptz
    deleted_by: String
    demerit_points: numeric
    enterprise_deduction_item_id: String
    id: bigint
    is_delete: Boolean
    updated_at: timestamptz
    updated_by: String
}

"""aggregate stddev on columns"""
type enterprise_deduction_items_stddev_fields {
    deduction_category: Float
    demerit_points: Float
    id: Float
}

"""
order by stddev() on columns of table "enterprise_deduction_items"
"""
input enterprise_deduction_items_stddev_order_by {
    deduction_category: order_by
    demerit_points: order_by
    id: order_by
}

"""aggregate stddev_pop on columns"""
type enterprise_deduction_items_stddev_pop_fields {
    deduction_category: Float
    demerit_points: Float
    id: Float
}

"""
order by stddev_pop() on columns of table "enterprise_deduction_items"
"""
input enterprise_deduction_items_stddev_pop_order_by {
    deduction_category: order_by
    demerit_points: order_by
    id: order_by
}

"""aggregate stddev_samp on columns"""
type enterprise_deduction_items_stddev_samp_fields {
    deduction_category: Float
    demerit_points: Float
    id: Float
}

"""
order by stddev_samp() on columns of table "enterprise_deduction_items"
"""
input enterprise_deduction_items_stddev_samp_order_by {
    deduction_category: order_by
    demerit_points: order_by
    id: order_by
}

"""aggregate sum on columns"""
type enterprise_deduction_items_sum_fields {
    deduction_category: Int
    demerit_points: numeric
    id: bigint
}

"""
order by sum() on columns of table "enterprise_deduction_items"
"""
input enterprise_deduction_items_sum_order_by {
    deduction_category: order_by
    demerit_points: order_by
    id: order_by
}

"""
update columns of table "enterprise_deduction_items"
"""
enum enterprise_deduction_items_update_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deduction_category

    """column name"""
    deduction_item_description

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    demerit_points

    """column name"""
    enterprise_deduction_item_id

    """column name"""
    id

    """column name"""
    is_delete

    """column name"""
    updated_at

    """column name"""
    updated_by
}

"""aggregate var_pop on columns"""
type enterprise_deduction_items_var_pop_fields {
    deduction_category: Float
    demerit_points: Float
    id: Float
}

"""
order by var_pop() on columns of table "enterprise_deduction_items"
"""
input enterprise_deduction_items_var_pop_order_by {
    deduction_category: order_by
    demerit_points: order_by
    id: order_by
}

"""aggregate var_samp on columns"""
type enterprise_deduction_items_var_samp_fields {
    deduction_category: Float
    demerit_points: Float
    id: Float
}

"""
order by var_samp() on columns of table "enterprise_deduction_items"
"""
input enterprise_deduction_items_var_samp_order_by {
    deduction_category: order_by
    demerit_points: order_by
    id: order_by
}

"""aggregate variance on columns"""
type enterprise_deduction_items_variance_fields {
    deduction_category: Float
    demerit_points: Float
    id: Float
}

"""
order by variance() on columns of table "enterprise_deduction_items"
"""
input enterprise_deduction_items_variance_order_by {
    deduction_category: order_by
    demerit_points: order_by
    id: order_by
}


extend type Mutation {
    """
    delete data from the table: "enterprise_deduction_items"
  """
    delete_enterprise_deduction_items(
        """filter the rows which have to be deleted"""
        where: enterprise_deduction_items_bool_exp!
    ): enterprise_deduction_items_mutation_response

    """
    delete single row from the table: "enterprise_deduction_items"
  """
    delete_enterprise_deduction_items_by_pk(
        """联合主键"""
        enterprise_deduction_item_id: String!

        """主键"""
        id: bigint!
    ): enterprise_deduction_items

    """
    insert data into the table: "enterprise_deduction_items"
  """
    insert_enterprise_deduction_items(
        """the rows to be inserted"""
        objects: [enterprise_deduction_items_insert_input!]!

        """on conflict condition"""
        on_conflict: enterprise_deduction_items_on_conflict
    ): enterprise_deduction_items_mutation_response

    """
    insert a single row into the table: "enterprise_deduction_items"
  """
    insert_enterprise_deduction_items_one(
        """the row to be inserted"""
        object: enterprise_deduction_items_insert_input!

        """on conflict condition"""
        on_conflict: enterprise_deduction_items_on_conflict
    ): enterprise_deduction_items

    """
    update data of the table: "enterprise_deduction_items"
  """
    update_enterprise_deduction_items(
        """increments the integer columns with given value of the filtered values"""
        _inc: enterprise_deduction_items_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: enterprise_deduction_items_set_input

        """filter the rows which have to be updated"""
        where: enterprise_deduction_items_bool_exp!
    ): enterprise_deduction_items_mutation_response

    """
    update single row of the table: "enterprise_deduction_items"
  """
    update_enterprise_deduction_items_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: enterprise_deduction_items_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: enterprise_deduction_items_set_input
        pk_columns: enterprise_deduction_items_pk_columns_input!
    ): enterprise_deduction_items
}



extend type Query {
    """
    fetch data from the table: "enterprise_deduction_items"
  """
    enterprise_deduction_items(
        """distinct select on columns"""
        distinct_on: [enterprise_deduction_items_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [enterprise_deduction_items_order_by!]

        """filter the rows returned"""
        where: enterprise_deduction_items_bool_exp
    ): [enterprise_deduction_items!]!

    """
    fetch aggregated fields from the table: "enterprise_deduction_items"
  """
    enterprise_deduction_items_aggregate(
        """distinct select on columns"""
        distinct_on: [enterprise_deduction_items_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [enterprise_deduction_items_order_by!]

        """filter the rows returned"""
        where: enterprise_deduction_items_bool_exp
    ): enterprise_deduction_items_aggregate!

    """
    fetch data from the table: "enterprise_deduction_items" using primary key columns
    """
    enterprise_deduction_items_by_pk(
        """联合主键"""
        enterprise_deduction_item_id: String!

        """主键"""
        id: bigint!
    ): enterprise_deduction_items
}


extend type Subscription {
    """
    fetch data from the table: "enterprise_deduction_items"
  """
    enterprise_deduction_items(
        """distinct select on columns"""
        distinct_on: [enterprise_deduction_items_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [enterprise_deduction_items_order_by!]

        """filter the rows returned"""
        where: enterprise_deduction_items_bool_exp
    ): [enterprise_deduction_items!]!

    """
    fetch aggregated fields from the table: "enterprise_deduction_items"
  """
    enterprise_deduction_items_aggregate(
        """distinct select on columns"""
        distinct_on: [enterprise_deduction_items_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [enterprise_deduction_items_order_by!]

        """filter the rows returned"""
        where: enterprise_deduction_items_bool_exp
    ): enterprise_deduction_items_aggregate!

    """
    fetch data from the table: "enterprise_deduction_items" using primary key columns
    """
    enterprise_deduction_items_by_pk(
        """联合主键"""
        enterprise_deduction_item_id: String!

        """主键"""
        id: bigint!
    ): enterprise_deduction_items
}
`, BuiltIn: false},
	{Name: "graph/graphqls/enterprise_deduction_operation_record.graphqls", Input: `

"""
企业扣分操作记录表


columns and relationships of "enterprise_deduction_operation_record"

"""
type enterprise_deduction_operation_record {
    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """扣分分值"""
    demerit_points: numeric

    """企业扣分事项表id(enterprise_deduction_ items表的enterprise_deduction_ item_id)"""
    enterprise_deduction_item_id: String

    """联合主键"""
    enterprise_duduction_operation_id: String!

    """所在企业id"""
    enterprise_id: String

    """主键"""
    id: bigint!

    """是否删除"""
    is_delete: Boolean

    """备注"""
    remarks: String

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String
}

"""
aggregated selection of "enterprise_deduction_operation_record"
"""
type enterprise_deduction_operation_record_aggregate {
    aggregate: enterprise_deduction_operation_record_aggregate_fields
    nodes: [enterprise_deduction_operation_record!]!
}

"""
aggregate fields of "enterprise_deduction_operation_record"
"""
type enterprise_deduction_operation_record_aggregate_fields {
    avg: enterprise_deduction_operation_record_avg_fields
    count(columns: [enterprise_deduction_operation_record_select_column!], distinct: Boolean): Int
    max: enterprise_deduction_operation_record_max_fields
    min: enterprise_deduction_operation_record_min_fields
    stddev: enterprise_deduction_operation_record_stddev_fields
    stddev_pop: enterprise_deduction_operation_record_stddev_pop_fields
    stddev_samp: enterprise_deduction_operation_record_stddev_samp_fields
    sum: enterprise_deduction_operation_record_sum_fields
    var_pop: enterprise_deduction_operation_record_var_pop_fields
    var_samp: enterprise_deduction_operation_record_var_samp_fields
    variance: enterprise_deduction_operation_record_variance_fields
}

"""
order by aggregate values of table "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_aggregate_order_by {
    avg: enterprise_deduction_operation_record_avg_order_by
    count: order_by
    max: enterprise_deduction_operation_record_max_order_by
    min: enterprise_deduction_operation_record_min_order_by
    stddev: enterprise_deduction_operation_record_stddev_order_by
    stddev_pop: enterprise_deduction_operation_record_stddev_pop_order_by
    stddev_samp: enterprise_deduction_operation_record_stddev_samp_order_by
    sum: enterprise_deduction_operation_record_sum_order_by
    var_pop: enterprise_deduction_operation_record_var_pop_order_by
    var_samp: enterprise_deduction_operation_record_var_samp_order_by
    variance: enterprise_deduction_operation_record_variance_order_by
}

"""
input type for inserting array relation for remote table "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_arr_rel_insert_input {
    data: [enterprise_deduction_operation_record_insert_input!]!
    on_conflict: enterprise_deduction_operation_record_on_conflict
}

"""aggregate avg on columns"""
type enterprise_deduction_operation_record_avg_fields {
    demerit_points: Float
    id: Float
}

"""
order by avg() on columns of table "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_avg_order_by {
    demerit_points: order_by
    id: order_by
}

"""
Boolean expression to filter rows from the table
"enterprise_deduction_operation_record". All fields are combined with a logical 'AND'.
"""
input enterprise_deduction_operation_record_bool_exp {
    _and: [enterprise_deduction_operation_record_bool_exp]
    _not: enterprise_deduction_operation_record_bool_exp
    _or: [enterprise_deduction_operation_record_bool_exp]
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    demerit_points: numeric_comparison_exp
    enterprise_deduction_item_id: String_comparison_exp
    enterprise_duduction_operation_id: String_comparison_exp
    enterprise_id: String_comparison_exp
    id: bigint_comparison_exp
    is_delete: Boolean_comparison_exp
    remarks: String_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
}

"""
unique or primary key constraints on table "enterprise_deduction_operation_record"
"""
enum enterprise_deduction_operation_record_constraint {
    """unique or primary key constraint"""
    enterprise_deduction_operation_record_pkey
}

"""
input type for incrementing integer column in table "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_inc_input {
    demerit_points: numeric
    id: bigint
}

"""
input type for inserting data into table "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_insert_input {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    demerit_points: numeric
    enterprise_deduction_item_id: String
    enterprise_duduction_operation_id: String
    enterprise_id: String
    id: bigint
    is_delete: Boolean
    remarks: String
    updated_at: timestamptz
    updated_by: String
}

"""aggregate max on columns"""
type enterprise_deduction_operation_record_max_fields {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    demerit_points: numeric
    enterprise_deduction_item_id: String
    enterprise_duduction_operation_id: String
    enterprise_id: String
    id: bigint
    remarks: String
    updated_at: timestamptz
    updated_by: String
}

"""
order by max() on columns of table "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_max_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    demerit_points: order_by
    enterprise_deduction_item_id: order_by
    enterprise_duduction_operation_id: order_by
    enterprise_id: order_by
    id: order_by
    remarks: order_by
    updated_at: order_by
    updated_by: order_by
}

"""aggregate min on columns"""
type enterprise_deduction_operation_record_min_fields {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    demerit_points: numeric
    enterprise_deduction_item_id: String
    enterprise_duduction_operation_id: String
    enterprise_id: String
    id: bigint
    remarks: String
    updated_at: timestamptz
    updated_by: String
}

"""
order by min() on columns of table "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_min_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    demerit_points: order_by
    enterprise_deduction_item_id: order_by
    enterprise_duduction_operation_id: order_by
    enterprise_id: order_by
    id: order_by
    remarks: order_by
    updated_at: order_by
    updated_by: order_by
}

"""
response of any mutation on the table "enterprise_deduction_operation_record"
"""
type enterprise_deduction_operation_record_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [enterprise_deduction_operation_record!]!
}

"""
input type for inserting object relation for remote table "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_obj_rel_insert_input {
    data: enterprise_deduction_operation_record_insert_input!
    on_conflict: enterprise_deduction_operation_record_on_conflict
}

"""
on conflict condition type for table "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_on_conflict {
    constraint: enterprise_deduction_operation_record_constraint!
    update_columns: [enterprise_deduction_operation_record_update_column!]!
    where: enterprise_deduction_operation_record_bool_exp
}

"""
ordering options when selecting data from "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    demerit_points: order_by
    enterprise_deduction_item_id: order_by
    enterprise_duduction_operation_id: order_by
    enterprise_id: order_by
    id: order_by
    is_delete: order_by
    remarks: order_by
    updated_at: order_by
    updated_by: order_by
}

"""
primary key columns input for table: "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_pk_columns_input {
    """联合主键"""
    enterprise_duduction_operation_id: String!

    """主键"""
    id: bigint!
}

"""
select columns of table "enterprise_deduction_operation_record"
"""
enum enterprise_deduction_operation_record_select_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    demerit_points

    """column name"""
    enterprise_deduction_item_id

    """column name"""
    enterprise_duduction_operation_id

    """column name"""
    enterprise_id

    """column name"""
    id

    """column name"""
    is_delete

    """column name"""
    remarks

    """column name"""
    updated_at

    """column name"""
    updated_by
}

"""
input type for updating data in table "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_set_input {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    demerit_points: numeric
    enterprise_deduction_item_id: String
    enterprise_duduction_operation_id: String
    enterprise_id: String
    id: bigint
    is_delete: Boolean
    remarks: String
    updated_at: timestamptz
    updated_by: String
}

"""aggregate stddev on columns"""
type enterprise_deduction_operation_record_stddev_fields {
    demerit_points: Float
    id: Float
}

"""
order by stddev() on columns of table "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_stddev_order_by {
    demerit_points: order_by
    id: order_by
}

"""aggregate stddev_pop on columns"""
type enterprise_deduction_operation_record_stddev_pop_fields {
    demerit_points: Float
    id: Float
}

"""
order by stddev_pop() on columns of table "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_stddev_pop_order_by {
    demerit_points: order_by
    id: order_by
}

"""aggregate stddev_samp on columns"""
type enterprise_deduction_operation_record_stddev_samp_fields {
    demerit_points: Float
    id: Float
}

"""
order by stddev_samp() on columns of table "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_stddev_samp_order_by {
    demerit_points: order_by
    id: order_by
}

"""aggregate sum on columns"""
type enterprise_deduction_operation_record_sum_fields {
    demerit_points: numeric
    id: bigint
}

"""
order by sum() on columns of table "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_sum_order_by {
    demerit_points: order_by
    id: order_by
}

"""
update columns of table "enterprise_deduction_operation_record"
"""
enum enterprise_deduction_operation_record_update_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    demerit_points

    """column name"""
    enterprise_deduction_item_id

    """column name"""
    enterprise_duduction_operation_id

    """column name"""
    enterprise_id

    """column name"""
    id

    """column name"""
    is_delete

    """column name"""
    remarks

    """column name"""
    updated_at

    """column name"""
    updated_by
}

"""aggregate var_pop on columns"""
type enterprise_deduction_operation_record_var_pop_fields {
    demerit_points: Float
    id: Float
}

"""
order by var_pop() on columns of table "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_var_pop_order_by {
    demerit_points: order_by
    id: order_by
}

"""aggregate var_samp on columns"""
type enterprise_deduction_operation_record_var_samp_fields {
    demerit_points: Float
    id: Float
}

"""
order by var_samp() on columns of table "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_var_samp_order_by {
    demerit_points: order_by
    id: order_by
}

"""aggregate variance on columns"""
type enterprise_deduction_operation_record_variance_fields {
    demerit_points: Float
    id: Float
}

"""
order by variance() on columns of table "enterprise_deduction_operation_record"
"""
input enterprise_deduction_operation_record_variance_order_by {
    demerit_points: order_by
    id: order_by
}

extend type Mutation {
    """
    delete data from the table: "enterprise_deduction_operation_record"
  """
    delete_enterprise_deduction_operation_record(
        """filter the rows which have to be deleted"""
        where: enterprise_deduction_operation_record_bool_exp!
    ): enterprise_deduction_operation_record_mutation_response

    """
    delete single row from the table: "enterprise_deduction_operation_record"
  """
    delete_enterprise_deduction_operation_record_by_pk(
        """联合主键"""
        enterprise_duduction_operation_id: String!

        """主键"""
        id: bigint!
    ): enterprise_deduction_operation_record

    """
    insert data into the table: "enterprise_deduction_operation_record"
  """
    insert_enterprise_deduction_operation_record(
        """the rows to be inserted"""
        objects: [enterprise_deduction_operation_record_insert_input!]!

        """on conflict condition"""
        on_conflict: enterprise_deduction_operation_record_on_conflict
    ): enterprise_deduction_operation_record_mutation_response

    """
    insert a single row into the table: "enterprise_deduction_operation_record"
  """
    insert_enterprise_deduction_operation_record_one(
        """the row to be inserted"""
        object: enterprise_deduction_operation_record_insert_input!

        """on conflict condition"""
        on_conflict: enterprise_deduction_operation_record_on_conflict
    ): enterprise_deduction_operation_record

    """
    update data of the table: "enterprise_deduction_operation_record"
  """
    update_enterprise_deduction_operation_record(
        """increments the integer columns with given value of the filtered values"""
        _inc: enterprise_deduction_operation_record_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: enterprise_deduction_operation_record_set_input

        """filter the rows which have to be updated"""
        where: enterprise_deduction_operation_record_bool_exp!
    ): enterprise_deduction_operation_record_mutation_response

    """
    update single row of the table: "enterprise_deduction_operation_record"
  """
    update_enterprise_deduction_operation_record_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: enterprise_deduction_operation_record_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: enterprise_deduction_operation_record_set_input
        pk_columns: enterprise_deduction_operation_record_pk_columns_input!
    ): enterprise_deduction_operation_record
}



extend type Query {
    """
    fetch data from the table: "enterprise_deduction_operation_record"
  """
    enterprise_deduction_operation_record(
        """distinct select on columns"""
        distinct_on: [enterprise_deduction_operation_record_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [enterprise_deduction_operation_record_order_by!]

        """filter the rows returned"""
        where: enterprise_deduction_operation_record_bool_exp
    ): [enterprise_deduction_operation_record!]!

    """
    fetch aggregated fields from the table: "enterprise_deduction_operation_record"
  """
    enterprise_deduction_operation_record_aggregate(
        """distinct select on columns"""
        distinct_on: [enterprise_deduction_operation_record_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [enterprise_deduction_operation_record_order_by!]

        """filter the rows returned"""
        where: enterprise_deduction_operation_record_bool_exp
    ): enterprise_deduction_operation_record_aggregate!

    """
    fetch data from the table: "enterprise_deduction_operation_record" using primary key columns
    """
    enterprise_deduction_operation_record_by_pk(
        """联合主键"""
        enterprise_duduction_operation_id: String!

        """主键"""
        id: bigint!
    ): enterprise_deduction_operation_record
}

extend type Subscription {
    """
    fetch data from the table: "enterprise_deduction_operation_record"
  """
    enterprise_deduction_operation_record(
        """distinct select on columns"""
        distinct_on: [enterprise_deduction_operation_record_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [enterprise_deduction_operation_record_order_by!]

        """filter the rows returned"""
        where: enterprise_deduction_operation_record_bool_exp
    ): [enterprise_deduction_operation_record!]!

    """
    fetch aggregated fields from the table: "enterprise_deduction_operation_record"
  """
    enterprise_deduction_operation_record_aggregate(
        """distinct select on columns"""
        distinct_on: [enterprise_deduction_operation_record_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [enterprise_deduction_operation_record_order_by!]

        """filter the rows returned"""
        where: enterprise_deduction_operation_record_bool_exp
    ): enterprise_deduction_operation_record_aggregate!

    """
    fetch data from the table: "enterprise_deduction_operation_record" using primary key columns
    """
    enterprise_deduction_operation_record_by_pk(
        """联合主键"""
        enterprise_duduction_operation_id: String!

        """主键"""
        id: bigint!
    ): enterprise_deduction_operation_record
}

`, BuiltIn: false},
	{Name: "graph/graphqls/illegal_photo.graphqls", Input: `

"""
违法照片表


columns and relationships of "illegal_photo"

"""
type illegal_photo {
    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """主键"""
    id: bigint!

    """联合主键"""
    illegal_photo_id: String!

    """是否删除"""
    is_delete: Boolean

    """是否同步"""
    is_synchronized: Boolean

    """违法照片地址"""
    picture_address: String

    """违法照片名称"""
    picture_name: String

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String
}

"""
aggregated selection of "illegal_photo"
"""
type illegal_photo_aggregate {
    aggregate: illegal_photo_aggregate_fields
    nodes: [illegal_photo!]!
}

"""
aggregate fields of "illegal_photo"
"""
type illegal_photo_aggregate_fields {
    avg: illegal_photo_avg_fields
    count(columns: [illegal_photo_select_column!], distinct: Boolean): Int
    max: illegal_photo_max_fields
    min: illegal_photo_min_fields
    stddev: illegal_photo_stddev_fields
    stddev_pop: illegal_photo_stddev_pop_fields
    stddev_samp: illegal_photo_stddev_samp_fields
    sum: illegal_photo_sum_fields
    var_pop: illegal_photo_var_pop_fields
    var_samp: illegal_photo_var_samp_fields
    variance: illegal_photo_variance_fields
}

"""
order by aggregate values of table "illegal_photo"
"""
input illegal_photo_aggregate_order_by {
    avg: illegal_photo_avg_order_by
    count: order_by
    max: illegal_photo_max_order_by
    min: illegal_photo_min_order_by
    stddev: illegal_photo_stddev_order_by
    stddev_pop: illegal_photo_stddev_pop_order_by
    stddev_samp: illegal_photo_stddev_samp_order_by
    sum: illegal_photo_sum_order_by
    var_pop: illegal_photo_var_pop_order_by
    var_samp: illegal_photo_var_samp_order_by
    variance: illegal_photo_variance_order_by
}

"""
input type for inserting array relation for remote table "illegal_photo"
"""
input illegal_photo_arr_rel_insert_input {
    data: [illegal_photo_insert_input!]!
    on_conflict: illegal_photo_on_conflict
}

"""aggregate avg on columns"""
type illegal_photo_avg_fields {
    id: Float
}

"""
order by avg() on columns of table "illegal_photo"
"""
input illegal_photo_avg_order_by {
    id: order_by
}

"""
Boolean expression to filter rows from the table "illegal_photo". All fields are combined with a logical 'AND'.
"""
input illegal_photo_bool_exp {
    _and: [illegal_photo_bool_exp]
    _not: illegal_photo_bool_exp
    _or: [illegal_photo_bool_exp]
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    id: bigint_comparison_exp
    illegal_photo_id: String_comparison_exp
    is_delete: Boolean_comparison_exp
    is_synchronized: Boolean_comparison_exp
    picture_address: String_comparison_exp
    picture_name: String_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
}

"""
unique or primary key constraints on table "illegal_photo"
"""
enum illegal_photo_constraint {
    """unique or primary key constraint"""
    illegal_photo_pkey
}

"""
input type for incrementing integer column in table "illegal_photo"
"""
input illegal_photo_inc_input {
    id: bigint
}

"""
input type for inserting data into table "illegal_photo"
"""
input illegal_photo_insert_input {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    id: bigint
    illegal_photo_id: String
    is_delete: Boolean
    is_synchronized: Boolean
    picture_address: String
    picture_name: String
    updated_at: timestamptz
    updated_by: String
}

"""aggregate max on columns"""
type illegal_photo_max_fields {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    id: bigint
    illegal_photo_id: String
    picture_address: String
    picture_name: String
    updated_at: timestamptz
    updated_by: String
}

"""
order by max() on columns of table "illegal_photo"
"""
input illegal_photo_max_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    id: order_by
    illegal_photo_id: order_by
    picture_address: order_by
    picture_name: order_by
    updated_at: order_by
    updated_by: order_by
}

"""aggregate min on columns"""
type illegal_photo_min_fields {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    id: bigint
    illegal_photo_id: String
    picture_address: String
    picture_name: String
    updated_at: timestamptz
    updated_by: String
}

"""
order by min() on columns of table "illegal_photo"
"""
input illegal_photo_min_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    id: order_by
    illegal_photo_id: order_by
    picture_address: order_by
    picture_name: order_by
    updated_at: order_by
    updated_by: order_by
}

"""
response of any mutation on the table "illegal_photo"
"""
type illegal_photo_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [illegal_photo!]!
}

"""
input type for inserting object relation for remote table "illegal_photo"
"""
input illegal_photo_obj_rel_insert_input {
    data: illegal_photo_insert_input!
    on_conflict: illegal_photo_on_conflict
}

"""
on conflict condition type for table "illegal_photo"
"""
input illegal_photo_on_conflict {
    constraint: illegal_photo_constraint!
    update_columns: [illegal_photo_update_column!]!
    where: illegal_photo_bool_exp
}

"""
ordering options when selecting data from "illegal_photo"
"""
input illegal_photo_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    id: order_by
    illegal_photo_id: order_by
    is_delete: order_by
    is_synchronized: order_by
    picture_address: order_by
    picture_name: order_by
    updated_at: order_by
    updated_by: order_by
}

"""
primary key columns input for table: "illegal_photo"
"""
input illegal_photo_pk_columns_input {
    """主键"""
    id: bigint!

    """联合主键"""
    illegal_photo_id: String!
}

"""
select columns of table "illegal_photo"
"""
enum illegal_photo_select_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    id

    """column name"""
    illegal_photo_id

    """column name"""
    is_delete

    """column name"""
    is_synchronized

    """column name"""
    picture_address

    """column name"""
    picture_name

    """column name"""
    updated_at

    """column name"""
    updated_by
}

"""
input type for updating data in table "illegal_photo"
"""
input illegal_photo_set_input {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    id: bigint
    illegal_photo_id: String
    is_delete: Boolean
    is_synchronized: Boolean
    picture_address: String
    picture_name: String
    updated_at: timestamptz
    updated_by: String
}

"""aggregate stddev on columns"""
type illegal_photo_stddev_fields {
    id: Float
}

"""
order by stddev() on columns of table "illegal_photo"
"""
input illegal_photo_stddev_order_by {
    id: order_by
}

"""aggregate stddev_pop on columns"""
type illegal_photo_stddev_pop_fields {
    id: Float
}

"""
order by stddev_pop() on columns of table "illegal_photo"
"""
input illegal_photo_stddev_pop_order_by {
    id: order_by
}

"""aggregate stddev_samp on columns"""
type illegal_photo_stddev_samp_fields {
    id: Float
}

"""
order by stddev_samp() on columns of table "illegal_photo"
"""
input illegal_photo_stddev_samp_order_by {
    id: order_by
}

"""aggregate sum on columns"""
type illegal_photo_sum_fields {
    id: bigint
}

"""
order by sum() on columns of table "illegal_photo"
"""
input illegal_photo_sum_order_by {
    id: order_by
}

"""
update columns of table "illegal_photo"
"""
enum illegal_photo_update_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    id

    """column name"""
    illegal_photo_id

    """column name"""
    is_delete

    """column name"""
    is_synchronized

    """column name"""
    picture_address

    """column name"""
    picture_name

    """column name"""
    updated_at

    """column name"""
    updated_by
}

"""aggregate var_pop on columns"""
type illegal_photo_var_pop_fields {
    id: Float
}

"""
order by var_pop() on columns of table "illegal_photo"
"""
input illegal_photo_var_pop_order_by {
    id: order_by
}

"""aggregate var_samp on columns"""
type illegal_photo_var_samp_fields {
    id: Float
}

"""
order by var_samp() on columns of table "illegal_photo"
"""
input illegal_photo_var_samp_order_by {
    id: order_by
}

"""aggregate variance on columns"""
type illegal_photo_variance_fields {
    id: Float
}

"""
order by variance() on columns of table "illegal_photo"
"""
input illegal_photo_variance_order_by {
    id: order_by
}

extend type Mutation {
    """
    delete data from the table: "illegal_photo"
  """
    delete_illegal_photo(
        """filter the rows which have to be deleted"""
        where: illegal_photo_bool_exp!
    ): illegal_photo_mutation_response

    """
    delete single row from the table: "illegal_photo"
  """
    delete_illegal_photo_by_pk(
        """主键"""
        id: bigint!

        """联合主键"""
        illegal_photo_id: String!
    ): illegal_photo

    """
    insert data into the table: "illegal_photo"
  """
    insert_illegal_photo(
        """the rows to be inserted"""
        objects: [illegal_photo_insert_input!]!

        """on conflict condition"""
        on_conflict: illegal_photo_on_conflict
    ): illegal_photo_mutation_response

    """
    insert a single row into the table: "illegal_photo"
  """
    insert_illegal_photo_one(
        """the row to be inserted"""
        object: illegal_photo_insert_input!

        """on conflict condition"""
        on_conflict: illegal_photo_on_conflict
    ): illegal_photo

    """
    update data of the table: "illegal_photo"
  """
    update_illegal_photo(
        """increments the integer columns with given value of the filtered values"""
        _inc: illegal_photo_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: illegal_photo_set_input

        """filter the rows which have to be updated"""
        where: illegal_photo_bool_exp!
    ): illegal_photo_mutation_response

    """
    update single row of the table: "illegal_photo"
  """
    update_illegal_photo_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: illegal_photo_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: illegal_photo_set_input
        pk_columns: illegal_photo_pk_columns_input!
    ): illegal_photo
}



extend type Query {
    """
    fetch data from the table: "illegal_photo"
  """
    illegal_photo(
        """distinct select on columns"""
        distinct_on: [illegal_photo_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [illegal_photo_order_by!]

        """filter the rows returned"""
        where: illegal_photo_bool_exp
    ): [illegal_photo!]!

    """
    fetch aggregated fields from the table: "illegal_photo"
  """
    illegal_photo_aggregate(
        """distinct select on columns"""
        distinct_on: [illegal_photo_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [illegal_photo_order_by!]

        """filter the rows returned"""
        where: illegal_photo_bool_exp
    ): illegal_photo_aggregate!

    """fetch data from the table: "illegal_photo" using primary key columns"""
    illegal_photo_by_pk(
        """主键"""
        id: bigint!

        """联合主键"""
        illegal_photo_id: String!
    ): illegal_photo
}

extend type Subscription {
    """
    fetch data from the table: "illegal_photo"
  """
    illegal_photo(
        """distinct select on columns"""
        distinct_on: [illegal_photo_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [illegal_photo_order_by!]

        """filter the rows returned"""
        where: illegal_photo_bool_exp
    ): [illegal_photo!]!

    """
    fetch aggregated fields from the table: "illegal_photo"
  """
    illegal_photo_aggregate(
        """distinct select on columns"""
        distinct_on: [illegal_photo_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [illegal_photo_order_by!]

        """filter the rows returned"""
        where: illegal_photo_bool_exp
    ): illegal_photo_aggregate!

    """fetch data from the table: "illegal_photo" using primary key columns"""
    illegal_photo_by_pk(
        """主键"""
        id: bigint!

        """联合主键"""
        illegal_photo_id: String!
    ): illegal_photo
}


`, BuiltIn: false},
	{Name: "graph/graphqls/regional_violation_register.graphqls", Input: `
extend type Mutation {
    """
    delete data from the table: "regional_violation_register"
  """
    delete_regional_violation_register(
        """filter the rows which have to be deleted"""
        where: regional_violation_register_bool_exp!
    ): regional_violation_register_mutation_response

    """
    delete single row from the table: "regional_violation_register"
  """
    delete_regional_violation_register_by_pk(
        """主键"""
        id: bigint!

        """联合主键"""
        regional_violation_register_id: String!
    ): regional_violation_register

    """
    insert data into the table: "regional_violation_register"
  """
    insert_regional_violation_register(
        """the rows to be inserted"""
        objects: [regional_violation_register_insert_input!]!

        """on conflict condition"""
        on_conflict: regional_violation_register_on_conflict
    ): regional_violation_register_mutation_response

    """
    insert a single row into the table: "regional_violation_register"
  """
    insert_regional_violation_register_one(
        """the row to be inserted"""
        object: regional_violation_register_insert_input!

        """on conflict condition"""
        on_conflict: regional_violation_register_on_conflict
    ): regional_violation_register

    """
    update data of the table: "regional_violation_register"
  """
    update_regional_violation_register(
        """increments the integer columns with given value of the filtered values"""
        _inc: regional_violation_register_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: regional_violation_register_set_input

        """filter the rows which have to be updated"""
        where: regional_violation_register_bool_exp!
    ): regional_violation_register_mutation_response

    """
    update single row of the table: "regional_violation_register"
  """
    update_regional_violation_register_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: regional_violation_register_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: regional_violation_register_set_input
        pk_columns: regional_violation_register_pk_columns_input!
    ): regional_violation_register
}


extend type Query {
    """
    fetch data from the table: "regional_violation_register"
  """
    regional_violation_register(
        """distinct select on columns"""
        distinct_on: [regional_violation_register_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [regional_violation_register_order_by!]

        """filter the rows returned"""
        where: regional_violation_register_bool_exp
    ): [regional_violation_register!]!

    """
    fetch aggregated fields from the table: "regional_violation_register"
  """
    regional_violation_register_aggregate(
        """distinct select on columns"""
        distinct_on: [regional_violation_register_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [regional_violation_register_order_by!]

        """filter the rows returned"""
        where: regional_violation_register_bool_exp
    ): regional_violation_register_aggregate!

    """
    fetch data from the table: "regional_violation_register" using primary key columns
    """
    regional_violation_register_by_pk(
        """主键"""
        id: bigint!

        """联合主键"""
        regional_violation_register_id: String!
    ): regional_violation_register
}

"""
区域处理机关交通违法违规登记表


columns and relationships of "regional_violation_register"

"""
type regional_violation_register {
    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """驾驶员id"""
    driver_id: String

    """主键"""
    id: bigint!

    """违法代码(VIO_CODEWFDM 违法描述字典表)"""
    illegal_code: Int

    """违法时间"""
    illegal_time: timestamptz

    """类型(1车辆2驾驶员),违法类型字典表"""
    illegal_type: Int

    """是否删除"""
    is_delete: Boolean

    """类型(false未登记true已登记)"""
    is_register: Boolean

    """操作员"""
    operator: String

    """处理机关"""
    processing_agency: String

    """联合主键"""
    regional_violation_register_id: String!

    """登记时间"""
    register_time: timestamptz

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String

    """违章车辆id"""
    vehicle_id: String

    """违法记录表ID(vehicle_violation_details的violation_detail_id)"""
    violation_detail_id: String
}

"""
aggregated selection of "regional_violation_register"
"""
type regional_violation_register_aggregate {
    aggregate: regional_violation_register_aggregate_fields
    nodes: [regional_violation_register!]!
}

"""
aggregate fields of "regional_violation_register"
"""
type regional_violation_register_aggregate_fields {
    avg: regional_violation_register_avg_fields
    count(columns: [regional_violation_register_select_column!], distinct: Boolean): Int
    max: regional_violation_register_max_fields
    min: regional_violation_register_min_fields
    stddev: regional_violation_register_stddev_fields
    stddev_pop: regional_violation_register_stddev_pop_fields
    stddev_samp: regional_violation_register_stddev_samp_fields
    sum: regional_violation_register_sum_fields
    var_pop: regional_violation_register_var_pop_fields
    var_samp: regional_violation_register_var_samp_fields
    variance: regional_violation_register_variance_fields
}

"""
order by aggregate values of table "regional_violation_register"
"""
input regional_violation_register_aggregate_order_by {
    avg: regional_violation_register_avg_order_by
    count: order_by
    max: regional_violation_register_max_order_by
    min: regional_violation_register_min_order_by
    stddev: regional_violation_register_stddev_order_by
    stddev_pop: regional_violation_register_stddev_pop_order_by
    stddev_samp: regional_violation_register_stddev_samp_order_by
    sum: regional_violation_register_sum_order_by
    var_pop: regional_violation_register_var_pop_order_by
    var_samp: regional_violation_register_var_samp_order_by
    variance: regional_violation_register_variance_order_by
}

"""
input type for inserting array relation for remote table "regional_violation_register"
"""
input regional_violation_register_arr_rel_insert_input {
    data: [regional_violation_register_insert_input!]!
    on_conflict: regional_violation_register_on_conflict
}

"""aggregate avg on columns"""
type regional_violation_register_avg_fields {
    id: Float
    illegal_code: Float
    illegal_type: Float
}

"""
order by avg() on columns of table "regional_violation_register"
"""
input regional_violation_register_avg_order_by {
    id: order_by
    illegal_code: order_by
    illegal_type: order_by
}

"""
Boolean expression to filter rows from the table "regional_violation_register".
All fields are combined with a logical 'AND'.
"""
input regional_violation_register_bool_exp {
    _and: [regional_violation_register_bool_exp]
    _not: regional_violation_register_bool_exp
    _or: [regional_violation_register_bool_exp]
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    driver_id: String_comparison_exp
    id: bigint_comparison_exp
    illegal_code: Int_comparison_exp
    illegal_time: timestamptz_comparison_exp
    illegal_type: Int_comparison_exp
    is_delete: Boolean_comparison_exp
    is_register: Boolean_comparison_exp
    operator: String_comparison_exp
    processing_agency: String_comparison_exp
    regional_violation_register_id: String_comparison_exp
    register_time: timestamptz_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    vehicle_id: String_comparison_exp
    violation_detail_id: String_comparison_exp
}

"""
unique or primary key constraints on table "regional_violation_register"
"""
enum regional_violation_register_constraint {
    """unique or primary key constraint"""
    regional_violation_register_pkey
}

"""
input type for incrementing integer column in table "regional_violation_register"
"""
input regional_violation_register_inc_input {
    id: bigint
    illegal_code: Int
    illegal_type: Int
}

"""
input type for inserting data into table "regional_violation_register"
"""
input regional_violation_register_insert_input {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_id: String
    id: bigint
    illegal_code: Int
    illegal_time: timestamptz
    illegal_type: Int
    is_delete: Boolean
    is_register: Boolean
    operator: String
    processing_agency: String
    regional_violation_register_id: String
    register_time: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    violation_detail_id: String
}

"""aggregate max on columns"""
type regional_violation_register_max_fields {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_id: String
    id: bigint
    illegal_code: Int
    illegal_time: timestamptz
    illegal_type: Int
    operator: String
    processing_agency: String
    regional_violation_register_id: String
    register_time: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    violation_detail_id: String
}

"""
order by max() on columns of table "regional_violation_register"
"""
input regional_violation_register_max_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    driver_id: order_by
    id: order_by
    illegal_code: order_by
    illegal_time: order_by
    illegal_type: order_by
    operator: order_by
    processing_agency: order_by
    regional_violation_register_id: order_by
    register_time: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
    violation_detail_id: order_by
}

"""aggregate min on columns"""
type regional_violation_register_min_fields {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_id: String
    id: bigint
    illegal_code: Int
    illegal_time: timestamptz
    illegal_type: Int
    operator: String
    processing_agency: String
    regional_violation_register_id: String
    register_time: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    violation_detail_id: String
}

"""
order by min() on columns of table "regional_violation_register"
"""
input regional_violation_register_min_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    driver_id: order_by
    id: order_by
    illegal_code: order_by
    illegal_time: order_by
    illegal_type: order_by
    operator: order_by
    processing_agency: order_by
    regional_violation_register_id: order_by
    register_time: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
    violation_detail_id: order_by
}

"""
response of any mutation on the table "regional_violation_register"
"""
type regional_violation_register_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [regional_violation_register!]!
}

"""
input type for inserting object relation for remote table "regional_violation_register"
"""
input regional_violation_register_obj_rel_insert_input {
    data: regional_violation_register_insert_input!
    on_conflict: regional_violation_register_on_conflict
}

"""
on conflict condition type for table "regional_violation_register"
"""
input regional_violation_register_on_conflict {
    constraint: regional_violation_register_constraint!
    update_columns: [regional_violation_register_update_column!]!
    where: regional_violation_register_bool_exp
}

"""
ordering options when selecting data from "regional_violation_register"
"""
input regional_violation_register_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    driver_id: order_by
    id: order_by
    illegal_code: order_by
    illegal_time: order_by
    illegal_type: order_by
    is_delete: order_by
    is_register: order_by
    operator: order_by
    processing_agency: order_by
    regional_violation_register_id: order_by
    register_time: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
    violation_detail_id: order_by
}

"""
primary key columns input for table: "regional_violation_register"
"""
input regional_violation_register_pk_columns_input {
    """主键"""
    id: bigint!

    """联合主键"""
    regional_violation_register_id: String!
}

"""
select columns of table "regional_violation_register"
"""
enum regional_violation_register_select_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    driver_id

    """column name"""
    id

    """column name"""
    illegal_code

    """column name"""
    illegal_time

    """column name"""
    illegal_type

    """column name"""
    is_delete

    """column name"""
    is_register

    """column name"""
    operator

    """column name"""
    processing_agency

    """column name"""
    regional_violation_register_id

    """column name"""
    register_time

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    vehicle_id

    """column name"""
    violation_detail_id
}

"""
input type for updating data in table "regional_violation_register"
"""
input regional_violation_register_set_input {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_id: String
    id: bigint
    illegal_code: Int
    illegal_time: timestamptz
    illegal_type: Int
    is_delete: Boolean
    is_register: Boolean
    operator: String
    processing_agency: String
    regional_violation_register_id: String
    register_time: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    violation_detail_id: String
}

"""aggregate stddev on columns"""
type regional_violation_register_stddev_fields {
    id: Float
    illegal_code: Float
    illegal_type: Float
}

"""
order by stddev() on columns of table "regional_violation_register"
"""
input regional_violation_register_stddev_order_by {
    id: order_by
    illegal_code: order_by
    illegal_type: order_by
}

"""aggregate stddev_pop on columns"""
type regional_violation_register_stddev_pop_fields {
    id: Float
    illegal_code: Float
    illegal_type: Float
}

"""
order by stddev_pop() on columns of table "regional_violation_register"
"""
input regional_violation_register_stddev_pop_order_by {
    id: order_by
    illegal_code: order_by
    illegal_type: order_by
}

"""aggregate stddev_samp on columns"""
type regional_violation_register_stddev_samp_fields {
    id: Float
    illegal_code: Float
    illegal_type: Float
}

"""
order by stddev_samp() on columns of table "regional_violation_register"
"""
input regional_violation_register_stddev_samp_order_by {
    id: order_by
    illegal_code: order_by
    illegal_type: order_by
}

"""aggregate sum on columns"""
type regional_violation_register_sum_fields {
    id: bigint
    illegal_code: Int
    illegal_type: Int
}

"""
order by sum() on columns of table "regional_violation_register"
"""
input regional_violation_register_sum_order_by {
    id: order_by
    illegal_code: order_by
    illegal_type: order_by
}

"""
update columns of table "regional_violation_register"
"""
enum regional_violation_register_update_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    driver_id

    """column name"""
    id

    """column name"""
    illegal_code

    """column name"""
    illegal_time

    """column name"""
    illegal_type

    """column name"""
    is_delete

    """column name"""
    is_register

    """column name"""
    operator

    """column name"""
    processing_agency

    """column name"""
    regional_violation_register_id

    """column name"""
    register_time

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    vehicle_id

    """column name"""
    violation_detail_id
}

"""aggregate var_pop on columns"""
type regional_violation_register_var_pop_fields {
    id: Float
    illegal_code: Float
    illegal_type: Float
}

"""
order by var_pop() on columns of table "regional_violation_register"
"""
input regional_violation_register_var_pop_order_by {
    id: order_by
    illegal_code: order_by
    illegal_type: order_by
}

"""aggregate var_samp on columns"""
type regional_violation_register_var_samp_fields {
    id: Float
    illegal_code: Float
    illegal_type: Float
}

"""
order by var_samp() on columns of table "regional_violation_register"
"""
input regional_violation_register_var_samp_order_by {
    id: order_by
    illegal_code: order_by
    illegal_type: order_by
}

"""aggregate variance on columns"""
type regional_violation_register_variance_fields {
    id: Float
    illegal_code: Float
    illegal_type: Float
}

"""
order by variance() on columns of table "regional_violation_register"
"""
input regional_violation_register_variance_order_by {
    id: order_by
    illegal_code: order_by
    illegal_type: order_by
}



extend type Subscription {
    """
    fetch data from the table: "regional_violation_register"
  """
    regional_violation_register(
        """distinct select on columns"""
        distinct_on: [regional_violation_register_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [regional_violation_register_order_by!]

        """filter the rows returned"""
        where: regional_violation_register_bool_exp
    ): [regional_violation_register!]!

    """
    fetch aggregated fields from the table: "regional_violation_register"
  """
    regional_violation_register_aggregate(
        """distinct select on columns"""
        distinct_on: [regional_violation_register_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [regional_violation_register_order_by!]

        """filter the rows returned"""
        where: regional_violation_register_bool_exp
    ): regional_violation_register_aggregate!

    """
    fetch data from the table: "regional_violation_register" using primary key columns
    """
    regional_violation_register_by_pk(
        """主键"""
        id: bigint!

        """联合主键"""
        regional_violation_register_id: String!
    ): regional_violation_register
}

`, BuiltIn: false},
	{Name: "graph/graphqls/schema.graphqls", Input: `
scalar _jsonb
scalar bigint
scalar numeric
scalar timestamptz
scalar _text

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}


"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input _jsonb_comparison_exp {
    _eq: _jsonb
    _gt: _jsonb
    _gte: _jsonb
    _in: [_jsonb!]
    _is_null: Boolean
    _lt: _jsonb
    _lte: _jsonb
    _neq: _jsonb
    _nin: [_jsonb!]
}

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}


"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}


"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
    _eq: numeric
    _gt: numeric
    _gte: numeric
    _in: [numeric!]
    _is_null: Boolean
    _lt: numeric
    _lte: numeric
    _neq: numeric
    _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
    """in the ascending order, nulls last"""
    asc

    """in the ascending order, nulls first"""
    asc_nulls_first

    """in the ascending order, nulls last"""
    asc_nulls_last

    """in the descending order, nulls first"""
    desc

    """in the descending order, nulls first"""
    desc_nulls_first

    """in the descending order, nulls last"""
    desc_nulls_last
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}


"expression to compare columns of type _text. All fields are combined with logical 'AND'."
input _text_comparison_exp {
    _eq: _text
    _gt: _text
    _gte: _text
    _in: [_text!]
    _is_null: Boolean
    _lt: _text
    _lte: _text
    _neq: _text
    _nin: [_text!]
}


scalar point

"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input point_comparison_exp {
    _eq: point
    _gt: point
    _gte: point
    _in: [point!]
    _is_null: Boolean
    _lt: point
    _lte: point
    _neq: point
    _nin: [point!]
}`, BuiltIn: false},
	{Name: "graph/graphqls/user_operation_log.graphqls", Input: `extend type Mutation {
    """
    delete data from the table: "user_operation_log"
  """
    delete_user_operation_log(
        """filter the rows which have to be deleted"""
        where: user_operation_log_bool_exp!
    ): user_operation_log_mutation_response

    """
    delete single row from the table: "user_operation_log"
  """
    delete_user_operation_log_by_pk(
        """主键"""
        id: bigint!
    ): user_operation_log

    """
    insert data into the table: "user_operation_log"
  """
    insert_user_operation_log(
        """the rows to be inserted"""
        objects: [user_operation_log_insert_input!]!

        """on conflict condition"""
        on_conflict: user_operation_log_on_conflict
    ): user_operation_log_mutation_response

    """
    insert a single row into the table: "user_operation_log"
  """
    insert_user_operation_log_one(
        """the row to be inserted"""
        object: user_operation_log_insert_input!

        """on conflict condition"""
        on_conflict: user_operation_log_on_conflict
    ): user_operation_log

    """
    update data of the table: "user_operation_log"
  """
    update_user_operation_log(
        """increments the integer columns with given value of the filtered values"""
        _inc: user_operation_log_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: user_operation_log_set_input

        """filter the rows which have to be updated"""
        where: user_operation_log_bool_exp!
    ): user_operation_log_mutation_response

    """
    update single row of the table: "user_operation_log"
  """
    update_user_operation_log_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: user_operation_log_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: user_operation_log_set_input
        pk_columns: user_operation_log_pk_columns_input!
    ): user_operation_log
}



extend type Query {
    """
    fetch data from the table: "user_operation_log"
  """
    user_operation_log(
        """distinct select on columns"""
        distinct_on: [user_operation_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [user_operation_log_order_by!]

        """filter the rows returned"""
        where: user_operation_log_bool_exp
    ): [user_operation_log!]!

    """
    fetch aggregated fields from the table: "user_operation_log"
  """
    user_operation_log_aggregate(
        """distinct select on columns"""
        distinct_on: [user_operation_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [user_operation_log_order_by!]

        """filter the rows returned"""
        where: user_operation_log_bool_exp
    ): user_operation_log_aggregate!

    """
    fetch data from the table: "user_operation_log" using primary key columns
    """
    user_operation_log_by_pk(
        """主键"""
        id: bigint!
    ): user_operation_log
}



extend type Subscription {
    """
    fetch data from the table: "user_operation_log"
  """
    user_operation_log(
        """distinct select on columns"""
        distinct_on: [user_operation_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [user_operation_log_order_by!]

        """filter the rows returned"""
        where: user_operation_log_bool_exp
    ): [user_operation_log!]!

    """
    fetch aggregated fields from the table: "user_operation_log"
  """
    user_operation_log_aggregate(
        """distinct select on columns"""
        distinct_on: [user_operation_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [user_operation_log_order_by!]

        """filter the rows returned"""
        where: user_operation_log_bool_exp
    ): user_operation_log_aggregate!

    """
    fetch data from the table: "user_operation_log" using primary key columns
    """
    user_operation_log_by_pk(
        """主键"""
        id: bigint!
    ): user_operation_log
}


"""
交警大队窗口查询违章记录表


columns and relationships of "user_operation_log"

"""
type user_operation_log {
    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """主键"""
    id: bigint!

    """违法时间"""
    illegal_time: timestamptz

    """车牌号"""
    license_plate_number: String

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String

    """用户IP"""
    user_ip: String
}

"""
aggregated selection of "user_operation_log"
"""
type user_operation_log_aggregate {
    aggregate: user_operation_log_aggregate_fields
    nodes: [user_operation_log!]!
}

"""
aggregate fields of "user_operation_log"
"""
type user_operation_log_aggregate_fields {
    avg: user_operation_log_avg_fields
    count(columns: [user_operation_log_select_column!], distinct: Boolean): Int
    max: user_operation_log_max_fields
    min: user_operation_log_min_fields
    stddev: user_operation_log_stddev_fields
    stddev_pop: user_operation_log_stddev_pop_fields
    stddev_samp: user_operation_log_stddev_samp_fields
    sum: user_operation_log_sum_fields
    var_pop: user_operation_log_var_pop_fields
    var_samp: user_operation_log_var_samp_fields
    variance: user_operation_log_variance_fields
}

"""
order by aggregate values of table "user_operation_log"
"""
input user_operation_log_aggregate_order_by {
    avg: user_operation_log_avg_order_by
    count: order_by
    max: user_operation_log_max_order_by
    min: user_operation_log_min_order_by
    stddev: user_operation_log_stddev_order_by
    stddev_pop: user_operation_log_stddev_pop_order_by
    stddev_samp: user_operation_log_stddev_samp_order_by
    sum: user_operation_log_sum_order_by
    var_pop: user_operation_log_var_pop_order_by
    var_samp: user_operation_log_var_samp_order_by
    variance: user_operation_log_variance_order_by
}

"""
input type for inserting array relation for remote table "user_operation_log"
"""
input user_operation_log_arr_rel_insert_input {
    data: [user_operation_log_insert_input!]!
    on_conflict: user_operation_log_on_conflict
}

"""aggregate avg on columns"""
type user_operation_log_avg_fields {
    id: Float
}

"""
order by avg() on columns of table "user_operation_log"
"""
input user_operation_log_avg_order_by {
    id: order_by
}

"""
Boolean expression to filter rows from the table "user_operation_log". All fields are combined with a logical 'AND'.
"""
input user_operation_log_bool_exp {
    _and: [user_operation_log_bool_exp]
    _not: user_operation_log_bool_exp
    _or: [user_operation_log_bool_exp]
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    id: bigint_comparison_exp
    illegal_time: timestamptz_comparison_exp
    license_plate_number: String_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    user_ip: String_comparison_exp
}

"""
unique or primary key constraints on table "user_operation_log"
"""
enum user_operation_log_constraint {
    """unique or primary key constraint"""
    user_operation_log_pkey
}

"""
input type for incrementing integer column in table "user_operation_log"
"""
input user_operation_log_inc_input {
    id: bigint
}

"""
input type for inserting data into table "user_operation_log"
"""
input user_operation_log_insert_input {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    id: bigint
    illegal_time: timestamptz
    license_plate_number: String
    updated_at: timestamptz
    updated_by: String
    user_ip: String
}

"""aggregate max on columns"""
type user_operation_log_max_fields {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    id: bigint
    illegal_time: timestamptz
    license_plate_number: String
    updated_at: timestamptz
    updated_by: String
    user_ip: String
}

"""
order by max() on columns of table "user_operation_log"
"""
input user_operation_log_max_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    id: order_by
    illegal_time: order_by
    license_plate_number: order_by
    updated_at: order_by
    updated_by: order_by
    user_ip: order_by
}

"""aggregate min on columns"""
type user_operation_log_min_fields {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    id: bigint
    illegal_time: timestamptz
    license_plate_number: String
    updated_at: timestamptz
    updated_by: String
    user_ip: String
}

"""
order by min() on columns of table "user_operation_log"
"""
input user_operation_log_min_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    id: order_by
    illegal_time: order_by
    license_plate_number: order_by
    updated_at: order_by
    updated_by: order_by
    user_ip: order_by
}

"""
response of any mutation on the table "user_operation_log"
"""
type user_operation_log_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [user_operation_log!]!
}

"""
input type for inserting object relation for remote table "user_operation_log"
"""
input user_operation_log_obj_rel_insert_input {
    data: user_operation_log_insert_input!
    on_conflict: user_operation_log_on_conflict
}

"""
on conflict condition type for table "user_operation_log"
"""
input user_operation_log_on_conflict {
    constraint: user_operation_log_constraint!
    update_columns: [user_operation_log_update_column!]!
    where: user_operation_log_bool_exp
}

"""
ordering options when selecting data from "user_operation_log"
"""
input user_operation_log_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    id: order_by
    illegal_time: order_by
    license_plate_number: order_by
    updated_at: order_by
    updated_by: order_by
    user_ip: order_by
}

"""
primary key columns input for table: "user_operation_log"
"""
input user_operation_log_pk_columns_input {
    """主键"""
    id: bigint!
}

"""
select columns of table "user_operation_log"
"""
enum user_operation_log_select_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    id

    """column name"""
    illegal_time

    """column name"""
    license_plate_number

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    user_ip
}

"""
input type for updating data in table "user_operation_log"
"""
input user_operation_log_set_input {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    id: bigint
    illegal_time: timestamptz
    license_plate_number: String
    updated_at: timestamptz
    updated_by: String
    user_ip: String
}

"""aggregate stddev on columns"""
type user_operation_log_stddev_fields {
    id: Float
}

"""
order by stddev() on columns of table "user_operation_log"
"""
input user_operation_log_stddev_order_by {
    id: order_by
}

"""aggregate stddev_pop on columns"""
type user_operation_log_stddev_pop_fields {
    id: Float
}

"""
order by stddev_pop() on columns of table "user_operation_log"
"""
input user_operation_log_stddev_pop_order_by {
    id: order_by
}

"""aggregate stddev_samp on columns"""
type user_operation_log_stddev_samp_fields {
    id: Float
}

"""
order by stddev_samp() on columns of table "user_operation_log"
"""
input user_operation_log_stddev_samp_order_by {
    id: order_by
}

"""aggregate sum on columns"""
type user_operation_log_sum_fields {
    id: bigint
}

"""
order by sum() on columns of table "user_operation_log"
"""
input user_operation_log_sum_order_by {
    id: order_by
}

"""
update columns of table "user_operation_log"
"""
enum user_operation_log_update_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    id

    """column name"""
    illegal_time

    """column name"""
    license_plate_number

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    user_ip
}

"""aggregate var_pop on columns"""
type user_operation_log_var_pop_fields {
    id: Float
}

"""
order by var_pop() on columns of table "user_operation_log"
"""
input user_operation_log_var_pop_order_by {
    id: order_by
}

"""aggregate var_samp on columns"""
type user_operation_log_var_samp_fields {
    id: Float
}

"""
order by var_samp() on columns of table "user_operation_log"
"""
input user_operation_log_var_samp_order_by {
    id: order_by
}

"""aggregate variance on columns"""
type user_operation_log_variance_fields {
    id: Float
}

"""
order by variance() on columns of table "user_operation_log"
"""
input user_operation_log_variance_order_by {
    id: order_by
}

`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_detain_details.graphqls", Input: `
extend type Mutation {
    """
    delete data from the table: "vehicle_detain_details"
  """
    delete_vehicle_detain_details(
        """filter the rows which have to be deleted"""
        where: vehicle_detain_details_bool_exp!
    ): vehicle_detain_details_mutation_response

    """
    delete single row from the table: "vehicle_detain_details"
  """
    delete_vehicle_detain_details_by_pk(
        """主键"""
        id: bigint!
    ): vehicle_detain_details

    """
    insert data into the table: "vehicle_detain_details"
  """
    insert_vehicle_detain_details(
        """the rows to be inserted"""
        objects: [vehicle_detain_details_insert_input!]!

        """on conflict condition"""
        on_conflict: vehicle_detain_details_on_conflict
    ): vehicle_detain_details_mutation_response

    """
    insert a single row into the table: "vehicle_detain_details"
  """
    insert_vehicle_detain_details_one(
        """the row to be inserted"""
        object: vehicle_detain_details_insert_input!

        """on conflict condition"""
        on_conflict: vehicle_detain_details_on_conflict
    ): vehicle_detain_details

    """
    update data of the table: "vehicle_detain_details"
  """
    update_vehicle_detain_details(
        """increments the integer columns with given value of the filtered values"""
        _inc: vehicle_detain_details_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: vehicle_detain_details_set_input

        """filter the rows which have to be updated"""
        where: vehicle_detain_details_bool_exp!
    ): vehicle_detain_details_mutation_response

    """
    update single row of the table: "vehicle_detain_details"
  """
    update_vehicle_detain_details_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: vehicle_detain_details_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: vehicle_detain_details_set_input
        pk_columns: vehicle_detain_details_pk_columns_input!
    ): vehicle_detain_details
}


extend type Query {
    """
    fetch data from the table: "vehicle_detain_details"
  """
    vehicle_detain_details(
        """distinct select on columns"""
        distinct_on: [vehicle_detain_details_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_detain_details_order_by!]

        """filter the rows returned"""
        where: vehicle_detain_details_bool_exp
    ): [vehicle_detain_details!]!

    """
    fetch aggregated fields from the table: "vehicle_detain_details"
  """
    vehicle_detain_details_aggregate(
        """distinct select on columns"""
        distinct_on: [vehicle_detain_details_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_detain_details_order_by!]

        """filter the rows returned"""
        where: vehicle_detain_details_bool_exp
    ): vehicle_detain_details_aggregate!

    """
    fetch data from the table: "vehicle_detain_details" using primary key columns
    """
    vehicle_detain_details_by_pk(
        """主键"""
        id: bigint!
    ): vehicle_detain_details
}

extend type Subscription {
    """
    fetch data from the table: "vehicle_detain_details"
  """
    vehicle_detain_details(
        """distinct select on columns"""
        distinct_on: [vehicle_detain_details_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_detain_details_order_by!]

        """filter the rows returned"""
        where: vehicle_detain_details_bool_exp
    ): [vehicle_detain_details!]!

    """
    fetch aggregated fields from the table: "vehicle_detain_details"
  """
    vehicle_detain_details_aggregate(
        """distinct select on columns"""
        distinct_on: [vehicle_detain_details_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_detain_details_order_by!]

        """filter the rows returned"""
        where: vehicle_detain_details_bool_exp
    ): vehicle_detain_details_aggregate!

    """
    fetch data from the table: "vehicle_detain_details" using primary key columns
    """
    vehicle_detain_details_by_pk(
        """主键"""
        id: bigint!
    ): vehicle_detain_details
}


"""
扣车明细表


columns and relationships of "vehicle_detain_details"

"""
type vehicle_detain_details {
    """卡口图片"""
    bayonet_picture: String

    """主键"""
    id: bigint!

    """卡口判断(是否通过)"""
    is_bayonet: Boolean

    """是否目录库"""
    is_category: Boolean

    """是否删除"""
    is_delete: Boolean

    """违法判断(是否通过)"""
    is_illegal: Boolean

    """卫星定位判断(是否通过)"""
    is_satellite_judgment: Boolean

    """车牌颜色字典"""
    license_plate_color: String

    """车牌号码"""
    license_plate_number: String

    """记录时间"""
    record_time: timestamptz

    """登记所在机构"""
    register_region: String

    """登记用户"""
    register_user: String

    """备注"""
    remarks: String

    """更新时间"""
    update_time: timestamptz

    """扣车图片"""
    vehicle_detain_picture: String

    """状态(车辆扣车状态字典)"""
    vehicle_detain_status: Int

    """扣车时间"""
    vehicle_detain_time: timestamptz

    """放车图片"""
    vehicle_release_picture: String

    """放车时间"""
    vehicle_release_time: timestamptz
}

"""
aggregated selection of "vehicle_detain_details"
"""
type vehicle_detain_details_aggregate {
    aggregate: vehicle_detain_details_aggregate_fields
    nodes: [vehicle_detain_details!]!
}

"""
aggregate fields of "vehicle_detain_details"
"""
type vehicle_detain_details_aggregate_fields {
    avg: vehicle_detain_details_avg_fields
    count(columns: [vehicle_detain_details_select_column!], distinct: Boolean): Int
    max: vehicle_detain_details_max_fields
    min: vehicle_detain_details_min_fields
    stddev: vehicle_detain_details_stddev_fields
    stddev_pop: vehicle_detain_details_stddev_pop_fields
    stddev_samp: vehicle_detain_details_stddev_samp_fields
    sum: vehicle_detain_details_sum_fields
    var_pop: vehicle_detain_details_var_pop_fields
    var_samp: vehicle_detain_details_var_samp_fields
    variance: vehicle_detain_details_variance_fields
}

"""
order by aggregate values of table "vehicle_detain_details"
"""
input vehicle_detain_details_aggregate_order_by {
    avg: vehicle_detain_details_avg_order_by
    count: order_by
    max: vehicle_detain_details_max_order_by
    min: vehicle_detain_details_min_order_by
    stddev: vehicle_detain_details_stddev_order_by
    stddev_pop: vehicle_detain_details_stddev_pop_order_by
    stddev_samp: vehicle_detain_details_stddev_samp_order_by
    sum: vehicle_detain_details_sum_order_by
    var_pop: vehicle_detain_details_var_pop_order_by
    var_samp: vehicle_detain_details_var_samp_order_by
    variance: vehicle_detain_details_variance_order_by
}

"""
input type for inserting array relation for remote table "vehicle_detain_details"
"""
input vehicle_detain_details_arr_rel_insert_input {
    data: [vehicle_detain_details_insert_input!]!
    on_conflict: vehicle_detain_details_on_conflict
}

"""aggregate avg on columns"""
type vehicle_detain_details_avg_fields {
    id: Float
    vehicle_detain_status: Float
}

"""
order by avg() on columns of table "vehicle_detain_details"
"""
input vehicle_detain_details_avg_order_by {
    id: order_by
    vehicle_detain_status: order_by
}

"""
Boolean expression to filter rows from the table "vehicle_detain_details". All fields are combined with a logical 'AND'.
"""
input vehicle_detain_details_bool_exp {
    _and: [vehicle_detain_details_bool_exp]
    _not: vehicle_detain_details_bool_exp
    _or: [vehicle_detain_details_bool_exp]
    bayonet_picture: String_comparison_exp
    id: bigint_comparison_exp
    is_bayonet: Boolean_comparison_exp
    is_category: Boolean_comparison_exp
    is_delete: Boolean_comparison_exp
    is_illegal: Boolean_comparison_exp
    is_satellite_judgment: Boolean_comparison_exp
    license_plate_color: String_comparison_exp
    license_plate_number: String_comparison_exp
    record_time: timestamptz_comparison_exp
    register_region: String_comparison_exp
    register_user: String_comparison_exp
    remarks: String_comparison_exp
    update_time: timestamptz_comparison_exp
    vehicle_detain_picture: String_comparison_exp
    vehicle_detain_status: Int_comparison_exp
    vehicle_detain_time: timestamptz_comparison_exp
    vehicle_release_picture: String_comparison_exp
    vehicle_release_time: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "vehicle_detain_details"
"""
enum vehicle_detain_details_constraint {
    """unique or primary key constraint"""
    vehicle_detain_details_pkey
}

"""
input type for incrementing integer column in table "vehicle_detain_details"
"""
input vehicle_detain_details_inc_input {
    id: bigint
    vehicle_detain_status: Int
}

"""
input type for inserting data into table "vehicle_detain_details"
"""
input vehicle_detain_details_insert_input {
    bayonet_picture: String
    id: bigint
    is_bayonet: Boolean
    is_category: Boolean
    is_delete: Boolean
    is_illegal: Boolean
    is_satellite_judgment: Boolean
    license_plate_color: String
    license_plate_number: String
    record_time: timestamptz
    register_region: String
    register_user: String
    remarks: String
    update_time: timestamptz
    vehicle_detain_picture: String
    vehicle_detain_status: Int
    vehicle_detain_time: timestamptz
    vehicle_release_picture: String
    vehicle_release_time: timestamptz
}

"""aggregate max on columns"""
type vehicle_detain_details_max_fields {
    bayonet_picture: String
    id: bigint
    license_plate_color: String
    license_plate_number: String
    record_time: timestamptz
    register_region: String
    register_user: String
    remarks: String
    update_time: timestamptz
    vehicle_detain_picture: String
    vehicle_detain_status: Int
    vehicle_detain_time: timestamptz
    vehicle_release_picture: String
    vehicle_release_time: timestamptz
}

"""
order by max() on columns of table "vehicle_detain_details"
"""
input vehicle_detain_details_max_order_by {
    bayonet_picture: order_by
    id: order_by
    license_plate_color: order_by
    license_plate_number: order_by
    record_time: order_by
    register_region: order_by
    register_user: order_by
    remarks: order_by
    update_time: order_by
    vehicle_detain_picture: order_by
    vehicle_detain_status: order_by
    vehicle_detain_time: order_by
    vehicle_release_picture: order_by
    vehicle_release_time: order_by
}

"""aggregate min on columns"""
type vehicle_detain_details_min_fields {
    bayonet_picture: String
    id: bigint
    license_plate_color: String
    license_plate_number: String
    record_time: timestamptz
    register_region: String
    register_user: String
    remarks: String
    update_time: timestamptz
    vehicle_detain_picture: String
    vehicle_detain_status: Int
    vehicle_detain_time: timestamptz
    vehicle_release_picture: String
    vehicle_release_time: timestamptz
}

"""
order by min() on columns of table "vehicle_detain_details"
"""
input vehicle_detain_details_min_order_by {
    bayonet_picture: order_by
    id: order_by
    license_plate_color: order_by
    license_plate_number: order_by
    record_time: order_by
    register_region: order_by
    register_user: order_by
    remarks: order_by
    update_time: order_by
    vehicle_detain_picture: order_by
    vehicle_detain_status: order_by
    vehicle_detain_time: order_by
    vehicle_release_picture: order_by
    vehicle_release_time: order_by
}

"""
response of any mutation on the table "vehicle_detain_details"
"""
type vehicle_detain_details_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [vehicle_detain_details!]!
}

"""
input type for inserting object relation for remote table "vehicle_detain_details"
"""
input vehicle_detain_details_obj_rel_insert_input {
    data: vehicle_detain_details_insert_input!
    on_conflict: vehicle_detain_details_on_conflict
}

"""
on conflict condition type for table "vehicle_detain_details"
"""
input vehicle_detain_details_on_conflict {
    constraint: vehicle_detain_details_constraint!
    update_columns: [vehicle_detain_details_update_column!]!
    where: vehicle_detain_details_bool_exp
}

"""
ordering options when selecting data from "vehicle_detain_details"
"""
input vehicle_detain_details_order_by {
    bayonet_picture: order_by
    id: order_by
    is_bayonet: order_by
    is_category: order_by
    is_delete: order_by
    is_illegal: order_by
    is_satellite_judgment: order_by
    license_plate_color: order_by
    license_plate_number: order_by
    record_time: order_by
    register_region: order_by
    register_user: order_by
    remarks: order_by
    update_time: order_by
    vehicle_detain_picture: order_by
    vehicle_detain_status: order_by
    vehicle_detain_time: order_by
    vehicle_release_picture: order_by
    vehicle_release_time: order_by
}

"""
primary key columns input for table: "vehicle_detain_details"
"""
input vehicle_detain_details_pk_columns_input {
    """主键"""
    id: bigint!
}

"""
select columns of table "vehicle_detain_details"
"""
enum vehicle_detain_details_select_column {
    """column name"""
    bayonet_picture

    """column name"""
    id

    """column name"""
    is_bayonet

    """column name"""
    is_category

    """column name"""
    is_delete

    """column name"""
    is_illegal

    """column name"""
    is_satellite_judgment

    """column name"""
    license_plate_color

    """column name"""
    license_plate_number

    """column name"""
    record_time

    """column name"""
    register_region

    """column name"""
    register_user

    """column name"""
    remarks

    """column name"""
    update_time

    """column name"""
    vehicle_detain_picture

    """column name"""
    vehicle_detain_status

    """column name"""
    vehicle_detain_time

    """column name"""
    vehicle_release_picture

    """column name"""
    vehicle_release_time
}

"""
input type for updating data in table "vehicle_detain_details"
"""
input vehicle_detain_details_set_input {
    bayonet_picture: String
    id: bigint
    is_bayonet: Boolean
    is_category: Boolean
    is_delete: Boolean
    is_illegal: Boolean
    is_satellite_judgment: Boolean
    license_plate_color: String
    license_plate_number: String
    record_time: timestamptz
    register_region: String
    register_user: String
    remarks: String
    update_time: timestamptz
    vehicle_detain_picture: String
    vehicle_detain_status: Int
    vehicle_detain_time: timestamptz
    vehicle_release_picture: String
    vehicle_release_time: timestamptz
}

"""aggregate stddev on columns"""
type vehicle_detain_details_stddev_fields {
    id: Float
    vehicle_detain_status: Float
}

"""
order by stddev() on columns of table "vehicle_detain_details"
"""
input vehicle_detain_details_stddev_order_by {
    id: order_by
    vehicle_detain_status: order_by
}

"""aggregate stddev_pop on columns"""
type vehicle_detain_details_stddev_pop_fields {
    id: Float
    vehicle_detain_status: Float
}

"""
order by stddev_pop() on columns of table "vehicle_detain_details"
"""
input vehicle_detain_details_stddev_pop_order_by {
    id: order_by
    vehicle_detain_status: order_by
}

"""aggregate stddev_samp on columns"""
type vehicle_detain_details_stddev_samp_fields {
    id: Float
    vehicle_detain_status: Float
}

"""
order by stddev_samp() on columns of table "vehicle_detain_details"
"""
input vehicle_detain_details_stddev_samp_order_by {
    id: order_by
    vehicle_detain_status: order_by
}

"""aggregate sum on columns"""
type vehicle_detain_details_sum_fields {
    id: bigint
    vehicle_detain_status: Int
}

"""
order by sum() on columns of table "vehicle_detain_details"
"""
input vehicle_detain_details_sum_order_by {
    id: order_by
    vehicle_detain_status: order_by
}

"""
update columns of table "vehicle_detain_details"
"""
enum vehicle_detain_details_update_column {
    """column name"""
    bayonet_picture

    """column name"""
    id

    """column name"""
    is_bayonet

    """column name"""
    is_category

    """column name"""
    is_delete

    """column name"""
    is_illegal

    """column name"""
    is_satellite_judgment

    """column name"""
    license_plate_color

    """column name"""
    license_plate_number

    """column name"""
    record_time

    """column name"""
    register_region

    """column name"""
    register_user

    """column name"""
    remarks

    """column name"""
    update_time

    """column name"""
    vehicle_detain_picture

    """column name"""
    vehicle_detain_status

    """column name"""
    vehicle_detain_time

    """column name"""
    vehicle_release_picture

    """column name"""
    vehicle_release_time
}

"""aggregate var_pop on columns"""
type vehicle_detain_details_var_pop_fields {
    id: Float
    vehicle_detain_status: Float
}

"""
order by var_pop() on columns of table "vehicle_detain_details"
"""
input vehicle_detain_details_var_pop_order_by {
    id: order_by
    vehicle_detain_status: order_by
}

"""aggregate var_samp on columns"""
type vehicle_detain_details_var_samp_fields {
    id: Float
    vehicle_detain_status: Float
}

"""
order by var_samp() on columns of table "vehicle_detain_details"
"""
input vehicle_detain_details_var_samp_order_by {
    id: order_by
    vehicle_detain_status: order_by
}

"""aggregate variance on columns"""
type vehicle_detain_details_variance_fields {
    id: Float
    vehicle_detain_status: Float
}

"""
order by variance() on columns of table "vehicle_detain_details"
"""
input vehicle_detain_details_variance_order_by {
    id: order_by
    vehicle_detain_status: order_by
}

`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_violation_details.graphqls", Input: `extend type Mutation {
    """
    delete data from the table: "vehicle_violation_details"
  """
    delete_vehicle_violation_details(
        """filter the rows which have to be deleted"""
        where: vehicle_violation_details_bool_exp!
    ): vehicle_violation_details_mutation_response

    """
    delete single row from the table: "vehicle_violation_details"
  """
    delete_vehicle_violation_details_by_pk(
        """主键"""
        id: bigint!
    ): vehicle_violation_details

    """
    insert data into the table: "vehicle_violation_details"
  """
    insert_vehicle_violation_details(
        """the rows to be inserted"""
        objects: [vehicle_violation_details_insert_input!]!

        """on conflict condition"""
        on_conflict: vehicle_violation_details_on_conflict
    ): vehicle_violation_details_mutation_response

    """
    insert a single row into the table: "vehicle_violation_details"
  """
    insert_vehicle_violation_details_one(
        """the row to be inserted"""
        object: vehicle_violation_details_insert_input!

        """on conflict condition"""
        on_conflict: vehicle_violation_details_on_conflict
    ): vehicle_violation_details

    """
    update data of the table: "vehicle_violation_details"
  """
    update_vehicle_violation_details(
        """increments the integer columns with given value of the filtered values"""
        _inc: vehicle_violation_details_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: vehicle_violation_details_set_input

        """filter the rows which have to be updated"""
        where: vehicle_violation_details_bool_exp!
    ): vehicle_violation_details_mutation_response

    """
    update single row of the table: "vehicle_violation_details"
  """
    update_vehicle_violation_details_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: vehicle_violation_details_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: vehicle_violation_details_set_input
        pk_columns: vehicle_violation_details_pk_columns_input!
    ): vehicle_violation_details
}



extend type Query {
    """
    fetch data from the table: "vehicle_violation_details"
  """
    vehicle_violation_details(
        """distinct select on columns"""
        distinct_on: [vehicle_violation_details_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_violation_details_order_by!]

        """filter the rows returned"""
        where: vehicle_violation_details_bool_exp
    ): [vehicle_violation_details!]!

    """
    fetch aggregated fields from the table: "vehicle_violation_details"
  """
    vehicle_violation_details_aggregate(
        """distinct select on columns"""
        distinct_on: [vehicle_violation_details_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_violation_details_order_by!]

        """filter the rows returned"""
        where: vehicle_violation_details_bool_exp
    ): vehicle_violation_details_aggregate!

    """
    fetch data from the table: "vehicle_violation_details" using primary key columns
    """
    vehicle_violation_details_by_pk(
        """主键"""
        id: bigint!
    ): vehicle_violation_details
}


extend type Subscription {
    """
    fetch data from the table: "vehicle_violation_details"
  """
    vehicle_violation_details(
        """distinct select on columns"""
        distinct_on: [vehicle_violation_details_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_violation_details_order_by!]

        """filter the rows returned"""
        where: vehicle_violation_details_bool_exp
    ): [vehicle_violation_details!]!

    """
    fetch aggregated fields from the table: "vehicle_violation_details"
  """
    vehicle_violation_details_aggregate(
        """distinct select on columns"""
        distinct_on: [vehicle_violation_details_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_violation_details_order_by!]

        """filter the rows returned"""
        where: vehicle_violation_details_bool_exp
    ): vehicle_violation_details_aggregate!

    """
    fetch data from the table: "vehicle_violation_details" using primary key columns
    """
    vehicle_violation_details_by_pk(
        """主键"""
        id: bigint!
    ): vehicle_violation_details
}


"""
车辆违章明细表


columns and relationships of "vehicle_violation_details"

"""
type vehicle_violation_details {
    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """决定书号"""
    decision_number: String

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """发现机构"""
    discovery_agency: String

    """违章驾驶员id"""
    driver_id: String

    """所在企业id"""
    enterprise_id: String

    """处理时间"""
    handle_at: timestamptz

    """处理人"""
    handle_by: String

    """主键"""
    id: bigint!

    """违法代码,VIO_CODEWFDM 违法描述字典表"""
    illegal_code: String

    """车辆违法处理状态字典"""
    illegal_handling_status: Int

    """违法地点"""
    illegal_location: String

    """违法照片"""
    illegal_photo: String

    """违法时间"""
    illegal_time: timestamptz

    """信息来源：1，强制，2，非现场，0，简易（信息来源字典表）"""
    information_source: Int

    """是否删除"""
    is_delete: Boolean

    """是否处理"""
    is_handle: Boolean

    """是否通知驾驶员"""
    is_notice_driver: Boolean

    """是否发送短信"""
    is_send: Boolean

    """实测值,车辆实际行驶的车速或实际载的人数，根据违法的种类不同而不同。"""
    measured_value: String

    """通知时间"""
    notice_time: timestamptz

    """当事人姓名"""
    party_name: String

    """缴款标记,是否缴款字典"""
    payment_mark: Int

    """标准值,路段的限速阈值或核载的人数，根据违法的种类不同而不同。"""
    standard_value: String

    """内网更新时间"""
    update_time_in: timestamptz

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String

    """违章车辆id"""
    vehicle_id: String

    """驾驶人处理的交通违法记录对应的机动车信息"""
    vehicle_information: String

    """联合主键"""
    violation_detail_id: String!
}

"""
aggregated selection of "vehicle_violation_details"
"""
type vehicle_violation_details_aggregate {
    aggregate: vehicle_violation_details_aggregate_fields
    nodes: [vehicle_violation_details!]!
}

"""
aggregate fields of "vehicle_violation_details"
"""
type vehicle_violation_details_aggregate_fields {
    avg: vehicle_violation_details_avg_fields
    count(columns: [vehicle_violation_details_select_column!], distinct: Boolean): Int
    max: vehicle_violation_details_max_fields
    min: vehicle_violation_details_min_fields
    stddev: vehicle_violation_details_stddev_fields
    stddev_pop: vehicle_violation_details_stddev_pop_fields
    stddev_samp: vehicle_violation_details_stddev_samp_fields
    sum: vehicle_violation_details_sum_fields
    var_pop: vehicle_violation_details_var_pop_fields
    var_samp: vehicle_violation_details_var_samp_fields
    variance: vehicle_violation_details_variance_fields
}

"""
order by aggregate values of table "vehicle_violation_details"
"""
input vehicle_violation_details_aggregate_order_by {
    avg: vehicle_violation_details_avg_order_by
    count: order_by
    max: vehicle_violation_details_max_order_by
    min: vehicle_violation_details_min_order_by
    stddev: vehicle_violation_details_stddev_order_by
    stddev_pop: vehicle_violation_details_stddev_pop_order_by
    stddev_samp: vehicle_violation_details_stddev_samp_order_by
    sum: vehicle_violation_details_sum_order_by
    var_pop: vehicle_violation_details_var_pop_order_by
    var_samp: vehicle_violation_details_var_samp_order_by
    variance: vehicle_violation_details_variance_order_by
}

"""
input type for inserting array relation for remote table "vehicle_violation_details"
"""
input vehicle_violation_details_arr_rel_insert_input {
    data: [vehicle_violation_details_insert_input!]!
    on_conflict: vehicle_violation_details_on_conflict
}

"""aggregate avg on columns"""
type vehicle_violation_details_avg_fields {
    id: Float
    illegal_handling_status: Float
    information_source: Float
    payment_mark: Float
}

"""
order by avg() on columns of table "vehicle_violation_details"
"""
input vehicle_violation_details_avg_order_by {
    id: order_by
    illegal_handling_status: order_by
    information_source: order_by
    payment_mark: order_by
}

"""
Boolean expression to filter rows from the table "vehicle_violation_details". All fields are combined with a logical 'AND'.
"""
input vehicle_violation_details_bool_exp {
    _and: [vehicle_violation_details_bool_exp]
    _not: vehicle_violation_details_bool_exp
    _or: [vehicle_violation_details_bool_exp]
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    decision_number: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    discovery_agency: String_comparison_exp
    driver_id: String_comparison_exp
    enterprise_id: String_comparison_exp
    handle_at: timestamptz_comparison_exp
    handle_by: String_comparison_exp
    id: bigint_comparison_exp
    illegal_code: String_comparison_exp
    illegal_handling_status: Int_comparison_exp
    illegal_location: String_comparison_exp
    illegal_photo: String_comparison_exp
    illegal_time: timestamptz_comparison_exp
    information_source: Int_comparison_exp
    is_delete: Boolean_comparison_exp
    is_handle: Boolean_comparison_exp
    is_notice_driver: Boolean_comparison_exp
    is_send: Boolean_comparison_exp
    measured_value: String_comparison_exp
    notice_time: timestamptz_comparison_exp
    party_name: String_comparison_exp
    payment_mark: Int_comparison_exp
    standard_value: String_comparison_exp
    update_time_in: timestamptz_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    vehicle_id: String_comparison_exp
    vehicle_information: String_comparison_exp
    violation_detail_id: String_comparison_exp
}

"""
unique or primary key constraints on table "vehicle_violation_details"
"""
enum vehicle_violation_details_constraint {
    """unique or primary key constraint"""
    vehicle_violation_details_pkey
}

"""
input type for incrementing integer column in table "vehicle_violation_details"
"""
input vehicle_violation_details_inc_input {
    id: bigint
    illegal_handling_status: Int
    information_source: Int
    payment_mark: Int
}

"""
input type for inserting data into table "vehicle_violation_details"
"""
input vehicle_violation_details_insert_input {
    created_at: timestamptz
    created_by: String
    decision_number: String
    deleted_at: timestamptz
    deleted_by: String
    discovery_agency: String
    driver_id: String
    enterprise_id: String
    handle_at: timestamptz
    handle_by: String
    id: bigint
    illegal_code: String
    illegal_handling_status: Int
    illegal_location: String
    illegal_photo: String
    illegal_time: timestamptz
    information_source: Int
    is_delete: Boolean
    is_handle: Boolean
    is_notice_driver: Boolean
    is_send: Boolean
    measured_value: String
    notice_time: timestamptz
    party_name: String
    payment_mark: Int
    standard_value: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    vehicle_information: String
    violation_detail_id: String
}

"""aggregate max on columns"""
type vehicle_violation_details_max_fields {
    created_at: timestamptz
    created_by: String
    decision_number: String
    deleted_at: timestamptz
    deleted_by: String
    discovery_agency: String
    driver_id: String
    enterprise_id: String
    handle_at: timestamptz
    handle_by: String
    id: bigint
    illegal_code: String
    illegal_handling_status: Int
    illegal_location: String
    illegal_photo: String
    illegal_time: timestamptz
    information_source: Int
    measured_value: String
    notice_time: timestamptz
    party_name: String
    payment_mark: Int
    standard_value: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    vehicle_information: String
    violation_detail_id: String
}

"""
order by max() on columns of table "vehicle_violation_details"
"""
input vehicle_violation_details_max_order_by {
    created_at: order_by
    created_by: order_by
    decision_number: order_by
    deleted_at: order_by
    deleted_by: order_by
    discovery_agency: order_by
    driver_id: order_by
    enterprise_id: order_by
    handle_at: order_by
    handle_by: order_by
    id: order_by
    illegal_code: order_by
    illegal_handling_status: order_by
    illegal_location: order_by
    illegal_photo: order_by
    illegal_time: order_by
    information_source: order_by
    measured_value: order_by
    notice_time: order_by
    party_name: order_by
    payment_mark: order_by
    standard_value: order_by
    update_time_in: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
    vehicle_information: order_by
    violation_detail_id: order_by
}

"""aggregate min on columns"""
type vehicle_violation_details_min_fields {
    created_at: timestamptz
    created_by: String
    decision_number: String
    deleted_at: timestamptz
    deleted_by: String
    discovery_agency: String
    driver_id: String
    enterprise_id: String
    handle_at: timestamptz
    handle_by: String
    id: bigint
    illegal_code: String
    illegal_handling_status: Int
    illegal_location: String
    illegal_photo: String
    illegal_time: timestamptz
    information_source: Int
    measured_value: String
    notice_time: timestamptz
    party_name: String
    payment_mark: Int
    standard_value: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    vehicle_information: String
    violation_detail_id: String
}

"""
order by min() on columns of table "vehicle_violation_details"
"""
input vehicle_violation_details_min_order_by {
    created_at: order_by
    created_by: order_by
    decision_number: order_by
    deleted_at: order_by
    deleted_by: order_by
    discovery_agency: order_by
    driver_id: order_by
    enterprise_id: order_by
    handle_at: order_by
    handle_by: order_by
    id: order_by
    illegal_code: order_by
    illegal_handling_status: order_by
    illegal_location: order_by
    illegal_photo: order_by
    illegal_time: order_by
    information_source: order_by
    measured_value: order_by
    notice_time: order_by
    party_name: order_by
    payment_mark: order_by
    standard_value: order_by
    update_time_in: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
    vehicle_information: order_by
    violation_detail_id: order_by
}

"""
response of any mutation on the table "vehicle_violation_details"
"""
type vehicle_violation_details_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [vehicle_violation_details!]!
}

"""
input type for inserting object relation for remote table "vehicle_violation_details"
"""
input vehicle_violation_details_obj_rel_insert_input {
    data: vehicle_violation_details_insert_input!
    on_conflict: vehicle_violation_details_on_conflict
}

"""
on conflict condition type for table "vehicle_violation_details"
"""
input vehicle_violation_details_on_conflict {
    constraint: vehicle_violation_details_constraint!
    update_columns: [vehicle_violation_details_update_column!]!
    where: vehicle_violation_details_bool_exp
}

"""
ordering options when selecting data from "vehicle_violation_details"
"""
input vehicle_violation_details_order_by {
    created_at: order_by
    created_by: order_by
    decision_number: order_by
    deleted_at: order_by
    deleted_by: order_by
    discovery_agency: order_by
    driver_id: order_by
    enterprise_id: order_by
    handle_at: order_by
    handle_by: order_by
    id: order_by
    illegal_code: order_by
    illegal_handling_status: order_by
    illegal_location: order_by
    illegal_photo: order_by
    illegal_time: order_by
    information_source: order_by
    is_delete: order_by
    is_handle: order_by
    is_notice_driver: order_by
    is_send: order_by
    measured_value: order_by
    notice_time: order_by
    party_name: order_by
    payment_mark: order_by
    standard_value: order_by
    update_time_in: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
    vehicle_information: order_by
    violation_detail_id: order_by
}

"""
primary key columns input for table: "vehicle_violation_details"
"""
input vehicle_violation_details_pk_columns_input {
    """主键"""
    id: bigint!
}

"""
select columns of table "vehicle_violation_details"
"""
enum vehicle_violation_details_select_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    decision_number

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    discovery_agency

    """column name"""
    driver_id

    """column name"""
    enterprise_id

    """column name"""
    handle_at

    """column name"""
    handle_by

    """column name"""
    id

    """column name"""
    illegal_code

    """column name"""
    illegal_handling_status

    """column name"""
    illegal_location

    """column name"""
    illegal_photo

    """column name"""
    illegal_time

    """column name"""
    information_source

    """column name"""
    is_delete

    """column name"""
    is_handle

    """column name"""
    is_notice_driver

    """column name"""
    is_send

    """column name"""
    measured_value

    """column name"""
    notice_time

    """column name"""
    party_name

    """column name"""
    payment_mark

    """column name"""
    standard_value

    """column name"""
    update_time_in

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    vehicle_id

    """column name"""
    vehicle_information

    """column name"""
    violation_detail_id
}

"""
input type for updating data in table "vehicle_violation_details"
"""
input vehicle_violation_details_set_input {
    created_at: timestamptz
    created_by: String
    decision_number: String
    deleted_at: timestamptz
    deleted_by: String
    discovery_agency: String
    driver_id: String
    enterprise_id: String
    handle_at: timestamptz
    handle_by: String
    id: bigint
    illegal_code: String
    illegal_handling_status: Int
    illegal_location: String
    illegal_photo: String
    illegal_time: timestamptz
    information_source: Int
    is_delete: Boolean
    is_handle: Boolean
    is_notice_driver: Boolean
    is_send: Boolean
    measured_value: String
    notice_time: timestamptz
    party_name: String
    payment_mark: Int
    standard_value: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    vehicle_information: String
    violation_detail_id: String
}

"""aggregate stddev on columns"""
type vehicle_violation_details_stddev_fields {
    id: Float
    illegal_handling_status: Float
    information_source: Float
    payment_mark: Float
}

"""
order by stddev() on columns of table "vehicle_violation_details"
"""
input vehicle_violation_details_stddev_order_by {
    id: order_by
    illegal_handling_status: order_by
    information_source: order_by
    payment_mark: order_by
}

"""aggregate stddev_pop on columns"""
type vehicle_violation_details_stddev_pop_fields {
    id: Float
    illegal_handling_status: Float
    information_source: Float
    payment_mark: Float
}

"""
order by stddev_pop() on columns of table "vehicle_violation_details"
"""
input vehicle_violation_details_stddev_pop_order_by {
    id: order_by
    illegal_handling_status: order_by
    information_source: order_by
    payment_mark: order_by
}

"""aggregate stddev_samp on columns"""
type vehicle_violation_details_stddev_samp_fields {
    id: Float
    illegal_handling_status: Float
    information_source: Float
    payment_mark: Float
}

"""
order by stddev_samp() on columns of table "vehicle_violation_details"
"""
input vehicle_violation_details_stddev_samp_order_by {
    id: order_by
    illegal_handling_status: order_by
    information_source: order_by
    payment_mark: order_by
}

"""aggregate sum on columns"""
type vehicle_violation_details_sum_fields {
    id: bigint
    illegal_handling_status: Int
    information_source: Int
    payment_mark: Int
}

"""
order by sum() on columns of table "vehicle_violation_details"
"""
input vehicle_violation_details_sum_order_by {
    id: order_by
    illegal_handling_status: order_by
    information_source: order_by
    payment_mark: order_by
}

"""
update columns of table "vehicle_violation_details"
"""
enum vehicle_violation_details_update_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    decision_number

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    discovery_agency

    """column name"""
    driver_id

    """column name"""
    enterprise_id

    """column name"""
    handle_at

    """column name"""
    handle_by

    """column name"""
    id

    """column name"""
    illegal_code

    """column name"""
    illegal_handling_status

    """column name"""
    illegal_location

    """column name"""
    illegal_photo

    """column name"""
    illegal_time

    """column name"""
    information_source

    """column name"""
    is_delete

    """column name"""
    is_handle

    """column name"""
    is_notice_driver

    """column name"""
    is_send

    """column name"""
    measured_value

    """column name"""
    notice_time

    """column name"""
    party_name

    """column name"""
    payment_mark

    """column name"""
    standard_value

    """column name"""
    update_time_in

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    vehicle_id

    """column name"""
    vehicle_information

    """column name"""
    violation_detail_id
}

"""aggregate var_pop on columns"""
type vehicle_violation_details_var_pop_fields {
    id: Float
    illegal_handling_status: Float
    information_source: Float
    payment_mark: Float
}

"""
order by var_pop() on columns of table "vehicle_violation_details"
"""
input vehicle_violation_details_var_pop_order_by {
    id: order_by
    illegal_handling_status: order_by
    information_source: order_by
    payment_mark: order_by
}

"""aggregate var_samp on columns"""
type vehicle_violation_details_var_samp_fields {
    id: Float
    illegal_handling_status: Float
    information_source: Float
    payment_mark: Float
}

"""
order by var_samp() on columns of table "vehicle_violation_details"
"""
input vehicle_violation_details_var_samp_order_by {
    id: order_by
    illegal_handling_status: order_by
    information_source: order_by
    payment_mark: order_by
}

"""aggregate variance on columns"""
type vehicle_violation_details_variance_fields {
    id: Float
    illegal_handling_status: Float
    information_source: Float
    payment_mark: Float
}

"""
order by variance() on columns of table "vehicle_violation_details"
"""
input vehicle_violation_details_variance_order_by {
    id: order_by
    illegal_handling_status: order_by
    information_source: order_by
    payment_mark: order_by
}

`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_violation_scoring_items.graphqls", Input: `
extend type Mutation {
    """
    delete data from the table: "vehicle_violation_scoring_items"
  """
    delete_vehicle_violation_scoring_items(
        """filter the rows which have to be deleted"""
        where: vehicle_violation_scoring_items_bool_exp!
    ): vehicle_violation_scoring_items_mutation_response

    """
    delete single row from the table: "vehicle_violation_scoring_items"
  """
    delete_vehicle_violation_scoring_items_by_pk(
        """主键"""
        id: bigint!

        """联合主键"""
        violation_scoring_item_id: String!
    ): vehicle_violation_scoring_items

    """
    insert data into the table: "vehicle_violation_scoring_items"
  """
    insert_vehicle_violation_scoring_items(
        """the rows to be inserted"""
        objects: [vehicle_violation_scoring_items_insert_input!]!

        """on conflict condition"""
        on_conflict: vehicle_violation_scoring_items_on_conflict
    ): vehicle_violation_scoring_items_mutation_response

    """
    insert a single row into the table: "vehicle_violation_scoring_items"
  """
    insert_vehicle_violation_scoring_items_one(
        """the row to be inserted"""
        object: vehicle_violation_scoring_items_insert_input!

        """on conflict condition"""
        on_conflict: vehicle_violation_scoring_items_on_conflict
    ): vehicle_violation_scoring_items

    """
    update data of the table: "vehicle_violation_scoring_items"
  """
    update_vehicle_violation_scoring_items(
        """increments the integer columns with given value of the filtered values"""
        _inc: vehicle_violation_scoring_items_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: vehicle_violation_scoring_items_set_input

        """filter the rows which have to be updated"""
        where: vehicle_violation_scoring_items_bool_exp!
    ): vehicle_violation_scoring_items_mutation_response

    """
    update single row of the table: "vehicle_violation_scoring_items"
  """
    update_vehicle_violation_scoring_items_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: vehicle_violation_scoring_items_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: vehicle_violation_scoring_items_set_input
        pk_columns: vehicle_violation_scoring_items_pk_columns_input!
    ): vehicle_violation_scoring_items
}


extend type Query {
    """
    fetch data from the table: "vehicle_violation_scoring_items"
  """
    vehicle_violation_scoring_items(
        """distinct select on columns"""
        distinct_on: [vehicle_violation_scoring_items_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_violation_scoring_items_order_by!]

        """filter the rows returned"""
        where: vehicle_violation_scoring_items_bool_exp
    ): [vehicle_violation_scoring_items!]!

    """
    fetch aggregated fields from the table: "vehicle_violation_scoring_items"
  """
    vehicle_violation_scoring_items_aggregate(
        """distinct select on columns"""
        distinct_on: [vehicle_violation_scoring_items_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_violation_scoring_items_order_by!]

        """filter the rows returned"""
        where: vehicle_violation_scoring_items_bool_exp
    ): vehicle_violation_scoring_items_aggregate!

    """
    fetch data from the table: "vehicle_violation_scoring_items" using primary key columns
    """
    vehicle_violation_scoring_items_by_pk(
        """主键"""
        id: bigint!

        """联合主键"""
        violation_scoring_item_id: String!
    ): vehicle_violation_scoring_items
}

extend type Subscription {
    """
    fetch data from the table: "vehicle_violation_scoring_items"
  """
    vehicle_violation_scoring_items(
        """distinct select on columns"""
        distinct_on: [vehicle_violation_scoring_items_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_violation_scoring_items_order_by!]

        """filter the rows returned"""
        where: vehicle_violation_scoring_items_bool_exp
    ): [vehicle_violation_scoring_items!]!

    """
    fetch aggregated fields from the table: "vehicle_violation_scoring_items"
  """
    vehicle_violation_scoring_items_aggregate(
        """distinct select on columns"""
        distinct_on: [vehicle_violation_scoring_items_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_violation_scoring_items_order_by!]

        """filter the rows returned"""
        where: vehicle_violation_scoring_items_bool_exp
    ): vehicle_violation_scoring_items_aggregate!

    """
    fetch data from the table: "vehicle_violation_scoring_items" using primary key columns
    """
    vehicle_violation_scoring_items_by_pk(
        """主键"""
        id: bigint!

        """联合主键"""
        violation_scoring_item_id: String!
    ): vehicle_violation_scoring_items
}



"""
车辆违规计分项表


columns and relationships of "vehicle_violation_scoring_items"

"""
type vehicle_violation_scoring_items {
    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """扣分事项类别(车辆评分扣分类别字典)"""
    deduction_category: Int

    """扣分事项描述"""
    deduction_item_description: String

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """扣分分值"""
    demerit_points: String

    """主键"""
    id: bigint!

    """是否删除"""
    is_delete: Boolean

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String

    """联合主键"""
    violation_scoring_item_id: String!
}

"""
aggregated selection of "vehicle_violation_scoring_items"
"""
type vehicle_violation_scoring_items_aggregate {
    aggregate: vehicle_violation_scoring_items_aggregate_fields
    nodes: [vehicle_violation_scoring_items!]!
}

"""
aggregate fields of "vehicle_violation_scoring_items"
"""
type vehicle_violation_scoring_items_aggregate_fields {
    avg: vehicle_violation_scoring_items_avg_fields
    count(columns: [vehicle_violation_scoring_items_select_column!], distinct: Boolean): Int
    max: vehicle_violation_scoring_items_max_fields
    min: vehicle_violation_scoring_items_min_fields
    stddev: vehicle_violation_scoring_items_stddev_fields
    stddev_pop: vehicle_violation_scoring_items_stddev_pop_fields
    stddev_samp: vehicle_violation_scoring_items_stddev_samp_fields
    sum: vehicle_violation_scoring_items_sum_fields
    var_pop: vehicle_violation_scoring_items_var_pop_fields
    var_samp: vehicle_violation_scoring_items_var_samp_fields
    variance: vehicle_violation_scoring_items_variance_fields
}

"""
order by aggregate values of table "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_aggregate_order_by {
    avg: vehicle_violation_scoring_items_avg_order_by
    count: order_by
    max: vehicle_violation_scoring_items_max_order_by
    min: vehicle_violation_scoring_items_min_order_by
    stddev: vehicle_violation_scoring_items_stddev_order_by
    stddev_pop: vehicle_violation_scoring_items_stddev_pop_order_by
    stddev_samp: vehicle_violation_scoring_items_stddev_samp_order_by
    sum: vehicle_violation_scoring_items_sum_order_by
    var_pop: vehicle_violation_scoring_items_var_pop_order_by
    var_samp: vehicle_violation_scoring_items_var_samp_order_by
    variance: vehicle_violation_scoring_items_variance_order_by
}

"""
input type for inserting array relation for remote table "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_arr_rel_insert_input {
    data: [vehicle_violation_scoring_items_insert_input!]!
    on_conflict: vehicle_violation_scoring_items_on_conflict
}

"""aggregate avg on columns"""
type vehicle_violation_scoring_items_avg_fields {
    deduction_category: Float
    id: Float
}

"""
order by avg() on columns of table "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_avg_order_by {
    deduction_category: order_by
    id: order_by
}

"""
Boolean expression to filter rows from the table
"vehicle_violation_scoring_items". All fields are combined with a logical 'AND'.
"""
input vehicle_violation_scoring_items_bool_exp {
    _and: [vehicle_violation_scoring_items_bool_exp]
    _not: vehicle_violation_scoring_items_bool_exp
    _or: [vehicle_violation_scoring_items_bool_exp]
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deduction_category: Int_comparison_exp
    deduction_item_description: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    demerit_points: String_comparison_exp
    id: bigint_comparison_exp
    is_delete: Boolean_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    violation_scoring_item_id: String_comparison_exp
}

"""
unique or primary key constraints on table "vehicle_violation_scoring_items"
"""
enum vehicle_violation_scoring_items_constraint {
    """unique or primary key constraint"""
    vehicle_violation_scoring_items_pkey
}

"""
input type for incrementing integer column in table "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_inc_input {
    deduction_category: Int
    id: bigint
}

"""
input type for inserting data into table "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_insert_input {
    created_at: timestamptz
    created_by: String
    deduction_category: Int
    deduction_item_description: String
    deleted_at: timestamptz
    deleted_by: String
    demerit_points: String
    id: bigint
    is_delete: Boolean
    updated_at: timestamptz
    updated_by: String
    violation_scoring_item_id: String
}

"""aggregate max on columns"""
type vehicle_violation_scoring_items_max_fields {
    created_at: timestamptz
    created_by: String
    deduction_category: Int
    deduction_item_description: String
    deleted_at: timestamptz
    deleted_by: String
    demerit_points: String
    id: bigint
    updated_at: timestamptz
    updated_by: String
    violation_scoring_item_id: String
}

"""
order by max() on columns of table "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_max_order_by {
    created_at: order_by
    created_by: order_by
    deduction_category: order_by
    deduction_item_description: order_by
    deleted_at: order_by
    deleted_by: order_by
    demerit_points: order_by
    id: order_by
    updated_at: order_by
    updated_by: order_by
    violation_scoring_item_id: order_by
}

"""aggregate min on columns"""
type vehicle_violation_scoring_items_min_fields {
    created_at: timestamptz
    created_by: String
    deduction_category: Int
    deduction_item_description: String
    deleted_at: timestamptz
    deleted_by: String
    demerit_points: String
    id: bigint
    updated_at: timestamptz
    updated_by: String
    violation_scoring_item_id: String
}

"""
order by min() on columns of table "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_min_order_by {
    created_at: order_by
    created_by: order_by
    deduction_category: order_by
    deduction_item_description: order_by
    deleted_at: order_by
    deleted_by: order_by
    demerit_points: order_by
    id: order_by
    updated_at: order_by
    updated_by: order_by
    violation_scoring_item_id: order_by
}

"""
response of any mutation on the table "vehicle_violation_scoring_items"
"""
type vehicle_violation_scoring_items_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [vehicle_violation_scoring_items!]!
}

"""
input type for inserting object relation for remote table "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_obj_rel_insert_input {
    data: vehicle_violation_scoring_items_insert_input!
    on_conflict: vehicle_violation_scoring_items_on_conflict
}

"""
on conflict condition type for table "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_on_conflict {
    constraint: vehicle_violation_scoring_items_constraint!
    update_columns: [vehicle_violation_scoring_items_update_column!]!
    where: vehicle_violation_scoring_items_bool_exp
}

"""
ordering options when selecting data from "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_order_by {
    created_at: order_by
    created_by: order_by
    deduction_category: order_by
    deduction_item_description: order_by
    deleted_at: order_by
    deleted_by: order_by
    demerit_points: order_by
    id: order_by
    is_delete: order_by
    updated_at: order_by
    updated_by: order_by
    violation_scoring_item_id: order_by
}

"""
primary key columns input for table: "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_pk_columns_input {
    """主键"""
    id: bigint!

    """联合主键"""
    violation_scoring_item_id: String!
}

"""
select columns of table "vehicle_violation_scoring_items"
"""
enum vehicle_violation_scoring_items_select_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deduction_category

    """column name"""
    deduction_item_description

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    demerit_points

    """column name"""
    id

    """column name"""
    is_delete

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    violation_scoring_item_id
}

"""
input type for updating data in table "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_set_input {
    created_at: timestamptz
    created_by: String
    deduction_category: Int
    deduction_item_description: String
    deleted_at: timestamptz
    deleted_by: String
    demerit_points: String
    id: bigint
    is_delete: Boolean
    updated_at: timestamptz
    updated_by: String
    violation_scoring_item_id: String
}

"""aggregate stddev on columns"""
type vehicle_violation_scoring_items_stddev_fields {
    deduction_category: Float
    id: Float
}

"""
order by stddev() on columns of table "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_stddev_order_by {
    deduction_category: order_by
    id: order_by
}

"""aggregate stddev_pop on columns"""
type vehicle_violation_scoring_items_stddev_pop_fields {
    deduction_category: Float
    id: Float
}

"""
order by stddev_pop() on columns of table "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_stddev_pop_order_by {
    deduction_category: order_by
    id: order_by
}

"""aggregate stddev_samp on columns"""
type vehicle_violation_scoring_items_stddev_samp_fields {
    deduction_category: Float
    id: Float
}

"""
order by stddev_samp() on columns of table "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_stddev_samp_order_by {
    deduction_category: order_by
    id: order_by
}

"""aggregate sum on columns"""
type vehicle_violation_scoring_items_sum_fields {
    deduction_category: Int
    id: bigint
}

"""
order by sum() on columns of table "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_sum_order_by {
    deduction_category: order_by
    id: order_by
}

"""
update columns of table "vehicle_violation_scoring_items"
"""
enum vehicle_violation_scoring_items_update_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deduction_category

    """column name"""
    deduction_item_description

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    demerit_points

    """column name"""
    id

    """column name"""
    is_delete

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    violation_scoring_item_id
}

"""aggregate var_pop on columns"""
type vehicle_violation_scoring_items_var_pop_fields {
    deduction_category: Float
    id: Float
}

"""
order by var_pop() on columns of table "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_var_pop_order_by {
    deduction_category: order_by
    id: order_by
}

"""aggregate var_samp on columns"""
type vehicle_violation_scoring_items_var_samp_fields {
    deduction_category: Float
    id: Float
}

"""
order by var_samp() on columns of table "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_var_samp_order_by {
    deduction_category: order_by
    id: order_by
}

"""aggregate variance on columns"""
type vehicle_violation_scoring_items_variance_fields {
    deduction_category: Float
    id: Float
}

"""
order by variance() on columns of table "vehicle_violation_scoring_items"
"""
input vehicle_violation_scoring_items_variance_order_by {
    deduction_category: order_by
    id: order_by
}

`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_violation_scoring_record.graphqls", Input: `
extend type Mutation {
    """
    delete data from the table: "vehicle_violation_scoring_record"
  """
    delete_vehicle_violation_scoring_record(
        """filter the rows which have to be deleted"""
        where: vehicle_violation_scoring_record_bool_exp!
    ): vehicle_violation_scoring_record_mutation_response

    """
    delete single row from the table: "vehicle_violation_scoring_record"
  """
    delete_vehicle_violation_scoring_record_by_pk(
        """主键"""
        id: bigint!

        """联合主键"""
        violation_scoring_id: String!
    ): vehicle_violation_scoring_record

    """
    insert data into the table: "vehicle_violation_scoring_record"
  """
    insert_vehicle_violation_scoring_record(
        """the rows to be inserted"""
        objects: [vehicle_violation_scoring_record_insert_input!]!

        """on conflict condition"""
        on_conflict: vehicle_violation_scoring_record_on_conflict
    ): vehicle_violation_scoring_record_mutation_response

    """
    insert a single row into the table: "vehicle_violation_scoring_record"
  """
    insert_vehicle_violation_scoring_record_one(
        """the row to be inserted"""
        object: vehicle_violation_scoring_record_insert_input!

        """on conflict condition"""
        on_conflict: vehicle_violation_scoring_record_on_conflict
    ): vehicle_violation_scoring_record

    """
    update data of the table: "vehicle_violation_scoring_record"
  """
    update_vehicle_violation_scoring_record(
        """increments the integer columns with given value of the filtered values"""
        _inc: vehicle_violation_scoring_record_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: vehicle_violation_scoring_record_set_input

        """filter the rows which have to be updated"""
        where: vehicle_violation_scoring_record_bool_exp!
    ): vehicle_violation_scoring_record_mutation_response

    """
    update single row of the table: "vehicle_violation_scoring_record"
  """
    update_vehicle_violation_scoring_record_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: vehicle_violation_scoring_record_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: vehicle_violation_scoring_record_set_input
        pk_columns: vehicle_violation_scoring_record_pk_columns_input!
    ): vehicle_violation_scoring_record
}


extend type Query {
    """
    fetch data from the table: "vehicle_violation_scoring_record"
  """
    vehicle_violation_scoring_record(
        """distinct select on columns"""
        distinct_on: [vehicle_violation_scoring_record_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_violation_scoring_record_order_by!]

        """filter the rows returned"""
        where: vehicle_violation_scoring_record_bool_exp
    ): [vehicle_violation_scoring_record!]!

    """
    fetch aggregated fields from the table: "vehicle_violation_scoring_record"
  """
    vehicle_violation_scoring_record_aggregate(
        """distinct select on columns"""
        distinct_on: [vehicle_violation_scoring_record_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_violation_scoring_record_order_by!]

        """filter the rows returned"""
        where: vehicle_violation_scoring_record_bool_exp
    ): vehicle_violation_scoring_record_aggregate!

    """
    fetch data from the table: "vehicle_violation_scoring_record" using primary key columns
    """
    vehicle_violation_scoring_record_by_pk(
        """主键"""
        id: bigint!

        """联合主键"""
        violation_scoring_id: String!
    ): vehicle_violation_scoring_record
}


extend type Subscription {
    """
    fetch data from the table: "vehicle_violation_scoring_record"
  """
    vehicle_violation_scoring_record(
        """distinct select on columns"""
        distinct_on: [vehicle_violation_scoring_record_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_violation_scoring_record_order_by!]

        """filter the rows returned"""
        where: vehicle_violation_scoring_record_bool_exp
    ): [vehicle_violation_scoring_record!]!

    """
    fetch aggregated fields from the table: "vehicle_violation_scoring_record"
  """
    vehicle_violation_scoring_record_aggregate(
        """distinct select on columns"""
        distinct_on: [vehicle_violation_scoring_record_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_violation_scoring_record_order_by!]

        """filter the rows returned"""
        where: vehicle_violation_scoring_record_bool_exp
    ): vehicle_violation_scoring_record_aggregate!

    """
    fetch data from the table: "vehicle_violation_scoring_record" using primary key columns
    """
    vehicle_violation_scoring_record_by_pk(
        """主键"""
        id: bigint!

        """联合主键"""
        violation_scoring_id: String!
    ): vehicle_violation_scoring_record
}


"""
车辆违规计分记录


columns and relationships of "vehicle_violation_scoring_record"

"""
type vehicle_violation_scoring_record {
    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """扣分分值(vehicle_violation_scoring_ items表的violation_scoring_item_id)"""
    demerit_points: numeric

    """主键"""
    id: bigint!

    """是否删除"""
    is_delete: Boolean

    """备注"""
    remarks: String

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String

    """扣分车辆id"""
    vehicle_id: String

    """联合主键"""
    violation_scoring_id: String!

    """扣分明细id"""
    violation_scoring_item_id: String
}

"""
aggregated selection of "vehicle_violation_scoring_record"
"""
type vehicle_violation_scoring_record_aggregate {
    aggregate: vehicle_violation_scoring_record_aggregate_fields
    nodes: [vehicle_violation_scoring_record!]!
}

"""
aggregate fields of "vehicle_violation_scoring_record"
"""
type vehicle_violation_scoring_record_aggregate_fields {
    avg: vehicle_violation_scoring_record_avg_fields
    count(columns: [vehicle_violation_scoring_record_select_column!], distinct: Boolean): Int
    max: vehicle_violation_scoring_record_max_fields
    min: vehicle_violation_scoring_record_min_fields
    stddev: vehicle_violation_scoring_record_stddev_fields
    stddev_pop: vehicle_violation_scoring_record_stddev_pop_fields
    stddev_samp: vehicle_violation_scoring_record_stddev_samp_fields
    sum: vehicle_violation_scoring_record_sum_fields
    var_pop: vehicle_violation_scoring_record_var_pop_fields
    var_samp: vehicle_violation_scoring_record_var_samp_fields
    variance: vehicle_violation_scoring_record_variance_fields
}

"""
order by aggregate values of table "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_aggregate_order_by {
    avg: vehicle_violation_scoring_record_avg_order_by
    count: order_by
    max: vehicle_violation_scoring_record_max_order_by
    min: vehicle_violation_scoring_record_min_order_by
    stddev: vehicle_violation_scoring_record_stddev_order_by
    stddev_pop: vehicle_violation_scoring_record_stddev_pop_order_by
    stddev_samp: vehicle_violation_scoring_record_stddev_samp_order_by
    sum: vehicle_violation_scoring_record_sum_order_by
    var_pop: vehicle_violation_scoring_record_var_pop_order_by
    var_samp: vehicle_violation_scoring_record_var_samp_order_by
    variance: vehicle_violation_scoring_record_variance_order_by
}

"""
input type for inserting array relation for remote table "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_arr_rel_insert_input {
    data: [vehicle_violation_scoring_record_insert_input!]!
    on_conflict: vehicle_violation_scoring_record_on_conflict
}

"""aggregate avg on columns"""
type vehicle_violation_scoring_record_avg_fields {
    demerit_points: Float
    id: Float
}

"""
order by avg() on columns of table "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_avg_order_by {
    demerit_points: order_by
    id: order_by
}

"""
Boolean expression to filter rows from the table
"vehicle_violation_scoring_record". All fields are combined with a logical 'AND'.
"""
input vehicle_violation_scoring_record_bool_exp {
    _and: [vehicle_violation_scoring_record_bool_exp]
    _not: vehicle_violation_scoring_record_bool_exp
    _or: [vehicle_violation_scoring_record_bool_exp]
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    demerit_points: numeric_comparison_exp
    id: bigint_comparison_exp
    is_delete: Boolean_comparison_exp
    remarks: String_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    vehicle_id: String_comparison_exp
    violation_scoring_id: String_comparison_exp
    violation_scoring_item_id: String_comparison_exp
}

"""
unique or primary key constraints on table "vehicle_violation_scoring_record"
"""
enum vehicle_violation_scoring_record_constraint {
    """unique or primary key constraint"""
    vehicle_violation_scoring_record_pkey
}

"""
input type for incrementing integer column in table "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_inc_input {
    demerit_points: numeric
    id: bigint
}

"""
input type for inserting data into table "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_insert_input {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    demerit_points: numeric
    id: bigint
    is_delete: Boolean
    remarks: String
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    violation_scoring_id: String
    violation_scoring_item_id: String
}

"""aggregate max on columns"""
type vehicle_violation_scoring_record_max_fields {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    demerit_points: numeric
    id: bigint
    remarks: String
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    violation_scoring_id: String
    violation_scoring_item_id: String
}

"""
order by max() on columns of table "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_max_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    demerit_points: order_by
    id: order_by
    remarks: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
    violation_scoring_id: order_by
    violation_scoring_item_id: order_by
}

"""aggregate min on columns"""
type vehicle_violation_scoring_record_min_fields {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    demerit_points: numeric
    id: bigint
    remarks: String
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    violation_scoring_id: String
    violation_scoring_item_id: String
}

"""
order by min() on columns of table "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_min_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    demerit_points: order_by
    id: order_by
    remarks: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
    violation_scoring_id: order_by
    violation_scoring_item_id: order_by
}

"""
response of any mutation on the table "vehicle_violation_scoring_record"
"""
type vehicle_violation_scoring_record_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [vehicle_violation_scoring_record!]!
}

"""
input type for inserting object relation for remote table "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_obj_rel_insert_input {
    data: vehicle_violation_scoring_record_insert_input!
    on_conflict: vehicle_violation_scoring_record_on_conflict
}

"""
on conflict condition type for table "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_on_conflict {
    constraint: vehicle_violation_scoring_record_constraint!
    update_columns: [vehicle_violation_scoring_record_update_column!]!
    where: vehicle_violation_scoring_record_bool_exp
}

"""
ordering options when selecting data from "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    demerit_points: order_by
    id: order_by
    is_delete: order_by
    remarks: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
    violation_scoring_id: order_by
    violation_scoring_item_id: order_by
}

"""
primary key columns input for table: "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_pk_columns_input {
    """主键"""
    id: bigint!

    """联合主键"""
    violation_scoring_id: String!
}

"""
select columns of table "vehicle_violation_scoring_record"
"""
enum vehicle_violation_scoring_record_select_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    demerit_points

    """column name"""
    id

    """column name"""
    is_delete

    """column name"""
    remarks

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    vehicle_id

    """column name"""
    violation_scoring_id

    """column name"""
    violation_scoring_item_id
}

"""
input type for updating data in table "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_set_input {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    demerit_points: numeric
    id: bigint
    is_delete: Boolean
    remarks: String
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    violation_scoring_id: String
    violation_scoring_item_id: String
}

"""aggregate stddev on columns"""
type vehicle_violation_scoring_record_stddev_fields {
    demerit_points: Float
    id: Float
}

"""
order by stddev() on columns of table "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_stddev_order_by {
    demerit_points: order_by
    id: order_by
}

"""aggregate stddev_pop on columns"""
type vehicle_violation_scoring_record_stddev_pop_fields {
    demerit_points: Float
    id: Float
}

"""
order by stddev_pop() on columns of table "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_stddev_pop_order_by {
    demerit_points: order_by
    id: order_by
}

"""aggregate stddev_samp on columns"""
type vehicle_violation_scoring_record_stddev_samp_fields {
    demerit_points: Float
    id: Float
}

"""
order by stddev_samp() on columns of table "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_stddev_samp_order_by {
    demerit_points: order_by
    id: order_by
}

"""aggregate sum on columns"""
type vehicle_violation_scoring_record_sum_fields {
    demerit_points: numeric
    id: bigint
}

"""
order by sum() on columns of table "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_sum_order_by {
    demerit_points: order_by
    id: order_by
}

"""
update columns of table "vehicle_violation_scoring_record"
"""
enum vehicle_violation_scoring_record_update_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    demerit_points

    """column name"""
    id

    """column name"""
    is_delete

    """column name"""
    remarks

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    vehicle_id

    """column name"""
    violation_scoring_id

    """column name"""
    violation_scoring_item_id
}

"""aggregate var_pop on columns"""
type vehicle_violation_scoring_record_var_pop_fields {
    demerit_points: Float
    id: Float
}

"""
order by var_pop() on columns of table "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_var_pop_order_by {
    demerit_points: order_by
    id: order_by
}

"""aggregate var_samp on columns"""
type vehicle_violation_scoring_record_var_samp_fields {
    demerit_points: Float
    id: Float
}

"""
order by var_samp() on columns of table "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_var_samp_order_by {
    demerit_points: order_by
    id: order_by
}

"""aggregate variance on columns"""
type vehicle_violation_scoring_record_variance_fields {
    demerit_points: Float
    id: Float
}

"""
order by variance() on columns of table "vehicle_violation_scoring_record"
"""
input vehicle_violation_scoring_record_variance_order_by {
    demerit_points: order_by
    id: order_by
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_VIO_CODEWFDM_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VioCodewfdmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVIO_CODEWFDM_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_app_enforcement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AppEnforcementBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNapp_enforcement_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_app_enforcement_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["illegal_photo_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["illegal_photo_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_dispute_violation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DisputeViolationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNdispute_violation_record_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_dispute_violation_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["dispute_violation_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dispute_violation_id"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_dispute_violation_record_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DisputeViolationRecordLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNdispute_violation_record_log_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_dispute_violation_record_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["dispute_violation_log_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_log_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dispute_violation_log_id"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_peccancy_check_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverPeccancyCheckBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNdriver_peccancy_check_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_peccancy_check_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_deduction_items_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseDeductionItemsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNenterprise_deduction_items_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_deduction_items_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterprise_deduction_item_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_deduction_item_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterprise_deduction_item_id"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_deduction_operation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseDeductionOperationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNenterprise_deduction_operation_record_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_deduction_operation_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterprise_duduction_operation_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_duduction_operation_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterprise_duduction_operation_id"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_illegal_photo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.IllegalPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNillegal_photo_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_illegal_photo_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["illegal_photo_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["illegal_photo_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_regional_violation_register_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RegionalViolationRegisterBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNregional_violation_register_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_regional_violation_register_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["regional_violation_register_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regional_violation_register_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["regional_violation_register_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_user_operation_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserOperationLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNuser_operation_log_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_user_operation_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_detain_details_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleDetainDetailsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNvehicle_detain_details_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_detain_details_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_violation_details_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleViolationDetailsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNvehicle_violation_details_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_violation_details_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_violation_scoring_items_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleViolationScoringItemsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNvehicle_violation_scoring_items_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_violation_scoring_items_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["violation_scoring_item_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["violation_scoring_item_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_violation_scoring_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleViolationScoringRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNvehicle_violation_scoring_record_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_violation_scoring_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["violation_scoring_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["violation_scoring_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_VIO_CODEWFDM_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VioCodewfdmInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVIO_CODEWFDM_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_VIO_CODEWFDM_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VioCodewfdmInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNVIO_CODEWFDM_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_app_enforcement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AppEnforcementInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNapp_enforcement_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.AppEnforcementOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOapp_enforcement_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_app_enforcement_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AppEnforcementInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNapp_enforcement_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.AppEnforcementOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOapp_enforcement_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dispute_violation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DisputeViolationRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNdispute_violation_record_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.DisputeViolationRecordOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdispute_violation_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dispute_violation_record_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DisputeViolationRecordLogInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNdispute_violation_record_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.DisputeViolationRecordLogOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdispute_violation_record_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dispute_violation_record_log_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DisputeViolationRecordLogInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNdispute_violation_record_log_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.DisputeViolationRecordLogOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdispute_violation_record_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dispute_violation_record_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DisputeViolationRecordInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNdispute_violation_record_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.DisputeViolationRecordOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdispute_violation_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_peccancy_check_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DriverPeccancyCheckInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNdriver_peccancy_check_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.DriverPeccancyCheckOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdriver_peccancy_check_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_peccancy_check_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverPeccancyCheckInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNdriver_peccancy_check_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.DriverPeccancyCheckOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdriver_peccancy_check_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_deduction_items_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EnterpriseDeductionItemsInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNenterprise_deduction_items_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.EnterpriseDeductionItemsOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOenterprise_deduction_items_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_deduction_items_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseDeductionItemsInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNenterprise_deduction_items_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.EnterpriseDeductionItemsOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOenterprise_deduction_items_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_deduction_operation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EnterpriseDeductionOperationRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNenterprise_deduction_operation_record_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.EnterpriseDeductionOperationRecordOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOenterprise_deduction_operation_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_deduction_operation_record_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseDeductionOperationRecordInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNenterprise_deduction_operation_record_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.EnterpriseDeductionOperationRecordOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOenterprise_deduction_operation_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_illegal_photo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.IllegalPhotoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNillegal_photo_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.IllegalPhotoOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOillegal_photo_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_illegal_photo_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.IllegalPhotoInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNillegal_photo_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.IllegalPhotoOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOillegal_photo_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_regional_violation_register_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.RegionalViolationRegisterInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNregional_violation_register_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.RegionalViolationRegisterOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOregional_violation_register_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_regional_violation_register_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RegionalViolationRegisterInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNregional_violation_register_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.RegionalViolationRegisterOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOregional_violation_register_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_user_operation_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.UserOperationLogInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNuser_operation_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.UserOperationLogOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOuser_operation_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_user_operation_log_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserOperationLogInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNuser_operation_log_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.UserOperationLogOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOuser_operation_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_detain_details_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleDetainDetailsInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNvehicle_detain_details_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.VehicleDetainDetailsOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_detain_details_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_detain_details_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleDetainDetailsInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNvehicle_detain_details_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.VehicleDetainDetailsOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_detain_details_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_violation_details_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleViolationDetailsInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNvehicle_violation_details_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.VehicleViolationDetailsOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_violation_details_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_violation_details_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleViolationDetailsInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNvehicle_violation_details_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.VehicleViolationDetailsOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_violation_details_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_violation_scoring_items_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleViolationScoringItemsInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNvehicle_violation_scoring_items_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.VehicleViolationScoringItemsOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_violation_scoring_items_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_violation_scoring_items_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleViolationScoringItemsInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNvehicle_violation_scoring_items_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.VehicleViolationScoringItemsOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_violation_scoring_items_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_violation_scoring_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleViolationScoringRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNvehicle_violation_scoring_record_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.VehicleViolationScoringRecordOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_violation_scoring_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_violation_scoring_record_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleViolationScoringRecordInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNvehicle_violation_scoring_record_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.VehicleViolationScoringRecordOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_violation_scoring_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_VIO_CODEWFDM_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VioCodewfdmIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVIO_CODEWFDM_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VioCodewfdmSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVIO_CODEWFDM_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VioCodewfdmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVIO_CODEWFDM_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_app_enforcement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AppEnforcementIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOapp_enforcement_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.AppEnforcementSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOapp_enforcement_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.AppEnforcementBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNapp_enforcement_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_app_enforcement_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AppEnforcementIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOapp_enforcement_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.AppEnforcementSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOapp_enforcement_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.AppEnforcementPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNapp_enforcement_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dispute_violation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DisputeViolationRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdispute_violation_record_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DisputeViolationRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdispute_violation_record_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DisputeViolationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNdispute_violation_record_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dispute_violation_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DisputeViolationRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdispute_violation_record_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DisputeViolationRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdispute_violation_record_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DisputeViolationRecordPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNdispute_violation_record_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dispute_violation_record_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DisputeViolationRecordLogIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdispute_violation_record_log_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DisputeViolationRecordLogSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdispute_violation_record_log_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DisputeViolationRecordLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNdispute_violation_record_log_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dispute_violation_record_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DisputeViolationRecordLogIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdispute_violation_record_log_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DisputeViolationRecordLogSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdispute_violation_record_log_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DisputeViolationRecordLogPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNdispute_violation_record_log_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_peccancy_check_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverPeccancyCheckIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdriver_peccancy_check_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverPeccancyCheckSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdriver_peccancy_check_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DriverPeccancyCheckBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNdriver_peccancy_check_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_peccancy_check_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverPeccancyCheckIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdriver_peccancy_check_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverPeccancyCheckSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdriver_peccancy_check_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DriverPeccancyCheckPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNdriver_peccancy_check_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_deduction_items_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseDeductionItemsIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOenterprise_deduction_items_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseDeductionItemsSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOenterprise_deduction_items_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterpriseDeductionItemsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNenterprise_deduction_items_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_deduction_items_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseDeductionItemsIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOenterprise_deduction_items_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseDeductionItemsSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOenterprise_deduction_items_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterpriseDeductionItemsPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNenterprise_deduction_items_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_deduction_operation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseDeductionOperationRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOenterprise_deduction_operation_record_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseDeductionOperationRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOenterprise_deduction_operation_record_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterpriseDeductionOperationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNenterprise_deduction_operation_record_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_deduction_operation_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseDeductionOperationRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOenterprise_deduction_operation_record_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseDeductionOperationRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOenterprise_deduction_operation_record_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterpriseDeductionOperationRecordPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNenterprise_deduction_operation_record_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_illegal_photo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.IllegalPhotoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOillegal_photo_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.IllegalPhotoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOillegal_photo_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.IllegalPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNillegal_photo_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_illegal_photo_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.IllegalPhotoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOillegal_photo_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.IllegalPhotoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOillegal_photo_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.IllegalPhotoPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNillegal_photo_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_regional_violation_register_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RegionalViolationRegisterIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOregional_violation_register_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.RegionalViolationRegisterSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOregional_violation_register_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.RegionalViolationRegisterBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNregional_violation_register_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_regional_violation_register_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RegionalViolationRegisterIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOregional_violation_register_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.RegionalViolationRegisterSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOregional_violation_register_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.RegionalViolationRegisterPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNregional_violation_register_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_user_operation_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserOperationLogIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOuser_operation_log_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.UserOperationLogSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOuser_operation_log_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.UserOperationLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNuser_operation_log_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_user_operation_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserOperationLogIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOuser_operation_log_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.UserOperationLogSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOuser_operation_log_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.UserOperationLogPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNuser_operation_log_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_detain_details_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleDetainDetailsIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_detain_details_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleDetainDetailsSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_detain_details_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleDetainDetailsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNvehicle_detain_details_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_detain_details_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleDetainDetailsIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_detain_details_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleDetainDetailsSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_detain_details_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleDetainDetailsPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNvehicle_detain_details_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_violation_details_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleViolationDetailsIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_violation_details_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleViolationDetailsSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_violation_details_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleViolationDetailsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNvehicle_violation_details_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_violation_details_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleViolationDetailsIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_violation_details_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleViolationDetailsSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_violation_details_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleViolationDetailsPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNvehicle_violation_details_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_violation_scoring_items_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleViolationScoringItemsIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_violation_scoring_items_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleViolationScoringItemsSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_violation_scoring_items_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleViolationScoringItemsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNvehicle_violation_scoring_items_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_violation_scoring_items_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleViolationScoringItemsIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_violation_scoring_items_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleViolationScoringItemsSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_violation_scoring_items_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleViolationScoringItemsPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNvehicle_violation_scoring_items_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_violation_scoring_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleViolationScoringRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_violation_scoring_record_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleViolationScoringRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_violation_scoring_record_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleViolationScoringRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNvehicle_violation_scoring_record_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_violation_scoring_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleViolationScoringRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_violation_scoring_record_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleViolationScoringRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_violation_scoring_record_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleViolationScoringRecordPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNvehicle_violation_scoring_record_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_VIO_CODEWFDM_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VioCodewfdmSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVIO_CODEWFDM_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VioCodewfdmOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVIO_CODEWFDM_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VioCodewfdmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVIO_CODEWFDM_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_VIO_CODEWFDM_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VioCodewfdmSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVIO_CODEWFDM_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VioCodewfdmOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVIO_CODEWFDM_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VioCodewfdmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVIO_CODEWFDM_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_app_enforcement_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AppEnforcementSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOapp_enforcement_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AppEnforcementOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOapp_enforcement_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AppEnforcementBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOapp_enforcement_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_app_enforcement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AppEnforcementSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOapp_enforcement_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AppEnforcementOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOapp_enforcement_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AppEnforcementBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOapp_enforcement_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_app_enforcement_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["illegal_photo_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["illegal_photo_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_dispute_violation_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DisputeViolationRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdispute_violation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DisputeViolationRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdispute_violation_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DisputeViolationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdispute_violation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dispute_violation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DisputeViolationRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdispute_violation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DisputeViolationRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdispute_violation_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DisputeViolationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdispute_violation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dispute_violation_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["dispute_violation_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dispute_violation_id"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_dispute_violation_record_log_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DisputeViolationRecordLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdispute_violation_record_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DisputeViolationRecordLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdispute_violation_record_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DisputeViolationRecordLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdispute_violation_record_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dispute_violation_record_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DisputeViolationRecordLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdispute_violation_record_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DisputeViolationRecordLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdispute_violation_record_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DisputeViolationRecordLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdispute_violation_record_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dispute_violation_record_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["dispute_violation_log_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_log_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dispute_violation_log_id"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_driver_peccancy_check_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverPeccancyCheckSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriver_peccancy_check_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverPeccancyCheckOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriver_peccancy_check_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverPeccancyCheckBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriver_peccancy_check_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_peccancy_check_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverPeccancyCheckSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriver_peccancy_check_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverPeccancyCheckOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriver_peccancy_check_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverPeccancyCheckBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriver_peccancy_check_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_peccancy_check_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_deduction_items_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseDeductionItemsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOenterprise_deduction_items_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseDeductionItemsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOenterprise_deduction_items_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseDeductionItemsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOenterprise_deduction_items_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_deduction_items_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseDeductionItemsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOenterprise_deduction_items_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseDeductionItemsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOenterprise_deduction_items_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseDeductionItemsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOenterprise_deduction_items_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_deduction_items_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterprise_deduction_item_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_deduction_item_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterprise_deduction_item_id"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_deduction_operation_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseDeductionOperationRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOenterprise_deduction_operation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseDeductionOperationRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOenterprise_deduction_operation_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseDeductionOperationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOenterprise_deduction_operation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_deduction_operation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseDeductionOperationRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOenterprise_deduction_operation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseDeductionOperationRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOenterprise_deduction_operation_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseDeductionOperationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOenterprise_deduction_operation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_deduction_operation_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterprise_duduction_operation_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_duduction_operation_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterprise_duduction_operation_id"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_illegal_photo_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.IllegalPhotoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOillegal_photo_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.IllegalPhotoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOillegal_photo_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.IllegalPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOillegal_photo_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_illegal_photo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.IllegalPhotoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOillegal_photo_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.IllegalPhotoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOillegal_photo_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.IllegalPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOillegal_photo_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_illegal_photo_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["illegal_photo_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["illegal_photo_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_regional_violation_register_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RegionalViolationRegisterSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOregional_violation_register_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.RegionalViolationRegisterOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOregional_violation_register_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.RegionalViolationRegisterBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOregional_violation_register_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_regional_violation_register_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RegionalViolationRegisterSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOregional_violation_register_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.RegionalViolationRegisterOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOregional_violation_register_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.RegionalViolationRegisterBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOregional_violation_register_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_regional_violation_register_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["regional_violation_register_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regional_violation_register_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["regional_violation_register_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_user_operation_log_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.UserOperationLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOuser_operation_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.UserOperationLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOuser_operation_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.UserOperationLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOuser_operation_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_user_operation_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.UserOperationLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOuser_operation_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.UserOperationLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOuser_operation_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.UserOperationLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOuser_operation_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_user_operation_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_detain_details_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleDetainDetailsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_detain_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleDetainDetailsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_detain_details_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleDetainDetailsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_detain_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_detain_details_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleDetainDetailsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_detain_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleDetainDetailsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_detain_details_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleDetainDetailsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_detain_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_detain_details_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_violation_details_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationDetailsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_violation_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleViolationDetailsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_violation_details_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleViolationDetailsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_violation_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_violation_details_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationDetailsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_violation_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleViolationDetailsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_violation_details_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleViolationDetailsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_violation_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_violation_details_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_violation_scoring_items_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationScoringItemsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_violation_scoring_items_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleViolationScoringItemsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_violation_scoring_items_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleViolationScoringItemsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_violation_scoring_items_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_violation_scoring_items_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationScoringItemsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_violation_scoring_items_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleViolationScoringItemsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_violation_scoring_items_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleViolationScoringItemsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_violation_scoring_items_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_violation_scoring_items_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["violation_scoring_item_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["violation_scoring_item_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_violation_scoring_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationScoringRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_violation_scoring_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleViolationScoringRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_violation_scoring_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleViolationScoringRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_violation_scoring_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_violation_scoring_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationScoringRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_violation_scoring_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleViolationScoringRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_violation_scoring_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleViolationScoringRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_violation_scoring_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_violation_scoring_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["violation_scoring_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["violation_scoring_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_VIO_CODEWFDM_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VioCodewfdmSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVIO_CODEWFDM_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VioCodewfdmOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVIO_CODEWFDM_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VioCodewfdmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVIO_CODEWFDM_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_VIO_CODEWFDM_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VioCodewfdmSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVIO_CODEWFDM_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VioCodewfdmOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVIO_CODEWFDM_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VioCodewfdmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVIO_CODEWFDM_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_app_enforcement_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AppEnforcementSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOapp_enforcement_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AppEnforcementOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOapp_enforcement_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AppEnforcementBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOapp_enforcement_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_app_enforcement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AppEnforcementSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOapp_enforcement_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AppEnforcementOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOapp_enforcement_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AppEnforcementBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOapp_enforcement_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_app_enforcement_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["illegal_photo_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["illegal_photo_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_dispute_violation_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DisputeViolationRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdispute_violation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DisputeViolationRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdispute_violation_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DisputeViolationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdispute_violation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_dispute_violation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DisputeViolationRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdispute_violation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DisputeViolationRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdispute_violation_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DisputeViolationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdispute_violation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_dispute_violation_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["dispute_violation_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dispute_violation_id"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_dispute_violation_record_log_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DisputeViolationRecordLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdispute_violation_record_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DisputeViolationRecordLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdispute_violation_record_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DisputeViolationRecordLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdispute_violation_record_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_dispute_violation_record_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DisputeViolationRecordLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdispute_violation_record_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DisputeViolationRecordLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdispute_violation_record_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DisputeViolationRecordLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdispute_violation_record_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_dispute_violation_record_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["dispute_violation_log_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_log_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dispute_violation_log_id"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_driver_peccancy_check_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverPeccancyCheckSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriver_peccancy_check_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverPeccancyCheckOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriver_peccancy_check_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverPeccancyCheckBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriver_peccancy_check_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_driver_peccancy_check_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverPeccancyCheckSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriver_peccancy_check_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverPeccancyCheckOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriver_peccancy_check_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverPeccancyCheckBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriver_peccancy_check_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_driver_peccancy_check_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_enterprise_deduction_items_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseDeductionItemsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOenterprise_deduction_items_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseDeductionItemsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOenterprise_deduction_items_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseDeductionItemsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOenterprise_deduction_items_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_enterprise_deduction_items_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseDeductionItemsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOenterprise_deduction_items_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseDeductionItemsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOenterprise_deduction_items_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseDeductionItemsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOenterprise_deduction_items_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_enterprise_deduction_items_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterprise_deduction_item_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_deduction_item_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterprise_deduction_item_id"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_enterprise_deduction_operation_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseDeductionOperationRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOenterprise_deduction_operation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseDeductionOperationRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOenterprise_deduction_operation_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseDeductionOperationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOenterprise_deduction_operation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_enterprise_deduction_operation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseDeductionOperationRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOenterprise_deduction_operation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseDeductionOperationRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOenterprise_deduction_operation_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseDeductionOperationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOenterprise_deduction_operation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_enterprise_deduction_operation_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterprise_duduction_operation_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_duduction_operation_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterprise_duduction_operation_id"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_illegal_photo_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.IllegalPhotoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOillegal_photo_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.IllegalPhotoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOillegal_photo_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.IllegalPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOillegal_photo_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_illegal_photo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.IllegalPhotoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOillegal_photo_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.IllegalPhotoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOillegal_photo_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.IllegalPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOillegal_photo_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_illegal_photo_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["illegal_photo_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["illegal_photo_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_regional_violation_register_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RegionalViolationRegisterSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOregional_violation_register_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.RegionalViolationRegisterOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOregional_violation_register_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.RegionalViolationRegisterBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOregional_violation_register_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_regional_violation_register_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RegionalViolationRegisterSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOregional_violation_register_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.RegionalViolationRegisterOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOregional_violation_register_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.RegionalViolationRegisterBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOregional_violation_register_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_regional_violation_register_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["regional_violation_register_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regional_violation_register_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["regional_violation_register_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_user_operation_log_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.UserOperationLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOuser_operation_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.UserOperationLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOuser_operation_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.UserOperationLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOuser_operation_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_user_operation_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.UserOperationLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOuser_operation_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.UserOperationLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOuser_operation_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.UserOperationLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOuser_operation_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_user_operation_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_detain_details_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleDetainDetailsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_detain_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleDetainDetailsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_detain_details_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleDetainDetailsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_detain_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_detain_details_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleDetainDetailsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_detain_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleDetainDetailsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_detain_details_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleDetainDetailsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_detain_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_detain_details_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_violation_details_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationDetailsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_violation_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleViolationDetailsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_violation_details_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleViolationDetailsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_violation_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_violation_details_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationDetailsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_violation_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleViolationDetailsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_violation_details_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleViolationDetailsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_violation_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_violation_details_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_violation_scoring_items_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationScoringItemsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_violation_scoring_items_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleViolationScoringItemsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_violation_scoring_items_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleViolationScoringItemsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_violation_scoring_items_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_violation_scoring_items_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationScoringItemsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_violation_scoring_items_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleViolationScoringItemsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_violation_scoring_items_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleViolationScoringItemsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_violation_scoring_items_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_violation_scoring_items_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["violation_scoring_item_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["violation_scoring_item_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_violation_scoring_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationScoringRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_violation_scoring_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleViolationScoringRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_violation_scoring_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleViolationScoringRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_violation_scoring_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_violation_scoring_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationScoringRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_violation_scoring_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleViolationScoringRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_violation_scoring_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleViolationScoringRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_violation_scoring_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_violation_scoring_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["violation_scoring_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["violation_scoring_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_VIO_CODEWFDM_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VioCodewfdmSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOVIO_CODEWFDM_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field_app_enforcement_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AppEnforcementSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOapp_enforcement_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_dispute_violation_record_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DisputeViolationRecordSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOdispute_violation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_dispute_violation_record_log_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DisputeViolationRecordLogSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOdispute_violation_record_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_driver_peccancy_check_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverPeccancyCheckSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOdriver_peccancy_check_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_enterprise_deduction_items_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseDeductionItemsSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOenterprise_deduction_items_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_enterprise_deduction_operation_record_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseDeductionOperationRecordSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOenterprise_deduction_operation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_illegal_photo_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.IllegalPhotoSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOillegal_photo_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_regional_violation_register_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RegionalViolationRegisterSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOregional_violation_register_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_user_operation_log_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.UserOperationLogSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOuser_operation_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_vehicle_detain_details_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleDetainDetailsSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOvehicle_detain_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_vehicle_violation_details_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationDetailsSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOvehicle_violation_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_vehicle_violation_scoring_items_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationScoringItemsSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOvehicle_violation_scoring_items_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_vehicle_violation_scoring_record_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleViolationScoringRecordSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOvehicle_violation_scoring_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Mutation_delete_app_enforcement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_app_enforcement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAppEnforcement(rctx, args["where"].(model.AppEnforcementBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementMutationResponse)
	fc.Result = res
	return ec.marshalOapp_enforcement_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_app_enforcement_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_app_enforcement_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAppEnforcementByPk(rctx, args["id"].(int64), args["illegal_photo_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcement)
	fc.Result = res
	return ec.marshalOapp_enforcement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcement(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_app_enforcement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_app_enforcement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertAppEnforcement(rctx, args["objects"].([]*model.AppEnforcementInsertInput), args["on_conflict"].(*model.AppEnforcementOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementMutationResponse)
	fc.Result = res
	return ec.marshalOapp_enforcement_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_app_enforcement_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_app_enforcement_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertAppEnforcementOne(rctx, args["object"].(model.AppEnforcementInsertInput), args["on_conflict"].(*model.AppEnforcementOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcement)
	fc.Result = res
	return ec.marshalOapp_enforcement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcement(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_app_enforcement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_app_enforcement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAppEnforcement(rctx, args["_inc"].(*model.AppEnforcementIncInput), args["_set"].(*model.AppEnforcementSetInput), args["where"].(model.AppEnforcementBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementMutationResponse)
	fc.Result = res
	return ec.marshalOapp_enforcement_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_app_enforcement_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_app_enforcement_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAppEnforcementByPk(rctx, args["_inc"].(*model.AppEnforcementIncInput), args["_set"].(*model.AppEnforcementSetInput), args["pk_columns"].(model.AppEnforcementPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcement)
	fc.Result = res
	return ec.marshalOapp_enforcement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcement(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_VIO_CODEWFDM(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_VIO_CODEWFDM_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVioCodewfdm(rctx, args["where"].(model.VioCodewfdmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmMutationResponse)
	fc.Result = res
	return ec.marshalOVIO_CODEWFDM_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_VIO_CODEWFDM(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_VIO_CODEWFDM_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVioCodewfdm(rctx, args["objects"].([]*model.VioCodewfdmInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmMutationResponse)
	fc.Result = res
	return ec.marshalOVIO_CODEWFDM_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_VIO_CODEWFDM_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_VIO_CODEWFDM_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVioCodewfdmOne(rctx, args["object"].(model.VioCodewfdmInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdm)
	fc.Result = res
	return ec.marshalOVIO_CODEWFDM2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_VIO_CODEWFDM(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_VIO_CODEWFDM_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVioCodewfdm(rctx, args["_inc"].(*model.VioCodewfdmIncInput), args["_set"].(*model.VioCodewfdmSetInput), args["where"].(model.VioCodewfdmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmMutationResponse)
	fc.Result = res
	return ec.marshalOVIO_CODEWFDM_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dispute_violation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dispute_violation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDisputeViolationRecord(rctx, args["where"].(model.DisputeViolationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordMutationResponse)
	fc.Result = res
	return ec.marshalOdispute_violation_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dispute_violation_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dispute_violation_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDisputeViolationRecordByPk(rctx, args["dispute_violation_id"].(string), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecord)
	fc.Result = res
	return ec.marshalOdispute_violation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dispute_violation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dispute_violation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDisputeViolationRecord(rctx, args["objects"].([]*model.DisputeViolationRecordInsertInput), args["on_conflict"].(*model.DisputeViolationRecordOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordMutationResponse)
	fc.Result = res
	return ec.marshalOdispute_violation_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dispute_violation_record_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dispute_violation_record_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDisputeViolationRecordOne(rctx, args["object"].(model.DisputeViolationRecordInsertInput), args["on_conflict"].(*model.DisputeViolationRecordOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecord)
	fc.Result = res
	return ec.marshalOdispute_violation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dispute_violation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dispute_violation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDisputeViolationRecord(rctx, args["_inc"].(*model.DisputeViolationRecordIncInput), args["_set"].(*model.DisputeViolationRecordSetInput), args["where"].(model.DisputeViolationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordMutationResponse)
	fc.Result = res
	return ec.marshalOdispute_violation_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dispute_violation_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dispute_violation_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDisputeViolationRecordByPk(rctx, args["_inc"].(*model.DisputeViolationRecordIncInput), args["_set"].(*model.DisputeViolationRecordSetInput), args["pk_columns"].(model.DisputeViolationRecordPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecord)
	fc.Result = res
	return ec.marshalOdispute_violation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dispute_violation_record_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dispute_violation_record_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDisputeViolationRecordLog(rctx, args["where"].(model.DisputeViolationRecordLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogMutationResponse)
	fc.Result = res
	return ec.marshalOdispute_violation_record_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dispute_violation_record_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dispute_violation_record_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDisputeViolationRecordLogByPk(rctx, args["dispute_violation_log_id"].(string), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLog)
	fc.Result = res
	return ec.marshalOdispute_violation_record_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dispute_violation_record_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dispute_violation_record_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDisputeViolationRecordLog(rctx, args["objects"].([]*model.DisputeViolationRecordLogInsertInput), args["on_conflict"].(*model.DisputeViolationRecordLogOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogMutationResponse)
	fc.Result = res
	return ec.marshalOdispute_violation_record_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dispute_violation_record_log_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dispute_violation_record_log_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDisputeViolationRecordLogOne(rctx, args["object"].(model.DisputeViolationRecordLogInsertInput), args["on_conflict"].(*model.DisputeViolationRecordLogOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLog)
	fc.Result = res
	return ec.marshalOdispute_violation_record_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dispute_violation_record_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dispute_violation_record_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDisputeViolationRecordLog(rctx, args["_inc"].(*model.DisputeViolationRecordLogIncInput), args["_set"].(*model.DisputeViolationRecordLogSetInput), args["where"].(model.DisputeViolationRecordLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogMutationResponse)
	fc.Result = res
	return ec.marshalOdispute_violation_record_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dispute_violation_record_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dispute_violation_record_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDisputeViolationRecordLogByPk(rctx, args["_inc"].(*model.DisputeViolationRecordLogIncInput), args["_set"].(*model.DisputeViolationRecordLogSetInput), args["pk_columns"].(model.DisputeViolationRecordLogPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLog)
	fc.Result = res
	return ec.marshalOdispute_violation_record_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_peccancy_check(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_peccancy_check_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverPeccancyCheck(rctx, args["where"].(model.DriverPeccancyCheckBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckMutationResponse)
	fc.Result = res
	return ec.marshalOdriver_peccancy_check_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_peccancy_check_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_peccancy_check_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverPeccancyCheckByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheck)
	fc.Result = res
	return ec.marshalOdriver_peccancy_check2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheck(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_peccancy_check(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_peccancy_check_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverPeccancyCheck(rctx, args["objects"].([]*model.DriverPeccancyCheckInsertInput), args["on_conflict"].(*model.DriverPeccancyCheckOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckMutationResponse)
	fc.Result = res
	return ec.marshalOdriver_peccancy_check_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_peccancy_check_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_peccancy_check_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverPeccancyCheckOne(rctx, args["object"].(model.DriverPeccancyCheckInsertInput), args["on_conflict"].(*model.DriverPeccancyCheckOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheck)
	fc.Result = res
	return ec.marshalOdriver_peccancy_check2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheck(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_peccancy_check(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_peccancy_check_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverPeccancyCheck(rctx, args["_inc"].(*model.DriverPeccancyCheckIncInput), args["_set"].(*model.DriverPeccancyCheckSetInput), args["where"].(model.DriverPeccancyCheckBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckMutationResponse)
	fc.Result = res
	return ec.marshalOdriver_peccancy_check_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_peccancy_check_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_peccancy_check_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverPeccancyCheckByPk(rctx, args["_inc"].(*model.DriverPeccancyCheckIncInput), args["_set"].(*model.DriverPeccancyCheckSetInput), args["pk_columns"].(model.DriverPeccancyCheckPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheck)
	fc.Result = res
	return ec.marshalOdriver_peccancy_check2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheck(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_deduction_items(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_deduction_items_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseDeductionItems(rctx, args["where"].(model.EnterpriseDeductionItemsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItemsMutationResponse)
	fc.Result = res
	return ec.marshalOenterprise_deduction_items_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_deduction_items_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_deduction_items_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseDeductionItemsByPk(rctx, args["enterprise_deduction_item_id"].(string), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItems)
	fc.Result = res
	return ec.marshalOenterprise_deduction_items2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItems(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_deduction_items(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_deduction_items_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseDeductionItems(rctx, args["objects"].([]*model.EnterpriseDeductionItemsInsertInput), args["on_conflict"].(*model.EnterpriseDeductionItemsOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItemsMutationResponse)
	fc.Result = res
	return ec.marshalOenterprise_deduction_items_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_deduction_items_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_deduction_items_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseDeductionItemsOne(rctx, args["object"].(model.EnterpriseDeductionItemsInsertInput), args["on_conflict"].(*model.EnterpriseDeductionItemsOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItems)
	fc.Result = res
	return ec.marshalOenterprise_deduction_items2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItems(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_deduction_items(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_deduction_items_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseDeductionItems(rctx, args["_inc"].(*model.EnterpriseDeductionItemsIncInput), args["_set"].(*model.EnterpriseDeductionItemsSetInput), args["where"].(model.EnterpriseDeductionItemsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItemsMutationResponse)
	fc.Result = res
	return ec.marshalOenterprise_deduction_items_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_deduction_items_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_deduction_items_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseDeductionItemsByPk(rctx, args["_inc"].(*model.EnterpriseDeductionItemsIncInput), args["_set"].(*model.EnterpriseDeductionItemsSetInput), args["pk_columns"].(model.EnterpriseDeductionItemsPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItems)
	fc.Result = res
	return ec.marshalOenterprise_deduction_items2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItems(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_deduction_operation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_deduction_operation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseDeductionOperationRecord(rctx, args["where"].(model.EnterpriseDeductionOperationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecordMutationResponse)
	fc.Result = res
	return ec.marshalOenterprise_deduction_operation_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_deduction_operation_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_deduction_operation_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseDeductionOperationRecordByPk(rctx, args["enterprise_duduction_operation_id"].(string), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecord)
	fc.Result = res
	return ec.marshalOenterprise_deduction_operation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_deduction_operation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_deduction_operation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseDeductionOperationRecord(rctx, args["objects"].([]*model.EnterpriseDeductionOperationRecordInsertInput), args["on_conflict"].(*model.EnterpriseDeductionOperationRecordOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecordMutationResponse)
	fc.Result = res
	return ec.marshalOenterprise_deduction_operation_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_deduction_operation_record_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_deduction_operation_record_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseDeductionOperationRecordOne(rctx, args["object"].(model.EnterpriseDeductionOperationRecordInsertInput), args["on_conflict"].(*model.EnterpriseDeductionOperationRecordOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecord)
	fc.Result = res
	return ec.marshalOenterprise_deduction_operation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_deduction_operation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_deduction_operation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseDeductionOperationRecord(rctx, args["_inc"].(*model.EnterpriseDeductionOperationRecordIncInput), args["_set"].(*model.EnterpriseDeductionOperationRecordSetInput), args["where"].(model.EnterpriseDeductionOperationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecordMutationResponse)
	fc.Result = res
	return ec.marshalOenterprise_deduction_operation_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_deduction_operation_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_deduction_operation_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseDeductionOperationRecordByPk(rctx, args["_inc"].(*model.EnterpriseDeductionOperationRecordIncInput), args["_set"].(*model.EnterpriseDeductionOperationRecordSetInput), args["pk_columns"].(model.EnterpriseDeductionOperationRecordPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecord)
	fc.Result = res
	return ec.marshalOenterprise_deduction_operation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_illegal_photo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_illegal_photo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteIllegalPhoto(rctx, args["where"].(model.IllegalPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoMutationResponse)
	fc.Result = res
	return ec.marshalOillegal_photo_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_illegal_photo_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_illegal_photo_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteIllegalPhotoByPk(rctx, args["id"].(int64), args["illegal_photo_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhoto)
	fc.Result = res
	return ec.marshalOillegal_photo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_illegal_photo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_illegal_photo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertIllegalPhoto(rctx, args["objects"].([]*model.IllegalPhotoInsertInput), args["on_conflict"].(*model.IllegalPhotoOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoMutationResponse)
	fc.Result = res
	return ec.marshalOillegal_photo_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_illegal_photo_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_illegal_photo_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertIllegalPhotoOne(rctx, args["object"].(model.IllegalPhotoInsertInput), args["on_conflict"].(*model.IllegalPhotoOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhoto)
	fc.Result = res
	return ec.marshalOillegal_photo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_illegal_photo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_illegal_photo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIllegalPhoto(rctx, args["_inc"].(*model.IllegalPhotoIncInput), args["_set"].(*model.IllegalPhotoSetInput), args["where"].(model.IllegalPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoMutationResponse)
	fc.Result = res
	return ec.marshalOillegal_photo_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_illegal_photo_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_illegal_photo_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIllegalPhotoByPk(rctx, args["_inc"].(*model.IllegalPhotoIncInput), args["_set"].(*model.IllegalPhotoSetInput), args["pk_columns"].(model.IllegalPhotoPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhoto)
	fc.Result = res
	return ec.marshalOillegal_photo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_regional_violation_register(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_regional_violation_register_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRegionalViolationRegister(rctx, args["where"].(model.RegionalViolationRegisterBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterMutationResponse)
	fc.Result = res
	return ec.marshalOregional_violation_register_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_regional_violation_register_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_regional_violation_register_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRegionalViolationRegisterByPk(rctx, args["id"].(int64), args["regional_violation_register_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegister)
	fc.Result = res
	return ec.marshalOregional_violation_register2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegister(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_regional_violation_register(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_regional_violation_register_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertRegionalViolationRegister(rctx, args["objects"].([]*model.RegionalViolationRegisterInsertInput), args["on_conflict"].(*model.RegionalViolationRegisterOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterMutationResponse)
	fc.Result = res
	return ec.marshalOregional_violation_register_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_regional_violation_register_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_regional_violation_register_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertRegionalViolationRegisterOne(rctx, args["object"].(model.RegionalViolationRegisterInsertInput), args["on_conflict"].(*model.RegionalViolationRegisterOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegister)
	fc.Result = res
	return ec.marshalOregional_violation_register2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegister(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_regional_violation_register(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_regional_violation_register_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRegionalViolationRegister(rctx, args["_inc"].(*model.RegionalViolationRegisterIncInput), args["_set"].(*model.RegionalViolationRegisterSetInput), args["where"].(model.RegionalViolationRegisterBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterMutationResponse)
	fc.Result = res
	return ec.marshalOregional_violation_register_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_regional_violation_register_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_regional_violation_register_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRegionalViolationRegisterByPk(rctx, args["_inc"].(*model.RegionalViolationRegisterIncInput), args["_set"].(*model.RegionalViolationRegisterSetInput), args["pk_columns"].(model.RegionalViolationRegisterPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegister)
	fc.Result = res
	return ec.marshalOregional_violation_register2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegister(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_user_operation_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_user_operation_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUserOperationLog(rctx, args["where"].(model.UserOperationLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLogMutationResponse)
	fc.Result = res
	return ec.marshalOuser_operation_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_user_operation_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_user_operation_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUserOperationLogByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLog)
	fc.Result = res
	return ec.marshalOuser_operation_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_user_operation_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_user_operation_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertUserOperationLog(rctx, args["objects"].([]*model.UserOperationLogInsertInput), args["on_conflict"].(*model.UserOperationLogOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLogMutationResponse)
	fc.Result = res
	return ec.marshalOuser_operation_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_user_operation_log_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_user_operation_log_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertUserOperationLogOne(rctx, args["object"].(model.UserOperationLogInsertInput), args["on_conflict"].(*model.UserOperationLogOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLog)
	fc.Result = res
	return ec.marshalOuser_operation_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_user_operation_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_user_operation_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserOperationLog(rctx, args["_inc"].(*model.UserOperationLogIncInput), args["_set"].(*model.UserOperationLogSetInput), args["where"].(model.UserOperationLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLogMutationResponse)
	fc.Result = res
	return ec.marshalOuser_operation_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_user_operation_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_user_operation_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserOperationLogByPk(rctx, args["_inc"].(*model.UserOperationLogIncInput), args["_set"].(*model.UserOperationLogSetInput), args["pk_columns"].(model.UserOperationLogPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLog)
	fc.Result = res
	return ec.marshalOuser_operation_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_detain_details(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_detain_details_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleDetainDetails(rctx, args["where"].(model.VehicleDetainDetailsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetailsMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_detain_details_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_detain_details_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_detain_details_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleDetainDetailsByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetails)
	fc.Result = res
	return ec.marshalOvehicle_detain_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_detain_details(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_detain_details_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleDetainDetails(rctx, args["objects"].([]*model.VehicleDetainDetailsInsertInput), args["on_conflict"].(*model.VehicleDetainDetailsOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetailsMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_detain_details_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_detain_details_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_detain_details_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleDetainDetailsOne(rctx, args["object"].(model.VehicleDetainDetailsInsertInput), args["on_conflict"].(*model.VehicleDetainDetailsOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetails)
	fc.Result = res
	return ec.marshalOvehicle_detain_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_detain_details(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_detain_details_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleDetainDetails(rctx, args["_inc"].(*model.VehicleDetainDetailsIncInput), args["_set"].(*model.VehicleDetainDetailsSetInput), args["where"].(model.VehicleDetainDetailsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetailsMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_detain_details_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_detain_details_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_detain_details_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleDetainDetailsByPk(rctx, args["_inc"].(*model.VehicleDetainDetailsIncInput), args["_set"].(*model.VehicleDetainDetailsSetInput), args["pk_columns"].(model.VehicleDetainDetailsPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetails)
	fc.Result = res
	return ec.marshalOvehicle_detain_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_violation_details(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_violation_details_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleViolationDetails(rctx, args["where"].(model.VehicleViolationDetailsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_violation_details_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_violation_details_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_violation_details_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleViolationDetailsByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetails)
	fc.Result = res
	return ec.marshalOvehicle_violation_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_violation_details(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_violation_details_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleViolationDetails(rctx, args["objects"].([]*model.VehicleViolationDetailsInsertInput), args["on_conflict"].(*model.VehicleViolationDetailsOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_violation_details_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_violation_details_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_violation_details_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleViolationDetailsOne(rctx, args["object"].(model.VehicleViolationDetailsInsertInput), args["on_conflict"].(*model.VehicleViolationDetailsOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetails)
	fc.Result = res
	return ec.marshalOvehicle_violation_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_violation_details(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_violation_details_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleViolationDetails(rctx, args["_inc"].(*model.VehicleViolationDetailsIncInput), args["_set"].(*model.VehicleViolationDetailsSetInput), args["where"].(model.VehicleViolationDetailsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_violation_details_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_violation_details_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_violation_details_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleViolationDetailsByPk(rctx, args["_inc"].(*model.VehicleViolationDetailsIncInput), args["_set"].(*model.VehicleViolationDetailsSetInput), args["pk_columns"].(model.VehicleViolationDetailsPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetails)
	fc.Result = res
	return ec.marshalOvehicle_violation_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_violation_scoring_items(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_violation_scoring_items_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleViolationScoringItems(rctx, args["where"].(model.VehicleViolationScoringItemsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_items_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_violation_scoring_items_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_violation_scoring_items_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleViolationScoringItemsByPk(rctx, args["id"].(int64), args["violation_scoring_item_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItems)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_items2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItems(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_violation_scoring_items(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_violation_scoring_items_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleViolationScoringItems(rctx, args["objects"].([]*model.VehicleViolationScoringItemsInsertInput), args["on_conflict"].(*model.VehicleViolationScoringItemsOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_items_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_violation_scoring_items_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_violation_scoring_items_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleViolationScoringItemsOne(rctx, args["object"].(model.VehicleViolationScoringItemsInsertInput), args["on_conflict"].(*model.VehicleViolationScoringItemsOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItems)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_items2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItems(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_violation_scoring_items(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_violation_scoring_items_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleViolationScoringItems(rctx, args["_inc"].(*model.VehicleViolationScoringItemsIncInput), args["_set"].(*model.VehicleViolationScoringItemsSetInput), args["where"].(model.VehicleViolationScoringItemsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_items_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_violation_scoring_items_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_violation_scoring_items_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleViolationScoringItemsByPk(rctx, args["_inc"].(*model.VehicleViolationScoringItemsIncInput), args["_set"].(*model.VehicleViolationScoringItemsSetInput), args["pk_columns"].(model.VehicleViolationScoringItemsPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItems)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_items2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItems(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_violation_scoring_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_violation_scoring_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleViolationScoringRecord(rctx, args["where"].(model.VehicleViolationScoringRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_violation_scoring_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_violation_scoring_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleViolationScoringRecordByPk(rctx, args["id"].(int64), args["violation_scoring_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecord)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_violation_scoring_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_violation_scoring_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleViolationScoringRecord(rctx, args["objects"].([]*model.VehicleViolationScoringRecordInsertInput), args["on_conflict"].(*model.VehicleViolationScoringRecordOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_violation_scoring_record_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_violation_scoring_record_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleViolationScoringRecordOne(rctx, args["object"].(model.VehicleViolationScoringRecordInsertInput), args["on_conflict"].(*model.VehicleViolationScoringRecordOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecord)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_violation_scoring_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_violation_scoring_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleViolationScoringRecord(rctx, args["_inc"].(*model.VehicleViolationScoringRecordIncInput), args["_set"].(*model.VehicleViolationScoringRecordSetInput), args["where"].(model.VehicleViolationScoringRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_violation_scoring_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_violation_scoring_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleViolationScoringRecordByPk(rctx, args["_inc"].(*model.VehicleViolationScoringRecordIncInput), args["_set"].(*model.VehicleViolationScoringRecordSetInput), args["pk_columns"].(model.VehicleViolationScoringRecordPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecord)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_app_enforcement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_app_enforcement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AppEnforcement(rctx, args["distinct_on"].([]model.AppEnforcementSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AppEnforcementOrderBy), args["where"].(*model.AppEnforcementBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AppEnforcement)
	fc.Result = res
	return ec.marshalNapp_enforcement2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_app_enforcement_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_app_enforcement_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AppEnforcementAggregate(rctx, args["distinct_on"].([]model.AppEnforcementSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AppEnforcementOrderBy), args["where"].(*model.AppEnforcementBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementAggregate)
	fc.Result = res
	return ec.marshalNapp_enforcement_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_app_enforcement_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_app_enforcement_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AppEnforcementByPk(rctx, args["id"].(int64), args["illegal_photo_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcement)
	fc.Result = res
	return ec.marshalOapp_enforcement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcement(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_VIO_CODEWFDM(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_VIO_CODEWFDM_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VioCodewfdm(rctx, args["distinct_on"].([]model.VioCodewfdmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VioCodewfdmOrderBy), args["where"].(*model.VioCodewfdmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VioCodewfdm)
	fc.Result = res
	return ec.marshalNVIO_CODEWFDM2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_VIO_CODEWFDM_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_VIO_CODEWFDM_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VioCodewfdmAggregate(rctx, args["distinct_on"].([]model.VioCodewfdmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VioCodewfdmOrderBy), args["where"].(*model.VioCodewfdmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmAggregate)
	fc.Result = res
	return ec.marshalNVIO_CODEWFDM_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dispute_violation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dispute_violation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DisputeViolationRecord(rctx, args["distinct_on"].([]model.DisputeViolationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordOrderBy), args["where"].(*model.DisputeViolationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DisputeViolationRecord)
	fc.Result = res
	return ec.marshalNdispute_violation_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dispute_violation_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dispute_violation_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DisputeViolationRecordAggregate(rctx, args["distinct_on"].([]model.DisputeViolationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordOrderBy), args["where"].(*model.DisputeViolationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordAggregate)
	fc.Result = res
	return ec.marshalNdispute_violation_record_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dispute_violation_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dispute_violation_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DisputeViolationRecordByPk(rctx, args["dispute_violation_id"].(string), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecord)
	fc.Result = res
	return ec.marshalOdispute_violation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dispute_violation_record_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dispute_violation_record_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DisputeViolationRecordLog(rctx, args["distinct_on"].([]model.DisputeViolationRecordLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordLogOrderBy), args["where"].(*model.DisputeViolationRecordLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DisputeViolationRecordLog)
	fc.Result = res
	return ec.marshalNdispute_violation_record_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dispute_violation_record_log_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dispute_violation_record_log_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DisputeViolationRecordLogAggregate(rctx, args["distinct_on"].([]model.DisputeViolationRecordLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordLogOrderBy), args["where"].(*model.DisputeViolationRecordLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogAggregate)
	fc.Result = res
	return ec.marshalNdispute_violation_record_log_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dispute_violation_record_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dispute_violation_record_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DisputeViolationRecordLogByPk(rctx, args["dispute_violation_log_id"].(string), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLog)
	fc.Result = res
	return ec.marshalOdispute_violation_record_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_peccancy_check(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_peccancy_check_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverPeccancyCheck(rctx, args["distinct_on"].([]model.DriverPeccancyCheckSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverPeccancyCheckOrderBy), args["where"].(*model.DriverPeccancyCheckBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DriverPeccancyCheck)
	fc.Result = res
	return ec.marshalNdriver_peccancy_check2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_peccancy_check_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_peccancy_check_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverPeccancyCheckAggregate(rctx, args["distinct_on"].([]model.DriverPeccancyCheckSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverPeccancyCheckOrderBy), args["where"].(*model.DriverPeccancyCheckBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckAggregate)
	fc.Result = res
	return ec.marshalNdriver_peccancy_check_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_peccancy_check_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_peccancy_check_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverPeccancyCheckByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheck)
	fc.Result = res
	return ec.marshalOdriver_peccancy_check2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheck(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_deduction_items(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_deduction_items_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseDeductionItems(rctx, args["distinct_on"].([]model.EnterpriseDeductionItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseDeductionItemsOrderBy), args["where"].(*model.EnterpriseDeductionItemsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.EnterpriseDeductionItems)
	fc.Result = res
	return ec.marshalNenterprise_deduction_items2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_deduction_items_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_deduction_items_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseDeductionItemsAggregate(rctx, args["distinct_on"].([]model.EnterpriseDeductionItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseDeductionItemsOrderBy), args["where"].(*model.EnterpriseDeductionItemsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItemsAggregate)
	fc.Result = res
	return ec.marshalNenterprise_deduction_items_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_deduction_items_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_deduction_items_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseDeductionItemsByPk(rctx, args["enterprise_deduction_item_id"].(string), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItems)
	fc.Result = res
	return ec.marshalOenterprise_deduction_items2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItems(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_deduction_operation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_deduction_operation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseDeductionOperationRecord(rctx, args["distinct_on"].([]model.EnterpriseDeductionOperationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseDeductionOperationRecordOrderBy), args["where"].(*model.EnterpriseDeductionOperationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.EnterpriseDeductionOperationRecord)
	fc.Result = res
	return ec.marshalNenterprise_deduction_operation_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_deduction_operation_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_deduction_operation_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseDeductionOperationRecordAggregate(rctx, args["distinct_on"].([]model.EnterpriseDeductionOperationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseDeductionOperationRecordOrderBy), args["where"].(*model.EnterpriseDeductionOperationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecordAggregate)
	fc.Result = res
	return ec.marshalNenterprise_deduction_operation_record_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_deduction_operation_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_deduction_operation_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseDeductionOperationRecordByPk(rctx, args["enterprise_duduction_operation_id"].(string), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecord)
	fc.Result = res
	return ec.marshalOenterprise_deduction_operation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_illegal_photo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_illegal_photo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IllegalPhoto(rctx, args["distinct_on"].([]model.IllegalPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.IllegalPhotoOrderBy), args["where"].(*model.IllegalPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.IllegalPhoto)
	fc.Result = res
	return ec.marshalNillegal_photo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_illegal_photo_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_illegal_photo_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IllegalPhotoAggregate(rctx, args["distinct_on"].([]model.IllegalPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.IllegalPhotoOrderBy), args["where"].(*model.IllegalPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoAggregate)
	fc.Result = res
	return ec.marshalNillegal_photo_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_illegal_photo_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_illegal_photo_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IllegalPhotoByPk(rctx, args["id"].(int64), args["illegal_photo_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhoto)
	fc.Result = res
	return ec.marshalOillegal_photo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_regional_violation_register(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_regional_violation_register_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RegionalViolationRegister(rctx, args["distinct_on"].([]model.RegionalViolationRegisterSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionalViolationRegisterOrderBy), args["where"].(*model.RegionalViolationRegisterBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.RegionalViolationRegister)
	fc.Result = res
	return ec.marshalNregional_violation_register2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_regional_violation_register_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_regional_violation_register_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RegionalViolationRegisterAggregate(rctx, args["distinct_on"].([]model.RegionalViolationRegisterSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionalViolationRegisterOrderBy), args["where"].(*model.RegionalViolationRegisterBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterAggregate)
	fc.Result = res
	return ec.marshalNregional_violation_register_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_regional_violation_register_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_regional_violation_register_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RegionalViolationRegisterByPk(rctx, args["id"].(int64), args["regional_violation_register_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegister)
	fc.Result = res
	return ec.marshalOregional_violation_register2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegister(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_user_operation_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_user_operation_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserOperationLog(rctx, args["distinct_on"].([]model.UserOperationLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.UserOperationLogOrderBy), args["where"].(*model.UserOperationLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserOperationLog)
	fc.Result = res
	return ec.marshalNuser_operation_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_user_operation_log_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_user_operation_log_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserOperationLogAggregate(rctx, args["distinct_on"].([]model.UserOperationLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.UserOperationLogOrderBy), args["where"].(*model.UserOperationLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLogAggregate)
	fc.Result = res
	return ec.marshalNuser_operation_log_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_user_operation_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_user_operation_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserOperationLogByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLog)
	fc.Result = res
	return ec.marshalOuser_operation_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_detain_details(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_detain_details_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleDetainDetails(rctx, args["distinct_on"].([]model.VehicleDetainDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDetainDetailsOrderBy), args["where"].(*model.VehicleDetainDetailsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleDetainDetails)
	fc.Result = res
	return ec.marshalNvehicle_detain_details2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_detain_details_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_detain_details_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleDetainDetailsAggregate(rctx, args["distinct_on"].([]model.VehicleDetainDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDetainDetailsOrderBy), args["where"].(*model.VehicleDetainDetailsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetailsAggregate)
	fc.Result = res
	return ec.marshalNvehicle_detain_details_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_detain_details_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_detain_details_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleDetainDetailsByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetails)
	fc.Result = res
	return ec.marshalOvehicle_detain_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_violation_details(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_violation_details_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleViolationDetails(rctx, args["distinct_on"].([]model.VehicleViolationDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationDetailsOrderBy), args["where"].(*model.VehicleViolationDetailsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleViolationDetails)
	fc.Result = res
	return ec.marshalNvehicle_violation_details2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_violation_details_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_violation_details_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleViolationDetailsAggregate(rctx, args["distinct_on"].([]model.VehicleViolationDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationDetailsOrderBy), args["where"].(*model.VehicleViolationDetailsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsAggregate)
	fc.Result = res
	return ec.marshalNvehicle_violation_details_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_violation_details_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_violation_details_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleViolationDetailsByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetails)
	fc.Result = res
	return ec.marshalOvehicle_violation_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_violation_scoring_items(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_violation_scoring_items_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleViolationScoringItems(rctx, args["distinct_on"].([]model.VehicleViolationScoringItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringItemsOrderBy), args["where"].(*model.VehicleViolationScoringItemsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleViolationScoringItems)
	fc.Result = res
	return ec.marshalNvehicle_violation_scoring_items2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_violation_scoring_items_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_violation_scoring_items_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleViolationScoringItemsAggregate(rctx, args["distinct_on"].([]model.VehicleViolationScoringItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringItemsOrderBy), args["where"].(*model.VehicleViolationScoringItemsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsAggregate)
	fc.Result = res
	return ec.marshalNvehicle_violation_scoring_items_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_violation_scoring_items_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_violation_scoring_items_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleViolationScoringItemsByPk(rctx, args["id"].(int64), args["violation_scoring_item_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItems)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_items2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItems(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_violation_scoring_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_violation_scoring_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleViolationScoringRecord(rctx, args["distinct_on"].([]model.VehicleViolationScoringRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringRecordOrderBy), args["where"].(*model.VehicleViolationScoringRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleViolationScoringRecord)
	fc.Result = res
	return ec.marshalNvehicle_violation_scoring_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_violation_scoring_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_violation_scoring_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleViolationScoringRecordAggregate(rctx, args["distinct_on"].([]model.VehicleViolationScoringRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringRecordOrderBy), args["where"].(*model.VehicleViolationScoringRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordAggregate)
	fc.Result = res
	return ec.marshalNvehicle_violation_scoring_record_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_violation_scoring_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_violation_scoring_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleViolationScoringRecordByPk(rctx, args["id"].(int64), args["violation_scoring_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecord)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Subscription_app_enforcement(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_app_enforcement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().AppEnforcement(rctx, args["distinct_on"].([]model.AppEnforcementSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AppEnforcementOrderBy), args["where"].(*model.AppEnforcementBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.AppEnforcement)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNapp_enforcement2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_app_enforcement_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_app_enforcement_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().AppEnforcementAggregate(rctx, args["distinct_on"].([]model.AppEnforcementSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AppEnforcementOrderBy), args["where"].(*model.AppEnforcementBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.AppEnforcementAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNapp_enforcement_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_app_enforcement_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_app_enforcement_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().AppEnforcementByPk(rctx, args["id"].(int64), args["illegal_photo_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.AppEnforcement)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOapp_enforcement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcement(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_VIO_CODEWFDM(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_VIO_CODEWFDM_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VioCodewfdm(rctx, args["distinct_on"].([]model.VioCodewfdmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VioCodewfdmOrderBy), args["where"].(*model.VioCodewfdmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.VioCodewfdm)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNVIO_CODEWFDM2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_VIO_CODEWFDM_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_VIO_CODEWFDM_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VioCodewfdmAggregate(rctx, args["distinct_on"].([]model.VioCodewfdmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VioCodewfdmOrderBy), args["where"].(*model.VioCodewfdmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VioCodewfdmAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNVIO_CODEWFDM_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_dispute_violation_record(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_dispute_violation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DisputeViolationRecord(rctx, args["distinct_on"].([]model.DisputeViolationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordOrderBy), args["where"].(*model.DisputeViolationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.DisputeViolationRecord)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdispute_violation_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_dispute_violation_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_dispute_violation_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DisputeViolationRecordAggregate(rctx, args["distinct_on"].([]model.DisputeViolationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordOrderBy), args["where"].(*model.DisputeViolationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DisputeViolationRecordAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdispute_violation_record_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_dispute_violation_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_dispute_violation_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DisputeViolationRecordByPk(rctx, args["dispute_violation_id"].(string), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DisputeViolationRecord)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOdispute_violation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecord(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_dispute_violation_record_log(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_dispute_violation_record_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DisputeViolationRecordLog(rctx, args["distinct_on"].([]model.DisputeViolationRecordLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordLogOrderBy), args["where"].(*model.DisputeViolationRecordLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.DisputeViolationRecordLog)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdispute_violation_record_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_dispute_violation_record_log_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_dispute_violation_record_log_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DisputeViolationRecordLogAggregate(rctx, args["distinct_on"].([]model.DisputeViolationRecordLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordLogOrderBy), args["where"].(*model.DisputeViolationRecordLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DisputeViolationRecordLogAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdispute_violation_record_log_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_dispute_violation_record_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_dispute_violation_record_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DisputeViolationRecordLogByPk(rctx, args["dispute_violation_log_id"].(string), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DisputeViolationRecordLog)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOdispute_violation_record_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLog(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_driver_peccancy_check(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_driver_peccancy_check_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DriverPeccancyCheck(rctx, args["distinct_on"].([]model.DriverPeccancyCheckSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverPeccancyCheckOrderBy), args["where"].(*model.DriverPeccancyCheckBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.DriverPeccancyCheck)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdriver_peccancy_check2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_driver_peccancy_check_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_driver_peccancy_check_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DriverPeccancyCheckAggregate(rctx, args["distinct_on"].([]model.DriverPeccancyCheckSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverPeccancyCheckOrderBy), args["where"].(*model.DriverPeccancyCheckBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DriverPeccancyCheckAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdriver_peccancy_check_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_driver_peccancy_check_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_driver_peccancy_check_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DriverPeccancyCheckByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DriverPeccancyCheck)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOdriver_peccancy_check2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheck(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_enterprise_deduction_items(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_enterprise_deduction_items_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().EnterpriseDeductionItems(rctx, args["distinct_on"].([]model.EnterpriseDeductionItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseDeductionItemsOrderBy), args["where"].(*model.EnterpriseDeductionItemsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.EnterpriseDeductionItems)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNenterprise_deduction_items2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_enterprise_deduction_items_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_enterprise_deduction_items_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().EnterpriseDeductionItemsAggregate(rctx, args["distinct_on"].([]model.EnterpriseDeductionItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseDeductionItemsOrderBy), args["where"].(*model.EnterpriseDeductionItemsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.EnterpriseDeductionItemsAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNenterprise_deduction_items_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_enterprise_deduction_items_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_enterprise_deduction_items_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().EnterpriseDeductionItemsByPk(rctx, args["enterprise_deduction_item_id"].(string), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.EnterpriseDeductionItems)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOenterprise_deduction_items2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItems(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_enterprise_deduction_operation_record(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_enterprise_deduction_operation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().EnterpriseDeductionOperationRecord(rctx, args["distinct_on"].([]model.EnterpriseDeductionOperationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseDeductionOperationRecordOrderBy), args["where"].(*model.EnterpriseDeductionOperationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.EnterpriseDeductionOperationRecord)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNenterprise_deduction_operation_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_enterprise_deduction_operation_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_enterprise_deduction_operation_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().EnterpriseDeductionOperationRecordAggregate(rctx, args["distinct_on"].([]model.EnterpriseDeductionOperationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseDeductionOperationRecordOrderBy), args["where"].(*model.EnterpriseDeductionOperationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.EnterpriseDeductionOperationRecordAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNenterprise_deduction_operation_record_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_enterprise_deduction_operation_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_enterprise_deduction_operation_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().EnterpriseDeductionOperationRecordByPk(rctx, args["enterprise_duduction_operation_id"].(string), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.EnterpriseDeductionOperationRecord)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOenterprise_deduction_operation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecord(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_illegal_photo(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_illegal_photo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().IllegalPhoto(rctx, args["distinct_on"].([]model.IllegalPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.IllegalPhotoOrderBy), args["where"].(*model.IllegalPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.IllegalPhoto)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNillegal_photo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_illegal_photo_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_illegal_photo_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().IllegalPhotoAggregate(rctx, args["distinct_on"].([]model.IllegalPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.IllegalPhotoOrderBy), args["where"].(*model.IllegalPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.IllegalPhotoAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNillegal_photo_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_illegal_photo_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_illegal_photo_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().IllegalPhotoByPk(rctx, args["id"].(int64), args["illegal_photo_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.IllegalPhoto)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOillegal_photo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhoto(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_regional_violation_register(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_regional_violation_register_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().RegionalViolationRegister(rctx, args["distinct_on"].([]model.RegionalViolationRegisterSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionalViolationRegisterOrderBy), args["where"].(*model.RegionalViolationRegisterBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.RegionalViolationRegister)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNregional_violation_register2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_regional_violation_register_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_regional_violation_register_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().RegionalViolationRegisterAggregate(rctx, args["distinct_on"].([]model.RegionalViolationRegisterSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionalViolationRegisterOrderBy), args["where"].(*model.RegionalViolationRegisterBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.RegionalViolationRegisterAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNregional_violation_register_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_regional_violation_register_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_regional_violation_register_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().RegionalViolationRegisterByPk(rctx, args["id"].(int64), args["regional_violation_register_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.RegionalViolationRegister)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOregional_violation_register2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegister(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_user_operation_log(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_user_operation_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().UserOperationLog(rctx, args["distinct_on"].([]model.UserOperationLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.UserOperationLogOrderBy), args["where"].(*model.UserOperationLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.UserOperationLog)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNuser_operation_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_user_operation_log_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_user_operation_log_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().UserOperationLogAggregate(rctx, args["distinct_on"].([]model.UserOperationLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.UserOperationLogOrderBy), args["where"].(*model.UserOperationLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.UserOperationLogAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNuser_operation_log_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_user_operation_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_user_operation_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().UserOperationLogByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.UserOperationLog)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOuser_operation_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLog(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_detain_details(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_detain_details_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleDetainDetails(rctx, args["distinct_on"].([]model.VehicleDetainDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDetainDetailsOrderBy), args["where"].(*model.VehicleDetainDetailsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.VehicleDetainDetails)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_detain_details2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_detain_details_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_detain_details_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleDetainDetailsAggregate(rctx, args["distinct_on"].([]model.VehicleDetainDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDetainDetailsOrderBy), args["where"].(*model.VehicleDetainDetailsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleDetainDetailsAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_detain_details_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_detain_details_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_detain_details_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleDetainDetailsByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleDetainDetails)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOvehicle_detain_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetails(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_violation_details(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_violation_details_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleViolationDetails(rctx, args["distinct_on"].([]model.VehicleViolationDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationDetailsOrderBy), args["where"].(*model.VehicleViolationDetailsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.VehicleViolationDetails)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_violation_details2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_violation_details_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_violation_details_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleViolationDetailsAggregate(rctx, args["distinct_on"].([]model.VehicleViolationDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationDetailsOrderBy), args["where"].(*model.VehicleViolationDetailsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleViolationDetailsAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_violation_details_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_violation_details_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_violation_details_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleViolationDetailsByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleViolationDetails)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOvehicle_violation_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetails(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_violation_scoring_items(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_violation_scoring_items_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleViolationScoringItems(rctx, args["distinct_on"].([]model.VehicleViolationScoringItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringItemsOrderBy), args["where"].(*model.VehicleViolationScoringItemsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.VehicleViolationScoringItems)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_violation_scoring_items2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_violation_scoring_items_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_violation_scoring_items_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleViolationScoringItemsAggregate(rctx, args["distinct_on"].([]model.VehicleViolationScoringItemsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringItemsOrderBy), args["where"].(*model.VehicleViolationScoringItemsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleViolationScoringItemsAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_violation_scoring_items_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_violation_scoring_items_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_violation_scoring_items_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleViolationScoringItemsByPk(rctx, args["id"].(int64), args["violation_scoring_item_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleViolationScoringItems)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOvehicle_violation_scoring_items2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItems(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_violation_scoring_record(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_violation_scoring_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleViolationScoringRecord(rctx, args["distinct_on"].([]model.VehicleViolationScoringRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringRecordOrderBy), args["where"].(*model.VehicleViolationScoringRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.VehicleViolationScoringRecord)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_violation_scoring_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_violation_scoring_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_violation_scoring_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleViolationScoringRecordAggregate(rctx, args["distinct_on"].([]model.VehicleViolationScoringRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleViolationScoringRecordOrderBy), args["where"].(*model.VehicleViolationScoringRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleViolationScoringRecordAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_violation_scoring_record_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_violation_scoring_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_violation_scoring_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleViolationScoringRecordByPk(rctx, args["id"].(int64), args["violation_scoring_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleViolationScoringRecord)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOvehicle_violation_scoring_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecord(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _VIO_CODEWFDM_FKJE_MAX(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_FKJE_MIN(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_WFJFS(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_WFMS(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_WFXW(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfxw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_XH(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Xh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmAggregateFields)
	fc.Result = res
	return ec.marshalOVIO_CODEWFDM_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VioCodewfdm)
	fc.Result = res
	return ec.marshalNVIO_CODEWFDM2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmAvgFields)
	fc.Result = res
	return ec.marshalOVIO_CODEWFDM_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_VIO_CODEWFDM_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmMaxFields)
	fc.Result = res
	return ec.marshalOVIO_CODEWFDM_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmMinFields)
	fc.Result = res
	return ec.marshalOVIO_CODEWFDM_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmStddevFields)
	fc.Result = res
	return ec.marshalOVIO_CODEWFDM_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmStddevPopFields)
	fc.Result = res
	return ec.marshalOVIO_CODEWFDM_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmStddevSampFields)
	fc.Result = res
	return ec.marshalOVIO_CODEWFDM_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmSumFields)
	fc.Result = res
	return ec.marshalOVIO_CODEWFDM_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmVarPopFields)
	fc.Result = res
	return ec.marshalOVIO_CODEWFDM_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmVarSampFields)
	fc.Result = res
	return ec.marshalOVIO_CODEWFDM_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VioCodewfdmVarianceFields)
	fc.Result = res
	return ec.marshalOVIO_CODEWFDM_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_avg_fields_FKJE_MAX(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_avg_fields_FKJE_MIN(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_avg_fields_WFJFS(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_max_fields_FKJE_MAX(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_max_fields_FKJE_MIN(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_max_fields_WFJFS(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_max_fields_WFMS(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_max_fields_WFXW(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfxw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_max_fields_XH(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Xh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_min_fields_FKJE_MAX(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_min_fields_FKJE_MIN(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_min_fields_WFJFS(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_min_fields_WFMS(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_min_fields_WFXW(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfxw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_min_fields_XH(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Xh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VioCodewfdm)
	fc.Result = res
	return ec.marshalNVIO_CODEWFDM2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_stddev_fields_FKJE_MAX(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_stddev_fields_FKJE_MIN(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_stddev_fields_WFJFS(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_stddev_pop_fields_FKJE_MAX(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_stddev_pop_fields_FKJE_MIN(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_stddev_pop_fields_WFJFS(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_stddev_samp_fields_FKJE_MAX(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_stddev_samp_fields_FKJE_MIN(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_stddev_samp_fields_WFJFS(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_sum_fields_FKJE_MAX(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_sum_fields_FKJE_MIN(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_sum_fields_WFJFS(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_var_pop_fields_FKJE_MAX(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_var_pop_fields_FKJE_MIN(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_var_pop_fields_WFJFS(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_var_samp_fields_FKJE_MAX(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_var_samp_fields_FKJE_MIN(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_var_samp_fields_WFJFS(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_variance_fields_FKJE_MAX(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_variance_fields_FKJE_MIN(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FkjeMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VIO_CODEWFDM_variance_fields_WFJFS(ctx context.Context, field graphql.CollectedField, obj *model.VioCodewfdmVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VIO_CODEWFDM_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wfjfs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOpoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_created_at(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_created_by(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_edit_text(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EditText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_enterprise_type(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_illegal_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_location_description(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_operation_user(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementAggregateFields)
	fc.Result = res
	return ec.marshalOapp_enforcement_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AppEnforcement)
	fc.Result = res
	return ec.marshalNapp_enforcement2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementAvgFields)
	fc.Result = res
	return ec.marshalOapp_enforcement_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_app_enforcement_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementMaxFields)
	fc.Result = res
	return ec.marshalOapp_enforcement_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementMinFields)
	fc.Result = res
	return ec.marshalOapp_enforcement_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementStddevFields)
	fc.Result = res
	return ec.marshalOapp_enforcement_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementStddevPopFields)
	fc.Result = res
	return ec.marshalOapp_enforcement_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementStddevSampFields)
	fc.Result = res
	return ec.marshalOapp_enforcement_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementSumFields)
	fc.Result = res
	return ec.marshalOapp_enforcement_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementVarPopFields)
	fc.Result = res
	return ec.marshalOapp_enforcement_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementVarSampFields)
	fc.Result = res
	return ec.marshalOapp_enforcement_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppEnforcementVarianceFields)
	fc.Result = res
	return ec.marshalOapp_enforcement_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_avg_fields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_max_fields_edit_text(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EditText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_max_fields_enterprise_type(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_max_fields_illegal_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_max_fields_location_description(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_max_fields_operation_user(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_max_fields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_max_fields_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_min_fields_edit_text(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EditText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_min_fields_enterprise_type(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_min_fields_illegal_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_min_fields_location_description(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_min_fields_operation_user(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_min_fields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_min_fields_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AppEnforcement)
	fc.Result = res
	return ec.marshalNapp_enforcement2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_stddev_fields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_stddev_pop_fields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_stddev_samp_fields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_sum_fields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_var_pop_fields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_var_samp_fields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _app_enforcement_variance_fields_picket_status(ctx context.Context, field graphql.CollectedField, obj *model.AppEnforcementVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "app_enforcement_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicketStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_agent_id_number(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgentIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_business_license(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_contact_address(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_dispute_violation_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisputeViolationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_driver_license(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_driving_license(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_driving_log(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_id_card(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_labor_contract(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LaborContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_legal_person_id_number(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalPersonIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_organization_code(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_other_evidence(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherEvidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalO_text2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_pic_evidence(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicEvidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_statement(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Statement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_vehicle_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_witness(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Witness, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_written_application_materials(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WrittenApplicationMaterials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordAggregateFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DisputeViolationRecord)
	fc.Result = res
	return ec.marshalNdispute_violation_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordAvgFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_dispute_violation_record_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordMaxFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordMinFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordStddevFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordStddevPopFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordStddevSampFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordSumFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordVarPopFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordVarSampFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordVarianceFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_avg_fields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_approver(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Approver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_dispute_violation_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisputeViolationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_dispute_violation_log_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisputeViolationLogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_review_action_name(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewActionName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_review_result(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_review_time(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_reviewer(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reviewer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogAggregateFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_log_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DisputeViolationRecordLog)
	fc.Result = res
	return ec.marshalNdispute_violation_record_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogAvgFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_log_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_dispute_violation_record_log_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogMaxFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_log_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogMinFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_log_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogStddevFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_log_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogStddevPopFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_log_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogStddevSampFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_log_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogSumFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_log_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogVarPopFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_log_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogVarSampFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_log_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogVarianceFields)
	fc.Result = res
	return ec.marshalOdispute_violation_record_log_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_max_fields_approver(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Approver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_max_fields_dispute_violation_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisputeViolationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_max_fields_dispute_violation_log_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisputeViolationLogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_max_fields_review_action_name(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewActionName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_max_fields_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_max_fields_review_result(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_max_fields_review_time(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_max_fields_reviewer(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reviewer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_max_fields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_min_fields_approver(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Approver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_min_fields_dispute_violation_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisputeViolationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_min_fields_dispute_violation_log_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisputeViolationLogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_min_fields_review_action_name(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewActionName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_min_fields_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_min_fields_review_result(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_min_fields_review_time(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_min_fields_reviewer(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reviewer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_min_fields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DisputeViolationRecordLog)
	fc.Result = res
	return ec.marshalNdispute_violation_record_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_log_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_agent_id_number(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgentIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_business_license(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_contact_address(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_dispute_violation_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisputeViolationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_driver_license(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_driving_license(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_driving_log(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_id_card(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_labor_contract(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LaborContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_legal_person_id_number(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalPersonIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_organization_code(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_pic_evidence(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicEvidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_statement(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Statement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_vehicle_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_witness(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Witness, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_max_fields_written_application_materials(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WrittenApplicationMaterials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_agent_id_number(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgentIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_business_license(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_contact_address(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_dispute_violation_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisputeViolationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_driver_license(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_driving_license(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_driving_log(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_id_card(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_labor_contract(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LaborContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_legal_person_id_number(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalPersonIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_organization_code(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_pic_evidence(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicEvidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_statement(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Statement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_vehicle_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_witness(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Witness, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_min_fields_written_application_materials(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WrittenApplicationMaterials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DisputeViolationRecord)
	fc.Result = res
	return ec.marshalNdispute_violation_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_stddev_fields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_stddev_pop_fields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_stddev_samp_fields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_sum_fields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_var_pop_fields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_var_samp_fields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_variance_fields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dispute_violation_record_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dispute_violation_record_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheck) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckAggregateFields)
	fc.Result = res
	return ec.marshalOdriver_peccancy_check_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DriverPeccancyCheck)
	fc.Result = res
	return ec.marshalNdriver_peccancy_check2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckAvgFields)
	fc.Result = res
	return ec.marshalOdriver_peccancy_check_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_driver_peccancy_check_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckMaxFields)
	fc.Result = res
	return ec.marshalOdriver_peccancy_check_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckMinFields)
	fc.Result = res
	return ec.marshalOdriver_peccancy_check_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckStddevFields)
	fc.Result = res
	return ec.marshalOdriver_peccancy_check_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckStddevPopFields)
	fc.Result = res
	return ec.marshalOdriver_peccancy_check_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckStddevSampFields)
	fc.Result = res
	return ec.marshalOdriver_peccancy_check_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckSumFields)
	fc.Result = res
	return ec.marshalOdriver_peccancy_check_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckVarPopFields)
	fc.Result = res
	return ec.marshalOdriver_peccancy_check_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckVarSampFields)
	fc.Result = res
	return ec.marshalOdriver_peccancy_check_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverPeccancyCheckVarianceFields)
	fc.Result = res
	return ec.marshalOdriver_peccancy_check_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_max_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_min_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DriverPeccancyCheck)
	fc.Result = res
	return ec.marshalNdriver_peccancy_check2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_peccancy_check_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverPeccancyCheckVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_peccancy_check_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_created_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_created_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_deduction_item_description(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionItemDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_enterprise_deduction_item_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseDeductionItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItemsAggregateFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_items_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.EnterpriseDeductionItems)
	fc.Result = res
	return ec.marshalNenterprise_deduction_items2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItemsAvgFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_items_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_enterprise_deduction_items_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItemsMaxFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_items_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItemsMinFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_items_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItemsStddevFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_items_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItemsStddevPopFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_items_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItemsStddevSampFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_items_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItemsSumFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_items_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItemsVarPopFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_items_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItemsVarSampFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_items_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionItemsVarianceFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_items_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_avg_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_avg_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_max_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_max_fields_deduction_item_description(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionItemDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_max_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_max_fields_enterprise_deduction_item_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseDeductionItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_min_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_min_fields_deduction_item_description(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionItemDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_min_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_min_fields_enterprise_deduction_item_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseDeductionItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.EnterpriseDeductionItems)
	fc.Result = res
	return ec.marshalNenterprise_deduction_items2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_stddev_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_stddev_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_stddev_pop_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_stddev_pop_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_stddev_samp_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_stddev_samp_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_sum_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_sum_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_var_pop_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_var_pop_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_var_samp_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_var_samp_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_variance_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_variance_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_items_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionItemsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_items_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_created_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_created_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_enterprise_deduction_item_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseDeductionItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_enterprise_duduction_operation_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseDuductionOperationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_remarks(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecordAggregateFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_operation_record_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.EnterpriseDeductionOperationRecord)
	fc.Result = res
	return ec.marshalNenterprise_deduction_operation_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecordAvgFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_operation_record_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_enterprise_deduction_operation_record_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecordMaxFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_operation_record_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecordMinFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_operation_record_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecordStddevFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_operation_record_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecordStddevPopFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_operation_record_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecordStddevSampFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_operation_record_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecordSumFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_operation_record_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecordVarPopFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_operation_record_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecordVarSampFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_operation_record_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseDeductionOperationRecordVarianceFields)
	fc.Result = res
	return ec.marshalOenterprise_deduction_operation_record_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_avg_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_max_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_max_fields_enterprise_deduction_item_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseDeductionItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_max_fields_enterprise_duduction_operation_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseDuductionOperationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_min_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_min_fields_enterprise_deduction_item_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseDeductionItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_min_fields_enterprise_duduction_operation_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseDuductionOperationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.EnterpriseDeductionOperationRecord)
	fc.Result = res
	return ec.marshalNenterprise_deduction_operation_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_stddev_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_stddev_pop_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_stddev_samp_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_sum_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_var_pop_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_var_samp_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_variance_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_deduction_operation_record_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDeductionOperationRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_deduction_operation_record_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_created_at(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_created_by(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_illegal_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_is_synchronized(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSynchronized, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_picture_address(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_picture_name(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoAggregateFields)
	fc.Result = res
	return ec.marshalOillegal_photo_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.IllegalPhoto)
	fc.Result = res
	return ec.marshalNillegal_photo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoAvgFields)
	fc.Result = res
	return ec.marshalOillegal_photo_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_illegal_photo_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoMaxFields)
	fc.Result = res
	return ec.marshalOillegal_photo_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoMinFields)
	fc.Result = res
	return ec.marshalOillegal_photo_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoStddevFields)
	fc.Result = res
	return ec.marshalOillegal_photo_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoStddevPopFields)
	fc.Result = res
	return ec.marshalOillegal_photo_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoStddevSampFields)
	fc.Result = res
	return ec.marshalOillegal_photo_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoSumFields)
	fc.Result = res
	return ec.marshalOillegal_photo_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoVarPopFields)
	fc.Result = res
	return ec.marshalOillegal_photo_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoVarSampFields)
	fc.Result = res
	return ec.marshalOillegal_photo_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IllegalPhotoVarianceFields)
	fc.Result = res
	return ec.marshalOillegal_photo_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_max_fields_illegal_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_max_fields_picture_address(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_max_fields_picture_name(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_min_fields_illegal_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_min_fields_picture_address(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_min_fields_picture_name(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.IllegalPhoto)
	fc.Result = res
	return ec.marshalNillegal_photo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _illegal_photo_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.IllegalPhotoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "illegal_photo_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_created_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_created_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_is_register(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRegister, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_operator(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_processing_agency(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_regional_violation_register_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionalViolationRegisterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_register_time(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegister) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterAggregateFields)
	fc.Result = res
	return ec.marshalOregional_violation_register_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.RegionalViolationRegister)
	fc.Result = res
	return ec.marshalNregional_violation_register2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterAvgFields)
	fc.Result = res
	return ec.marshalOregional_violation_register_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_regional_violation_register_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterMaxFields)
	fc.Result = res
	return ec.marshalOregional_violation_register_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterMinFields)
	fc.Result = res
	return ec.marshalOregional_violation_register_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterStddevFields)
	fc.Result = res
	return ec.marshalOregional_violation_register_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterStddevPopFields)
	fc.Result = res
	return ec.marshalOregional_violation_register_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterStddevSampFields)
	fc.Result = res
	return ec.marshalOregional_violation_register_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterSumFields)
	fc.Result = res
	return ec.marshalOregional_violation_register_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterVarPopFields)
	fc.Result = res
	return ec.marshalOregional_violation_register_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterVarSampFields)
	fc.Result = res
	return ec.marshalOregional_violation_register_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionalViolationRegisterVarianceFields)
	fc.Result = res
	return ec.marshalOregional_violation_register_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_avg_fields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_avg_fields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_max_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_max_fields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_max_fields_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_max_fields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_max_fields_operator(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_max_fields_processing_agency(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_max_fields_regional_violation_register_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionalViolationRegisterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_max_fields_register_time(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_max_fields_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_min_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_min_fields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_min_fields_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_min_fields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_min_fields_operator(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_min_fields_processing_agency(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_min_fields_regional_violation_register_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionalViolationRegisterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_min_fields_register_time(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_min_fields_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.RegionalViolationRegister)
	fc.Result = res
	return ec.marshalNregional_violation_register2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_stddev_fields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_stddev_fields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_stddev_pop_fields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_stddev_pop_fields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_stddev_samp_fields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_stddev_samp_fields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_sum_fields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_sum_fields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_var_pop_fields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_var_pop_fields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_var_samp_fields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_var_samp_fields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_variance_fields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _regional_violation_register_variance_fields_illegal_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionalViolationRegisterVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regional_violation_register_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_created_by(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_id(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_user_ip(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLogAggregateFields)
	fc.Result = res
	return ec.marshalOuser_operation_log_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserOperationLog)
	fc.Result = res
	return ec.marshalNuser_operation_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLogAvgFields)
	fc.Result = res
	return ec.marshalOuser_operation_log_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_user_operation_log_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLogMaxFields)
	fc.Result = res
	return ec.marshalOuser_operation_log_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLogMinFields)
	fc.Result = res
	return ec.marshalOuser_operation_log_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLogStddevFields)
	fc.Result = res
	return ec.marshalOuser_operation_log_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLogStddevPopFields)
	fc.Result = res
	return ec.marshalOuser_operation_log_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLogStddevSampFields)
	fc.Result = res
	return ec.marshalOuser_operation_log_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLogSumFields)
	fc.Result = res
	return ec.marshalOuser_operation_log_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLogVarPopFields)
	fc.Result = res
	return ec.marshalOuser_operation_log_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLogVarSampFields)
	fc.Result = res
	return ec.marshalOuser_operation_log_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOperationLogVarianceFields)
	fc.Result = res
	return ec.marshalOuser_operation_log_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_max_fields_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_max_fields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_max_fields_user_ip(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_min_fields_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_min_fields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_min_fields_user_ip(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserOperationLog)
	fc.Result = res
	return ec.marshalNuser_operation_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _user_operation_log_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.UserOperationLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user_operation_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_bayonet_picture(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BayonetPicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_is_bayonet(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBayonet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_is_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_is_illegal(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsIllegal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_is_satellite_judgment(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSatelliteJudgment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_record_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_register_region(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterRegion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_register_user(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_update_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_vehicle_detain_picture(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDetainPicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_vehicle_detain_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDetainStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_vehicle_detain_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDetainTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_vehicle_release_picture(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleReleasePicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_vehicle_release_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleReleaseTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetailsAggregateFields)
	fc.Result = res
	return ec.marshalOvehicle_detain_details_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleDetainDetails)
	fc.Result = res
	return ec.marshalNvehicle_detain_details2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetailsAvgFields)
	fc.Result = res
	return ec.marshalOvehicle_detain_details_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_vehicle_detain_details_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetailsMaxFields)
	fc.Result = res
	return ec.marshalOvehicle_detain_details_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetailsMinFields)
	fc.Result = res
	return ec.marshalOvehicle_detain_details_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetailsStddevFields)
	fc.Result = res
	return ec.marshalOvehicle_detain_details_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetailsStddevPopFields)
	fc.Result = res
	return ec.marshalOvehicle_detain_details_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetailsStddevSampFields)
	fc.Result = res
	return ec.marshalOvehicle_detain_details_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetailsSumFields)
	fc.Result = res
	return ec.marshalOvehicle_detain_details_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetailsVarPopFields)
	fc.Result = res
	return ec.marshalOvehicle_detain_details_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetailsVarSampFields)
	fc.Result = res
	return ec.marshalOvehicle_detain_details_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDetainDetailsVarianceFields)
	fc.Result = res
	return ec.marshalOvehicle_detain_details_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_avg_fields_vehicle_detain_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDetainStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_max_fields_bayonet_picture(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BayonetPicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_max_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_max_fields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_max_fields_record_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_max_fields_register_region(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterRegion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_max_fields_register_user(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_max_fields_update_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_max_fields_vehicle_detain_picture(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDetainPicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_max_fields_vehicle_detain_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDetainStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_max_fields_vehicle_detain_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDetainTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_max_fields_vehicle_release_picture(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleReleasePicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_max_fields_vehicle_release_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleReleaseTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_min_fields_bayonet_picture(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BayonetPicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_min_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_min_fields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_min_fields_record_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_min_fields_register_region(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterRegion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_min_fields_register_user(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_min_fields_update_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_min_fields_vehicle_detain_picture(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDetainPicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_min_fields_vehicle_detain_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDetainStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_min_fields_vehicle_detain_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDetainTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_min_fields_vehicle_release_picture(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleReleasePicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_min_fields_vehicle_release_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleReleaseTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleDetainDetails)
	fc.Result = res
	return ec.marshalNvehicle_detain_details2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_stddev_fields_vehicle_detain_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDetainStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_stddev_pop_fields_vehicle_detain_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDetainStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_stddev_samp_fields_vehicle_detain_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDetainStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_sum_fields_vehicle_detain_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDetainStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_var_pop_fields_vehicle_detain_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDetainStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_var_samp_fields_vehicle_detain_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDetainStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_detain_details_variance_fields_vehicle_detain_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDetainDetailsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_detain_details_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDetainStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_decision_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DecisionNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_discovery_agency(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscoveryAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_handle_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandleAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_handle_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandleBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_illegal_location(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_illegal_photo(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_is_handle(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsHandle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_is_notice_driver(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNoticeDriver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_is_send(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_measured_value(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MeasuredValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_notice_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoticeTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_party_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_standard_value(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StandardValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_vehicle_information(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleInformation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsAggregateFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_details_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleViolationDetails)
	fc.Result = res
	return ec.marshalNvehicle_violation_details2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsAvgFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_details_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_vehicle_violation_details_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsMaxFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_details_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsMinFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_details_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsStddevFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_details_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsStddevPopFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_details_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsStddevSampFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_details_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsSumFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_details_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsVarPopFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_details_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsVarSampFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_details_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationDetailsVarianceFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_details_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_avg_fields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_avg_fields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_avg_fields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_decision_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DecisionNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_discovery_agency(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscoveryAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_handle_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandleAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_handle_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandleBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_illegal_location(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_illegal_photo(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_measured_value(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MeasuredValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_notice_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoticeTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_party_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_standard_value(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StandardValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_vehicle_information(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleInformation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_max_fields_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_decision_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DecisionNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_discovery_agency(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscoveryAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_handle_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandleAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_handle_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandleBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_illegal_code(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_illegal_location(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_illegal_photo(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_illegal_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_measured_value(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MeasuredValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_notice_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoticeTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_party_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_standard_value(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StandardValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_vehicle_information(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleInformation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_min_fields_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleViolationDetails)
	fc.Result = res
	return ec.marshalNvehicle_violation_details2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_stddev_fields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_stddev_fields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_stddev_fields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_stddev_pop_fields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_stddev_pop_fields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_stddev_pop_fields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_stddev_samp_fields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_stddev_samp_fields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_stddev_samp_fields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_sum_fields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_sum_fields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_sum_fields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_var_pop_fields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_var_pop_fields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_var_pop_fields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_var_samp_fields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_var_samp_fields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_var_samp_fields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_variance_fields_illegal_handling_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalHandlingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_variance_fields_information_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_details_variance_fields_payment_mark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationDetailsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_details_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_deduction_item_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionItemDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_violation_scoring_item_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationScoringItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsAggregateFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_items_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleViolationScoringItems)
	fc.Result = res
	return ec.marshalNvehicle_violation_scoring_items2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsAvgFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_items_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_vehicle_violation_scoring_items_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsMaxFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_items_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsMinFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_items_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsStddevFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_items_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsStddevPopFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_items_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsStddevSampFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_items_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsSumFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_items_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsVarPopFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_items_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsVarSampFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_items_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringItemsVarianceFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_items_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_avg_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_max_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_max_fields_deduction_item_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionItemDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_max_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_max_fields_violation_scoring_item_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationScoringItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_min_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_min_fields_deduction_item_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionItemDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_min_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_min_fields_violation_scoring_item_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationScoringItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleViolationScoringItems)
	fc.Result = res
	return ec.marshalNvehicle_violation_scoring_items2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_stddev_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_stddev_pop_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_stddev_samp_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_sum_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_var_pop_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_var_samp_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_variance_fields_deduction_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeductionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_items_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringItemsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_items_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_violation_scoring_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationScoringID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_violation_scoring_item_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationScoringItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordAggregateFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_record_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleViolationScoringRecord)
	fc.Result = res
	return ec.marshalNvehicle_violation_scoring_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordAvgFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_record_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_vehicle_violation_scoring_record_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordMaxFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_record_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordMinFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_record_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordStddevFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_record_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordStddevPopFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_record_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordStddevSampFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_record_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordSumFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_record_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordVarPopFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_record_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordVarSampFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_record_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleViolationScoringRecordVarianceFields)
	fc.Result = res
	return ec.marshalOvehicle_violation_scoring_record_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_avg_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_max_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_max_fields_violation_scoring_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationScoringID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_max_fields_violation_scoring_item_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationScoringItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_min_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_min_fields_violation_scoring_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationScoringID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_min_fields_violation_scoring_item_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationScoringItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleViolationScoringRecord)
	fc.Result = res
	return ec.marshalNvehicle_violation_scoring_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_stddev_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_stddev_pop_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_stddev_samp_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_sum_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_var_pop_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_var_samp_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_variance_fields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_violation_scoring_record_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleViolationScoringRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_violation_scoring_record_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBoolean_comparison_exp(ctx context.Context, obj interface{}) (model1.BooleanComparisonExp, error) {
	var it model1.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInt_comparison_exp(ctx context.Context, obj interface{}) (model1.IntComparisonExp, error) {
	var it model1.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputString_comparison_exp(ctx context.Context, obj interface{}) (model1.StringComparisonExp, error) {
	var it model1.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVIO_CODEWFDM_aggregate_order_by(ctx context.Context, obj interface{}) (model.VioCodewfdmAggregateOrderBy, error) {
	var it model.VioCodewfdmAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOVIO_CODEWFDM_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOVIO_CODEWFDM_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOVIO_CODEWFDM_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOVIO_CODEWFDM_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOVIO_CODEWFDM_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOVIO_CODEWFDM_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOVIO_CODEWFDM_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOVIO_CODEWFDM_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOVIO_CODEWFDM_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOVIO_CODEWFDM_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVIO_CODEWFDM_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.VioCodewfdmArrRelInsertInput, error) {
	var it model.VioCodewfdmArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNVIO_CODEWFDM_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVIO_CODEWFDM_avg_order_by(ctx context.Context, obj interface{}) (model.VioCodewfdmAvgOrderBy, error) {
	var it model.VioCodewfdmAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "FKJE_MAX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MAX"))
			it.FkjeMax, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "FKJE_MIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MIN"))
			it.FkjeMin, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFJFS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFJFS"))
			it.Wfjfs, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVIO_CODEWFDM_bool_exp(ctx context.Context, obj interface{}) (model.VioCodewfdmBoolExp, error) {
	var it model.VioCodewfdmBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "FKJE_MAX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MAX"))
			it.FkjeMax, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "FKJE_MIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MIN"))
			it.FkjeMin, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFJFS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFJFS"))
			it.Wfjfs, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFMS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFMS"))
			it.Wfms, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFXW":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFXW"))
			it.Wfxw, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "XH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("XH"))
			it.Xh, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVIO_CODEWFDM_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVIO_CODEWFDM_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVIO_CODEWFDM_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVIO_CODEWFDM_inc_input(ctx context.Context, obj interface{}) (model.VioCodewfdmIncInput, error) {
	var it model.VioCodewfdmIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "FKJE_MAX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MAX"))
			it.FkjeMax, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "FKJE_MIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MIN"))
			it.FkjeMin, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFJFS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFJFS"))
			it.Wfjfs, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVIO_CODEWFDM_insert_input(ctx context.Context, obj interface{}) (model.VioCodewfdmInsertInput, error) {
	var it model.VioCodewfdmInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "FKJE_MAX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MAX"))
			it.FkjeMax, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "FKJE_MIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MIN"))
			it.FkjeMin, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFJFS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFJFS"))
			it.Wfjfs, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFMS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFMS"))
			it.Wfms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFXW":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFXW"))
			it.Wfxw, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "XH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("XH"))
			it.Xh, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVIO_CODEWFDM_max_order_by(ctx context.Context, obj interface{}) (model.VioCodewfdmMaxOrderBy, error) {
	var it model.VioCodewfdmMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "FKJE_MAX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MAX"))
			it.FkjeMax, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "FKJE_MIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MIN"))
			it.FkjeMin, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFJFS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFJFS"))
			it.Wfjfs, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFMS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFMS"))
			it.Wfms, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFXW":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFXW"))
			it.Wfxw, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "XH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("XH"))
			it.Xh, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVIO_CODEWFDM_min_order_by(ctx context.Context, obj interface{}) (model.VioCodewfdmMinOrderBy, error) {
	var it model.VioCodewfdmMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "FKJE_MAX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MAX"))
			it.FkjeMax, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "FKJE_MIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MIN"))
			it.FkjeMin, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFJFS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFJFS"))
			it.Wfjfs, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFMS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFMS"))
			it.Wfms, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFXW":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFXW"))
			it.Wfxw, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "XH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("XH"))
			it.Xh, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVIO_CODEWFDM_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.VioCodewfdmObjRelInsertInput, error) {
	var it model.VioCodewfdmObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNVIO_CODEWFDM_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVIO_CODEWFDM_order_by(ctx context.Context, obj interface{}) (model.VioCodewfdmOrderBy, error) {
	var it model.VioCodewfdmOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "FKJE_MAX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MAX"))
			it.FkjeMax, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "FKJE_MIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MIN"))
			it.FkjeMin, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFJFS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFJFS"))
			it.Wfjfs, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFMS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFMS"))
			it.Wfms, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFXW":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFXW"))
			it.Wfxw, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "XH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("XH"))
			it.Xh, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVIO_CODEWFDM_set_input(ctx context.Context, obj interface{}) (model.VioCodewfdmSetInput, error) {
	var it model.VioCodewfdmSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "FKJE_MAX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MAX"))
			it.FkjeMax, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "FKJE_MIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MIN"))
			it.FkjeMin, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFJFS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFJFS"))
			it.Wfjfs, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFMS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFMS"))
			it.Wfms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFXW":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFXW"))
			it.Wfxw, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "XH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("XH"))
			it.Xh, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVIO_CODEWFDM_stddev_order_by(ctx context.Context, obj interface{}) (model.VioCodewfdmStddevOrderBy, error) {
	var it model.VioCodewfdmStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "FKJE_MAX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MAX"))
			it.FkjeMax, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "FKJE_MIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MIN"))
			it.FkjeMin, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFJFS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFJFS"))
			it.Wfjfs, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVIO_CODEWFDM_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.VioCodewfdmStddevPopOrderBy, error) {
	var it model.VioCodewfdmStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "FKJE_MAX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MAX"))
			it.FkjeMax, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "FKJE_MIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MIN"))
			it.FkjeMin, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFJFS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFJFS"))
			it.Wfjfs, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVIO_CODEWFDM_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.VioCodewfdmStddevSampOrderBy, error) {
	var it model.VioCodewfdmStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "FKJE_MAX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MAX"))
			it.FkjeMax, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "FKJE_MIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MIN"))
			it.FkjeMin, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFJFS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFJFS"))
			it.Wfjfs, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVIO_CODEWFDM_sum_order_by(ctx context.Context, obj interface{}) (model.VioCodewfdmSumOrderBy, error) {
	var it model.VioCodewfdmSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "FKJE_MAX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MAX"))
			it.FkjeMax, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "FKJE_MIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MIN"))
			it.FkjeMin, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFJFS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFJFS"))
			it.Wfjfs, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVIO_CODEWFDM_var_pop_order_by(ctx context.Context, obj interface{}) (model.VioCodewfdmVarPopOrderBy, error) {
	var it model.VioCodewfdmVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "FKJE_MAX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MAX"))
			it.FkjeMax, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "FKJE_MIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MIN"))
			it.FkjeMin, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFJFS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFJFS"))
			it.Wfjfs, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVIO_CODEWFDM_var_samp_order_by(ctx context.Context, obj interface{}) (model.VioCodewfdmVarSampOrderBy, error) {
	var it model.VioCodewfdmVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "FKJE_MAX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MAX"))
			it.FkjeMax, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "FKJE_MIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MIN"))
			it.FkjeMin, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFJFS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFJFS"))
			it.Wfjfs, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVIO_CODEWFDM_variance_order_by(ctx context.Context, obj interface{}) (model.VioCodewfdmVarianceOrderBy, error) {
	var it model.VioCodewfdmVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "FKJE_MAX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MAX"))
			it.FkjeMax, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "FKJE_MIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FKJE_MIN"))
			it.FkjeMin, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "WFJFS":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("WFJFS"))
			it.Wfjfs, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInput_jsonb_comparison_exp(ctx context.Context, obj interface{}) (model1.JsonbComparisonExp, error) {
	var it model1.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInput_text_comparison_exp(ctx context.Context, obj interface{}) (model.TextComparisonExp, error) {
	var it model.TextComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalO_text2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalO_text2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_aggregate_order_by(ctx context.Context, obj interface{}) (model.AppEnforcementAggregateOrderBy, error) {
	var it model.AppEnforcementAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOapp_enforcement_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOapp_enforcement_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOapp_enforcement_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOapp_enforcement_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOapp_enforcement_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOapp_enforcement_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOapp_enforcement_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOapp_enforcement_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOapp_enforcement_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOapp_enforcement_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.AppEnforcementArrRelInsertInput, error) {
	var it model.AppEnforcementArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNapp_enforcement_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOapp_enforcement_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_avg_order_by(ctx context.Context, obj interface{}) (model.AppEnforcementAvgOrderBy, error) {
	var it model.AppEnforcementAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_bool_exp(ctx context.Context, obj interface{}) (model.AppEnforcementBoolExp, error) {
	var it model.AppEnforcementBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOapp_enforcement_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOapp_enforcement_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOapp_enforcement_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOpoint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "edit_text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("edit_text"))
			it.EditText, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_type"))
			it.EnterpriseType, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_inc_input(ctx context.Context, obj interface{}) (model.AppEnforcementIncInput, error) {
	var it model.AppEnforcementIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_insert_input(ctx context.Context, obj interface{}) (model.AppEnforcementInsertInput, error) {
	var it model.AppEnforcementInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "edit_text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("edit_text"))
			it.EditText, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_type"))
			it.EnterpriseType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_max_order_by(ctx context.Context, obj interface{}) (model.AppEnforcementMaxOrderBy, error) {
	var it model.AppEnforcementMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "edit_text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("edit_text"))
			it.EditText, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_type"))
			it.EnterpriseType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_min_order_by(ctx context.Context, obj interface{}) (model.AppEnforcementMinOrderBy, error) {
	var it model.AppEnforcementMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "edit_text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("edit_text"))
			it.EditText, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_type"))
			it.EnterpriseType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.AppEnforcementObjRelInsertInput, error) {
	var it model.AppEnforcementObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNapp_enforcement_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOapp_enforcement_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_on_conflict(ctx context.Context, obj interface{}) (model.AppEnforcementOnConflict, error) {
	var it model.AppEnforcementOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNapp_enforcement_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNapp_enforcement_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOapp_enforcement_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_order_by(ctx context.Context, obj interface{}) (model.AppEnforcementOrderBy, error) {
	var it model.AppEnforcementOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "edit_text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("edit_text"))
			it.EditText, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_type"))
			it.EnterpriseType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_pk_columns_input(ctx context.Context, obj interface{}) (model.AppEnforcementPkColumnsInput, error) {
	var it model.AppEnforcementPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_set_input(ctx context.Context, obj interface{}) (model.AppEnforcementSetInput, error) {
	var it model.AppEnforcementSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "edit_text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("edit_text"))
			it.EditText, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_type"))
			it.EnterpriseType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_stddev_order_by(ctx context.Context, obj interface{}) (model.AppEnforcementStddevOrderBy, error) {
	var it model.AppEnforcementStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.AppEnforcementStddevPopOrderBy, error) {
	var it model.AppEnforcementStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.AppEnforcementStddevSampOrderBy, error) {
	var it model.AppEnforcementStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_sum_order_by(ctx context.Context, obj interface{}) (model.AppEnforcementSumOrderBy, error) {
	var it model.AppEnforcementSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_var_pop_order_by(ctx context.Context, obj interface{}) (model.AppEnforcementVarPopOrderBy, error) {
	var it model.AppEnforcementVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_var_samp_order_by(ctx context.Context, obj interface{}) (model.AppEnforcementVarSampOrderBy, error) {
	var it model.AppEnforcementVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputapp_enforcement_variance_order_by(ctx context.Context, obj interface{}) (model.AppEnforcementVarianceOrderBy, error) {
	var it model.AppEnforcementVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picket_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picket_status"))
			it.PicketStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbigint_comparison_exp(ctx context.Context, obj interface{}) (model1.BigintComparisonExp, error) {
	var it model1.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_aggregate_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordAggregateOrderBy, error) {
	var it model.DisputeViolationRecordAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOdispute_violation_record_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOdispute_violation_record_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOdispute_violation_record_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOdispute_violation_record_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOdispute_violation_record_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOdispute_violation_record_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOdispute_violation_record_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOdispute_violation_record_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOdispute_violation_record_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOdispute_violation_record_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.DisputeViolationRecordArrRelInsertInput, error) {
	var it model.DisputeViolationRecordArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdispute_violation_record_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdispute_violation_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_avg_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordAvgOrderBy, error) {
	var it model.DisputeViolationRecordAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_bool_exp(ctx context.Context, obj interface{}) (model.DisputeViolationRecordBoolExp, error) {
	var it model.DisputeViolationRecordBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOdispute_violation_record_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOdispute_violation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOdispute_violation_record_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent_id_number"))
			it.AgentIDNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license"))
			it.BusinessLicense, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license"))
			it.DriverLicense, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license"))
			it.DrivingLicense, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log"))
			it.DrivingLog, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card"))
			it.IDCard, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_person_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_person_id_number"))
			it.LegalPersonIDNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_evidence"))
			it.OtherEvidence, err = ec.unmarshalO_text_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐTextComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "pic_evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pic_evidence"))
			it.PicEvidence, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "statement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statement"))
			it.Statement, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "witness":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("witness"))
			it.Witness, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "written_application_materials":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("written_application_materials"))
			it.WrittenApplicationMaterials, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_inc_input(ctx context.Context, obj interface{}) (model.DisputeViolationRecordIncInput, error) {
	var it model.DisputeViolationRecordIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_insert_input(ctx context.Context, obj interface{}) (model.DisputeViolationRecordInsertInput, error) {
	var it model.DisputeViolationRecordInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "agent_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent_id_number"))
			it.AgentIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license"))
			it.BusinessLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license"))
			it.DriverLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license"))
			it.DrivingLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log"))
			it.DrivingLog, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card"))
			it.IDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_person_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_person_id_number"))
			it.LegalPersonIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_evidence"))
			it.OtherEvidence, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pic_evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pic_evidence"))
			it.PicEvidence, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statement"))
			it.Statement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "witness":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("witness"))
			it.Witness, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "written_application_materials":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("written_application_materials"))
			it.WrittenApplicationMaterials, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_aggregate_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogAggregateOrderBy, error) {
	var it model.DisputeViolationRecordLogAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOdispute_violation_record_log_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOdispute_violation_record_log_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOdispute_violation_record_log_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOdispute_violation_record_log_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOdispute_violation_record_log_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOdispute_violation_record_log_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOdispute_violation_record_log_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOdispute_violation_record_log_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOdispute_violation_record_log_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOdispute_violation_record_log_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogArrRelInsertInput, error) {
	var it model.DisputeViolationRecordLogArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdispute_violation_record_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdispute_violation_record_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_avg_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogAvgOrderBy, error) {
	var it model.DisputeViolationRecordLogAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_bool_exp(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogBoolExp, error) {
	var it model.DisputeViolationRecordLogBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOdispute_violation_record_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOdispute_violation_record_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOdispute_violation_record_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "approver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approver"))
			it.Approver, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_log_id"))
			it.DisputeViolationLogID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_action_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_action_name"))
			it.ReviewActionName, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_opinion"))
			it.ReviewOpinion, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_result"))
			it.ReviewResult, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_inc_input(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogIncInput, error) {
	var it model.DisputeViolationRecordLogIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_insert_input(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogInsertInput, error) {
	var it model.DisputeViolationRecordLogInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "approver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approver"))
			it.Approver, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_log_id"))
			it.DisputeViolationLogID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_action_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_action_name"))
			it.ReviewActionName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_opinion"))
			it.ReviewOpinion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_result"))
			it.ReviewResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_max_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogMaxOrderBy, error) {
	var it model.DisputeViolationRecordLogMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "approver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approver"))
			it.Approver, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_log_id"))
			it.DisputeViolationLogID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_action_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_action_name"))
			it.ReviewActionName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_opinion"))
			it.ReviewOpinion, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_result"))
			it.ReviewResult, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_min_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogMinOrderBy, error) {
	var it model.DisputeViolationRecordLogMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "approver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approver"))
			it.Approver, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_log_id"))
			it.DisputeViolationLogID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_action_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_action_name"))
			it.ReviewActionName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_opinion"))
			it.ReviewOpinion, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_result"))
			it.ReviewResult, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogObjRelInsertInput, error) {
	var it model.DisputeViolationRecordLogObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdispute_violation_record_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdispute_violation_record_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_on_conflict(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogOnConflict, error) {
	var it model.DisputeViolationRecordLogOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNdispute_violation_record_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNdispute_violation_record_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOdispute_violation_record_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogOrderBy, error) {
	var it model.DisputeViolationRecordLogOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "approver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approver"))
			it.Approver, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_log_id"))
			it.DisputeViolationLogID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_action_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_action_name"))
			it.ReviewActionName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_opinion"))
			it.ReviewOpinion, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_result"))
			it.ReviewResult, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_pk_columns_input(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogPkColumnsInput, error) {
	var it model.DisputeViolationRecordLogPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "dispute_violation_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_log_id"))
			it.DisputeViolationLogID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_set_input(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogSetInput, error) {
	var it model.DisputeViolationRecordLogSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "approver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approver"))
			it.Approver, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_log_id"))
			it.DisputeViolationLogID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_action_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_action_name"))
			it.ReviewActionName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_opinion"))
			it.ReviewOpinion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_result"))
			it.ReviewResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_stddev_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogStddevOrderBy, error) {
	var it model.DisputeViolationRecordLogStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogStddevPopOrderBy, error) {
	var it model.DisputeViolationRecordLogStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogStddevSampOrderBy, error) {
	var it model.DisputeViolationRecordLogStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_sum_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogSumOrderBy, error) {
	var it model.DisputeViolationRecordLogSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_var_pop_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogVarPopOrderBy, error) {
	var it model.DisputeViolationRecordLogVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_var_samp_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogVarSampOrderBy, error) {
	var it model.DisputeViolationRecordLogVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_log_variance_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogVarianceOrderBy, error) {
	var it model.DisputeViolationRecordLogVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_max_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordMaxOrderBy, error) {
	var it model.DisputeViolationRecordMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "agent_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent_id_number"))
			it.AgentIDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license"))
			it.BusinessLicense, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license"))
			it.DriverLicense, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license"))
			it.DrivingLicense, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log"))
			it.DrivingLog, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card"))
			it.IDCard, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_person_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_person_id_number"))
			it.LegalPersonIDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pic_evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pic_evidence"))
			it.PicEvidence, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "statement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statement"))
			it.Statement, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "witness":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("witness"))
			it.Witness, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "written_application_materials":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("written_application_materials"))
			it.WrittenApplicationMaterials, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_min_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordMinOrderBy, error) {
	var it model.DisputeViolationRecordMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "agent_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent_id_number"))
			it.AgentIDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license"))
			it.BusinessLicense, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license"))
			it.DriverLicense, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license"))
			it.DrivingLicense, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log"))
			it.DrivingLog, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card"))
			it.IDCard, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_person_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_person_id_number"))
			it.LegalPersonIDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pic_evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pic_evidence"))
			it.PicEvidence, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "statement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statement"))
			it.Statement, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "witness":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("witness"))
			it.Witness, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "written_application_materials":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("written_application_materials"))
			it.WrittenApplicationMaterials, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.DisputeViolationRecordObjRelInsertInput, error) {
	var it model.DisputeViolationRecordObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdispute_violation_record_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdispute_violation_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_on_conflict(ctx context.Context, obj interface{}) (model.DisputeViolationRecordOnConflict, error) {
	var it model.DisputeViolationRecordOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNdispute_violation_record_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNdispute_violation_record_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOdispute_violation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordOrderBy, error) {
	var it model.DisputeViolationRecordOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "agent_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent_id_number"))
			it.AgentIDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license"))
			it.BusinessLicense, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license"))
			it.DriverLicense, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license"))
			it.DrivingLicense, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log"))
			it.DrivingLog, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card"))
			it.IDCard, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_person_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_person_id_number"))
			it.LegalPersonIDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_evidence"))
			it.OtherEvidence, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pic_evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pic_evidence"))
			it.PicEvidence, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "statement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statement"))
			it.Statement, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "witness":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("witness"))
			it.Witness, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "written_application_materials":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("written_application_materials"))
			it.WrittenApplicationMaterials, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_pk_columns_input(ctx context.Context, obj interface{}) (model.DisputeViolationRecordPkColumnsInput, error) {
	var it model.DisputeViolationRecordPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_set_input(ctx context.Context, obj interface{}) (model.DisputeViolationRecordSetInput, error) {
	var it model.DisputeViolationRecordSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "agent_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent_id_number"))
			it.AgentIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license"))
			it.BusinessLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license"))
			it.DriverLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license"))
			it.DrivingLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log"))
			it.DrivingLog, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card"))
			it.IDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_person_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_person_id_number"))
			it.LegalPersonIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_evidence"))
			it.OtherEvidence, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pic_evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pic_evidence"))
			it.PicEvidence, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statement"))
			it.Statement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "witness":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("witness"))
			it.Witness, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "written_application_materials":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("written_application_materials"))
			it.WrittenApplicationMaterials, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_stddev_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordStddevOrderBy, error) {
	var it model.DisputeViolationRecordStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordStddevPopOrderBy, error) {
	var it model.DisputeViolationRecordStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordStddevSampOrderBy, error) {
	var it model.DisputeViolationRecordStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_sum_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordSumOrderBy, error) {
	var it model.DisputeViolationRecordSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_var_pop_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordVarPopOrderBy, error) {
	var it model.DisputeViolationRecordVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_var_samp_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordVarSampOrderBy, error) {
	var it model.DisputeViolationRecordVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdispute_violation_record_variance_order_by(ctx context.Context, obj interface{}) (model.DisputeViolationRecordVarianceOrderBy, error) {
	var it model.DisputeViolationRecordVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_aggregate_order_by(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckAggregateOrderBy, error) {
	var it model.DriverPeccancyCheckAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOdriver_peccancy_check_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOdriver_peccancy_check_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOdriver_peccancy_check_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOdriver_peccancy_check_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOdriver_peccancy_check_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOdriver_peccancy_check_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOdriver_peccancy_check_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOdriver_peccancy_check_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOdriver_peccancy_check_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOdriver_peccancy_check_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckArrRelInsertInput, error) {
	var it model.DriverPeccancyCheckArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdriver_peccancy_check_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdriver_peccancy_check_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_avg_order_by(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckAvgOrderBy, error) {
	var it model.DriverPeccancyCheckAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_bool_exp(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckBoolExp, error) {
	var it model.DriverPeccancyCheckBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOdriver_peccancy_check_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOdriver_peccancy_check_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOdriver_peccancy_check_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_inc_input(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckIncInput, error) {
	var it model.DriverPeccancyCheckIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_insert_input(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckInsertInput, error) {
	var it model.DriverPeccancyCheckInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_max_order_by(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckMaxOrderBy, error) {
	var it model.DriverPeccancyCheckMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_min_order_by(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckMinOrderBy, error) {
	var it model.DriverPeccancyCheckMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckObjRelInsertInput, error) {
	var it model.DriverPeccancyCheckObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdriver_peccancy_check_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdriver_peccancy_check_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_on_conflict(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckOnConflict, error) {
	var it model.DriverPeccancyCheckOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNdriver_peccancy_check_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNdriver_peccancy_check_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOdriver_peccancy_check_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_order_by(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckOrderBy, error) {
	var it model.DriverPeccancyCheckOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_pk_columns_input(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckPkColumnsInput, error) {
	var it model.DriverPeccancyCheckPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_set_input(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckSetInput, error) {
	var it model.DriverPeccancyCheckSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_stddev_order_by(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckStddevOrderBy, error) {
	var it model.DriverPeccancyCheckStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckStddevPopOrderBy, error) {
	var it model.DriverPeccancyCheckStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckStddevSampOrderBy, error) {
	var it model.DriverPeccancyCheckStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_sum_order_by(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckSumOrderBy, error) {
	var it model.DriverPeccancyCheckSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_var_pop_order_by(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckVarPopOrderBy, error) {
	var it model.DriverPeccancyCheckVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_var_samp_order_by(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckVarSampOrderBy, error) {
	var it model.DriverPeccancyCheckVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_peccancy_check_variance_order_by(ctx context.Context, obj interface{}) (model.DriverPeccancyCheckVarianceOrderBy, error) {
	var it model.DriverPeccancyCheckVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_aggregate_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsAggregateOrderBy, error) {
	var it model.EnterpriseDeductionItemsAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOenterprise_deduction_items_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOenterprise_deduction_items_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOenterprise_deduction_items_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOenterprise_deduction_items_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOenterprise_deduction_items_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOenterprise_deduction_items_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOenterprise_deduction_items_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOenterprise_deduction_items_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOenterprise_deduction_items_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOenterprise_deduction_items_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsArrRelInsertInput, error) {
	var it model.EnterpriseDeductionItemsArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNenterprise_deduction_items_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOenterprise_deduction_items_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_avg_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsAvgOrderBy, error) {
	var it model.EnterpriseDeductionItemsAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_bool_exp(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsBoolExp, error) {
	var it model.EnterpriseDeductionItemsBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOenterprise_deduction_items_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOenterprise_deduction_items_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOenterprise_deduction_items_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_item_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_item_description"))
			it.DeductionItemDescription, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_deduction_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_deduction_item_id"))
			it.EnterpriseDeductionItemID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_inc_input(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsIncInput, error) {
	var it model.EnterpriseDeductionItemsIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_insert_input(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsInsertInput, error) {
	var it model.EnterpriseDeductionItemsInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_item_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_item_description"))
			it.DeductionItemDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_deduction_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_deduction_item_id"))
			it.EnterpriseDeductionItemID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_max_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsMaxOrderBy, error) {
	var it model.EnterpriseDeductionItemsMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_item_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_item_description"))
			it.DeductionItemDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_deduction_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_deduction_item_id"))
			it.EnterpriseDeductionItemID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_min_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsMinOrderBy, error) {
	var it model.EnterpriseDeductionItemsMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_item_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_item_description"))
			it.DeductionItemDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_deduction_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_deduction_item_id"))
			it.EnterpriseDeductionItemID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsObjRelInsertInput, error) {
	var it model.EnterpriseDeductionItemsObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNenterprise_deduction_items_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOenterprise_deduction_items_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_on_conflict(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsOnConflict, error) {
	var it model.EnterpriseDeductionItemsOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNenterprise_deduction_items_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNenterprise_deduction_items_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOenterprise_deduction_items_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsOrderBy, error) {
	var it model.EnterpriseDeductionItemsOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_item_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_item_description"))
			it.DeductionItemDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_deduction_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_deduction_item_id"))
			it.EnterpriseDeductionItemID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_pk_columns_input(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsPkColumnsInput, error) {
	var it model.EnterpriseDeductionItemsPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "enterprise_deduction_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_deduction_item_id"))
			it.EnterpriseDeductionItemID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_set_input(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsSetInput, error) {
	var it model.EnterpriseDeductionItemsSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_item_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_item_description"))
			it.DeductionItemDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_deduction_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_deduction_item_id"))
			it.EnterpriseDeductionItemID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_stddev_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsStddevOrderBy, error) {
	var it model.EnterpriseDeductionItemsStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsStddevPopOrderBy, error) {
	var it model.EnterpriseDeductionItemsStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsStddevSampOrderBy, error) {
	var it model.EnterpriseDeductionItemsStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_sum_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsSumOrderBy, error) {
	var it model.EnterpriseDeductionItemsSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_var_pop_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsVarPopOrderBy, error) {
	var it model.EnterpriseDeductionItemsVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_var_samp_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsVarSampOrderBy, error) {
	var it model.EnterpriseDeductionItemsVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_items_variance_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionItemsVarianceOrderBy, error) {
	var it model.EnterpriseDeductionItemsVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_aggregate_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordAggregateOrderBy, error) {
	var it model.EnterpriseDeductionOperationRecordAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOenterprise_deduction_operation_record_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOenterprise_deduction_operation_record_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOenterprise_deduction_operation_record_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOenterprise_deduction_operation_record_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOenterprise_deduction_operation_record_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOenterprise_deduction_operation_record_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOenterprise_deduction_operation_record_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOenterprise_deduction_operation_record_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOenterprise_deduction_operation_record_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOenterprise_deduction_operation_record_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordArrRelInsertInput, error) {
	var it model.EnterpriseDeductionOperationRecordArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNenterprise_deduction_operation_record_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOenterprise_deduction_operation_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_avg_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordAvgOrderBy, error) {
	var it model.EnterpriseDeductionOperationRecordAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_bool_exp(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordBoolExp, error) {
	var it model.EnterpriseDeductionOperationRecordBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOenterprise_deduction_operation_record_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOenterprise_deduction_operation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOenterprise_deduction_operation_record_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_deduction_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_deduction_item_id"))
			it.EnterpriseDeductionItemID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_duduction_operation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_duduction_operation_id"))
			it.EnterpriseDuductionOperationID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_inc_input(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordIncInput, error) {
	var it model.EnterpriseDeductionOperationRecordIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_insert_input(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordInsertInput, error) {
	var it model.EnterpriseDeductionOperationRecordInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_deduction_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_deduction_item_id"))
			it.EnterpriseDeductionItemID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_duduction_operation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_duduction_operation_id"))
			it.EnterpriseDuductionOperationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_max_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordMaxOrderBy, error) {
	var it model.EnterpriseDeductionOperationRecordMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_deduction_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_deduction_item_id"))
			it.EnterpriseDeductionItemID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_duduction_operation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_duduction_operation_id"))
			it.EnterpriseDuductionOperationID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_min_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordMinOrderBy, error) {
	var it model.EnterpriseDeductionOperationRecordMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_deduction_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_deduction_item_id"))
			it.EnterpriseDeductionItemID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_duduction_operation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_duduction_operation_id"))
			it.EnterpriseDuductionOperationID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordObjRelInsertInput, error) {
	var it model.EnterpriseDeductionOperationRecordObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNenterprise_deduction_operation_record_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOenterprise_deduction_operation_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_on_conflict(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordOnConflict, error) {
	var it model.EnterpriseDeductionOperationRecordOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNenterprise_deduction_operation_record_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNenterprise_deduction_operation_record_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOenterprise_deduction_operation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordOrderBy, error) {
	var it model.EnterpriseDeductionOperationRecordOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_deduction_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_deduction_item_id"))
			it.EnterpriseDeductionItemID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_duduction_operation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_duduction_operation_id"))
			it.EnterpriseDuductionOperationID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_pk_columns_input(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordPkColumnsInput, error) {
	var it model.EnterpriseDeductionOperationRecordPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "enterprise_duduction_operation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_duduction_operation_id"))
			it.EnterpriseDuductionOperationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_set_input(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordSetInput, error) {
	var it model.EnterpriseDeductionOperationRecordSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_deduction_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_deduction_item_id"))
			it.EnterpriseDeductionItemID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_duduction_operation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_duduction_operation_id"))
			it.EnterpriseDuductionOperationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_stddev_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordStddevOrderBy, error) {
	var it model.EnterpriseDeductionOperationRecordStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordStddevPopOrderBy, error) {
	var it model.EnterpriseDeductionOperationRecordStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordStddevSampOrderBy, error) {
	var it model.EnterpriseDeductionOperationRecordStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_sum_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordSumOrderBy, error) {
	var it model.EnterpriseDeductionOperationRecordSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_var_pop_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordVarPopOrderBy, error) {
	var it model.EnterpriseDeductionOperationRecordVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_var_samp_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordVarSampOrderBy, error) {
	var it model.EnterpriseDeductionOperationRecordVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_deduction_operation_record_variance_order_by(ctx context.Context, obj interface{}) (model.EnterpriseDeductionOperationRecordVarianceOrderBy, error) {
	var it model.EnterpriseDeductionOperationRecordVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_aggregate_order_by(ctx context.Context, obj interface{}) (model.IllegalPhotoAggregateOrderBy, error) {
	var it model.IllegalPhotoAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOillegal_photo_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOillegal_photo_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOillegal_photo_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOillegal_photo_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOillegal_photo_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOillegal_photo_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOillegal_photo_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOillegal_photo_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOillegal_photo_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOillegal_photo_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.IllegalPhotoArrRelInsertInput, error) {
	var it model.IllegalPhotoArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNillegal_photo_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOillegal_photo_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_avg_order_by(ctx context.Context, obj interface{}) (model.IllegalPhotoAvgOrderBy, error) {
	var it model.IllegalPhotoAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_bool_exp(ctx context.Context, obj interface{}) (model.IllegalPhotoBoolExp, error) {
	var it model.IllegalPhotoBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOillegal_photo_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOillegal_photo_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOillegal_photo_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_synchronized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_synchronized"))
			it.IsSynchronized, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_address"))
			it.PictureAddress, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_name"))
			it.PictureName, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_inc_input(ctx context.Context, obj interface{}) (model.IllegalPhotoIncInput, error) {
	var it model.IllegalPhotoIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_insert_input(ctx context.Context, obj interface{}) (model.IllegalPhotoInsertInput, error) {
	var it model.IllegalPhotoInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_synchronized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_synchronized"))
			it.IsSynchronized, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_address"))
			it.PictureAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_name"))
			it.PictureName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_max_order_by(ctx context.Context, obj interface{}) (model.IllegalPhotoMaxOrderBy, error) {
	var it model.IllegalPhotoMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_address"))
			it.PictureAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_name"))
			it.PictureName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_min_order_by(ctx context.Context, obj interface{}) (model.IllegalPhotoMinOrderBy, error) {
	var it model.IllegalPhotoMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_address"))
			it.PictureAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_name"))
			it.PictureName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.IllegalPhotoObjRelInsertInput, error) {
	var it model.IllegalPhotoObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNillegal_photo_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOillegal_photo_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_on_conflict(ctx context.Context, obj interface{}) (model.IllegalPhotoOnConflict, error) {
	var it model.IllegalPhotoOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNillegal_photo_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNillegal_photo_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOillegal_photo_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_order_by(ctx context.Context, obj interface{}) (model.IllegalPhotoOrderBy, error) {
	var it model.IllegalPhotoOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_synchronized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_synchronized"))
			it.IsSynchronized, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_address"))
			it.PictureAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_name"))
			it.PictureName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_pk_columns_input(ctx context.Context, obj interface{}) (model.IllegalPhotoPkColumnsInput, error) {
	var it model.IllegalPhotoPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_set_input(ctx context.Context, obj interface{}) (model.IllegalPhotoSetInput, error) {
	var it model.IllegalPhotoSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo_id"))
			it.IllegalPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_synchronized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_synchronized"))
			it.IsSynchronized, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_address"))
			it.PictureAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_name"))
			it.PictureName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_stddev_order_by(ctx context.Context, obj interface{}) (model.IllegalPhotoStddevOrderBy, error) {
	var it model.IllegalPhotoStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.IllegalPhotoStddevPopOrderBy, error) {
	var it model.IllegalPhotoStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.IllegalPhotoStddevSampOrderBy, error) {
	var it model.IllegalPhotoStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_sum_order_by(ctx context.Context, obj interface{}) (model.IllegalPhotoSumOrderBy, error) {
	var it model.IllegalPhotoSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_var_pop_order_by(ctx context.Context, obj interface{}) (model.IllegalPhotoVarPopOrderBy, error) {
	var it model.IllegalPhotoVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_var_samp_order_by(ctx context.Context, obj interface{}) (model.IllegalPhotoVarSampOrderBy, error) {
	var it model.IllegalPhotoVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputillegal_photo_variance_order_by(ctx context.Context, obj interface{}) (model.IllegalPhotoVarianceOrderBy, error) {
	var it model.IllegalPhotoVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnumeric_comparison_exp(ctx context.Context, obj interface{}) (model1.NumericComparisonExp, error) {
	var it model1.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputpoint_comparison_exp(ctx context.Context, obj interface{}) (model1.PointComparisonExp, error) {
	var it model1.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOpoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOpoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_aggregate_order_by(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterAggregateOrderBy, error) {
	var it model.RegionalViolationRegisterAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOregional_violation_register_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOregional_violation_register_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOregional_violation_register_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOregional_violation_register_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOregional_violation_register_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOregional_violation_register_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOregional_violation_register_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOregional_violation_register_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOregional_violation_register_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOregional_violation_register_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterArrRelInsertInput, error) {
	var it model.RegionalViolationRegisterArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNregional_violation_register_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOregional_violation_register_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_avg_order_by(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterAvgOrderBy, error) {
	var it model.RegionalViolationRegisterAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_bool_exp(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterBoolExp, error) {
	var it model.RegionalViolationRegisterBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOregional_violation_register_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOregional_violation_register_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOregional_violation_register_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_register":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_register"))
			it.IsRegister, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_agency"))
			it.ProcessingAgency, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "regional_violation_register_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regional_violation_register_id"))
			it.RegionalViolationRegisterID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_time"))
			it.RegisterTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_inc_input(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterIncInput, error) {
	var it model.RegionalViolationRegisterIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_insert_input(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterInsertInput, error) {
	var it model.RegionalViolationRegisterInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_register":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_register"))
			it.IsRegister, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_agency"))
			it.ProcessingAgency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "regional_violation_register_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regional_violation_register_id"))
			it.RegionalViolationRegisterID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_time"))
			it.RegisterTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_max_order_by(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterMaxOrderBy, error) {
	var it model.RegionalViolationRegisterMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_agency"))
			it.ProcessingAgency, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "regional_violation_register_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regional_violation_register_id"))
			it.RegionalViolationRegisterID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_time"))
			it.RegisterTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_min_order_by(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterMinOrderBy, error) {
	var it model.RegionalViolationRegisterMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_agency"))
			it.ProcessingAgency, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "regional_violation_register_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regional_violation_register_id"))
			it.RegionalViolationRegisterID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_time"))
			it.RegisterTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterObjRelInsertInput, error) {
	var it model.RegionalViolationRegisterObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNregional_violation_register_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOregional_violation_register_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_on_conflict(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterOnConflict, error) {
	var it model.RegionalViolationRegisterOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNregional_violation_register_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNregional_violation_register_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOregional_violation_register_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_order_by(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterOrderBy, error) {
	var it model.RegionalViolationRegisterOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_register":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_register"))
			it.IsRegister, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_agency"))
			it.ProcessingAgency, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "regional_violation_register_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regional_violation_register_id"))
			it.RegionalViolationRegisterID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_time"))
			it.RegisterTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_pk_columns_input(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterPkColumnsInput, error) {
	var it model.RegionalViolationRegisterPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "regional_violation_register_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regional_violation_register_id"))
			it.RegionalViolationRegisterID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_set_input(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterSetInput, error) {
	var it model.RegionalViolationRegisterSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_register":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_register"))
			it.IsRegister, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_agency"))
			it.ProcessingAgency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "regional_violation_register_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regional_violation_register_id"))
			it.RegionalViolationRegisterID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_time"))
			it.RegisterTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_stddev_order_by(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterStddevOrderBy, error) {
	var it model.RegionalViolationRegisterStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterStddevPopOrderBy, error) {
	var it model.RegionalViolationRegisterStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterStddevSampOrderBy, error) {
	var it model.RegionalViolationRegisterStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_sum_order_by(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterSumOrderBy, error) {
	var it model.RegionalViolationRegisterSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_var_pop_order_by(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterVarPopOrderBy, error) {
	var it model.RegionalViolationRegisterVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_var_samp_order_by(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterVarSampOrderBy, error) {
	var it model.RegionalViolationRegisterVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputregional_violation_register_variance_order_by(ctx context.Context, obj interface{}) (model.RegionalViolationRegisterVarianceOrderBy, error) {
	var it model.RegionalViolationRegisterVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_type"))
			it.IllegalType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtimestamptz_comparison_exp(ctx context.Context, obj interface{}) (model1.TimestamptzComparisonExp, error) {
	var it model1.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_aggregate_order_by(ctx context.Context, obj interface{}) (model.UserOperationLogAggregateOrderBy, error) {
	var it model.UserOperationLogAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOuser_operation_log_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOuser_operation_log_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOuser_operation_log_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOuser_operation_log_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOuser_operation_log_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOuser_operation_log_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOuser_operation_log_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOuser_operation_log_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOuser_operation_log_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOuser_operation_log_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.UserOperationLogArrRelInsertInput, error) {
	var it model.UserOperationLogArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNuser_operation_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOuser_operation_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_avg_order_by(ctx context.Context, obj interface{}) (model.UserOperationLogAvgOrderBy, error) {
	var it model.UserOperationLogAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_bool_exp(ctx context.Context, obj interface{}) (model.UserOperationLogBoolExp, error) {
	var it model.UserOperationLogBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOuser_operation_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOuser_operation_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOuser_operation_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_ip"))
			it.UserIP, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_inc_input(ctx context.Context, obj interface{}) (model.UserOperationLogIncInput, error) {
	var it model.UserOperationLogIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_insert_input(ctx context.Context, obj interface{}) (model.UserOperationLogInsertInput, error) {
	var it model.UserOperationLogInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_ip"))
			it.UserIP, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_max_order_by(ctx context.Context, obj interface{}) (model.UserOperationLogMaxOrderBy, error) {
	var it model.UserOperationLogMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_ip"))
			it.UserIP, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_min_order_by(ctx context.Context, obj interface{}) (model.UserOperationLogMinOrderBy, error) {
	var it model.UserOperationLogMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_ip"))
			it.UserIP, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.UserOperationLogObjRelInsertInput, error) {
	var it model.UserOperationLogObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNuser_operation_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOuser_operation_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_on_conflict(ctx context.Context, obj interface{}) (model.UserOperationLogOnConflict, error) {
	var it model.UserOperationLogOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNuser_operation_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNuser_operation_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOuser_operation_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_order_by(ctx context.Context, obj interface{}) (model.UserOperationLogOrderBy, error) {
	var it model.UserOperationLogOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_ip"))
			it.UserIP, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_pk_columns_input(ctx context.Context, obj interface{}) (model.UserOperationLogPkColumnsInput, error) {
	var it model.UserOperationLogPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_set_input(ctx context.Context, obj interface{}) (model.UserOperationLogSetInput, error) {
	var it model.UserOperationLogSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_ip"))
			it.UserIP, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_stddev_order_by(ctx context.Context, obj interface{}) (model.UserOperationLogStddevOrderBy, error) {
	var it model.UserOperationLogStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.UserOperationLogStddevPopOrderBy, error) {
	var it model.UserOperationLogStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.UserOperationLogStddevSampOrderBy, error) {
	var it model.UserOperationLogStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_sum_order_by(ctx context.Context, obj interface{}) (model.UserOperationLogSumOrderBy, error) {
	var it model.UserOperationLogSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_var_pop_order_by(ctx context.Context, obj interface{}) (model.UserOperationLogVarPopOrderBy, error) {
	var it model.UserOperationLogVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_var_samp_order_by(ctx context.Context, obj interface{}) (model.UserOperationLogVarSampOrderBy, error) {
	var it model.UserOperationLogVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputuser_operation_log_variance_order_by(ctx context.Context, obj interface{}) (model.UserOperationLogVarianceOrderBy, error) {
	var it model.UserOperationLogVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_aggregate_order_by(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsAggregateOrderBy, error) {
	var it model.VehicleDetainDetailsAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOvehicle_detain_details_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOvehicle_detain_details_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOvehicle_detain_details_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOvehicle_detain_details_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOvehicle_detain_details_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOvehicle_detain_details_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOvehicle_detain_details_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOvehicle_detain_details_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOvehicle_detain_details_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOvehicle_detain_details_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsArrRelInsertInput, error) {
	var it model.VehicleDetainDetailsArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_detain_details_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_detain_details_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_avg_order_by(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsAvgOrderBy, error) {
	var it model.VehicleDetainDetailsAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_status"))
			it.VehicleDetainStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_bool_exp(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsBoolExp, error) {
	var it model.VehicleDetainDetailsBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOvehicle_detain_details_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOvehicle_detain_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOvehicle_detain_details_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "bayonet_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bayonet_picture"))
			it.BayonetPicture, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_bayonet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_bayonet"))
			it.IsBayonet, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_category"))
			it.IsCategory, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_illegal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_illegal"))
			it.IsIllegal, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_satellite_judgment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_satellite_judgment"))
			it.IsSatelliteJudgment, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_region"))
			it.RegisterRegion, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_user"))
			it.RegisterUser, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_picture"))
			it.VehicleDetainPicture, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_status"))
			it.VehicleDetainStatus, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_time"))
			it.VehicleDetainTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_release_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_release_picture"))
			it.VehicleReleasePicture, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_release_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_release_time"))
			it.VehicleReleaseTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_inc_input(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsIncInput, error) {
	var it model.VehicleDetainDetailsIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_status"))
			it.VehicleDetainStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_insert_input(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsInsertInput, error) {
	var it model.VehicleDetainDetailsInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "bayonet_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bayonet_picture"))
			it.BayonetPicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_bayonet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_bayonet"))
			it.IsBayonet, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_category"))
			it.IsCategory, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_illegal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_illegal"))
			it.IsIllegal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_satellite_judgment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_satellite_judgment"))
			it.IsSatelliteJudgment, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_region"))
			it.RegisterRegion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_user"))
			it.RegisterUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_picture"))
			it.VehicleDetainPicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_status"))
			it.VehicleDetainStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_time"))
			it.VehicleDetainTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_release_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_release_picture"))
			it.VehicleReleasePicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_release_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_release_time"))
			it.VehicleReleaseTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_max_order_by(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsMaxOrderBy, error) {
	var it model.VehicleDetainDetailsMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "bayonet_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bayonet_picture"))
			it.BayonetPicture, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_region"))
			it.RegisterRegion, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_user"))
			it.RegisterUser, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_picture"))
			it.VehicleDetainPicture, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_status"))
			it.VehicleDetainStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_time"))
			it.VehicleDetainTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_release_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_release_picture"))
			it.VehicleReleasePicture, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_release_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_release_time"))
			it.VehicleReleaseTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_min_order_by(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsMinOrderBy, error) {
	var it model.VehicleDetainDetailsMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "bayonet_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bayonet_picture"))
			it.BayonetPicture, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_region"))
			it.RegisterRegion, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_user"))
			it.RegisterUser, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_picture"))
			it.VehicleDetainPicture, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_status"))
			it.VehicleDetainStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_time"))
			it.VehicleDetainTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_release_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_release_picture"))
			it.VehicleReleasePicture, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_release_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_release_time"))
			it.VehicleReleaseTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsObjRelInsertInput, error) {
	var it model.VehicleDetainDetailsObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_detain_details_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_detain_details_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_on_conflict(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsOnConflict, error) {
	var it model.VehicleDetainDetailsOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNvehicle_detain_details_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNvehicle_detain_details_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOvehicle_detain_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_order_by(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsOrderBy, error) {
	var it model.VehicleDetainDetailsOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "bayonet_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bayonet_picture"))
			it.BayonetPicture, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_bayonet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_bayonet"))
			it.IsBayonet, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_category"))
			it.IsCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_illegal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_illegal"))
			it.IsIllegal, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_satellite_judgment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_satellite_judgment"))
			it.IsSatelliteJudgment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_region"))
			it.RegisterRegion, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_user"))
			it.RegisterUser, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_picture"))
			it.VehicleDetainPicture, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_status"))
			it.VehicleDetainStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_time"))
			it.VehicleDetainTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_release_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_release_picture"))
			it.VehicleReleasePicture, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_release_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_release_time"))
			it.VehicleReleaseTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_pk_columns_input(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsPkColumnsInput, error) {
	var it model.VehicleDetainDetailsPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_set_input(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsSetInput, error) {
	var it model.VehicleDetainDetailsSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "bayonet_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bayonet_picture"))
			it.BayonetPicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_bayonet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_bayonet"))
			it.IsBayonet, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_category"))
			it.IsCategory, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_illegal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_illegal"))
			it.IsIllegal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_satellite_judgment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_satellite_judgment"))
			it.IsSatelliteJudgment, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_region"))
			it.RegisterRegion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_user"))
			it.RegisterUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_picture"))
			it.VehicleDetainPicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_status"))
			it.VehicleDetainStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_time"))
			it.VehicleDetainTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_release_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_release_picture"))
			it.VehicleReleasePicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_release_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_release_time"))
			it.VehicleReleaseTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_stddev_order_by(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsStddevOrderBy, error) {
	var it model.VehicleDetainDetailsStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_status"))
			it.VehicleDetainStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsStddevPopOrderBy, error) {
	var it model.VehicleDetainDetailsStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_status"))
			it.VehicleDetainStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsStddevSampOrderBy, error) {
	var it model.VehicleDetainDetailsStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_status"))
			it.VehicleDetainStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_sum_order_by(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsSumOrderBy, error) {
	var it model.VehicleDetainDetailsSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_status"))
			it.VehicleDetainStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_var_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsVarPopOrderBy, error) {
	var it model.VehicleDetainDetailsVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_status"))
			it.VehicleDetainStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_var_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsVarSampOrderBy, error) {
	var it model.VehicleDetainDetailsVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_status"))
			it.VehicleDetainStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_detain_details_variance_order_by(ctx context.Context, obj interface{}) (model.VehicleDetainDetailsVarianceOrderBy, error) {
	var it model.VehicleDetainDetailsVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_detain_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_detain_status"))
			it.VehicleDetainStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_aggregate_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsAggregateOrderBy, error) {
	var it model.VehicleViolationDetailsAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOvehicle_violation_details_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOvehicle_violation_details_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOvehicle_violation_details_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOvehicle_violation_details_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOvehicle_violation_details_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOvehicle_violation_details_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOvehicle_violation_details_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOvehicle_violation_details_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOvehicle_violation_details_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOvehicle_violation_details_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsArrRelInsertInput, error) {
	var it model.VehicleViolationDetailsArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_violation_details_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_violation_details_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_avg_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsAvgOrderBy, error) {
	var it model.VehicleViolationDetailsAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_bool_exp(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsBoolExp, error) {
	var it model.VehicleViolationDetailsBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOvehicle_violation_details_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOvehicle_violation_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOvehicle_violation_details_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "decision_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("decision_number"))
			it.DecisionNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "discovery_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discovery_agency"))
			it.DiscoveryAgency, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_at"))
			it.HandleAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_by"))
			it.HandleBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_location"))
			it.IllegalLocation, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo"))
			it.IllegalPhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_handle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_handle"))
			it.IsHandle, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notice_driver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notice_driver"))
			it.IsNoticeDriver, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send"))
			it.IsSend, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "measured_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measured_value"))
			it.MeasuredValue, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "notice_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notice_time"))
			it.NoticeTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "party_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("party_name"))
			it.PartyName, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "standard_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("standard_value"))
			it.StandardValue, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_information":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_information"))
			it.VehicleInformation, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_inc_input(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsIncInput, error) {
	var it model.VehicleViolationDetailsIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_insert_input(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsInsertInput, error) {
	var it model.VehicleViolationDetailsInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "decision_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("decision_number"))
			it.DecisionNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "discovery_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discovery_agency"))
			it.DiscoveryAgency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_at"))
			it.HandleAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_by"))
			it.HandleBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_location"))
			it.IllegalLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo"))
			it.IllegalPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_handle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_handle"))
			it.IsHandle, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notice_driver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notice_driver"))
			it.IsNoticeDriver, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send"))
			it.IsSend, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "measured_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measured_value"))
			it.MeasuredValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notice_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notice_time"))
			it.NoticeTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "party_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("party_name"))
			it.PartyName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "standard_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("standard_value"))
			it.StandardValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_information":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_information"))
			it.VehicleInformation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_max_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsMaxOrderBy, error) {
	var it model.VehicleViolationDetailsMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "decision_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("decision_number"))
			it.DecisionNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "discovery_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discovery_agency"))
			it.DiscoveryAgency, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_at"))
			it.HandleAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_by"))
			it.HandleBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_location"))
			it.IllegalLocation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo"))
			it.IllegalPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "measured_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measured_value"))
			it.MeasuredValue, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "notice_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notice_time"))
			it.NoticeTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "party_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("party_name"))
			it.PartyName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "standard_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("standard_value"))
			it.StandardValue, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_information":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_information"))
			it.VehicleInformation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_min_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsMinOrderBy, error) {
	var it model.VehicleViolationDetailsMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "decision_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("decision_number"))
			it.DecisionNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "discovery_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discovery_agency"))
			it.DiscoveryAgency, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_at"))
			it.HandleAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_by"))
			it.HandleBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_location"))
			it.IllegalLocation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo"))
			it.IllegalPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "measured_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measured_value"))
			it.MeasuredValue, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "notice_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notice_time"))
			it.NoticeTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "party_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("party_name"))
			it.PartyName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "standard_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("standard_value"))
			it.StandardValue, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_information":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_information"))
			it.VehicleInformation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsObjRelInsertInput, error) {
	var it model.VehicleViolationDetailsObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_violation_details_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_violation_details_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_on_conflict(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsOnConflict, error) {
	var it model.VehicleViolationDetailsOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNvehicle_violation_details_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNvehicle_violation_details_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOvehicle_violation_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsOrderBy, error) {
	var it model.VehicleViolationDetailsOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "decision_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("decision_number"))
			it.DecisionNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "discovery_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discovery_agency"))
			it.DiscoveryAgency, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_at"))
			it.HandleAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_by"))
			it.HandleBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_location"))
			it.IllegalLocation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo"))
			it.IllegalPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_handle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_handle"))
			it.IsHandle, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notice_driver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notice_driver"))
			it.IsNoticeDriver, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send"))
			it.IsSend, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "measured_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measured_value"))
			it.MeasuredValue, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "notice_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notice_time"))
			it.NoticeTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "party_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("party_name"))
			it.PartyName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "standard_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("standard_value"))
			it.StandardValue, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_information":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_information"))
			it.VehicleInformation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_pk_columns_input(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsPkColumnsInput, error) {
	var it model.VehicleViolationDetailsPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_set_input(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsSetInput, error) {
	var it model.VehicleViolationDetailsSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "decision_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("decision_number"))
			it.DecisionNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "discovery_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discovery_agency"))
			it.DiscoveryAgency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_at"))
			it.HandleAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_by"))
			it.HandleBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_code"))
			it.IllegalCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_location"))
			it.IllegalLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_photo"))
			it.IllegalPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_time"))
			it.IllegalTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_handle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_handle"))
			it.IsHandle, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notice_driver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notice_driver"))
			it.IsNoticeDriver, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send"))
			it.IsSend, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "measured_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measured_value"))
			it.MeasuredValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notice_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notice_time"))
			it.NoticeTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "party_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("party_name"))
			it.PartyName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "standard_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("standard_value"))
			it.StandardValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_information":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_information"))
			it.VehicleInformation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_stddev_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsStddevOrderBy, error) {
	var it model.VehicleViolationDetailsStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsStddevPopOrderBy, error) {
	var it model.VehicleViolationDetailsStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsStddevSampOrderBy, error) {
	var it model.VehicleViolationDetailsStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_sum_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsSumOrderBy, error) {
	var it model.VehicleViolationDetailsSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_var_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsVarPopOrderBy, error) {
	var it model.VehicleViolationDetailsVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_var_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsVarSampOrderBy, error) {
	var it model.VehicleViolationDetailsVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_details_variance_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationDetailsVarianceOrderBy, error) {
	var it model.VehicleViolationDetailsVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_handling_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_handling_status"))
			it.IllegalHandlingStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "information_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("information_source"))
			it.InformationSource, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_mark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_mark"))
			it.PaymentMark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_aggregate_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsAggregateOrderBy, error) {
	var it model.VehicleViolationScoringItemsAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOvehicle_violation_scoring_items_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOvehicle_violation_scoring_items_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOvehicle_violation_scoring_items_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOvehicle_violation_scoring_items_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOvehicle_violation_scoring_items_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOvehicle_violation_scoring_items_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOvehicle_violation_scoring_items_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOvehicle_violation_scoring_items_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOvehicle_violation_scoring_items_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOvehicle_violation_scoring_items_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsArrRelInsertInput, error) {
	var it model.VehicleViolationScoringItemsArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_violation_scoring_items_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_violation_scoring_items_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_avg_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsAvgOrderBy, error) {
	var it model.VehicleViolationScoringItemsAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_bool_exp(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsBoolExp, error) {
	var it model.VehicleViolationScoringItemsBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOvehicle_violation_scoring_items_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOvehicle_violation_scoring_items_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOvehicle_violation_scoring_items_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_item_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_item_description"))
			it.DeductionItemDescription, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_inc_input(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsIncInput, error) {
	var it model.VehicleViolationScoringItemsIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_insert_input(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsInsertInput, error) {
	var it model.VehicleViolationScoringItemsInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_item_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_item_description"))
			it.DeductionItemDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_max_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsMaxOrderBy, error) {
	var it model.VehicleViolationScoringItemsMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_item_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_item_description"))
			it.DeductionItemDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_min_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsMinOrderBy, error) {
	var it model.VehicleViolationScoringItemsMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_item_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_item_description"))
			it.DeductionItemDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsObjRelInsertInput, error) {
	var it model.VehicleViolationScoringItemsObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_violation_scoring_items_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_violation_scoring_items_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_on_conflict(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsOnConflict, error) {
	var it model.VehicleViolationScoringItemsOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNvehicle_violation_scoring_items_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNvehicle_violation_scoring_items_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOvehicle_violation_scoring_items_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsOrderBy, error) {
	var it model.VehicleViolationScoringItemsOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_item_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_item_description"))
			it.DeductionItemDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_pk_columns_input(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsPkColumnsInput, error) {
	var it model.VehicleViolationScoringItemsPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_set_input(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsSetInput, error) {
	var it model.VehicleViolationScoringItemsSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deduction_item_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_item_description"))
			it.DeductionItemDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_stddev_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsStddevOrderBy, error) {
	var it model.VehicleViolationScoringItemsStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsStddevPopOrderBy, error) {
	var it model.VehicleViolationScoringItemsStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsStddevSampOrderBy, error) {
	var it model.VehicleViolationScoringItemsStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_sum_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsSumOrderBy, error) {
	var it model.VehicleViolationScoringItemsSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_var_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsVarPopOrderBy, error) {
	var it model.VehicleViolationScoringItemsVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_var_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsVarSampOrderBy, error) {
	var it model.VehicleViolationScoringItemsVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_items_variance_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringItemsVarianceOrderBy, error) {
	var it model.VehicleViolationScoringItemsVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deduction_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deduction_category"))
			it.DeductionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_aggregate_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordAggregateOrderBy, error) {
	var it model.VehicleViolationScoringRecordAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOvehicle_violation_scoring_record_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOvehicle_violation_scoring_record_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOvehicle_violation_scoring_record_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOvehicle_violation_scoring_record_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOvehicle_violation_scoring_record_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOvehicle_violation_scoring_record_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOvehicle_violation_scoring_record_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOvehicle_violation_scoring_record_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOvehicle_violation_scoring_record_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOvehicle_violation_scoring_record_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordArrRelInsertInput, error) {
	var it model.VehicleViolationScoringRecordArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_violation_scoring_record_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_violation_scoring_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_avg_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordAvgOrderBy, error) {
	var it model.VehicleViolationScoringRecordAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_bool_exp(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordBoolExp, error) {
	var it model.VehicleViolationScoringRecordBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOvehicle_violation_scoring_record_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOvehicle_violation_scoring_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOvehicle_violation_scoring_record_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_id"))
			it.ViolationScoringID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_inc_input(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordIncInput, error) {
	var it model.VehicleViolationScoringRecordIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_insert_input(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordInsertInput, error) {
	var it model.VehicleViolationScoringRecordInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_id"))
			it.ViolationScoringID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_max_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordMaxOrderBy, error) {
	var it model.VehicleViolationScoringRecordMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_id"))
			it.ViolationScoringID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_min_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordMinOrderBy, error) {
	var it model.VehicleViolationScoringRecordMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_id"))
			it.ViolationScoringID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordObjRelInsertInput, error) {
	var it model.VehicleViolationScoringRecordObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_violation_scoring_record_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_violation_scoring_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_on_conflict(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordOnConflict, error) {
	var it model.VehicleViolationScoringRecordOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNvehicle_violation_scoring_record_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNvehicle_violation_scoring_record_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOvehicle_violation_scoring_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordOrderBy, error) {
	var it model.VehicleViolationScoringRecordOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_id"))
			it.ViolationScoringID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_pk_columns_input(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordPkColumnsInput, error) {
	var it model.VehicleViolationScoringRecordPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_id"))
			it.ViolationScoringID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_set_input(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordSetInput, error) {
	var it model.VehicleViolationScoringRecordSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_id"))
			it.ViolationScoringID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_scoring_item_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_scoring_item_id"))
			it.ViolationScoringItemID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_stddev_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordStddevOrderBy, error) {
	var it model.VehicleViolationScoringRecordStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordStddevPopOrderBy, error) {
	var it model.VehicleViolationScoringRecordStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordStddevSampOrderBy, error) {
	var it model.VehicleViolationScoringRecordStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_sum_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordSumOrderBy, error) {
	var it model.VehicleViolationScoringRecordSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_var_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordVarPopOrderBy, error) {
	var it model.VehicleViolationScoringRecordVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_var_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordVarSampOrderBy, error) {
	var it model.VehicleViolationScoringRecordVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_violation_scoring_record_variance_order_by(ctx context.Context, obj interface{}) (model.VehicleViolationScoringRecordVarianceOrderBy, error) {
	var it model.VehicleViolationScoringRecordVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_app_enforcement":
			out.Values[i] = ec._Mutation_delete_app_enforcement(ctx, field)
		case "delete_app_enforcement_by_pk":
			out.Values[i] = ec._Mutation_delete_app_enforcement_by_pk(ctx, field)
		case "insert_app_enforcement":
			out.Values[i] = ec._Mutation_insert_app_enforcement(ctx, field)
		case "insert_app_enforcement_one":
			out.Values[i] = ec._Mutation_insert_app_enforcement_one(ctx, field)
		case "update_app_enforcement":
			out.Values[i] = ec._Mutation_update_app_enforcement(ctx, field)
		case "update_app_enforcement_by_pk":
			out.Values[i] = ec._Mutation_update_app_enforcement_by_pk(ctx, field)
		case "delete_VIO_CODEWFDM":
			out.Values[i] = ec._Mutation_delete_VIO_CODEWFDM(ctx, field)
		case "insert_VIO_CODEWFDM":
			out.Values[i] = ec._Mutation_insert_VIO_CODEWFDM(ctx, field)
		case "insert_VIO_CODEWFDM_one":
			out.Values[i] = ec._Mutation_insert_VIO_CODEWFDM_one(ctx, field)
		case "update_VIO_CODEWFDM":
			out.Values[i] = ec._Mutation_update_VIO_CODEWFDM(ctx, field)
		case "delete_dispute_violation_record":
			out.Values[i] = ec._Mutation_delete_dispute_violation_record(ctx, field)
		case "delete_dispute_violation_record_by_pk":
			out.Values[i] = ec._Mutation_delete_dispute_violation_record_by_pk(ctx, field)
		case "insert_dispute_violation_record":
			out.Values[i] = ec._Mutation_insert_dispute_violation_record(ctx, field)
		case "insert_dispute_violation_record_one":
			out.Values[i] = ec._Mutation_insert_dispute_violation_record_one(ctx, field)
		case "update_dispute_violation_record":
			out.Values[i] = ec._Mutation_update_dispute_violation_record(ctx, field)
		case "update_dispute_violation_record_by_pk":
			out.Values[i] = ec._Mutation_update_dispute_violation_record_by_pk(ctx, field)
		case "delete_dispute_violation_record_log":
			out.Values[i] = ec._Mutation_delete_dispute_violation_record_log(ctx, field)
		case "delete_dispute_violation_record_log_by_pk":
			out.Values[i] = ec._Mutation_delete_dispute_violation_record_log_by_pk(ctx, field)
		case "insert_dispute_violation_record_log":
			out.Values[i] = ec._Mutation_insert_dispute_violation_record_log(ctx, field)
		case "insert_dispute_violation_record_log_one":
			out.Values[i] = ec._Mutation_insert_dispute_violation_record_log_one(ctx, field)
		case "update_dispute_violation_record_log":
			out.Values[i] = ec._Mutation_update_dispute_violation_record_log(ctx, field)
		case "update_dispute_violation_record_log_by_pk":
			out.Values[i] = ec._Mutation_update_dispute_violation_record_log_by_pk(ctx, field)
		case "delete_driver_peccancy_check":
			out.Values[i] = ec._Mutation_delete_driver_peccancy_check(ctx, field)
		case "delete_driver_peccancy_check_by_pk":
			out.Values[i] = ec._Mutation_delete_driver_peccancy_check_by_pk(ctx, field)
		case "insert_driver_peccancy_check":
			out.Values[i] = ec._Mutation_insert_driver_peccancy_check(ctx, field)
		case "insert_driver_peccancy_check_one":
			out.Values[i] = ec._Mutation_insert_driver_peccancy_check_one(ctx, field)
		case "update_driver_peccancy_check":
			out.Values[i] = ec._Mutation_update_driver_peccancy_check(ctx, field)
		case "update_driver_peccancy_check_by_pk":
			out.Values[i] = ec._Mutation_update_driver_peccancy_check_by_pk(ctx, field)
		case "delete_enterprise_deduction_items":
			out.Values[i] = ec._Mutation_delete_enterprise_deduction_items(ctx, field)
		case "delete_enterprise_deduction_items_by_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_deduction_items_by_pk(ctx, field)
		case "insert_enterprise_deduction_items":
			out.Values[i] = ec._Mutation_insert_enterprise_deduction_items(ctx, field)
		case "insert_enterprise_deduction_items_one":
			out.Values[i] = ec._Mutation_insert_enterprise_deduction_items_one(ctx, field)
		case "update_enterprise_deduction_items":
			out.Values[i] = ec._Mutation_update_enterprise_deduction_items(ctx, field)
		case "update_enterprise_deduction_items_by_pk":
			out.Values[i] = ec._Mutation_update_enterprise_deduction_items_by_pk(ctx, field)
		case "delete_enterprise_deduction_operation_record":
			out.Values[i] = ec._Mutation_delete_enterprise_deduction_operation_record(ctx, field)
		case "delete_enterprise_deduction_operation_record_by_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_deduction_operation_record_by_pk(ctx, field)
		case "insert_enterprise_deduction_operation_record":
			out.Values[i] = ec._Mutation_insert_enterprise_deduction_operation_record(ctx, field)
		case "insert_enterprise_deduction_operation_record_one":
			out.Values[i] = ec._Mutation_insert_enterprise_deduction_operation_record_one(ctx, field)
		case "update_enterprise_deduction_operation_record":
			out.Values[i] = ec._Mutation_update_enterprise_deduction_operation_record(ctx, field)
		case "update_enterprise_deduction_operation_record_by_pk":
			out.Values[i] = ec._Mutation_update_enterprise_deduction_operation_record_by_pk(ctx, field)
		case "delete_illegal_photo":
			out.Values[i] = ec._Mutation_delete_illegal_photo(ctx, field)
		case "delete_illegal_photo_by_pk":
			out.Values[i] = ec._Mutation_delete_illegal_photo_by_pk(ctx, field)
		case "insert_illegal_photo":
			out.Values[i] = ec._Mutation_insert_illegal_photo(ctx, field)
		case "insert_illegal_photo_one":
			out.Values[i] = ec._Mutation_insert_illegal_photo_one(ctx, field)
		case "update_illegal_photo":
			out.Values[i] = ec._Mutation_update_illegal_photo(ctx, field)
		case "update_illegal_photo_by_pk":
			out.Values[i] = ec._Mutation_update_illegal_photo_by_pk(ctx, field)
		case "delete_regional_violation_register":
			out.Values[i] = ec._Mutation_delete_regional_violation_register(ctx, field)
		case "delete_regional_violation_register_by_pk":
			out.Values[i] = ec._Mutation_delete_regional_violation_register_by_pk(ctx, field)
		case "insert_regional_violation_register":
			out.Values[i] = ec._Mutation_insert_regional_violation_register(ctx, field)
		case "insert_regional_violation_register_one":
			out.Values[i] = ec._Mutation_insert_regional_violation_register_one(ctx, field)
		case "update_regional_violation_register":
			out.Values[i] = ec._Mutation_update_regional_violation_register(ctx, field)
		case "update_regional_violation_register_by_pk":
			out.Values[i] = ec._Mutation_update_regional_violation_register_by_pk(ctx, field)
		case "delete_user_operation_log":
			out.Values[i] = ec._Mutation_delete_user_operation_log(ctx, field)
		case "delete_user_operation_log_by_pk":
			out.Values[i] = ec._Mutation_delete_user_operation_log_by_pk(ctx, field)
		case "insert_user_operation_log":
			out.Values[i] = ec._Mutation_insert_user_operation_log(ctx, field)
		case "insert_user_operation_log_one":
			out.Values[i] = ec._Mutation_insert_user_operation_log_one(ctx, field)
		case "update_user_operation_log":
			out.Values[i] = ec._Mutation_update_user_operation_log(ctx, field)
		case "update_user_operation_log_by_pk":
			out.Values[i] = ec._Mutation_update_user_operation_log_by_pk(ctx, field)
		case "delete_vehicle_detain_details":
			out.Values[i] = ec._Mutation_delete_vehicle_detain_details(ctx, field)
		case "delete_vehicle_detain_details_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_detain_details_by_pk(ctx, field)
		case "insert_vehicle_detain_details":
			out.Values[i] = ec._Mutation_insert_vehicle_detain_details(ctx, field)
		case "insert_vehicle_detain_details_one":
			out.Values[i] = ec._Mutation_insert_vehicle_detain_details_one(ctx, field)
		case "update_vehicle_detain_details":
			out.Values[i] = ec._Mutation_update_vehicle_detain_details(ctx, field)
		case "update_vehicle_detain_details_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_detain_details_by_pk(ctx, field)
		case "delete_vehicle_violation_details":
			out.Values[i] = ec._Mutation_delete_vehicle_violation_details(ctx, field)
		case "delete_vehicle_violation_details_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_violation_details_by_pk(ctx, field)
		case "insert_vehicle_violation_details":
			out.Values[i] = ec._Mutation_insert_vehicle_violation_details(ctx, field)
		case "insert_vehicle_violation_details_one":
			out.Values[i] = ec._Mutation_insert_vehicle_violation_details_one(ctx, field)
		case "update_vehicle_violation_details":
			out.Values[i] = ec._Mutation_update_vehicle_violation_details(ctx, field)
		case "update_vehicle_violation_details_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_violation_details_by_pk(ctx, field)
		case "delete_vehicle_violation_scoring_items":
			out.Values[i] = ec._Mutation_delete_vehicle_violation_scoring_items(ctx, field)
		case "delete_vehicle_violation_scoring_items_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_violation_scoring_items_by_pk(ctx, field)
		case "insert_vehicle_violation_scoring_items":
			out.Values[i] = ec._Mutation_insert_vehicle_violation_scoring_items(ctx, field)
		case "insert_vehicle_violation_scoring_items_one":
			out.Values[i] = ec._Mutation_insert_vehicle_violation_scoring_items_one(ctx, field)
		case "update_vehicle_violation_scoring_items":
			out.Values[i] = ec._Mutation_update_vehicle_violation_scoring_items(ctx, field)
		case "update_vehicle_violation_scoring_items_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_violation_scoring_items_by_pk(ctx, field)
		case "delete_vehicle_violation_scoring_record":
			out.Values[i] = ec._Mutation_delete_vehicle_violation_scoring_record(ctx, field)
		case "delete_vehicle_violation_scoring_record_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_violation_scoring_record_by_pk(ctx, field)
		case "insert_vehicle_violation_scoring_record":
			out.Values[i] = ec._Mutation_insert_vehicle_violation_scoring_record(ctx, field)
		case "insert_vehicle_violation_scoring_record_one":
			out.Values[i] = ec._Mutation_insert_vehicle_violation_scoring_record_one(ctx, field)
		case "update_vehicle_violation_scoring_record":
			out.Values[i] = ec._Mutation_update_vehicle_violation_scoring_record(ctx, field)
		case "update_vehicle_violation_scoring_record_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_violation_scoring_record_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "app_enforcement":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_app_enforcement(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "app_enforcement_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_app_enforcement_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "app_enforcement_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_app_enforcement_by_pk(ctx, field)
				return res
			})
		case "VIO_CODEWFDM":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_VIO_CODEWFDM(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "VIO_CODEWFDM_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_VIO_CODEWFDM_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dispute_violation_record":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dispute_violation_record(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dispute_violation_record_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dispute_violation_record_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dispute_violation_record_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dispute_violation_record_by_pk(ctx, field)
				return res
			})
		case "dispute_violation_record_log":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dispute_violation_record_log(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dispute_violation_record_log_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dispute_violation_record_log_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dispute_violation_record_log_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dispute_violation_record_log_by_pk(ctx, field)
				return res
			})
		case "driver_peccancy_check":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_peccancy_check(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_peccancy_check_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_peccancy_check_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_peccancy_check_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_peccancy_check_by_pk(ctx, field)
				return res
			})
		case "enterprise_deduction_items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_deduction_items(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_deduction_items_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_deduction_items_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_deduction_items_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_deduction_items_by_pk(ctx, field)
				return res
			})
		case "enterprise_deduction_operation_record":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_deduction_operation_record(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_deduction_operation_record_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_deduction_operation_record_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_deduction_operation_record_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_deduction_operation_record_by_pk(ctx, field)
				return res
			})
		case "illegal_photo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_illegal_photo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "illegal_photo_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_illegal_photo_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "illegal_photo_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_illegal_photo_by_pk(ctx, field)
				return res
			})
		case "regional_violation_register":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_regional_violation_register(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "regional_violation_register_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_regional_violation_register_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "regional_violation_register_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_regional_violation_register_by_pk(ctx, field)
				return res
			})
		case "user_operation_log":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user_operation_log(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "user_operation_log_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user_operation_log_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "user_operation_log_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user_operation_log_by_pk(ctx, field)
				return res
			})
		case "vehicle_detain_details":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_detain_details(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_detain_details_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_detain_details_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_detain_details_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_detain_details_by_pk(ctx, field)
				return res
			})
		case "vehicle_violation_details":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_violation_details(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_violation_details_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_violation_details_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_violation_details_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_violation_details_by_pk(ctx, field)
				return res
			})
		case "vehicle_violation_scoring_items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_violation_scoring_items(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_violation_scoring_items_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_violation_scoring_items_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_violation_scoring_items_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_violation_scoring_items_by_pk(ctx, field)
				return res
			})
		case "vehicle_violation_scoring_record":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_violation_scoring_record(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_violation_scoring_record_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_violation_scoring_record_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_violation_scoring_record_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_violation_scoring_record_by_pk(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "app_enforcement":
		return ec._Subscription_app_enforcement(ctx, fields[0])
	case "app_enforcement_aggregate":
		return ec._Subscription_app_enforcement_aggregate(ctx, fields[0])
	case "app_enforcement_by_pk":
		return ec._Subscription_app_enforcement_by_pk(ctx, fields[0])
	case "VIO_CODEWFDM":
		return ec._Subscription_VIO_CODEWFDM(ctx, fields[0])
	case "VIO_CODEWFDM_aggregate":
		return ec._Subscription_VIO_CODEWFDM_aggregate(ctx, fields[0])
	case "dispute_violation_record":
		return ec._Subscription_dispute_violation_record(ctx, fields[0])
	case "dispute_violation_record_aggregate":
		return ec._Subscription_dispute_violation_record_aggregate(ctx, fields[0])
	case "dispute_violation_record_by_pk":
		return ec._Subscription_dispute_violation_record_by_pk(ctx, fields[0])
	case "dispute_violation_record_log":
		return ec._Subscription_dispute_violation_record_log(ctx, fields[0])
	case "dispute_violation_record_log_aggregate":
		return ec._Subscription_dispute_violation_record_log_aggregate(ctx, fields[0])
	case "dispute_violation_record_log_by_pk":
		return ec._Subscription_dispute_violation_record_log_by_pk(ctx, fields[0])
	case "driver_peccancy_check":
		return ec._Subscription_driver_peccancy_check(ctx, fields[0])
	case "driver_peccancy_check_aggregate":
		return ec._Subscription_driver_peccancy_check_aggregate(ctx, fields[0])
	case "driver_peccancy_check_by_pk":
		return ec._Subscription_driver_peccancy_check_by_pk(ctx, fields[0])
	case "enterprise_deduction_items":
		return ec._Subscription_enterprise_deduction_items(ctx, fields[0])
	case "enterprise_deduction_items_aggregate":
		return ec._Subscription_enterprise_deduction_items_aggregate(ctx, fields[0])
	case "enterprise_deduction_items_by_pk":
		return ec._Subscription_enterprise_deduction_items_by_pk(ctx, fields[0])
	case "enterprise_deduction_operation_record":
		return ec._Subscription_enterprise_deduction_operation_record(ctx, fields[0])
	case "enterprise_deduction_operation_record_aggregate":
		return ec._Subscription_enterprise_deduction_operation_record_aggregate(ctx, fields[0])
	case "enterprise_deduction_operation_record_by_pk":
		return ec._Subscription_enterprise_deduction_operation_record_by_pk(ctx, fields[0])
	case "illegal_photo":
		return ec._Subscription_illegal_photo(ctx, fields[0])
	case "illegal_photo_aggregate":
		return ec._Subscription_illegal_photo_aggregate(ctx, fields[0])
	case "illegal_photo_by_pk":
		return ec._Subscription_illegal_photo_by_pk(ctx, fields[0])
	case "regional_violation_register":
		return ec._Subscription_regional_violation_register(ctx, fields[0])
	case "regional_violation_register_aggregate":
		return ec._Subscription_regional_violation_register_aggregate(ctx, fields[0])
	case "regional_violation_register_by_pk":
		return ec._Subscription_regional_violation_register_by_pk(ctx, fields[0])
	case "user_operation_log":
		return ec._Subscription_user_operation_log(ctx, fields[0])
	case "user_operation_log_aggregate":
		return ec._Subscription_user_operation_log_aggregate(ctx, fields[0])
	case "user_operation_log_by_pk":
		return ec._Subscription_user_operation_log_by_pk(ctx, fields[0])
	case "vehicle_detain_details":
		return ec._Subscription_vehicle_detain_details(ctx, fields[0])
	case "vehicle_detain_details_aggregate":
		return ec._Subscription_vehicle_detain_details_aggregate(ctx, fields[0])
	case "vehicle_detain_details_by_pk":
		return ec._Subscription_vehicle_detain_details_by_pk(ctx, fields[0])
	case "vehicle_violation_details":
		return ec._Subscription_vehicle_violation_details(ctx, fields[0])
	case "vehicle_violation_details_aggregate":
		return ec._Subscription_vehicle_violation_details_aggregate(ctx, fields[0])
	case "vehicle_violation_details_by_pk":
		return ec._Subscription_vehicle_violation_details_by_pk(ctx, fields[0])
	case "vehicle_violation_scoring_items":
		return ec._Subscription_vehicle_violation_scoring_items(ctx, fields[0])
	case "vehicle_violation_scoring_items_aggregate":
		return ec._Subscription_vehicle_violation_scoring_items_aggregate(ctx, fields[0])
	case "vehicle_violation_scoring_items_by_pk":
		return ec._Subscription_vehicle_violation_scoring_items_by_pk(ctx, fields[0])
	case "vehicle_violation_scoring_record":
		return ec._Subscription_vehicle_violation_scoring_record(ctx, fields[0])
	case "vehicle_violation_scoring_record_aggregate":
		return ec._Subscription_vehicle_violation_scoring_record_aggregate(ctx, fields[0])
	case "vehicle_violation_scoring_record_by_pk":
		return ec._Subscription_vehicle_violation_scoring_record_by_pk(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var vIO_CODEWFDMImplementors = []string{"VIO_CODEWFDM"}

func (ec *executionContext) _VIO_CODEWFDM(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vIO_CODEWFDMImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VIO_CODEWFDM")
		case "FKJE_MAX":
			out.Values[i] = ec._VIO_CODEWFDM_FKJE_MAX(ctx, field, obj)
		case "FKJE_MIN":
			out.Values[i] = ec._VIO_CODEWFDM_FKJE_MIN(ctx, field, obj)
		case "WFJFS":
			out.Values[i] = ec._VIO_CODEWFDM_WFJFS(ctx, field, obj)
		case "WFMS":
			out.Values[i] = ec._VIO_CODEWFDM_WFMS(ctx, field, obj)
		case "WFXW":
			out.Values[i] = ec._VIO_CODEWFDM_WFXW(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "XH":
			out.Values[i] = ec._VIO_CODEWFDM_XH(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vIO_CODEWFDM_aggregateImplementors = []string{"VIO_CODEWFDM_aggregate"}

func (ec *executionContext) _VIO_CODEWFDM_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vIO_CODEWFDM_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VIO_CODEWFDM_aggregate")
		case "aggregate":
			out.Values[i] = ec._VIO_CODEWFDM_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._VIO_CODEWFDM_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vIO_CODEWFDM_aggregate_fieldsImplementors = []string{"VIO_CODEWFDM_aggregate_fields"}

func (ec *executionContext) _VIO_CODEWFDM_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vIO_CODEWFDM_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VIO_CODEWFDM_aggregate_fields")
		case "avg":
			out.Values[i] = ec._VIO_CODEWFDM_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VIO_CODEWFDM_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VIO_CODEWFDM_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VIO_CODEWFDM_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VIO_CODEWFDM_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VIO_CODEWFDM_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VIO_CODEWFDM_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VIO_CODEWFDM_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VIO_CODEWFDM_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VIO_CODEWFDM_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VIO_CODEWFDM_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vIO_CODEWFDM_avg_fieldsImplementors = []string{"VIO_CODEWFDM_avg_fields"}

func (ec *executionContext) _VIO_CODEWFDM_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vIO_CODEWFDM_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VIO_CODEWFDM_avg_fields")
		case "FKJE_MAX":
			out.Values[i] = ec._VIO_CODEWFDM_avg_fields_FKJE_MAX(ctx, field, obj)
		case "FKJE_MIN":
			out.Values[i] = ec._VIO_CODEWFDM_avg_fields_FKJE_MIN(ctx, field, obj)
		case "WFJFS":
			out.Values[i] = ec._VIO_CODEWFDM_avg_fields_WFJFS(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vIO_CODEWFDM_max_fieldsImplementors = []string{"VIO_CODEWFDM_max_fields"}

func (ec *executionContext) _VIO_CODEWFDM_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vIO_CODEWFDM_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VIO_CODEWFDM_max_fields")
		case "FKJE_MAX":
			out.Values[i] = ec._VIO_CODEWFDM_max_fields_FKJE_MAX(ctx, field, obj)
		case "FKJE_MIN":
			out.Values[i] = ec._VIO_CODEWFDM_max_fields_FKJE_MIN(ctx, field, obj)
		case "WFJFS":
			out.Values[i] = ec._VIO_CODEWFDM_max_fields_WFJFS(ctx, field, obj)
		case "WFMS":
			out.Values[i] = ec._VIO_CODEWFDM_max_fields_WFMS(ctx, field, obj)
		case "WFXW":
			out.Values[i] = ec._VIO_CODEWFDM_max_fields_WFXW(ctx, field, obj)
		case "XH":
			out.Values[i] = ec._VIO_CODEWFDM_max_fields_XH(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vIO_CODEWFDM_min_fieldsImplementors = []string{"VIO_CODEWFDM_min_fields"}

func (ec *executionContext) _VIO_CODEWFDM_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vIO_CODEWFDM_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VIO_CODEWFDM_min_fields")
		case "FKJE_MAX":
			out.Values[i] = ec._VIO_CODEWFDM_min_fields_FKJE_MAX(ctx, field, obj)
		case "FKJE_MIN":
			out.Values[i] = ec._VIO_CODEWFDM_min_fields_FKJE_MIN(ctx, field, obj)
		case "WFJFS":
			out.Values[i] = ec._VIO_CODEWFDM_min_fields_WFJFS(ctx, field, obj)
		case "WFMS":
			out.Values[i] = ec._VIO_CODEWFDM_min_fields_WFMS(ctx, field, obj)
		case "WFXW":
			out.Values[i] = ec._VIO_CODEWFDM_min_fields_WFXW(ctx, field, obj)
		case "XH":
			out.Values[i] = ec._VIO_CODEWFDM_min_fields_XH(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vIO_CODEWFDM_mutation_responseImplementors = []string{"VIO_CODEWFDM_mutation_response"}

func (ec *executionContext) _VIO_CODEWFDM_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vIO_CODEWFDM_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VIO_CODEWFDM_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._VIO_CODEWFDM_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VIO_CODEWFDM_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vIO_CODEWFDM_stddev_fieldsImplementors = []string{"VIO_CODEWFDM_stddev_fields"}

func (ec *executionContext) _VIO_CODEWFDM_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vIO_CODEWFDM_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VIO_CODEWFDM_stddev_fields")
		case "FKJE_MAX":
			out.Values[i] = ec._VIO_CODEWFDM_stddev_fields_FKJE_MAX(ctx, field, obj)
		case "FKJE_MIN":
			out.Values[i] = ec._VIO_CODEWFDM_stddev_fields_FKJE_MIN(ctx, field, obj)
		case "WFJFS":
			out.Values[i] = ec._VIO_CODEWFDM_stddev_fields_WFJFS(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vIO_CODEWFDM_stddev_pop_fieldsImplementors = []string{"VIO_CODEWFDM_stddev_pop_fields"}

func (ec *executionContext) _VIO_CODEWFDM_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vIO_CODEWFDM_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VIO_CODEWFDM_stddev_pop_fields")
		case "FKJE_MAX":
			out.Values[i] = ec._VIO_CODEWFDM_stddev_pop_fields_FKJE_MAX(ctx, field, obj)
		case "FKJE_MIN":
			out.Values[i] = ec._VIO_CODEWFDM_stddev_pop_fields_FKJE_MIN(ctx, field, obj)
		case "WFJFS":
			out.Values[i] = ec._VIO_CODEWFDM_stddev_pop_fields_WFJFS(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vIO_CODEWFDM_stddev_samp_fieldsImplementors = []string{"VIO_CODEWFDM_stddev_samp_fields"}

func (ec *executionContext) _VIO_CODEWFDM_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vIO_CODEWFDM_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VIO_CODEWFDM_stddev_samp_fields")
		case "FKJE_MAX":
			out.Values[i] = ec._VIO_CODEWFDM_stddev_samp_fields_FKJE_MAX(ctx, field, obj)
		case "FKJE_MIN":
			out.Values[i] = ec._VIO_CODEWFDM_stddev_samp_fields_FKJE_MIN(ctx, field, obj)
		case "WFJFS":
			out.Values[i] = ec._VIO_CODEWFDM_stddev_samp_fields_WFJFS(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vIO_CODEWFDM_sum_fieldsImplementors = []string{"VIO_CODEWFDM_sum_fields"}

func (ec *executionContext) _VIO_CODEWFDM_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vIO_CODEWFDM_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VIO_CODEWFDM_sum_fields")
		case "FKJE_MAX":
			out.Values[i] = ec._VIO_CODEWFDM_sum_fields_FKJE_MAX(ctx, field, obj)
		case "FKJE_MIN":
			out.Values[i] = ec._VIO_CODEWFDM_sum_fields_FKJE_MIN(ctx, field, obj)
		case "WFJFS":
			out.Values[i] = ec._VIO_CODEWFDM_sum_fields_WFJFS(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vIO_CODEWFDM_var_pop_fieldsImplementors = []string{"VIO_CODEWFDM_var_pop_fields"}

func (ec *executionContext) _VIO_CODEWFDM_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vIO_CODEWFDM_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VIO_CODEWFDM_var_pop_fields")
		case "FKJE_MAX":
			out.Values[i] = ec._VIO_CODEWFDM_var_pop_fields_FKJE_MAX(ctx, field, obj)
		case "FKJE_MIN":
			out.Values[i] = ec._VIO_CODEWFDM_var_pop_fields_FKJE_MIN(ctx, field, obj)
		case "WFJFS":
			out.Values[i] = ec._VIO_CODEWFDM_var_pop_fields_WFJFS(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vIO_CODEWFDM_var_samp_fieldsImplementors = []string{"VIO_CODEWFDM_var_samp_fields"}

func (ec *executionContext) _VIO_CODEWFDM_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vIO_CODEWFDM_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VIO_CODEWFDM_var_samp_fields")
		case "FKJE_MAX":
			out.Values[i] = ec._VIO_CODEWFDM_var_samp_fields_FKJE_MAX(ctx, field, obj)
		case "FKJE_MIN":
			out.Values[i] = ec._VIO_CODEWFDM_var_samp_fields_FKJE_MIN(ctx, field, obj)
		case "WFJFS":
			out.Values[i] = ec._VIO_CODEWFDM_var_samp_fields_WFJFS(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vIO_CODEWFDM_variance_fieldsImplementors = []string{"VIO_CODEWFDM_variance_fields"}

func (ec *executionContext) _VIO_CODEWFDM_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VioCodewfdmVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vIO_CODEWFDM_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VIO_CODEWFDM_variance_fields")
		case "FKJE_MAX":
			out.Values[i] = ec._VIO_CODEWFDM_variance_fields_FKJE_MAX(ctx, field, obj)
		case "FKJE_MIN":
			out.Values[i] = ec._VIO_CODEWFDM_variance_fields_FKJE_MIN(ctx, field, obj)
		case "WFJFS":
			out.Values[i] = ec._VIO_CODEWFDM_variance_fields_WFJFS(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var app_enforcementImplementors = []string{"app_enforcement"}

func (ec *executionContext) _app_enforcement(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, app_enforcementImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("app_enforcement")
		case "coordinate":
			out.Values[i] = ec._app_enforcement_coordinate(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._app_enforcement_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._app_enforcement_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._app_enforcement_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._app_enforcement_deleted_by(ctx, field, obj)
		case "edit_text":
			out.Values[i] = ec._app_enforcement_edit_text(ctx, field, obj)
		case "enterprise_type":
			out.Values[i] = ec._app_enforcement_enterprise_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._app_enforcement_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "illegal_photo_id":
			out.Values[i] = ec._app_enforcement_illegal_photo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "location_description":
			out.Values[i] = ec._app_enforcement_location_description(ctx, field, obj)
		case "operation_user":
			out.Values[i] = ec._app_enforcement_operation_user(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._app_enforcement_picket_status(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._app_enforcement_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._app_enforcement_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._app_enforcement_vehicle_id(ctx, field, obj)
		case "violation_detail_id":
			out.Values[i] = ec._app_enforcement_violation_detail_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var app_enforcement_aggregateImplementors = []string{"app_enforcement_aggregate"}

func (ec *executionContext) _app_enforcement_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, app_enforcement_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("app_enforcement_aggregate")
		case "aggregate":
			out.Values[i] = ec._app_enforcement_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._app_enforcement_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var app_enforcement_aggregate_fieldsImplementors = []string{"app_enforcement_aggregate_fields"}

func (ec *executionContext) _app_enforcement_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, app_enforcement_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("app_enforcement_aggregate_fields")
		case "avg":
			out.Values[i] = ec._app_enforcement_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._app_enforcement_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._app_enforcement_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._app_enforcement_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._app_enforcement_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._app_enforcement_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._app_enforcement_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._app_enforcement_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._app_enforcement_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._app_enforcement_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._app_enforcement_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var app_enforcement_avg_fieldsImplementors = []string{"app_enforcement_avg_fields"}

func (ec *executionContext) _app_enforcement_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, app_enforcement_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("app_enforcement_avg_fields")
		case "id":
			out.Values[i] = ec._app_enforcement_avg_fields_id(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._app_enforcement_avg_fields_picket_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var app_enforcement_max_fieldsImplementors = []string{"app_enforcement_max_fields"}

func (ec *executionContext) _app_enforcement_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, app_enforcement_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("app_enforcement_max_fields")
		case "created_at":
			out.Values[i] = ec._app_enforcement_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._app_enforcement_max_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._app_enforcement_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._app_enforcement_max_fields_deleted_by(ctx, field, obj)
		case "edit_text":
			out.Values[i] = ec._app_enforcement_max_fields_edit_text(ctx, field, obj)
		case "enterprise_type":
			out.Values[i] = ec._app_enforcement_max_fields_enterprise_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._app_enforcement_max_fields_id(ctx, field, obj)
		case "illegal_photo_id":
			out.Values[i] = ec._app_enforcement_max_fields_illegal_photo_id(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._app_enforcement_max_fields_location_description(ctx, field, obj)
		case "operation_user":
			out.Values[i] = ec._app_enforcement_max_fields_operation_user(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._app_enforcement_max_fields_picket_status(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._app_enforcement_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._app_enforcement_max_fields_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._app_enforcement_max_fields_vehicle_id(ctx, field, obj)
		case "violation_detail_id":
			out.Values[i] = ec._app_enforcement_max_fields_violation_detail_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var app_enforcement_min_fieldsImplementors = []string{"app_enforcement_min_fields"}

func (ec *executionContext) _app_enforcement_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, app_enforcement_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("app_enforcement_min_fields")
		case "created_at":
			out.Values[i] = ec._app_enforcement_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._app_enforcement_min_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._app_enforcement_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._app_enforcement_min_fields_deleted_by(ctx, field, obj)
		case "edit_text":
			out.Values[i] = ec._app_enforcement_min_fields_edit_text(ctx, field, obj)
		case "enterprise_type":
			out.Values[i] = ec._app_enforcement_min_fields_enterprise_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._app_enforcement_min_fields_id(ctx, field, obj)
		case "illegal_photo_id":
			out.Values[i] = ec._app_enforcement_min_fields_illegal_photo_id(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._app_enforcement_min_fields_location_description(ctx, field, obj)
		case "operation_user":
			out.Values[i] = ec._app_enforcement_min_fields_operation_user(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._app_enforcement_min_fields_picket_status(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._app_enforcement_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._app_enforcement_min_fields_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._app_enforcement_min_fields_vehicle_id(ctx, field, obj)
		case "violation_detail_id":
			out.Values[i] = ec._app_enforcement_min_fields_violation_detail_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var app_enforcement_mutation_responseImplementors = []string{"app_enforcement_mutation_response"}

func (ec *executionContext) _app_enforcement_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, app_enforcement_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("app_enforcement_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._app_enforcement_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._app_enforcement_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var app_enforcement_stddev_fieldsImplementors = []string{"app_enforcement_stddev_fields"}

func (ec *executionContext) _app_enforcement_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, app_enforcement_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("app_enforcement_stddev_fields")
		case "id":
			out.Values[i] = ec._app_enforcement_stddev_fields_id(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._app_enforcement_stddev_fields_picket_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var app_enforcement_stddev_pop_fieldsImplementors = []string{"app_enforcement_stddev_pop_fields"}

func (ec *executionContext) _app_enforcement_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, app_enforcement_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("app_enforcement_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._app_enforcement_stddev_pop_fields_id(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._app_enforcement_stddev_pop_fields_picket_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var app_enforcement_stddev_samp_fieldsImplementors = []string{"app_enforcement_stddev_samp_fields"}

func (ec *executionContext) _app_enforcement_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, app_enforcement_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("app_enforcement_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._app_enforcement_stddev_samp_fields_id(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._app_enforcement_stddev_samp_fields_picket_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var app_enforcement_sum_fieldsImplementors = []string{"app_enforcement_sum_fields"}

func (ec *executionContext) _app_enforcement_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, app_enforcement_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("app_enforcement_sum_fields")
		case "id":
			out.Values[i] = ec._app_enforcement_sum_fields_id(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._app_enforcement_sum_fields_picket_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var app_enforcement_var_pop_fieldsImplementors = []string{"app_enforcement_var_pop_fields"}

func (ec *executionContext) _app_enforcement_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, app_enforcement_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("app_enforcement_var_pop_fields")
		case "id":
			out.Values[i] = ec._app_enforcement_var_pop_fields_id(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._app_enforcement_var_pop_fields_picket_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var app_enforcement_var_samp_fieldsImplementors = []string{"app_enforcement_var_samp_fields"}

func (ec *executionContext) _app_enforcement_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, app_enforcement_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("app_enforcement_var_samp_fields")
		case "id":
			out.Values[i] = ec._app_enforcement_var_samp_fields_id(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._app_enforcement_var_samp_fields_picket_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var app_enforcement_variance_fieldsImplementors = []string{"app_enforcement_variance_fields"}

func (ec *executionContext) _app_enforcement_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AppEnforcementVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, app_enforcement_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("app_enforcement_variance_fields")
		case "id":
			out.Values[i] = ec._app_enforcement_variance_fields_id(ctx, field, obj)
		case "picket_status":
			out.Values[i] = ec._app_enforcement_variance_fields_picket_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_recordImplementors = []string{"dispute_violation_record"}

func (ec *executionContext) _dispute_violation_record(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_recordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record")
		case "agent_id_number":
			out.Values[i] = ec._dispute_violation_record_agent_id_number(ctx, field, obj)
		case "approve_state":
			out.Values[i] = ec._dispute_violation_record_approve_state(ctx, field, obj)
		case "business_license":
			out.Values[i] = ec._dispute_violation_record_business_license(ctx, field, obj)
		case "contact_address":
			out.Values[i] = ec._dispute_violation_record_contact_address(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._dispute_violation_record_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._dispute_violation_record_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._dispute_violation_record_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._dispute_violation_record_deleted_by(ctx, field, obj)
		case "dispute_violation_id":
			out.Values[i] = ec._dispute_violation_record_dispute_violation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_license":
			out.Values[i] = ec._dispute_violation_record_driver_license(ctx, field, obj)
		case "driving_license":
			out.Values[i] = ec._dispute_violation_record_driving_license(ctx, field, obj)
		case "driving_log":
			out.Values[i] = ec._dispute_violation_record_driving_log(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dispute_violation_record_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id_card":
			out.Values[i] = ec._dispute_violation_record_id_card(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._dispute_violation_record_is_delete(ctx, field, obj)
		case "labor_contract":
			out.Values[i] = ec._dispute_violation_record_labor_contract(ctx, field, obj)
		case "legal_person_id_number":
			out.Values[i] = ec._dispute_violation_record_legal_person_id_number(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._dispute_violation_record_organization_code(ctx, field, obj)
		case "other_evidence":
			out.Values[i] = ec._dispute_violation_record_other_evidence(ctx, field, obj)
		case "pic_evidence":
			out.Values[i] = ec._dispute_violation_record_pic_evidence(ctx, field, obj)
		case "statement":
			out.Values[i] = ec._dispute_violation_record_statement(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._dispute_violation_record_update_time_in(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._dispute_violation_record_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._dispute_violation_record_updated_by(ctx, field, obj)
		case "vehicle_manager_id_card":
			out.Values[i] = ec._dispute_violation_record_vehicle_manager_id_card(ctx, field, obj)
		case "violation_detail_id":
			out.Values[i] = ec._dispute_violation_record_violation_detail_id(ctx, field, obj)
		case "witness":
			out.Values[i] = ec._dispute_violation_record_witness(ctx, field, obj)
		case "written_application_materials":
			out.Values[i] = ec._dispute_violation_record_written_application_materials(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_aggregateImplementors = []string{"dispute_violation_record_aggregate"}

func (ec *executionContext) _dispute_violation_record_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_aggregate")
		case "aggregate":
			out.Values[i] = ec._dispute_violation_record_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._dispute_violation_record_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_aggregate_fieldsImplementors = []string{"dispute_violation_record_aggregate_fields"}

func (ec *executionContext) _dispute_violation_record_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_aggregate_fields")
		case "avg":
			out.Values[i] = ec._dispute_violation_record_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._dispute_violation_record_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._dispute_violation_record_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._dispute_violation_record_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._dispute_violation_record_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._dispute_violation_record_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._dispute_violation_record_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._dispute_violation_record_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._dispute_violation_record_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._dispute_violation_record_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._dispute_violation_record_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_avg_fieldsImplementors = []string{"dispute_violation_record_avg_fields"}

func (ec *executionContext) _dispute_violation_record_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_avg_fields")
		case "approve_state":
			out.Values[i] = ec._dispute_violation_record_avg_fields_approve_state(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dispute_violation_record_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_logImplementors = []string{"dispute_violation_record_log"}

func (ec *executionContext) _dispute_violation_record_log(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_logImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_log")
		case "approver":
			out.Values[i] = ec._dispute_violation_record_log_approver(ctx, field, obj)
		case "dispute_violation_id":
			out.Values[i] = ec._dispute_violation_record_log_dispute_violation_id(ctx, field, obj)
		case "dispute_violation_log_id":
			out.Values[i] = ec._dispute_violation_record_log_dispute_violation_log_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			out.Values[i] = ec._dispute_violation_record_log_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "review_action_name":
			out.Values[i] = ec._dispute_violation_record_log_review_action_name(ctx, field, obj)
		case "review_opinion":
			out.Values[i] = ec._dispute_violation_record_log_review_opinion(ctx, field, obj)
		case "review_result":
			out.Values[i] = ec._dispute_violation_record_log_review_result(ctx, field, obj)
		case "review_time":
			out.Values[i] = ec._dispute_violation_record_log_review_time(ctx, field, obj)
		case "reviewer":
			out.Values[i] = ec._dispute_violation_record_log_reviewer(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._dispute_violation_record_log_update_time_in(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_log_aggregateImplementors = []string{"dispute_violation_record_log_aggregate"}

func (ec *executionContext) _dispute_violation_record_log_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_log_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_log_aggregate")
		case "aggregate":
			out.Values[i] = ec._dispute_violation_record_log_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._dispute_violation_record_log_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_log_aggregate_fieldsImplementors = []string{"dispute_violation_record_log_aggregate_fields"}

func (ec *executionContext) _dispute_violation_record_log_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_log_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_log_aggregate_fields")
		case "avg":
			out.Values[i] = ec._dispute_violation_record_log_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._dispute_violation_record_log_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._dispute_violation_record_log_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._dispute_violation_record_log_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._dispute_violation_record_log_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._dispute_violation_record_log_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._dispute_violation_record_log_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._dispute_violation_record_log_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._dispute_violation_record_log_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._dispute_violation_record_log_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._dispute_violation_record_log_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_log_avg_fieldsImplementors = []string{"dispute_violation_record_log_avg_fields"}

func (ec *executionContext) _dispute_violation_record_log_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_log_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_log_avg_fields")
		case "id":
			out.Values[i] = ec._dispute_violation_record_log_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_log_max_fieldsImplementors = []string{"dispute_violation_record_log_max_fields"}

func (ec *executionContext) _dispute_violation_record_log_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_log_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_log_max_fields")
		case "approver":
			out.Values[i] = ec._dispute_violation_record_log_max_fields_approver(ctx, field, obj)
		case "dispute_violation_id":
			out.Values[i] = ec._dispute_violation_record_log_max_fields_dispute_violation_id(ctx, field, obj)
		case "dispute_violation_log_id":
			out.Values[i] = ec._dispute_violation_record_log_max_fields_dispute_violation_log_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dispute_violation_record_log_max_fields_id(ctx, field, obj)
		case "review_action_name":
			out.Values[i] = ec._dispute_violation_record_log_max_fields_review_action_name(ctx, field, obj)
		case "review_opinion":
			out.Values[i] = ec._dispute_violation_record_log_max_fields_review_opinion(ctx, field, obj)
		case "review_result":
			out.Values[i] = ec._dispute_violation_record_log_max_fields_review_result(ctx, field, obj)
		case "review_time":
			out.Values[i] = ec._dispute_violation_record_log_max_fields_review_time(ctx, field, obj)
		case "reviewer":
			out.Values[i] = ec._dispute_violation_record_log_max_fields_reviewer(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._dispute_violation_record_log_max_fields_update_time_in(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_log_min_fieldsImplementors = []string{"dispute_violation_record_log_min_fields"}

func (ec *executionContext) _dispute_violation_record_log_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_log_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_log_min_fields")
		case "approver":
			out.Values[i] = ec._dispute_violation_record_log_min_fields_approver(ctx, field, obj)
		case "dispute_violation_id":
			out.Values[i] = ec._dispute_violation_record_log_min_fields_dispute_violation_id(ctx, field, obj)
		case "dispute_violation_log_id":
			out.Values[i] = ec._dispute_violation_record_log_min_fields_dispute_violation_log_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dispute_violation_record_log_min_fields_id(ctx, field, obj)
		case "review_action_name":
			out.Values[i] = ec._dispute_violation_record_log_min_fields_review_action_name(ctx, field, obj)
		case "review_opinion":
			out.Values[i] = ec._dispute_violation_record_log_min_fields_review_opinion(ctx, field, obj)
		case "review_result":
			out.Values[i] = ec._dispute_violation_record_log_min_fields_review_result(ctx, field, obj)
		case "review_time":
			out.Values[i] = ec._dispute_violation_record_log_min_fields_review_time(ctx, field, obj)
		case "reviewer":
			out.Values[i] = ec._dispute_violation_record_log_min_fields_reviewer(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._dispute_violation_record_log_min_fields_update_time_in(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_log_mutation_responseImplementors = []string{"dispute_violation_record_log_mutation_response"}

func (ec *executionContext) _dispute_violation_record_log_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_log_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_log_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._dispute_violation_record_log_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._dispute_violation_record_log_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_log_stddev_fieldsImplementors = []string{"dispute_violation_record_log_stddev_fields"}

func (ec *executionContext) _dispute_violation_record_log_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_log_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_log_stddev_fields")
		case "id":
			out.Values[i] = ec._dispute_violation_record_log_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_log_stddev_pop_fieldsImplementors = []string{"dispute_violation_record_log_stddev_pop_fields"}

func (ec *executionContext) _dispute_violation_record_log_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_log_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_log_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._dispute_violation_record_log_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_log_stddev_samp_fieldsImplementors = []string{"dispute_violation_record_log_stddev_samp_fields"}

func (ec *executionContext) _dispute_violation_record_log_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_log_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_log_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._dispute_violation_record_log_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_log_sum_fieldsImplementors = []string{"dispute_violation_record_log_sum_fields"}

func (ec *executionContext) _dispute_violation_record_log_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_log_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_log_sum_fields")
		case "id":
			out.Values[i] = ec._dispute_violation_record_log_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_log_var_pop_fieldsImplementors = []string{"dispute_violation_record_log_var_pop_fields"}

func (ec *executionContext) _dispute_violation_record_log_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_log_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_log_var_pop_fields")
		case "id":
			out.Values[i] = ec._dispute_violation_record_log_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_log_var_samp_fieldsImplementors = []string{"dispute_violation_record_log_var_samp_fields"}

func (ec *executionContext) _dispute_violation_record_log_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_log_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_log_var_samp_fields")
		case "id":
			out.Values[i] = ec._dispute_violation_record_log_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_log_variance_fieldsImplementors = []string{"dispute_violation_record_log_variance_fields"}

func (ec *executionContext) _dispute_violation_record_log_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_log_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_log_variance_fields")
		case "id":
			out.Values[i] = ec._dispute_violation_record_log_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_max_fieldsImplementors = []string{"dispute_violation_record_max_fields"}

func (ec *executionContext) _dispute_violation_record_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_max_fields")
		case "agent_id_number":
			out.Values[i] = ec._dispute_violation_record_max_fields_agent_id_number(ctx, field, obj)
		case "approve_state":
			out.Values[i] = ec._dispute_violation_record_max_fields_approve_state(ctx, field, obj)
		case "business_license":
			out.Values[i] = ec._dispute_violation_record_max_fields_business_license(ctx, field, obj)
		case "contact_address":
			out.Values[i] = ec._dispute_violation_record_max_fields_contact_address(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._dispute_violation_record_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._dispute_violation_record_max_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._dispute_violation_record_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._dispute_violation_record_max_fields_deleted_by(ctx, field, obj)
		case "dispute_violation_id":
			out.Values[i] = ec._dispute_violation_record_max_fields_dispute_violation_id(ctx, field, obj)
		case "driver_license":
			out.Values[i] = ec._dispute_violation_record_max_fields_driver_license(ctx, field, obj)
		case "driving_license":
			out.Values[i] = ec._dispute_violation_record_max_fields_driving_license(ctx, field, obj)
		case "driving_log":
			out.Values[i] = ec._dispute_violation_record_max_fields_driving_log(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dispute_violation_record_max_fields_id(ctx, field, obj)
		case "id_card":
			out.Values[i] = ec._dispute_violation_record_max_fields_id_card(ctx, field, obj)
		case "labor_contract":
			out.Values[i] = ec._dispute_violation_record_max_fields_labor_contract(ctx, field, obj)
		case "legal_person_id_number":
			out.Values[i] = ec._dispute_violation_record_max_fields_legal_person_id_number(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._dispute_violation_record_max_fields_organization_code(ctx, field, obj)
		case "pic_evidence":
			out.Values[i] = ec._dispute_violation_record_max_fields_pic_evidence(ctx, field, obj)
		case "statement":
			out.Values[i] = ec._dispute_violation_record_max_fields_statement(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._dispute_violation_record_max_fields_update_time_in(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._dispute_violation_record_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._dispute_violation_record_max_fields_updated_by(ctx, field, obj)
		case "vehicle_manager_id_card":
			out.Values[i] = ec._dispute_violation_record_max_fields_vehicle_manager_id_card(ctx, field, obj)
		case "violation_detail_id":
			out.Values[i] = ec._dispute_violation_record_max_fields_violation_detail_id(ctx, field, obj)
		case "witness":
			out.Values[i] = ec._dispute_violation_record_max_fields_witness(ctx, field, obj)
		case "written_application_materials":
			out.Values[i] = ec._dispute_violation_record_max_fields_written_application_materials(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_min_fieldsImplementors = []string{"dispute_violation_record_min_fields"}

func (ec *executionContext) _dispute_violation_record_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_min_fields")
		case "agent_id_number":
			out.Values[i] = ec._dispute_violation_record_min_fields_agent_id_number(ctx, field, obj)
		case "approve_state":
			out.Values[i] = ec._dispute_violation_record_min_fields_approve_state(ctx, field, obj)
		case "business_license":
			out.Values[i] = ec._dispute_violation_record_min_fields_business_license(ctx, field, obj)
		case "contact_address":
			out.Values[i] = ec._dispute_violation_record_min_fields_contact_address(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._dispute_violation_record_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._dispute_violation_record_min_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._dispute_violation_record_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._dispute_violation_record_min_fields_deleted_by(ctx, field, obj)
		case "dispute_violation_id":
			out.Values[i] = ec._dispute_violation_record_min_fields_dispute_violation_id(ctx, field, obj)
		case "driver_license":
			out.Values[i] = ec._dispute_violation_record_min_fields_driver_license(ctx, field, obj)
		case "driving_license":
			out.Values[i] = ec._dispute_violation_record_min_fields_driving_license(ctx, field, obj)
		case "driving_log":
			out.Values[i] = ec._dispute_violation_record_min_fields_driving_log(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dispute_violation_record_min_fields_id(ctx, field, obj)
		case "id_card":
			out.Values[i] = ec._dispute_violation_record_min_fields_id_card(ctx, field, obj)
		case "labor_contract":
			out.Values[i] = ec._dispute_violation_record_min_fields_labor_contract(ctx, field, obj)
		case "legal_person_id_number":
			out.Values[i] = ec._dispute_violation_record_min_fields_legal_person_id_number(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._dispute_violation_record_min_fields_organization_code(ctx, field, obj)
		case "pic_evidence":
			out.Values[i] = ec._dispute_violation_record_min_fields_pic_evidence(ctx, field, obj)
		case "statement":
			out.Values[i] = ec._dispute_violation_record_min_fields_statement(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._dispute_violation_record_min_fields_update_time_in(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._dispute_violation_record_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._dispute_violation_record_min_fields_updated_by(ctx, field, obj)
		case "vehicle_manager_id_card":
			out.Values[i] = ec._dispute_violation_record_min_fields_vehicle_manager_id_card(ctx, field, obj)
		case "violation_detail_id":
			out.Values[i] = ec._dispute_violation_record_min_fields_violation_detail_id(ctx, field, obj)
		case "witness":
			out.Values[i] = ec._dispute_violation_record_min_fields_witness(ctx, field, obj)
		case "written_application_materials":
			out.Values[i] = ec._dispute_violation_record_min_fields_written_application_materials(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_mutation_responseImplementors = []string{"dispute_violation_record_mutation_response"}

func (ec *executionContext) _dispute_violation_record_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._dispute_violation_record_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._dispute_violation_record_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_stddev_fieldsImplementors = []string{"dispute_violation_record_stddev_fields"}

func (ec *executionContext) _dispute_violation_record_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_stddev_fields")
		case "approve_state":
			out.Values[i] = ec._dispute_violation_record_stddev_fields_approve_state(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dispute_violation_record_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_stddev_pop_fieldsImplementors = []string{"dispute_violation_record_stddev_pop_fields"}

func (ec *executionContext) _dispute_violation_record_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_stddev_pop_fields")
		case "approve_state":
			out.Values[i] = ec._dispute_violation_record_stddev_pop_fields_approve_state(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dispute_violation_record_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_stddev_samp_fieldsImplementors = []string{"dispute_violation_record_stddev_samp_fields"}

func (ec *executionContext) _dispute_violation_record_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_stddev_samp_fields")
		case "approve_state":
			out.Values[i] = ec._dispute_violation_record_stddev_samp_fields_approve_state(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dispute_violation_record_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_sum_fieldsImplementors = []string{"dispute_violation_record_sum_fields"}

func (ec *executionContext) _dispute_violation_record_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_sum_fields")
		case "approve_state":
			out.Values[i] = ec._dispute_violation_record_sum_fields_approve_state(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dispute_violation_record_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_var_pop_fieldsImplementors = []string{"dispute_violation_record_var_pop_fields"}

func (ec *executionContext) _dispute_violation_record_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_var_pop_fields")
		case "approve_state":
			out.Values[i] = ec._dispute_violation_record_var_pop_fields_approve_state(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dispute_violation_record_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_var_samp_fieldsImplementors = []string{"dispute_violation_record_var_samp_fields"}

func (ec *executionContext) _dispute_violation_record_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_var_samp_fields")
		case "approve_state":
			out.Values[i] = ec._dispute_violation_record_var_samp_fields_approve_state(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dispute_violation_record_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dispute_violation_record_variance_fieldsImplementors = []string{"dispute_violation_record_variance_fields"}

func (ec *executionContext) _dispute_violation_record_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dispute_violation_record_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dispute_violation_record_variance_fields")
		case "approve_state":
			out.Values[i] = ec._dispute_violation_record_variance_fields_approve_state(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dispute_violation_record_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_peccancy_checkImplementors = []string{"driver_peccancy_check"}

func (ec *executionContext) _driver_peccancy_check(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheck) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_peccancy_checkImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_peccancy_check")
		case "created_at":
			out.Values[i] = ec._driver_peccancy_check_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._driver_peccancy_check_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._driver_peccancy_check_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._driver_peccancy_check_deleted_by(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._driver_peccancy_check_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._driver_peccancy_check_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_peccancy_check_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._driver_peccancy_check_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._driver_peccancy_check_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._driver_peccancy_check_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_peccancy_check_aggregateImplementors = []string{"driver_peccancy_check_aggregate"}

func (ec *executionContext) _driver_peccancy_check_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_peccancy_check_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_peccancy_check_aggregate")
		case "aggregate":
			out.Values[i] = ec._driver_peccancy_check_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._driver_peccancy_check_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_peccancy_check_aggregate_fieldsImplementors = []string{"driver_peccancy_check_aggregate_fields"}

func (ec *executionContext) _driver_peccancy_check_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_peccancy_check_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_peccancy_check_aggregate_fields")
		case "avg":
			out.Values[i] = ec._driver_peccancy_check_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._driver_peccancy_check_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._driver_peccancy_check_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._driver_peccancy_check_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._driver_peccancy_check_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._driver_peccancy_check_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._driver_peccancy_check_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._driver_peccancy_check_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._driver_peccancy_check_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._driver_peccancy_check_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._driver_peccancy_check_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_peccancy_check_avg_fieldsImplementors = []string{"driver_peccancy_check_avg_fields"}

func (ec *executionContext) _driver_peccancy_check_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_peccancy_check_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_peccancy_check_avg_fields")
		case "id":
			out.Values[i] = ec._driver_peccancy_check_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_peccancy_check_max_fieldsImplementors = []string{"driver_peccancy_check_max_fields"}

func (ec *executionContext) _driver_peccancy_check_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_peccancy_check_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_peccancy_check_max_fields")
		case "created_at":
			out.Values[i] = ec._driver_peccancy_check_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._driver_peccancy_check_max_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._driver_peccancy_check_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._driver_peccancy_check_max_fields_deleted_by(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._driver_peccancy_check_max_fields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._driver_peccancy_check_max_fields_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_peccancy_check_max_fields_id(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._driver_peccancy_check_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._driver_peccancy_check_max_fields_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._driver_peccancy_check_max_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_peccancy_check_min_fieldsImplementors = []string{"driver_peccancy_check_min_fields"}

func (ec *executionContext) _driver_peccancy_check_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_peccancy_check_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_peccancy_check_min_fields")
		case "created_at":
			out.Values[i] = ec._driver_peccancy_check_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._driver_peccancy_check_min_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._driver_peccancy_check_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._driver_peccancy_check_min_fields_deleted_by(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._driver_peccancy_check_min_fields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._driver_peccancy_check_min_fields_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_peccancy_check_min_fields_id(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._driver_peccancy_check_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._driver_peccancy_check_min_fields_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._driver_peccancy_check_min_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_peccancy_check_mutation_responseImplementors = []string{"driver_peccancy_check_mutation_response"}

func (ec *executionContext) _driver_peccancy_check_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_peccancy_check_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_peccancy_check_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._driver_peccancy_check_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._driver_peccancy_check_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_peccancy_check_stddev_fieldsImplementors = []string{"driver_peccancy_check_stddev_fields"}

func (ec *executionContext) _driver_peccancy_check_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_peccancy_check_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_peccancy_check_stddev_fields")
		case "id":
			out.Values[i] = ec._driver_peccancy_check_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_peccancy_check_stddev_pop_fieldsImplementors = []string{"driver_peccancy_check_stddev_pop_fields"}

func (ec *executionContext) _driver_peccancy_check_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_peccancy_check_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_peccancy_check_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._driver_peccancy_check_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_peccancy_check_stddev_samp_fieldsImplementors = []string{"driver_peccancy_check_stddev_samp_fields"}

func (ec *executionContext) _driver_peccancy_check_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_peccancy_check_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_peccancy_check_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._driver_peccancy_check_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_peccancy_check_sum_fieldsImplementors = []string{"driver_peccancy_check_sum_fields"}

func (ec *executionContext) _driver_peccancy_check_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_peccancy_check_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_peccancy_check_sum_fields")
		case "id":
			out.Values[i] = ec._driver_peccancy_check_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_peccancy_check_var_pop_fieldsImplementors = []string{"driver_peccancy_check_var_pop_fields"}

func (ec *executionContext) _driver_peccancy_check_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_peccancy_check_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_peccancy_check_var_pop_fields")
		case "id":
			out.Values[i] = ec._driver_peccancy_check_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_peccancy_check_var_samp_fieldsImplementors = []string{"driver_peccancy_check_var_samp_fields"}

func (ec *executionContext) _driver_peccancy_check_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_peccancy_check_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_peccancy_check_var_samp_fields")
		case "id":
			out.Values[i] = ec._driver_peccancy_check_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_peccancy_check_variance_fieldsImplementors = []string{"driver_peccancy_check_variance_fields"}

func (ec *executionContext) _driver_peccancy_check_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverPeccancyCheckVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_peccancy_check_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_peccancy_check_variance_fields")
		case "id":
			out.Values[i] = ec._driver_peccancy_check_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_itemsImplementors = []string{"enterprise_deduction_items"}

func (ec *executionContext) _enterprise_deduction_items(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionItems) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_itemsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_items")
		case "created_at":
			out.Values[i] = ec._enterprise_deduction_items_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._enterprise_deduction_items_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deduction_category":
			out.Values[i] = ec._enterprise_deduction_items_deduction_category(ctx, field, obj)
		case "deduction_item_description":
			out.Values[i] = ec._enterprise_deduction_items_deduction_item_description(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._enterprise_deduction_items_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._enterprise_deduction_items_deleted_by(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_items_demerit_points(ctx, field, obj)
		case "enterprise_deduction_item_id":
			out.Values[i] = ec._enterprise_deduction_items_enterprise_deduction_item_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			out.Values[i] = ec._enterprise_deduction_items_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._enterprise_deduction_items_is_delete(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._enterprise_deduction_items_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._enterprise_deduction_items_updated_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_items_aggregateImplementors = []string{"enterprise_deduction_items_aggregate"}

func (ec *executionContext) _enterprise_deduction_items_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionItemsAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_items_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_items_aggregate")
		case "aggregate":
			out.Values[i] = ec._enterprise_deduction_items_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._enterprise_deduction_items_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_items_aggregate_fieldsImplementors = []string{"enterprise_deduction_items_aggregate_fields"}

func (ec *executionContext) _enterprise_deduction_items_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionItemsAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_items_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_items_aggregate_fields")
		case "avg":
			out.Values[i] = ec._enterprise_deduction_items_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._enterprise_deduction_items_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._enterprise_deduction_items_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._enterprise_deduction_items_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._enterprise_deduction_items_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._enterprise_deduction_items_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._enterprise_deduction_items_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._enterprise_deduction_items_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._enterprise_deduction_items_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._enterprise_deduction_items_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._enterprise_deduction_items_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_items_avg_fieldsImplementors = []string{"enterprise_deduction_items_avg_fields"}

func (ec *executionContext) _enterprise_deduction_items_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionItemsAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_items_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_items_avg_fields")
		case "deduction_category":
			out.Values[i] = ec._enterprise_deduction_items_avg_fields_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_items_avg_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_items_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_items_max_fieldsImplementors = []string{"enterprise_deduction_items_max_fields"}

func (ec *executionContext) _enterprise_deduction_items_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionItemsMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_items_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_items_max_fields")
		case "created_at":
			out.Values[i] = ec._enterprise_deduction_items_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._enterprise_deduction_items_max_fields_created_by(ctx, field, obj)
		case "deduction_category":
			out.Values[i] = ec._enterprise_deduction_items_max_fields_deduction_category(ctx, field, obj)
		case "deduction_item_description":
			out.Values[i] = ec._enterprise_deduction_items_max_fields_deduction_item_description(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._enterprise_deduction_items_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._enterprise_deduction_items_max_fields_deleted_by(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_items_max_fields_demerit_points(ctx, field, obj)
		case "enterprise_deduction_item_id":
			out.Values[i] = ec._enterprise_deduction_items_max_fields_enterprise_deduction_item_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_items_max_fields_id(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._enterprise_deduction_items_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._enterprise_deduction_items_max_fields_updated_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_items_min_fieldsImplementors = []string{"enterprise_deduction_items_min_fields"}

func (ec *executionContext) _enterprise_deduction_items_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionItemsMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_items_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_items_min_fields")
		case "created_at":
			out.Values[i] = ec._enterprise_deduction_items_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._enterprise_deduction_items_min_fields_created_by(ctx, field, obj)
		case "deduction_category":
			out.Values[i] = ec._enterprise_deduction_items_min_fields_deduction_category(ctx, field, obj)
		case "deduction_item_description":
			out.Values[i] = ec._enterprise_deduction_items_min_fields_deduction_item_description(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._enterprise_deduction_items_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._enterprise_deduction_items_min_fields_deleted_by(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_items_min_fields_demerit_points(ctx, field, obj)
		case "enterprise_deduction_item_id":
			out.Values[i] = ec._enterprise_deduction_items_min_fields_enterprise_deduction_item_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_items_min_fields_id(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._enterprise_deduction_items_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._enterprise_deduction_items_min_fields_updated_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_items_mutation_responseImplementors = []string{"enterprise_deduction_items_mutation_response"}

func (ec *executionContext) _enterprise_deduction_items_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionItemsMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_items_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_items_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._enterprise_deduction_items_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._enterprise_deduction_items_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_items_stddev_fieldsImplementors = []string{"enterprise_deduction_items_stddev_fields"}

func (ec *executionContext) _enterprise_deduction_items_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionItemsStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_items_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_items_stddev_fields")
		case "deduction_category":
			out.Values[i] = ec._enterprise_deduction_items_stddev_fields_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_items_stddev_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_items_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_items_stddev_pop_fieldsImplementors = []string{"enterprise_deduction_items_stddev_pop_fields"}

func (ec *executionContext) _enterprise_deduction_items_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionItemsStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_items_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_items_stddev_pop_fields")
		case "deduction_category":
			out.Values[i] = ec._enterprise_deduction_items_stddev_pop_fields_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_items_stddev_pop_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_items_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_items_stddev_samp_fieldsImplementors = []string{"enterprise_deduction_items_stddev_samp_fields"}

func (ec *executionContext) _enterprise_deduction_items_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionItemsStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_items_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_items_stddev_samp_fields")
		case "deduction_category":
			out.Values[i] = ec._enterprise_deduction_items_stddev_samp_fields_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_items_stddev_samp_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_items_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_items_sum_fieldsImplementors = []string{"enterprise_deduction_items_sum_fields"}

func (ec *executionContext) _enterprise_deduction_items_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionItemsSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_items_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_items_sum_fields")
		case "deduction_category":
			out.Values[i] = ec._enterprise_deduction_items_sum_fields_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_items_sum_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_items_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_items_var_pop_fieldsImplementors = []string{"enterprise_deduction_items_var_pop_fields"}

func (ec *executionContext) _enterprise_deduction_items_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionItemsVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_items_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_items_var_pop_fields")
		case "deduction_category":
			out.Values[i] = ec._enterprise_deduction_items_var_pop_fields_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_items_var_pop_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_items_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_items_var_samp_fieldsImplementors = []string{"enterprise_deduction_items_var_samp_fields"}

func (ec *executionContext) _enterprise_deduction_items_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionItemsVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_items_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_items_var_samp_fields")
		case "deduction_category":
			out.Values[i] = ec._enterprise_deduction_items_var_samp_fields_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_items_var_samp_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_items_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_items_variance_fieldsImplementors = []string{"enterprise_deduction_items_variance_fields"}

func (ec *executionContext) _enterprise_deduction_items_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionItemsVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_items_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_items_variance_fields")
		case "deduction_category":
			out.Values[i] = ec._enterprise_deduction_items_variance_fields_deduction_category(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_items_variance_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_items_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_operation_recordImplementors = []string{"enterprise_deduction_operation_record"}

func (ec *executionContext) _enterprise_deduction_operation_record(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionOperationRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_operation_recordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_operation_record")
		case "created_at":
			out.Values[i] = ec._enterprise_deduction_operation_record_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._enterprise_deduction_operation_record_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._enterprise_deduction_operation_record_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._enterprise_deduction_operation_record_deleted_by(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_operation_record_demerit_points(ctx, field, obj)
		case "enterprise_deduction_item_id":
			out.Values[i] = ec._enterprise_deduction_operation_record_enterprise_deduction_item_id(ctx, field, obj)
		case "enterprise_duduction_operation_id":
			out.Values[i] = ec._enterprise_deduction_operation_record_enterprise_duduction_operation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._enterprise_deduction_operation_record_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_operation_record_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._enterprise_deduction_operation_record_is_delete(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._enterprise_deduction_operation_record_remarks(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._enterprise_deduction_operation_record_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._enterprise_deduction_operation_record_updated_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_operation_record_aggregateImplementors = []string{"enterprise_deduction_operation_record_aggregate"}

func (ec *executionContext) _enterprise_deduction_operation_record_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionOperationRecordAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_operation_record_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_operation_record_aggregate")
		case "aggregate":
			out.Values[i] = ec._enterprise_deduction_operation_record_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._enterprise_deduction_operation_record_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_operation_record_aggregate_fieldsImplementors = []string{"enterprise_deduction_operation_record_aggregate_fields"}

func (ec *executionContext) _enterprise_deduction_operation_record_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionOperationRecordAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_operation_record_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_operation_record_aggregate_fields")
		case "avg":
			out.Values[i] = ec._enterprise_deduction_operation_record_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._enterprise_deduction_operation_record_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._enterprise_deduction_operation_record_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._enterprise_deduction_operation_record_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._enterprise_deduction_operation_record_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._enterprise_deduction_operation_record_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._enterprise_deduction_operation_record_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._enterprise_deduction_operation_record_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._enterprise_deduction_operation_record_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._enterprise_deduction_operation_record_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._enterprise_deduction_operation_record_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_operation_record_avg_fieldsImplementors = []string{"enterprise_deduction_operation_record_avg_fields"}

func (ec *executionContext) _enterprise_deduction_operation_record_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionOperationRecordAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_operation_record_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_operation_record_avg_fields")
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_operation_record_avg_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_operation_record_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_operation_record_max_fieldsImplementors = []string{"enterprise_deduction_operation_record_max_fields"}

func (ec *executionContext) _enterprise_deduction_operation_record_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionOperationRecordMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_operation_record_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_operation_record_max_fields")
		case "created_at":
			out.Values[i] = ec._enterprise_deduction_operation_record_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._enterprise_deduction_operation_record_max_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._enterprise_deduction_operation_record_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._enterprise_deduction_operation_record_max_fields_deleted_by(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_operation_record_max_fields_demerit_points(ctx, field, obj)
		case "enterprise_deduction_item_id":
			out.Values[i] = ec._enterprise_deduction_operation_record_max_fields_enterprise_deduction_item_id(ctx, field, obj)
		case "enterprise_duduction_operation_id":
			out.Values[i] = ec._enterprise_deduction_operation_record_max_fields_enterprise_duduction_operation_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._enterprise_deduction_operation_record_max_fields_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_operation_record_max_fields_id(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._enterprise_deduction_operation_record_max_fields_remarks(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._enterprise_deduction_operation_record_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._enterprise_deduction_operation_record_max_fields_updated_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_operation_record_min_fieldsImplementors = []string{"enterprise_deduction_operation_record_min_fields"}

func (ec *executionContext) _enterprise_deduction_operation_record_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionOperationRecordMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_operation_record_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_operation_record_min_fields")
		case "created_at":
			out.Values[i] = ec._enterprise_deduction_operation_record_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._enterprise_deduction_operation_record_min_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._enterprise_deduction_operation_record_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._enterprise_deduction_operation_record_min_fields_deleted_by(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_operation_record_min_fields_demerit_points(ctx, field, obj)
		case "enterprise_deduction_item_id":
			out.Values[i] = ec._enterprise_deduction_operation_record_min_fields_enterprise_deduction_item_id(ctx, field, obj)
		case "enterprise_duduction_operation_id":
			out.Values[i] = ec._enterprise_deduction_operation_record_min_fields_enterprise_duduction_operation_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._enterprise_deduction_operation_record_min_fields_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_operation_record_min_fields_id(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._enterprise_deduction_operation_record_min_fields_remarks(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._enterprise_deduction_operation_record_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._enterprise_deduction_operation_record_min_fields_updated_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_operation_record_mutation_responseImplementors = []string{"enterprise_deduction_operation_record_mutation_response"}

func (ec *executionContext) _enterprise_deduction_operation_record_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionOperationRecordMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_operation_record_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_operation_record_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._enterprise_deduction_operation_record_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._enterprise_deduction_operation_record_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_operation_record_stddev_fieldsImplementors = []string{"enterprise_deduction_operation_record_stddev_fields"}

func (ec *executionContext) _enterprise_deduction_operation_record_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionOperationRecordStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_operation_record_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_operation_record_stddev_fields")
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_operation_record_stddev_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_operation_record_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_operation_record_stddev_pop_fieldsImplementors = []string{"enterprise_deduction_operation_record_stddev_pop_fields"}

func (ec *executionContext) _enterprise_deduction_operation_record_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionOperationRecordStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_operation_record_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_operation_record_stddev_pop_fields")
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_operation_record_stddev_pop_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_operation_record_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_operation_record_stddev_samp_fieldsImplementors = []string{"enterprise_deduction_operation_record_stddev_samp_fields"}

func (ec *executionContext) _enterprise_deduction_operation_record_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionOperationRecordStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_operation_record_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_operation_record_stddev_samp_fields")
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_operation_record_stddev_samp_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_operation_record_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_operation_record_sum_fieldsImplementors = []string{"enterprise_deduction_operation_record_sum_fields"}

func (ec *executionContext) _enterprise_deduction_operation_record_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionOperationRecordSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_operation_record_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_operation_record_sum_fields")
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_operation_record_sum_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_operation_record_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_operation_record_var_pop_fieldsImplementors = []string{"enterprise_deduction_operation_record_var_pop_fields"}

func (ec *executionContext) _enterprise_deduction_operation_record_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionOperationRecordVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_operation_record_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_operation_record_var_pop_fields")
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_operation_record_var_pop_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_operation_record_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_operation_record_var_samp_fieldsImplementors = []string{"enterprise_deduction_operation_record_var_samp_fields"}

func (ec *executionContext) _enterprise_deduction_operation_record_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionOperationRecordVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_operation_record_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_operation_record_var_samp_fields")
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_operation_record_var_samp_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_operation_record_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_deduction_operation_record_variance_fieldsImplementors = []string{"enterprise_deduction_operation_record_variance_fields"}

func (ec *executionContext) _enterprise_deduction_operation_record_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDeductionOperationRecordVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_deduction_operation_record_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_deduction_operation_record_variance_fields")
		case "demerit_points":
			out.Values[i] = ec._enterprise_deduction_operation_record_variance_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_deduction_operation_record_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegal_photoImplementors = []string{"illegal_photo"}

func (ec *executionContext) _illegal_photo(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhoto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegal_photoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("illegal_photo")
		case "created_at":
			out.Values[i] = ec._illegal_photo_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._illegal_photo_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._illegal_photo_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._illegal_photo_deleted_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._illegal_photo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "illegal_photo_id":
			out.Values[i] = ec._illegal_photo_illegal_photo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._illegal_photo_is_delete(ctx, field, obj)
		case "is_synchronized":
			out.Values[i] = ec._illegal_photo_is_synchronized(ctx, field, obj)
		case "picture_address":
			out.Values[i] = ec._illegal_photo_picture_address(ctx, field, obj)
		case "picture_name":
			out.Values[i] = ec._illegal_photo_picture_name(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._illegal_photo_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._illegal_photo_updated_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegal_photo_aggregateImplementors = []string{"illegal_photo_aggregate"}

func (ec *executionContext) _illegal_photo_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegal_photo_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("illegal_photo_aggregate")
		case "aggregate":
			out.Values[i] = ec._illegal_photo_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._illegal_photo_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegal_photo_aggregate_fieldsImplementors = []string{"illegal_photo_aggregate_fields"}

func (ec *executionContext) _illegal_photo_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegal_photo_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("illegal_photo_aggregate_fields")
		case "avg":
			out.Values[i] = ec._illegal_photo_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._illegal_photo_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._illegal_photo_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._illegal_photo_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._illegal_photo_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._illegal_photo_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._illegal_photo_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._illegal_photo_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._illegal_photo_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._illegal_photo_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._illegal_photo_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegal_photo_avg_fieldsImplementors = []string{"illegal_photo_avg_fields"}

func (ec *executionContext) _illegal_photo_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegal_photo_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("illegal_photo_avg_fields")
		case "id":
			out.Values[i] = ec._illegal_photo_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegal_photo_max_fieldsImplementors = []string{"illegal_photo_max_fields"}

func (ec *executionContext) _illegal_photo_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegal_photo_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("illegal_photo_max_fields")
		case "created_at":
			out.Values[i] = ec._illegal_photo_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._illegal_photo_max_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._illegal_photo_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._illegal_photo_max_fields_deleted_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._illegal_photo_max_fields_id(ctx, field, obj)
		case "illegal_photo_id":
			out.Values[i] = ec._illegal_photo_max_fields_illegal_photo_id(ctx, field, obj)
		case "picture_address":
			out.Values[i] = ec._illegal_photo_max_fields_picture_address(ctx, field, obj)
		case "picture_name":
			out.Values[i] = ec._illegal_photo_max_fields_picture_name(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._illegal_photo_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._illegal_photo_max_fields_updated_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegal_photo_min_fieldsImplementors = []string{"illegal_photo_min_fields"}

func (ec *executionContext) _illegal_photo_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegal_photo_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("illegal_photo_min_fields")
		case "created_at":
			out.Values[i] = ec._illegal_photo_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._illegal_photo_min_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._illegal_photo_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._illegal_photo_min_fields_deleted_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._illegal_photo_min_fields_id(ctx, field, obj)
		case "illegal_photo_id":
			out.Values[i] = ec._illegal_photo_min_fields_illegal_photo_id(ctx, field, obj)
		case "picture_address":
			out.Values[i] = ec._illegal_photo_min_fields_picture_address(ctx, field, obj)
		case "picture_name":
			out.Values[i] = ec._illegal_photo_min_fields_picture_name(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._illegal_photo_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._illegal_photo_min_fields_updated_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegal_photo_mutation_responseImplementors = []string{"illegal_photo_mutation_response"}

func (ec *executionContext) _illegal_photo_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegal_photo_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("illegal_photo_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._illegal_photo_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._illegal_photo_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegal_photo_stddev_fieldsImplementors = []string{"illegal_photo_stddev_fields"}

func (ec *executionContext) _illegal_photo_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegal_photo_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("illegal_photo_stddev_fields")
		case "id":
			out.Values[i] = ec._illegal_photo_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegal_photo_stddev_pop_fieldsImplementors = []string{"illegal_photo_stddev_pop_fields"}

func (ec *executionContext) _illegal_photo_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegal_photo_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("illegal_photo_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._illegal_photo_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegal_photo_stddev_samp_fieldsImplementors = []string{"illegal_photo_stddev_samp_fields"}

func (ec *executionContext) _illegal_photo_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegal_photo_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("illegal_photo_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._illegal_photo_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegal_photo_sum_fieldsImplementors = []string{"illegal_photo_sum_fields"}

func (ec *executionContext) _illegal_photo_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegal_photo_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("illegal_photo_sum_fields")
		case "id":
			out.Values[i] = ec._illegal_photo_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegal_photo_var_pop_fieldsImplementors = []string{"illegal_photo_var_pop_fields"}

func (ec *executionContext) _illegal_photo_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegal_photo_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("illegal_photo_var_pop_fields")
		case "id":
			out.Values[i] = ec._illegal_photo_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegal_photo_var_samp_fieldsImplementors = []string{"illegal_photo_var_samp_fields"}

func (ec *executionContext) _illegal_photo_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegal_photo_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("illegal_photo_var_samp_fields")
		case "id":
			out.Values[i] = ec._illegal_photo_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var illegal_photo_variance_fieldsImplementors = []string{"illegal_photo_variance_fields"}

func (ec *executionContext) _illegal_photo_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.IllegalPhotoVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, illegal_photo_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("illegal_photo_variance_fields")
		case "id":
			out.Values[i] = ec._illegal_photo_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regional_violation_registerImplementors = []string{"regional_violation_register"}

func (ec *executionContext) _regional_violation_register(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegister) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regional_violation_registerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("regional_violation_register")
		case "created_at":
			out.Values[i] = ec._regional_violation_register_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._regional_violation_register_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._regional_violation_register_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._regional_violation_register_deleted_by(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._regional_violation_register_driver_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._regional_violation_register_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "illegal_code":
			out.Values[i] = ec._regional_violation_register_illegal_code(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._regional_violation_register_illegal_time(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._regional_violation_register_illegal_type(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._regional_violation_register_is_delete(ctx, field, obj)
		case "is_register":
			out.Values[i] = ec._regional_violation_register_is_register(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._regional_violation_register_operator(ctx, field, obj)
		case "processing_agency":
			out.Values[i] = ec._regional_violation_register_processing_agency(ctx, field, obj)
		case "regional_violation_register_id":
			out.Values[i] = ec._regional_violation_register_regional_violation_register_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "register_time":
			out.Values[i] = ec._regional_violation_register_register_time(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._regional_violation_register_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._regional_violation_register_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._regional_violation_register_vehicle_id(ctx, field, obj)
		case "violation_detail_id":
			out.Values[i] = ec._regional_violation_register_violation_detail_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regional_violation_register_aggregateImplementors = []string{"regional_violation_register_aggregate"}

func (ec *executionContext) _regional_violation_register_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regional_violation_register_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("regional_violation_register_aggregate")
		case "aggregate":
			out.Values[i] = ec._regional_violation_register_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._regional_violation_register_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regional_violation_register_aggregate_fieldsImplementors = []string{"regional_violation_register_aggregate_fields"}

func (ec *executionContext) _regional_violation_register_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regional_violation_register_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("regional_violation_register_aggregate_fields")
		case "avg":
			out.Values[i] = ec._regional_violation_register_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._regional_violation_register_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._regional_violation_register_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._regional_violation_register_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._regional_violation_register_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._regional_violation_register_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._regional_violation_register_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._regional_violation_register_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._regional_violation_register_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._regional_violation_register_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._regional_violation_register_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regional_violation_register_avg_fieldsImplementors = []string{"regional_violation_register_avg_fields"}

func (ec *executionContext) _regional_violation_register_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regional_violation_register_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("regional_violation_register_avg_fields")
		case "id":
			out.Values[i] = ec._regional_violation_register_avg_fields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._regional_violation_register_avg_fields_illegal_code(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._regional_violation_register_avg_fields_illegal_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regional_violation_register_max_fieldsImplementors = []string{"regional_violation_register_max_fields"}

func (ec *executionContext) _regional_violation_register_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regional_violation_register_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("regional_violation_register_max_fields")
		case "created_at":
			out.Values[i] = ec._regional_violation_register_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._regional_violation_register_max_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._regional_violation_register_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._regional_violation_register_max_fields_deleted_by(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._regional_violation_register_max_fields_driver_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._regional_violation_register_max_fields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._regional_violation_register_max_fields_illegal_code(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._regional_violation_register_max_fields_illegal_time(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._regional_violation_register_max_fields_illegal_type(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._regional_violation_register_max_fields_operator(ctx, field, obj)
		case "processing_agency":
			out.Values[i] = ec._regional_violation_register_max_fields_processing_agency(ctx, field, obj)
		case "regional_violation_register_id":
			out.Values[i] = ec._regional_violation_register_max_fields_regional_violation_register_id(ctx, field, obj)
		case "register_time":
			out.Values[i] = ec._regional_violation_register_max_fields_register_time(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._regional_violation_register_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._regional_violation_register_max_fields_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._regional_violation_register_max_fields_vehicle_id(ctx, field, obj)
		case "violation_detail_id":
			out.Values[i] = ec._regional_violation_register_max_fields_violation_detail_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regional_violation_register_min_fieldsImplementors = []string{"regional_violation_register_min_fields"}

func (ec *executionContext) _regional_violation_register_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regional_violation_register_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("regional_violation_register_min_fields")
		case "created_at":
			out.Values[i] = ec._regional_violation_register_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._regional_violation_register_min_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._regional_violation_register_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._regional_violation_register_min_fields_deleted_by(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._regional_violation_register_min_fields_driver_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._regional_violation_register_min_fields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._regional_violation_register_min_fields_illegal_code(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._regional_violation_register_min_fields_illegal_time(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._regional_violation_register_min_fields_illegal_type(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._regional_violation_register_min_fields_operator(ctx, field, obj)
		case "processing_agency":
			out.Values[i] = ec._regional_violation_register_min_fields_processing_agency(ctx, field, obj)
		case "regional_violation_register_id":
			out.Values[i] = ec._regional_violation_register_min_fields_regional_violation_register_id(ctx, field, obj)
		case "register_time":
			out.Values[i] = ec._regional_violation_register_min_fields_register_time(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._regional_violation_register_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._regional_violation_register_min_fields_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._regional_violation_register_min_fields_vehicle_id(ctx, field, obj)
		case "violation_detail_id":
			out.Values[i] = ec._regional_violation_register_min_fields_violation_detail_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regional_violation_register_mutation_responseImplementors = []string{"regional_violation_register_mutation_response"}

func (ec *executionContext) _regional_violation_register_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regional_violation_register_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("regional_violation_register_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._regional_violation_register_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._regional_violation_register_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regional_violation_register_stddev_fieldsImplementors = []string{"regional_violation_register_stddev_fields"}

func (ec *executionContext) _regional_violation_register_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regional_violation_register_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("regional_violation_register_stddev_fields")
		case "id":
			out.Values[i] = ec._regional_violation_register_stddev_fields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._regional_violation_register_stddev_fields_illegal_code(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._regional_violation_register_stddev_fields_illegal_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regional_violation_register_stddev_pop_fieldsImplementors = []string{"regional_violation_register_stddev_pop_fields"}

func (ec *executionContext) _regional_violation_register_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regional_violation_register_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("regional_violation_register_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._regional_violation_register_stddev_pop_fields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._regional_violation_register_stddev_pop_fields_illegal_code(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._regional_violation_register_stddev_pop_fields_illegal_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regional_violation_register_stddev_samp_fieldsImplementors = []string{"regional_violation_register_stddev_samp_fields"}

func (ec *executionContext) _regional_violation_register_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regional_violation_register_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("regional_violation_register_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._regional_violation_register_stddev_samp_fields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._regional_violation_register_stddev_samp_fields_illegal_code(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._regional_violation_register_stddev_samp_fields_illegal_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regional_violation_register_sum_fieldsImplementors = []string{"regional_violation_register_sum_fields"}

func (ec *executionContext) _regional_violation_register_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regional_violation_register_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("regional_violation_register_sum_fields")
		case "id":
			out.Values[i] = ec._regional_violation_register_sum_fields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._regional_violation_register_sum_fields_illegal_code(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._regional_violation_register_sum_fields_illegal_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regional_violation_register_var_pop_fieldsImplementors = []string{"regional_violation_register_var_pop_fields"}

func (ec *executionContext) _regional_violation_register_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regional_violation_register_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("regional_violation_register_var_pop_fields")
		case "id":
			out.Values[i] = ec._regional_violation_register_var_pop_fields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._regional_violation_register_var_pop_fields_illegal_code(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._regional_violation_register_var_pop_fields_illegal_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regional_violation_register_var_samp_fieldsImplementors = []string{"regional_violation_register_var_samp_fields"}

func (ec *executionContext) _regional_violation_register_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regional_violation_register_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("regional_violation_register_var_samp_fields")
		case "id":
			out.Values[i] = ec._regional_violation_register_var_samp_fields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._regional_violation_register_var_samp_fields_illegal_code(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._regional_violation_register_var_samp_fields_illegal_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regional_violation_register_variance_fieldsImplementors = []string{"regional_violation_register_variance_fields"}

func (ec *executionContext) _regional_violation_register_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionalViolationRegisterVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regional_violation_register_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("regional_violation_register_variance_fields")
		case "id":
			out.Values[i] = ec._regional_violation_register_variance_fields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._regional_violation_register_variance_fields_illegal_code(ctx, field, obj)
		case "illegal_type":
			out.Values[i] = ec._regional_violation_register_variance_fields_illegal_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var user_operation_logImplementors = []string{"user_operation_log"}

func (ec *executionContext) _user_operation_log(ctx context.Context, sel ast.SelectionSet, obj *model.UserOperationLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, user_operation_logImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("user_operation_log")
		case "created_at":
			out.Values[i] = ec._user_operation_log_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._user_operation_log_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._user_operation_log_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._user_operation_log_deleted_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._user_operation_log_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "illegal_time":
			out.Values[i] = ec._user_operation_log_illegal_time(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._user_operation_log_license_plate_number(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._user_operation_log_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._user_operation_log_updated_by(ctx, field, obj)
		case "user_ip":
			out.Values[i] = ec._user_operation_log_user_ip(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var user_operation_log_aggregateImplementors = []string{"user_operation_log_aggregate"}

func (ec *executionContext) _user_operation_log_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.UserOperationLogAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, user_operation_log_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("user_operation_log_aggregate")
		case "aggregate":
			out.Values[i] = ec._user_operation_log_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._user_operation_log_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var user_operation_log_aggregate_fieldsImplementors = []string{"user_operation_log_aggregate_fields"}

func (ec *executionContext) _user_operation_log_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.UserOperationLogAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, user_operation_log_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("user_operation_log_aggregate_fields")
		case "avg":
			out.Values[i] = ec._user_operation_log_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._user_operation_log_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._user_operation_log_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._user_operation_log_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._user_operation_log_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._user_operation_log_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._user_operation_log_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._user_operation_log_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._user_operation_log_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._user_operation_log_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._user_operation_log_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var user_operation_log_avg_fieldsImplementors = []string{"user_operation_log_avg_fields"}

func (ec *executionContext) _user_operation_log_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.UserOperationLogAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, user_operation_log_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("user_operation_log_avg_fields")
		case "id":
			out.Values[i] = ec._user_operation_log_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var user_operation_log_max_fieldsImplementors = []string{"user_operation_log_max_fields"}

func (ec *executionContext) _user_operation_log_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.UserOperationLogMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, user_operation_log_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("user_operation_log_max_fields")
		case "created_at":
			out.Values[i] = ec._user_operation_log_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._user_operation_log_max_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._user_operation_log_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._user_operation_log_max_fields_deleted_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._user_operation_log_max_fields_id(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._user_operation_log_max_fields_illegal_time(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._user_operation_log_max_fields_license_plate_number(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._user_operation_log_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._user_operation_log_max_fields_updated_by(ctx, field, obj)
		case "user_ip":
			out.Values[i] = ec._user_operation_log_max_fields_user_ip(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var user_operation_log_min_fieldsImplementors = []string{"user_operation_log_min_fields"}

func (ec *executionContext) _user_operation_log_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.UserOperationLogMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, user_operation_log_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("user_operation_log_min_fields")
		case "created_at":
			out.Values[i] = ec._user_operation_log_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._user_operation_log_min_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._user_operation_log_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._user_operation_log_min_fields_deleted_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._user_operation_log_min_fields_id(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._user_operation_log_min_fields_illegal_time(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._user_operation_log_min_fields_license_plate_number(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._user_operation_log_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._user_operation_log_min_fields_updated_by(ctx, field, obj)
		case "user_ip":
			out.Values[i] = ec._user_operation_log_min_fields_user_ip(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var user_operation_log_mutation_responseImplementors = []string{"user_operation_log_mutation_response"}

func (ec *executionContext) _user_operation_log_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.UserOperationLogMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, user_operation_log_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("user_operation_log_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._user_operation_log_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._user_operation_log_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var user_operation_log_stddev_fieldsImplementors = []string{"user_operation_log_stddev_fields"}

func (ec *executionContext) _user_operation_log_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.UserOperationLogStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, user_operation_log_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("user_operation_log_stddev_fields")
		case "id":
			out.Values[i] = ec._user_operation_log_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var user_operation_log_stddev_pop_fieldsImplementors = []string{"user_operation_log_stddev_pop_fields"}

func (ec *executionContext) _user_operation_log_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.UserOperationLogStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, user_operation_log_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("user_operation_log_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._user_operation_log_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var user_operation_log_stddev_samp_fieldsImplementors = []string{"user_operation_log_stddev_samp_fields"}

func (ec *executionContext) _user_operation_log_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.UserOperationLogStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, user_operation_log_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("user_operation_log_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._user_operation_log_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var user_operation_log_sum_fieldsImplementors = []string{"user_operation_log_sum_fields"}

func (ec *executionContext) _user_operation_log_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.UserOperationLogSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, user_operation_log_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("user_operation_log_sum_fields")
		case "id":
			out.Values[i] = ec._user_operation_log_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var user_operation_log_var_pop_fieldsImplementors = []string{"user_operation_log_var_pop_fields"}

func (ec *executionContext) _user_operation_log_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.UserOperationLogVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, user_operation_log_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("user_operation_log_var_pop_fields")
		case "id":
			out.Values[i] = ec._user_operation_log_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var user_operation_log_var_samp_fieldsImplementors = []string{"user_operation_log_var_samp_fields"}

func (ec *executionContext) _user_operation_log_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.UserOperationLogVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, user_operation_log_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("user_operation_log_var_samp_fields")
		case "id":
			out.Values[i] = ec._user_operation_log_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var user_operation_log_variance_fieldsImplementors = []string{"user_operation_log_variance_fields"}

func (ec *executionContext) _user_operation_log_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.UserOperationLogVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, user_operation_log_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("user_operation_log_variance_fields")
		case "id":
			out.Values[i] = ec._user_operation_log_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_detain_detailsImplementors = []string{"vehicle_detain_details"}

func (ec *executionContext) _vehicle_detain_details(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDetainDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_detain_detailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_detain_details")
		case "bayonet_picture":
			out.Values[i] = ec._vehicle_detain_details_bayonet_picture(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_detain_details_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_bayonet":
			out.Values[i] = ec._vehicle_detain_details_is_bayonet(ctx, field, obj)
		case "is_category":
			out.Values[i] = ec._vehicle_detain_details_is_category(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._vehicle_detain_details_is_delete(ctx, field, obj)
		case "is_illegal":
			out.Values[i] = ec._vehicle_detain_details_is_illegal(ctx, field, obj)
		case "is_satellite_judgment":
			out.Values[i] = ec._vehicle_detain_details_is_satellite_judgment(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_detain_details_license_plate_color(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._vehicle_detain_details_license_plate_number(ctx, field, obj)
		case "record_time":
			out.Values[i] = ec._vehicle_detain_details_record_time(ctx, field, obj)
		case "register_region":
			out.Values[i] = ec._vehicle_detain_details_register_region(ctx, field, obj)
		case "register_user":
			out.Values[i] = ec._vehicle_detain_details_register_user(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._vehicle_detain_details_remarks(ctx, field, obj)
		case "update_time":
			out.Values[i] = ec._vehicle_detain_details_update_time(ctx, field, obj)
		case "vehicle_detain_picture":
			out.Values[i] = ec._vehicle_detain_details_vehicle_detain_picture(ctx, field, obj)
		case "vehicle_detain_status":
			out.Values[i] = ec._vehicle_detain_details_vehicle_detain_status(ctx, field, obj)
		case "vehicle_detain_time":
			out.Values[i] = ec._vehicle_detain_details_vehicle_detain_time(ctx, field, obj)
		case "vehicle_release_picture":
			out.Values[i] = ec._vehicle_detain_details_vehicle_release_picture(ctx, field, obj)
		case "vehicle_release_time":
			out.Values[i] = ec._vehicle_detain_details_vehicle_release_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_detain_details_aggregateImplementors = []string{"vehicle_detain_details_aggregate"}

func (ec *executionContext) _vehicle_detain_details_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDetainDetailsAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_detain_details_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_detain_details_aggregate")
		case "aggregate":
			out.Values[i] = ec._vehicle_detain_details_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._vehicle_detain_details_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_detain_details_aggregate_fieldsImplementors = []string{"vehicle_detain_details_aggregate_fields"}

func (ec *executionContext) _vehicle_detain_details_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDetainDetailsAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_detain_details_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_detain_details_aggregate_fields")
		case "avg":
			out.Values[i] = ec._vehicle_detain_details_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._vehicle_detain_details_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._vehicle_detain_details_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._vehicle_detain_details_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._vehicle_detain_details_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._vehicle_detain_details_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._vehicle_detain_details_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._vehicle_detain_details_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._vehicle_detain_details_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._vehicle_detain_details_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._vehicle_detain_details_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_detain_details_avg_fieldsImplementors = []string{"vehicle_detain_details_avg_fields"}

func (ec *executionContext) _vehicle_detain_details_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDetainDetailsAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_detain_details_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_detain_details_avg_fields")
		case "id":
			out.Values[i] = ec._vehicle_detain_details_avg_fields_id(ctx, field, obj)
		case "vehicle_detain_status":
			out.Values[i] = ec._vehicle_detain_details_avg_fields_vehicle_detain_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_detain_details_max_fieldsImplementors = []string{"vehicle_detain_details_max_fields"}

func (ec *executionContext) _vehicle_detain_details_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDetainDetailsMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_detain_details_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_detain_details_max_fields")
		case "bayonet_picture":
			out.Values[i] = ec._vehicle_detain_details_max_fields_bayonet_picture(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_detain_details_max_fields_id(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_detain_details_max_fields_license_plate_color(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._vehicle_detain_details_max_fields_license_plate_number(ctx, field, obj)
		case "record_time":
			out.Values[i] = ec._vehicle_detain_details_max_fields_record_time(ctx, field, obj)
		case "register_region":
			out.Values[i] = ec._vehicle_detain_details_max_fields_register_region(ctx, field, obj)
		case "register_user":
			out.Values[i] = ec._vehicle_detain_details_max_fields_register_user(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._vehicle_detain_details_max_fields_remarks(ctx, field, obj)
		case "update_time":
			out.Values[i] = ec._vehicle_detain_details_max_fields_update_time(ctx, field, obj)
		case "vehicle_detain_picture":
			out.Values[i] = ec._vehicle_detain_details_max_fields_vehicle_detain_picture(ctx, field, obj)
		case "vehicle_detain_status":
			out.Values[i] = ec._vehicle_detain_details_max_fields_vehicle_detain_status(ctx, field, obj)
		case "vehicle_detain_time":
			out.Values[i] = ec._vehicle_detain_details_max_fields_vehicle_detain_time(ctx, field, obj)
		case "vehicle_release_picture":
			out.Values[i] = ec._vehicle_detain_details_max_fields_vehicle_release_picture(ctx, field, obj)
		case "vehicle_release_time":
			out.Values[i] = ec._vehicle_detain_details_max_fields_vehicle_release_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_detain_details_min_fieldsImplementors = []string{"vehicle_detain_details_min_fields"}

func (ec *executionContext) _vehicle_detain_details_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDetainDetailsMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_detain_details_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_detain_details_min_fields")
		case "bayonet_picture":
			out.Values[i] = ec._vehicle_detain_details_min_fields_bayonet_picture(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_detain_details_min_fields_id(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_detain_details_min_fields_license_plate_color(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._vehicle_detain_details_min_fields_license_plate_number(ctx, field, obj)
		case "record_time":
			out.Values[i] = ec._vehicle_detain_details_min_fields_record_time(ctx, field, obj)
		case "register_region":
			out.Values[i] = ec._vehicle_detain_details_min_fields_register_region(ctx, field, obj)
		case "register_user":
			out.Values[i] = ec._vehicle_detain_details_min_fields_register_user(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._vehicle_detain_details_min_fields_remarks(ctx, field, obj)
		case "update_time":
			out.Values[i] = ec._vehicle_detain_details_min_fields_update_time(ctx, field, obj)
		case "vehicle_detain_picture":
			out.Values[i] = ec._vehicle_detain_details_min_fields_vehicle_detain_picture(ctx, field, obj)
		case "vehicle_detain_status":
			out.Values[i] = ec._vehicle_detain_details_min_fields_vehicle_detain_status(ctx, field, obj)
		case "vehicle_detain_time":
			out.Values[i] = ec._vehicle_detain_details_min_fields_vehicle_detain_time(ctx, field, obj)
		case "vehicle_release_picture":
			out.Values[i] = ec._vehicle_detain_details_min_fields_vehicle_release_picture(ctx, field, obj)
		case "vehicle_release_time":
			out.Values[i] = ec._vehicle_detain_details_min_fields_vehicle_release_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_detain_details_mutation_responseImplementors = []string{"vehicle_detain_details_mutation_response"}

func (ec *executionContext) _vehicle_detain_details_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDetainDetailsMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_detain_details_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_detain_details_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._vehicle_detain_details_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._vehicle_detain_details_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_detain_details_stddev_fieldsImplementors = []string{"vehicle_detain_details_stddev_fields"}

func (ec *executionContext) _vehicle_detain_details_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDetainDetailsStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_detain_details_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_detain_details_stddev_fields")
		case "id":
			out.Values[i] = ec._vehicle_detain_details_stddev_fields_id(ctx, field, obj)
		case "vehicle_detain_status":
			out.Values[i] = ec._vehicle_detain_details_stddev_fields_vehicle_detain_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_detain_details_stddev_pop_fieldsImplementors = []string{"vehicle_detain_details_stddev_pop_fields"}

func (ec *executionContext) _vehicle_detain_details_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDetainDetailsStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_detain_details_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_detain_details_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._vehicle_detain_details_stddev_pop_fields_id(ctx, field, obj)
		case "vehicle_detain_status":
			out.Values[i] = ec._vehicle_detain_details_stddev_pop_fields_vehicle_detain_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_detain_details_stddev_samp_fieldsImplementors = []string{"vehicle_detain_details_stddev_samp_fields"}

func (ec *executionContext) _vehicle_detain_details_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDetainDetailsStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_detain_details_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_detain_details_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._vehicle_detain_details_stddev_samp_fields_id(ctx, field, obj)
		case "vehicle_detain_status":
			out.Values[i] = ec._vehicle_detain_details_stddev_samp_fields_vehicle_detain_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_detain_details_sum_fieldsImplementors = []string{"vehicle_detain_details_sum_fields"}

func (ec *executionContext) _vehicle_detain_details_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDetainDetailsSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_detain_details_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_detain_details_sum_fields")
		case "id":
			out.Values[i] = ec._vehicle_detain_details_sum_fields_id(ctx, field, obj)
		case "vehicle_detain_status":
			out.Values[i] = ec._vehicle_detain_details_sum_fields_vehicle_detain_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_detain_details_var_pop_fieldsImplementors = []string{"vehicle_detain_details_var_pop_fields"}

func (ec *executionContext) _vehicle_detain_details_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDetainDetailsVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_detain_details_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_detain_details_var_pop_fields")
		case "id":
			out.Values[i] = ec._vehicle_detain_details_var_pop_fields_id(ctx, field, obj)
		case "vehicle_detain_status":
			out.Values[i] = ec._vehicle_detain_details_var_pop_fields_vehicle_detain_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_detain_details_var_samp_fieldsImplementors = []string{"vehicle_detain_details_var_samp_fields"}

func (ec *executionContext) _vehicle_detain_details_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDetainDetailsVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_detain_details_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_detain_details_var_samp_fields")
		case "id":
			out.Values[i] = ec._vehicle_detain_details_var_samp_fields_id(ctx, field, obj)
		case "vehicle_detain_status":
			out.Values[i] = ec._vehicle_detain_details_var_samp_fields_vehicle_detain_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_detain_details_variance_fieldsImplementors = []string{"vehicle_detain_details_variance_fields"}

func (ec *executionContext) _vehicle_detain_details_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDetainDetailsVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_detain_details_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_detain_details_variance_fields")
		case "id":
			out.Values[i] = ec._vehicle_detain_details_variance_fields_id(ctx, field, obj)
		case "vehicle_detain_status":
			out.Values[i] = ec._vehicle_detain_details_variance_fields_vehicle_detain_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_detailsImplementors = []string{"vehicle_violation_details"}

func (ec *executionContext) _vehicle_violation_details(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_detailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_details")
		case "created_at":
			out.Values[i] = ec._vehicle_violation_details_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._vehicle_violation_details_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "decision_number":
			out.Values[i] = ec._vehicle_violation_details_decision_number(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._vehicle_violation_details_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._vehicle_violation_details_deleted_by(ctx, field, obj)
		case "discovery_agency":
			out.Values[i] = ec._vehicle_violation_details_discovery_agency(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._vehicle_violation_details_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_violation_details_enterprise_id(ctx, field, obj)
		case "handle_at":
			out.Values[i] = ec._vehicle_violation_details_handle_at(ctx, field, obj)
		case "handle_by":
			out.Values[i] = ec._vehicle_violation_details_handle_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_details_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "illegal_code":
			out.Values[i] = ec._vehicle_violation_details_illegal_code(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._vehicle_violation_details_illegal_handling_status(ctx, field, obj)
		case "illegal_location":
			out.Values[i] = ec._vehicle_violation_details_illegal_location(ctx, field, obj)
		case "illegal_photo":
			out.Values[i] = ec._vehicle_violation_details_illegal_photo(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._vehicle_violation_details_illegal_time(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._vehicle_violation_details_information_source(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._vehicle_violation_details_is_delete(ctx, field, obj)
		case "is_handle":
			out.Values[i] = ec._vehicle_violation_details_is_handle(ctx, field, obj)
		case "is_notice_driver":
			out.Values[i] = ec._vehicle_violation_details_is_notice_driver(ctx, field, obj)
		case "is_send":
			out.Values[i] = ec._vehicle_violation_details_is_send(ctx, field, obj)
		case "measured_value":
			out.Values[i] = ec._vehicle_violation_details_measured_value(ctx, field, obj)
		case "notice_time":
			out.Values[i] = ec._vehicle_violation_details_notice_time(ctx, field, obj)
		case "party_name":
			out.Values[i] = ec._vehicle_violation_details_party_name(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._vehicle_violation_details_payment_mark(ctx, field, obj)
		case "standard_value":
			out.Values[i] = ec._vehicle_violation_details_standard_value(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._vehicle_violation_details_update_time_in(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._vehicle_violation_details_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._vehicle_violation_details_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_violation_details_vehicle_id(ctx, field, obj)
		case "vehicle_information":
			out.Values[i] = ec._vehicle_violation_details_vehicle_information(ctx, field, obj)
		case "violation_detail_id":
			out.Values[i] = ec._vehicle_violation_details_violation_detail_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_details_aggregateImplementors = []string{"vehicle_violation_details_aggregate"}

func (ec *executionContext) _vehicle_violation_details_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_details_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_details_aggregate")
		case "aggregate":
			out.Values[i] = ec._vehicle_violation_details_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._vehicle_violation_details_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_details_aggregate_fieldsImplementors = []string{"vehicle_violation_details_aggregate_fields"}

func (ec *executionContext) _vehicle_violation_details_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_details_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_details_aggregate_fields")
		case "avg":
			out.Values[i] = ec._vehicle_violation_details_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._vehicle_violation_details_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._vehicle_violation_details_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._vehicle_violation_details_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._vehicle_violation_details_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._vehicle_violation_details_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._vehicle_violation_details_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._vehicle_violation_details_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._vehicle_violation_details_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._vehicle_violation_details_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._vehicle_violation_details_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_details_avg_fieldsImplementors = []string{"vehicle_violation_details_avg_fields"}

func (ec *executionContext) _vehicle_violation_details_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_details_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_details_avg_fields")
		case "id":
			out.Values[i] = ec._vehicle_violation_details_avg_fields_id(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._vehicle_violation_details_avg_fields_illegal_handling_status(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._vehicle_violation_details_avg_fields_information_source(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._vehicle_violation_details_avg_fields_payment_mark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_details_max_fieldsImplementors = []string{"vehicle_violation_details_max_fields"}

func (ec *executionContext) _vehicle_violation_details_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_details_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_details_max_fields")
		case "created_at":
			out.Values[i] = ec._vehicle_violation_details_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._vehicle_violation_details_max_fields_created_by(ctx, field, obj)
		case "decision_number":
			out.Values[i] = ec._vehicle_violation_details_max_fields_decision_number(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._vehicle_violation_details_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._vehicle_violation_details_max_fields_deleted_by(ctx, field, obj)
		case "discovery_agency":
			out.Values[i] = ec._vehicle_violation_details_max_fields_discovery_agency(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._vehicle_violation_details_max_fields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_violation_details_max_fields_enterprise_id(ctx, field, obj)
		case "handle_at":
			out.Values[i] = ec._vehicle_violation_details_max_fields_handle_at(ctx, field, obj)
		case "handle_by":
			out.Values[i] = ec._vehicle_violation_details_max_fields_handle_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_details_max_fields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._vehicle_violation_details_max_fields_illegal_code(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._vehicle_violation_details_max_fields_illegal_handling_status(ctx, field, obj)
		case "illegal_location":
			out.Values[i] = ec._vehicle_violation_details_max_fields_illegal_location(ctx, field, obj)
		case "illegal_photo":
			out.Values[i] = ec._vehicle_violation_details_max_fields_illegal_photo(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._vehicle_violation_details_max_fields_illegal_time(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._vehicle_violation_details_max_fields_information_source(ctx, field, obj)
		case "measured_value":
			out.Values[i] = ec._vehicle_violation_details_max_fields_measured_value(ctx, field, obj)
		case "notice_time":
			out.Values[i] = ec._vehicle_violation_details_max_fields_notice_time(ctx, field, obj)
		case "party_name":
			out.Values[i] = ec._vehicle_violation_details_max_fields_party_name(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._vehicle_violation_details_max_fields_payment_mark(ctx, field, obj)
		case "standard_value":
			out.Values[i] = ec._vehicle_violation_details_max_fields_standard_value(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._vehicle_violation_details_max_fields_update_time_in(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._vehicle_violation_details_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._vehicle_violation_details_max_fields_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_violation_details_max_fields_vehicle_id(ctx, field, obj)
		case "vehicle_information":
			out.Values[i] = ec._vehicle_violation_details_max_fields_vehicle_information(ctx, field, obj)
		case "violation_detail_id":
			out.Values[i] = ec._vehicle_violation_details_max_fields_violation_detail_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_details_min_fieldsImplementors = []string{"vehicle_violation_details_min_fields"}

func (ec *executionContext) _vehicle_violation_details_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_details_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_details_min_fields")
		case "created_at":
			out.Values[i] = ec._vehicle_violation_details_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._vehicle_violation_details_min_fields_created_by(ctx, field, obj)
		case "decision_number":
			out.Values[i] = ec._vehicle_violation_details_min_fields_decision_number(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._vehicle_violation_details_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._vehicle_violation_details_min_fields_deleted_by(ctx, field, obj)
		case "discovery_agency":
			out.Values[i] = ec._vehicle_violation_details_min_fields_discovery_agency(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._vehicle_violation_details_min_fields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_violation_details_min_fields_enterprise_id(ctx, field, obj)
		case "handle_at":
			out.Values[i] = ec._vehicle_violation_details_min_fields_handle_at(ctx, field, obj)
		case "handle_by":
			out.Values[i] = ec._vehicle_violation_details_min_fields_handle_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_details_min_fields_id(ctx, field, obj)
		case "illegal_code":
			out.Values[i] = ec._vehicle_violation_details_min_fields_illegal_code(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._vehicle_violation_details_min_fields_illegal_handling_status(ctx, field, obj)
		case "illegal_location":
			out.Values[i] = ec._vehicle_violation_details_min_fields_illegal_location(ctx, field, obj)
		case "illegal_photo":
			out.Values[i] = ec._vehicle_violation_details_min_fields_illegal_photo(ctx, field, obj)
		case "illegal_time":
			out.Values[i] = ec._vehicle_violation_details_min_fields_illegal_time(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._vehicle_violation_details_min_fields_information_source(ctx, field, obj)
		case "measured_value":
			out.Values[i] = ec._vehicle_violation_details_min_fields_measured_value(ctx, field, obj)
		case "notice_time":
			out.Values[i] = ec._vehicle_violation_details_min_fields_notice_time(ctx, field, obj)
		case "party_name":
			out.Values[i] = ec._vehicle_violation_details_min_fields_party_name(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._vehicle_violation_details_min_fields_payment_mark(ctx, field, obj)
		case "standard_value":
			out.Values[i] = ec._vehicle_violation_details_min_fields_standard_value(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._vehicle_violation_details_min_fields_update_time_in(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._vehicle_violation_details_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._vehicle_violation_details_min_fields_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_violation_details_min_fields_vehicle_id(ctx, field, obj)
		case "vehicle_information":
			out.Values[i] = ec._vehicle_violation_details_min_fields_vehicle_information(ctx, field, obj)
		case "violation_detail_id":
			out.Values[i] = ec._vehicle_violation_details_min_fields_violation_detail_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_details_mutation_responseImplementors = []string{"vehicle_violation_details_mutation_response"}

func (ec *executionContext) _vehicle_violation_details_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_details_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_details_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._vehicle_violation_details_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._vehicle_violation_details_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_details_stddev_fieldsImplementors = []string{"vehicle_violation_details_stddev_fields"}

func (ec *executionContext) _vehicle_violation_details_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_details_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_details_stddev_fields")
		case "id":
			out.Values[i] = ec._vehicle_violation_details_stddev_fields_id(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._vehicle_violation_details_stddev_fields_illegal_handling_status(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._vehicle_violation_details_stddev_fields_information_source(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._vehicle_violation_details_stddev_fields_payment_mark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_details_stddev_pop_fieldsImplementors = []string{"vehicle_violation_details_stddev_pop_fields"}

func (ec *executionContext) _vehicle_violation_details_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_details_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_details_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._vehicle_violation_details_stddev_pop_fields_id(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._vehicle_violation_details_stddev_pop_fields_illegal_handling_status(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._vehicle_violation_details_stddev_pop_fields_information_source(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._vehicle_violation_details_stddev_pop_fields_payment_mark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_details_stddev_samp_fieldsImplementors = []string{"vehicle_violation_details_stddev_samp_fields"}

func (ec *executionContext) _vehicle_violation_details_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_details_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_details_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._vehicle_violation_details_stddev_samp_fields_id(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._vehicle_violation_details_stddev_samp_fields_illegal_handling_status(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._vehicle_violation_details_stddev_samp_fields_information_source(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._vehicle_violation_details_stddev_samp_fields_payment_mark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_details_sum_fieldsImplementors = []string{"vehicle_violation_details_sum_fields"}

func (ec *executionContext) _vehicle_violation_details_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_details_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_details_sum_fields")
		case "id":
			out.Values[i] = ec._vehicle_violation_details_sum_fields_id(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._vehicle_violation_details_sum_fields_illegal_handling_status(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._vehicle_violation_details_sum_fields_information_source(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._vehicle_violation_details_sum_fields_payment_mark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_details_var_pop_fieldsImplementors = []string{"vehicle_violation_details_var_pop_fields"}

func (ec *executionContext) _vehicle_violation_details_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_details_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_details_var_pop_fields")
		case "id":
			out.Values[i] = ec._vehicle_violation_details_var_pop_fields_id(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._vehicle_violation_details_var_pop_fields_illegal_handling_status(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._vehicle_violation_details_var_pop_fields_information_source(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._vehicle_violation_details_var_pop_fields_payment_mark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_details_var_samp_fieldsImplementors = []string{"vehicle_violation_details_var_samp_fields"}

func (ec *executionContext) _vehicle_violation_details_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_details_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_details_var_samp_fields")
		case "id":
			out.Values[i] = ec._vehicle_violation_details_var_samp_fields_id(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._vehicle_violation_details_var_samp_fields_illegal_handling_status(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._vehicle_violation_details_var_samp_fields_information_source(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._vehicle_violation_details_var_samp_fields_payment_mark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_details_variance_fieldsImplementors = []string{"vehicle_violation_details_variance_fields"}

func (ec *executionContext) _vehicle_violation_details_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationDetailsVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_details_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_details_variance_fields")
		case "id":
			out.Values[i] = ec._vehicle_violation_details_variance_fields_id(ctx, field, obj)
		case "illegal_handling_status":
			out.Values[i] = ec._vehicle_violation_details_variance_fields_illegal_handling_status(ctx, field, obj)
		case "information_source":
			out.Values[i] = ec._vehicle_violation_details_variance_fields_information_source(ctx, field, obj)
		case "payment_mark":
			out.Values[i] = ec._vehicle_violation_details_variance_fields_payment_mark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_itemsImplementors = []string{"vehicle_violation_scoring_items"}

func (ec *executionContext) _vehicle_violation_scoring_items(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItems) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_itemsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_items")
		case "created_at":
			out.Values[i] = ec._vehicle_violation_scoring_items_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._vehicle_violation_scoring_items_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deduction_category":
			out.Values[i] = ec._vehicle_violation_scoring_items_deduction_category(ctx, field, obj)
		case "deduction_item_description":
			out.Values[i] = ec._vehicle_violation_scoring_items_deduction_item_description(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._vehicle_violation_scoring_items_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._vehicle_violation_scoring_items_deleted_by(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._vehicle_violation_scoring_items_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_items_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._vehicle_violation_scoring_items_is_delete(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._vehicle_violation_scoring_items_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._vehicle_violation_scoring_items_updated_by(ctx, field, obj)
		case "violation_scoring_item_id":
			out.Values[i] = ec._vehicle_violation_scoring_items_violation_scoring_item_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_items_aggregateImplementors = []string{"vehicle_violation_scoring_items_aggregate"}

func (ec *executionContext) _vehicle_violation_scoring_items_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_items_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_items_aggregate")
		case "aggregate":
			out.Values[i] = ec._vehicle_violation_scoring_items_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._vehicle_violation_scoring_items_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_items_aggregate_fieldsImplementors = []string{"vehicle_violation_scoring_items_aggregate_fields"}

func (ec *executionContext) _vehicle_violation_scoring_items_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_items_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_items_aggregate_fields")
		case "avg":
			out.Values[i] = ec._vehicle_violation_scoring_items_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._vehicle_violation_scoring_items_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._vehicle_violation_scoring_items_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._vehicle_violation_scoring_items_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._vehicle_violation_scoring_items_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._vehicle_violation_scoring_items_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._vehicle_violation_scoring_items_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._vehicle_violation_scoring_items_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._vehicle_violation_scoring_items_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._vehicle_violation_scoring_items_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._vehicle_violation_scoring_items_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_items_avg_fieldsImplementors = []string{"vehicle_violation_scoring_items_avg_fields"}

func (ec *executionContext) _vehicle_violation_scoring_items_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_items_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_items_avg_fields")
		case "deduction_category":
			out.Values[i] = ec._vehicle_violation_scoring_items_avg_fields_deduction_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_items_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_items_max_fieldsImplementors = []string{"vehicle_violation_scoring_items_max_fields"}

func (ec *executionContext) _vehicle_violation_scoring_items_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_items_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_items_max_fields")
		case "created_at":
			out.Values[i] = ec._vehicle_violation_scoring_items_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._vehicle_violation_scoring_items_max_fields_created_by(ctx, field, obj)
		case "deduction_category":
			out.Values[i] = ec._vehicle_violation_scoring_items_max_fields_deduction_category(ctx, field, obj)
		case "deduction_item_description":
			out.Values[i] = ec._vehicle_violation_scoring_items_max_fields_deduction_item_description(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._vehicle_violation_scoring_items_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._vehicle_violation_scoring_items_max_fields_deleted_by(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._vehicle_violation_scoring_items_max_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_items_max_fields_id(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._vehicle_violation_scoring_items_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._vehicle_violation_scoring_items_max_fields_updated_by(ctx, field, obj)
		case "violation_scoring_item_id":
			out.Values[i] = ec._vehicle_violation_scoring_items_max_fields_violation_scoring_item_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_items_min_fieldsImplementors = []string{"vehicle_violation_scoring_items_min_fields"}

func (ec *executionContext) _vehicle_violation_scoring_items_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_items_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_items_min_fields")
		case "created_at":
			out.Values[i] = ec._vehicle_violation_scoring_items_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._vehicle_violation_scoring_items_min_fields_created_by(ctx, field, obj)
		case "deduction_category":
			out.Values[i] = ec._vehicle_violation_scoring_items_min_fields_deduction_category(ctx, field, obj)
		case "deduction_item_description":
			out.Values[i] = ec._vehicle_violation_scoring_items_min_fields_deduction_item_description(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._vehicle_violation_scoring_items_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._vehicle_violation_scoring_items_min_fields_deleted_by(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._vehicle_violation_scoring_items_min_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_items_min_fields_id(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._vehicle_violation_scoring_items_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._vehicle_violation_scoring_items_min_fields_updated_by(ctx, field, obj)
		case "violation_scoring_item_id":
			out.Values[i] = ec._vehicle_violation_scoring_items_min_fields_violation_scoring_item_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_items_mutation_responseImplementors = []string{"vehicle_violation_scoring_items_mutation_response"}

func (ec *executionContext) _vehicle_violation_scoring_items_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_items_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_items_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._vehicle_violation_scoring_items_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._vehicle_violation_scoring_items_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_items_stddev_fieldsImplementors = []string{"vehicle_violation_scoring_items_stddev_fields"}

func (ec *executionContext) _vehicle_violation_scoring_items_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_items_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_items_stddev_fields")
		case "deduction_category":
			out.Values[i] = ec._vehicle_violation_scoring_items_stddev_fields_deduction_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_items_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_items_stddev_pop_fieldsImplementors = []string{"vehicle_violation_scoring_items_stddev_pop_fields"}

func (ec *executionContext) _vehicle_violation_scoring_items_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_items_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_items_stddev_pop_fields")
		case "deduction_category":
			out.Values[i] = ec._vehicle_violation_scoring_items_stddev_pop_fields_deduction_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_items_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_items_stddev_samp_fieldsImplementors = []string{"vehicle_violation_scoring_items_stddev_samp_fields"}

func (ec *executionContext) _vehicle_violation_scoring_items_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_items_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_items_stddev_samp_fields")
		case "deduction_category":
			out.Values[i] = ec._vehicle_violation_scoring_items_stddev_samp_fields_deduction_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_items_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_items_sum_fieldsImplementors = []string{"vehicle_violation_scoring_items_sum_fields"}

func (ec *executionContext) _vehicle_violation_scoring_items_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_items_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_items_sum_fields")
		case "deduction_category":
			out.Values[i] = ec._vehicle_violation_scoring_items_sum_fields_deduction_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_items_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_items_var_pop_fieldsImplementors = []string{"vehicle_violation_scoring_items_var_pop_fields"}

func (ec *executionContext) _vehicle_violation_scoring_items_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_items_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_items_var_pop_fields")
		case "deduction_category":
			out.Values[i] = ec._vehicle_violation_scoring_items_var_pop_fields_deduction_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_items_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_items_var_samp_fieldsImplementors = []string{"vehicle_violation_scoring_items_var_samp_fields"}

func (ec *executionContext) _vehicle_violation_scoring_items_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_items_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_items_var_samp_fields")
		case "deduction_category":
			out.Values[i] = ec._vehicle_violation_scoring_items_var_samp_fields_deduction_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_items_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_items_variance_fieldsImplementors = []string{"vehicle_violation_scoring_items_variance_fields"}

func (ec *executionContext) _vehicle_violation_scoring_items_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringItemsVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_items_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_items_variance_fields")
		case "deduction_category":
			out.Values[i] = ec._vehicle_violation_scoring_items_variance_fields_deduction_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_items_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_recordImplementors = []string{"vehicle_violation_scoring_record"}

func (ec *executionContext) _vehicle_violation_scoring_record(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_recordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_record")
		case "created_at":
			out.Values[i] = ec._vehicle_violation_scoring_record_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._vehicle_violation_scoring_record_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._vehicle_violation_scoring_record_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._vehicle_violation_scoring_record_deleted_by(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._vehicle_violation_scoring_record_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_record_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._vehicle_violation_scoring_record_is_delete(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._vehicle_violation_scoring_record_remarks(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._vehicle_violation_scoring_record_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._vehicle_violation_scoring_record_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_violation_scoring_record_vehicle_id(ctx, field, obj)
		case "violation_scoring_id":
			out.Values[i] = ec._vehicle_violation_scoring_record_violation_scoring_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "violation_scoring_item_id":
			out.Values[i] = ec._vehicle_violation_scoring_record_violation_scoring_item_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_record_aggregateImplementors = []string{"vehicle_violation_scoring_record_aggregate"}

func (ec *executionContext) _vehicle_violation_scoring_record_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_record_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_record_aggregate")
		case "aggregate":
			out.Values[i] = ec._vehicle_violation_scoring_record_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._vehicle_violation_scoring_record_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_record_aggregate_fieldsImplementors = []string{"vehicle_violation_scoring_record_aggregate_fields"}

func (ec *executionContext) _vehicle_violation_scoring_record_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_record_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_record_aggregate_fields")
		case "avg":
			out.Values[i] = ec._vehicle_violation_scoring_record_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._vehicle_violation_scoring_record_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._vehicle_violation_scoring_record_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._vehicle_violation_scoring_record_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._vehicle_violation_scoring_record_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._vehicle_violation_scoring_record_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._vehicle_violation_scoring_record_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._vehicle_violation_scoring_record_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._vehicle_violation_scoring_record_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._vehicle_violation_scoring_record_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._vehicle_violation_scoring_record_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_record_avg_fieldsImplementors = []string{"vehicle_violation_scoring_record_avg_fields"}

func (ec *executionContext) _vehicle_violation_scoring_record_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_record_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_record_avg_fields")
		case "demerit_points":
			out.Values[i] = ec._vehicle_violation_scoring_record_avg_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_record_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_record_max_fieldsImplementors = []string{"vehicle_violation_scoring_record_max_fields"}

func (ec *executionContext) _vehicle_violation_scoring_record_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_record_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_record_max_fields")
		case "created_at":
			out.Values[i] = ec._vehicle_violation_scoring_record_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._vehicle_violation_scoring_record_max_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._vehicle_violation_scoring_record_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._vehicle_violation_scoring_record_max_fields_deleted_by(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._vehicle_violation_scoring_record_max_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_record_max_fields_id(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._vehicle_violation_scoring_record_max_fields_remarks(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._vehicle_violation_scoring_record_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._vehicle_violation_scoring_record_max_fields_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_violation_scoring_record_max_fields_vehicle_id(ctx, field, obj)
		case "violation_scoring_id":
			out.Values[i] = ec._vehicle_violation_scoring_record_max_fields_violation_scoring_id(ctx, field, obj)
		case "violation_scoring_item_id":
			out.Values[i] = ec._vehicle_violation_scoring_record_max_fields_violation_scoring_item_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_record_min_fieldsImplementors = []string{"vehicle_violation_scoring_record_min_fields"}

func (ec *executionContext) _vehicle_violation_scoring_record_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_record_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_record_min_fields")
		case "created_at":
			out.Values[i] = ec._vehicle_violation_scoring_record_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._vehicle_violation_scoring_record_min_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._vehicle_violation_scoring_record_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._vehicle_violation_scoring_record_min_fields_deleted_by(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._vehicle_violation_scoring_record_min_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_record_min_fields_id(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._vehicle_violation_scoring_record_min_fields_remarks(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._vehicle_violation_scoring_record_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._vehicle_violation_scoring_record_min_fields_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_violation_scoring_record_min_fields_vehicle_id(ctx, field, obj)
		case "violation_scoring_id":
			out.Values[i] = ec._vehicle_violation_scoring_record_min_fields_violation_scoring_id(ctx, field, obj)
		case "violation_scoring_item_id":
			out.Values[i] = ec._vehicle_violation_scoring_record_min_fields_violation_scoring_item_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_record_mutation_responseImplementors = []string{"vehicle_violation_scoring_record_mutation_response"}

func (ec *executionContext) _vehicle_violation_scoring_record_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_record_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_record_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._vehicle_violation_scoring_record_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._vehicle_violation_scoring_record_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_record_stddev_fieldsImplementors = []string{"vehicle_violation_scoring_record_stddev_fields"}

func (ec *executionContext) _vehicle_violation_scoring_record_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_record_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_record_stddev_fields")
		case "demerit_points":
			out.Values[i] = ec._vehicle_violation_scoring_record_stddev_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_record_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_record_stddev_pop_fieldsImplementors = []string{"vehicle_violation_scoring_record_stddev_pop_fields"}

func (ec *executionContext) _vehicle_violation_scoring_record_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_record_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_record_stddev_pop_fields")
		case "demerit_points":
			out.Values[i] = ec._vehicle_violation_scoring_record_stddev_pop_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_record_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_record_stddev_samp_fieldsImplementors = []string{"vehicle_violation_scoring_record_stddev_samp_fields"}

func (ec *executionContext) _vehicle_violation_scoring_record_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_record_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_record_stddev_samp_fields")
		case "demerit_points":
			out.Values[i] = ec._vehicle_violation_scoring_record_stddev_samp_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_record_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_record_sum_fieldsImplementors = []string{"vehicle_violation_scoring_record_sum_fields"}

func (ec *executionContext) _vehicle_violation_scoring_record_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_record_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_record_sum_fields")
		case "demerit_points":
			out.Values[i] = ec._vehicle_violation_scoring_record_sum_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_record_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_record_var_pop_fieldsImplementors = []string{"vehicle_violation_scoring_record_var_pop_fields"}

func (ec *executionContext) _vehicle_violation_scoring_record_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_record_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_record_var_pop_fields")
		case "demerit_points":
			out.Values[i] = ec._vehicle_violation_scoring_record_var_pop_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_record_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_record_var_samp_fieldsImplementors = []string{"vehicle_violation_scoring_record_var_samp_fields"}

func (ec *executionContext) _vehicle_violation_scoring_record_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_record_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_record_var_samp_fields")
		case "demerit_points":
			out.Values[i] = ec._vehicle_violation_scoring_record_var_samp_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_record_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_violation_scoring_record_variance_fieldsImplementors = []string{"vehicle_violation_scoring_record_variance_fields"}

func (ec *executionContext) _vehicle_violation_scoring_record_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleViolationScoringRecordVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_violation_scoring_record_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_violation_scoring_record_variance_fields")
		case "demerit_points":
			out.Values[i] = ec._vehicle_violation_scoring_record_variance_fields_demerit_points(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_violation_scoring_record_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNVIO_CODEWFDM2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.VioCodewfdm) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVIO_CODEWFDM2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdm(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVIO_CODEWFDM2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdm(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdm) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VIO_CODEWFDM(ctx, sel, v)
}

func (ec *executionContext) marshalNVIO_CODEWFDM_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmAggregate(ctx context.Context, sel ast.SelectionSet, v model.VioCodewfdmAggregate) graphql.Marshaler {
	return ec._VIO_CODEWFDM_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVIO_CODEWFDM_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VIO_CODEWFDM_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVIO_CODEWFDM_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx context.Context, v interface{}) (model.VioCodewfdmBoolExp, error) {
	res, err := ec.unmarshalInputVIO_CODEWFDM_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVIO_CODEWFDM_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmInsertInput(ctx context.Context, v interface{}) (model.VioCodewfdmInsertInput, error) {
	res, err := ec.unmarshalInputVIO_CODEWFDM_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVIO_CODEWFDM_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VioCodewfdmInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VioCodewfdmInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVIO_CODEWFDM_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVIO_CODEWFDM_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmInsertInput(ctx context.Context, v interface{}) (*model.VioCodewfdmInsertInput, error) {
	res, err := ec.unmarshalInputVIO_CODEWFDM_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVIO_CODEWFDM_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmOrderBy(ctx context.Context, v interface{}) (*model.VioCodewfdmOrderBy, error) {
	res, err := ec.unmarshalInputVIO_CODEWFDM_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVIO_CODEWFDM_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumn(ctx context.Context, v interface{}) (model.VioCodewfdmSelectColumn, error) {
	var res model.VioCodewfdmSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVIO_CODEWFDM_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VioCodewfdmSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_jsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_jsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_text2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_text2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNapp_enforcement2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AppEnforcement) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNapp_enforcement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcement(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNapp_enforcement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcement(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcement) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._app_enforcement(ctx, sel, v)
}

func (ec *executionContext) marshalNapp_enforcement_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementAggregate(ctx context.Context, sel ast.SelectionSet, v model.AppEnforcementAggregate) graphql.Marshaler {
	return ec._app_enforcement_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNapp_enforcement_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementAggregate(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._app_enforcement_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNapp_enforcement_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx context.Context, v interface{}) (model.AppEnforcementBoolExp, error) {
	res, err := ec.unmarshalInputapp_enforcement_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNapp_enforcement_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementConstraint(ctx context.Context, v interface{}) (model.AppEnforcementConstraint, error) {
	var res model.AppEnforcementConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNapp_enforcement_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementConstraint(ctx context.Context, sel ast.SelectionSet, v model.AppEnforcementConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNapp_enforcement_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementInsertInput(ctx context.Context, v interface{}) (model.AppEnforcementInsertInput, error) {
	res, err := ec.unmarshalInputapp_enforcement_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNapp_enforcement_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.AppEnforcementInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AppEnforcementInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNapp_enforcement_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNapp_enforcement_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementInsertInput(ctx context.Context, v interface{}) (*model.AppEnforcementInsertInput, error) {
	res, err := ec.unmarshalInputapp_enforcement_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNapp_enforcement_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementOrderBy(ctx context.Context, v interface{}) (*model.AppEnforcementOrderBy, error) {
	res, err := ec.unmarshalInputapp_enforcement_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNapp_enforcement_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementPkColumnsInput(ctx context.Context, v interface{}) (model.AppEnforcementPkColumnsInput, error) {
	res, err := ec.unmarshalInputapp_enforcement_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNapp_enforcement_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumn(ctx context.Context, v interface{}) (model.AppEnforcementSelectColumn, error) {
	var res model.AppEnforcementSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNapp_enforcement_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.AppEnforcementSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNapp_enforcement_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementUpdateColumn(ctx context.Context, v interface{}) (model.AppEnforcementUpdateColumn, error) {
	var res model.AppEnforcementUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNapp_enforcement_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.AppEnforcementUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNapp_enforcement_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.AppEnforcementUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.AppEnforcementUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNapp_enforcement_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNapp_enforcement_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AppEnforcementUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNapp_enforcement_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNbigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNbigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNdispute_violation_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DisputeViolationRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdispute_violation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNdispute_violation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecord(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._dispute_violation_record(ctx, sel, v)
}

func (ec *executionContext) marshalNdispute_violation_record_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordAggregate(ctx context.Context, sel ast.SelectionSet, v model.DisputeViolationRecordAggregate) graphql.Marshaler {
	return ec._dispute_violation_record_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNdispute_violation_record_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._dispute_violation_record_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNdispute_violation_record_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx context.Context, v interface{}) (model.DisputeViolationRecordBoolExp, error) {
	res, err := ec.unmarshalInputdispute_violation_record_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdispute_violation_record_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordConstraint(ctx context.Context, v interface{}) (model.DisputeViolationRecordConstraint, error) {
	var res model.DisputeViolationRecordConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdispute_violation_record_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordConstraint(ctx context.Context, sel ast.SelectionSet, v model.DisputeViolationRecordConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdispute_violation_record_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordInsertInput(ctx context.Context, v interface{}) (model.DisputeViolationRecordInsertInput, error) {
	res, err := ec.unmarshalInputdispute_violation_record_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdispute_violation_record_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DisputeViolationRecordInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DisputeViolationRecordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdispute_violation_record_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNdispute_violation_record_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordInsertInput(ctx context.Context, v interface{}) (*model.DisputeViolationRecordInsertInput, error) {
	res, err := ec.unmarshalInputdispute_violation_record_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdispute_violation_record_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DisputeViolationRecordLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdispute_violation_record_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNdispute_violation_record_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLog(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._dispute_violation_record_log(ctx, sel, v)
}

func (ec *executionContext) marshalNdispute_violation_record_log_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogAggregate(ctx context.Context, sel ast.SelectionSet, v model.DisputeViolationRecordLogAggregate) graphql.Marshaler {
	return ec._dispute_violation_record_log_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNdispute_violation_record_log_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._dispute_violation_record_log_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNdispute_violation_record_log_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx context.Context, v interface{}) (model.DisputeViolationRecordLogBoolExp, error) {
	res, err := ec.unmarshalInputdispute_violation_record_log_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdispute_violation_record_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogConstraint(ctx context.Context, v interface{}) (model.DisputeViolationRecordLogConstraint, error) {
	var res model.DisputeViolationRecordLogConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdispute_violation_record_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogConstraint(ctx context.Context, sel ast.SelectionSet, v model.DisputeViolationRecordLogConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdispute_violation_record_log_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogInsertInput(ctx context.Context, v interface{}) (model.DisputeViolationRecordLogInsertInput, error) {
	res, err := ec.unmarshalInputdispute_violation_record_log_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdispute_violation_record_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DisputeViolationRecordLogInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DisputeViolationRecordLogInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdispute_violation_record_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNdispute_violation_record_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogInsertInput(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogInsertInput, error) {
	res, err := ec.unmarshalInputdispute_violation_record_log_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdispute_violation_record_log_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogOrderBy, error) {
	res, err := ec.unmarshalInputdispute_violation_record_log_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdispute_violation_record_log_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogPkColumnsInput(ctx context.Context, v interface{}) (model.DisputeViolationRecordLogPkColumnsInput, error) {
	res, err := ec.unmarshalInputdispute_violation_record_log_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdispute_violation_record_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumn(ctx context.Context, v interface{}) (model.DisputeViolationRecordLogSelectColumn, error) {
	var res model.DisputeViolationRecordLogSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdispute_violation_record_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DisputeViolationRecordLogSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdispute_violation_record_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogUpdateColumn(ctx context.Context, v interface{}) (model.DisputeViolationRecordLogUpdateColumn, error) {
	var res model.DisputeViolationRecordLogUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdispute_violation_record_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.DisputeViolationRecordLogUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdispute_violation_record_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.DisputeViolationRecordLogUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DisputeViolationRecordLogUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdispute_violation_record_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNdispute_violation_record_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DisputeViolationRecordLogUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdispute_violation_record_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNdispute_violation_record_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordOrderBy, error) {
	res, err := ec.unmarshalInputdispute_violation_record_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdispute_violation_record_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordPkColumnsInput(ctx context.Context, v interface{}) (model.DisputeViolationRecordPkColumnsInput, error) {
	res, err := ec.unmarshalInputdispute_violation_record_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdispute_violation_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumn(ctx context.Context, v interface{}) (model.DisputeViolationRecordSelectColumn, error) {
	var res model.DisputeViolationRecordSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdispute_violation_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DisputeViolationRecordSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdispute_violation_record_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordUpdateColumn(ctx context.Context, v interface{}) (model.DisputeViolationRecordUpdateColumn, error) {
	var res model.DisputeViolationRecordUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdispute_violation_record_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.DisputeViolationRecordUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdispute_violation_record_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.DisputeViolationRecordUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DisputeViolationRecordUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdispute_violation_record_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNdispute_violation_record_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DisputeViolationRecordUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdispute_violation_record_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNdriver_peccancy_check2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DriverPeccancyCheck) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdriver_peccancy_check2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheck(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNdriver_peccancy_check2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheck(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheck) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._driver_peccancy_check(ctx, sel, v)
}

func (ec *executionContext) marshalNdriver_peccancy_check_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckAggregate(ctx context.Context, sel ast.SelectionSet, v model.DriverPeccancyCheckAggregate) graphql.Marshaler {
	return ec._driver_peccancy_check_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNdriver_peccancy_check_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._driver_peccancy_check_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNdriver_peccancy_check_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx context.Context, v interface{}) (model.DriverPeccancyCheckBoolExp, error) {
	res, err := ec.unmarshalInputdriver_peccancy_check_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_peccancy_check_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckConstraint(ctx context.Context, v interface{}) (model.DriverPeccancyCheckConstraint, error) {
	var res model.DriverPeccancyCheckConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriver_peccancy_check_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckConstraint(ctx context.Context, sel ast.SelectionSet, v model.DriverPeccancyCheckConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdriver_peccancy_check_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckInsertInput(ctx context.Context, v interface{}) (model.DriverPeccancyCheckInsertInput, error) {
	res, err := ec.unmarshalInputdriver_peccancy_check_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_peccancy_check_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DriverPeccancyCheckInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverPeccancyCheckInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_peccancy_check_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNdriver_peccancy_check_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckInsertInput(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckInsertInput, error) {
	res, err := ec.unmarshalInputdriver_peccancy_check_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_peccancy_check_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckOrderBy(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckOrderBy, error) {
	res, err := ec.unmarshalInputdriver_peccancy_check_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_peccancy_check_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckPkColumnsInput(ctx context.Context, v interface{}) (model.DriverPeccancyCheckPkColumnsInput, error) {
	res, err := ec.unmarshalInputdriver_peccancy_check_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_peccancy_check_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumn(ctx context.Context, v interface{}) (model.DriverPeccancyCheckSelectColumn, error) {
	var res model.DriverPeccancyCheckSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriver_peccancy_check_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DriverPeccancyCheckSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdriver_peccancy_check_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckUpdateColumn(ctx context.Context, v interface{}) (model.DriverPeccancyCheckUpdateColumn, error) {
	var res model.DriverPeccancyCheckUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriver_peccancy_check_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.DriverPeccancyCheckUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdriver_peccancy_check_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.DriverPeccancyCheckUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DriverPeccancyCheckUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_peccancy_check_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNdriver_peccancy_check_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DriverPeccancyCheckUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdriver_peccancy_check_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNenterprise_deduction_items2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.EnterpriseDeductionItems) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNenterprise_deduction_items2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItems(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNenterprise_deduction_items2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItems(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionItems) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._enterprise_deduction_items(ctx, sel, v)
}

func (ec *executionContext) marshalNenterprise_deduction_items_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsAggregate(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseDeductionItemsAggregate) graphql.Marshaler {
	return ec._enterprise_deduction_items_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNenterprise_deduction_items_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionItemsAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._enterprise_deduction_items_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNenterprise_deduction_items_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsBoolExp(ctx context.Context, v interface{}) (model.EnterpriseDeductionItemsBoolExp, error) {
	res, err := ec.unmarshalInputenterprise_deduction_items_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNenterprise_deduction_items_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsConstraint(ctx context.Context, v interface{}) (model.EnterpriseDeductionItemsConstraint, error) {
	var res model.EnterpriseDeductionItemsConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNenterprise_deduction_items_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsConstraint(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseDeductionItemsConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNenterprise_deduction_items_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsInsertInput(ctx context.Context, v interface{}) (model.EnterpriseDeductionItemsInsertInput, error) {
	res, err := ec.unmarshalInputenterprise_deduction_items_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNenterprise_deduction_items_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseDeductionItemsInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseDeductionItemsInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNenterprise_deduction_items_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNenterprise_deduction_items_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsInsertInput(ctx context.Context, v interface{}) (*model.EnterpriseDeductionItemsInsertInput, error) {
	res, err := ec.unmarshalInputenterprise_deduction_items_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNenterprise_deduction_items_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionItemsOrderBy, error) {
	res, err := ec.unmarshalInputenterprise_deduction_items_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNenterprise_deduction_items_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsPkColumnsInput(ctx context.Context, v interface{}) (model.EnterpriseDeductionItemsPkColumnsInput, error) {
	res, err := ec.unmarshalInputenterprise_deduction_items_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNenterprise_deduction_items_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsSelectColumn(ctx context.Context, v interface{}) (model.EnterpriseDeductionItemsSelectColumn, error) {
	var res model.EnterpriseDeductionItemsSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNenterprise_deduction_items_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseDeductionItemsSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNenterprise_deduction_items_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsUpdateColumn(ctx context.Context, v interface{}) (model.EnterpriseDeductionItemsUpdateColumn, error) {
	var res model.EnterpriseDeductionItemsUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNenterprise_deduction_items_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseDeductionItemsUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNenterprise_deduction_items_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseDeductionItemsUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseDeductionItemsUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNenterprise_deduction_items_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNenterprise_deduction_items_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseDeductionItemsUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNenterprise_deduction_items_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNenterprise_deduction_operation_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.EnterpriseDeductionOperationRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNenterprise_deduction_operation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNenterprise_deduction_operation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecord(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionOperationRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._enterprise_deduction_operation_record(ctx, sel, v)
}

func (ec *executionContext) marshalNenterprise_deduction_operation_record_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordAggregate(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseDeductionOperationRecordAggregate) graphql.Marshaler {
	return ec._enterprise_deduction_operation_record_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNenterprise_deduction_operation_record_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionOperationRecordAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._enterprise_deduction_operation_record_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNenterprise_deduction_operation_record_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordBoolExp(ctx context.Context, v interface{}) (model.EnterpriseDeductionOperationRecordBoolExp, error) {
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNenterprise_deduction_operation_record_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordConstraint(ctx context.Context, v interface{}) (model.EnterpriseDeductionOperationRecordConstraint, error) {
	var res model.EnterpriseDeductionOperationRecordConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNenterprise_deduction_operation_record_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordConstraint(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseDeductionOperationRecordConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNenterprise_deduction_operation_record_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordInsertInput(ctx context.Context, v interface{}) (model.EnterpriseDeductionOperationRecordInsertInput, error) {
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNenterprise_deduction_operation_record_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseDeductionOperationRecordInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseDeductionOperationRecordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNenterprise_deduction_operation_record_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNenterprise_deduction_operation_record_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordInsertInput(ctx context.Context, v interface{}) (*model.EnterpriseDeductionOperationRecordInsertInput, error) {
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNenterprise_deduction_operation_record_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionOperationRecordOrderBy, error) {
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNenterprise_deduction_operation_record_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordPkColumnsInput(ctx context.Context, v interface{}) (model.EnterpriseDeductionOperationRecordPkColumnsInput, error) {
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNenterprise_deduction_operation_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordSelectColumn(ctx context.Context, v interface{}) (model.EnterpriseDeductionOperationRecordSelectColumn, error) {
	var res model.EnterpriseDeductionOperationRecordSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNenterprise_deduction_operation_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseDeductionOperationRecordSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNenterprise_deduction_operation_record_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordUpdateColumn(ctx context.Context, v interface{}) (model.EnterpriseDeductionOperationRecordUpdateColumn, error) {
	var res model.EnterpriseDeductionOperationRecordUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNenterprise_deduction_operation_record_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseDeductionOperationRecordUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNenterprise_deduction_operation_record_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseDeductionOperationRecordUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseDeductionOperationRecordUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNenterprise_deduction_operation_record_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNenterprise_deduction_operation_record_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseDeductionOperationRecordUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNenterprise_deduction_operation_record_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNillegal_photo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.IllegalPhoto) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNillegal_photo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhoto(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNillegal_photo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhoto(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhoto) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._illegal_photo(ctx, sel, v)
}

func (ec *executionContext) marshalNillegal_photo_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoAggregate(ctx context.Context, sel ast.SelectionSet, v model.IllegalPhotoAggregate) graphql.Marshaler {
	return ec._illegal_photo_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNillegal_photo_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoAggregate(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._illegal_photo_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNillegal_photo_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx context.Context, v interface{}) (model.IllegalPhotoBoolExp, error) {
	res, err := ec.unmarshalInputillegal_photo_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNillegal_photo_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoConstraint(ctx context.Context, v interface{}) (model.IllegalPhotoConstraint, error) {
	var res model.IllegalPhotoConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNillegal_photo_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoConstraint(ctx context.Context, sel ast.SelectionSet, v model.IllegalPhotoConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNillegal_photo_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoInsertInput(ctx context.Context, v interface{}) (model.IllegalPhotoInsertInput, error) {
	res, err := ec.unmarshalInputillegal_photo_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNillegal_photo_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.IllegalPhotoInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.IllegalPhotoInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNillegal_photo_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNillegal_photo_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoInsertInput(ctx context.Context, v interface{}) (*model.IllegalPhotoInsertInput, error) {
	res, err := ec.unmarshalInputillegal_photo_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNillegal_photo_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoOrderBy(ctx context.Context, v interface{}) (*model.IllegalPhotoOrderBy, error) {
	res, err := ec.unmarshalInputillegal_photo_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNillegal_photo_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoPkColumnsInput(ctx context.Context, v interface{}) (model.IllegalPhotoPkColumnsInput, error) {
	res, err := ec.unmarshalInputillegal_photo_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNillegal_photo_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumn(ctx context.Context, v interface{}) (model.IllegalPhotoSelectColumn, error) {
	var res model.IllegalPhotoSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNillegal_photo_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.IllegalPhotoSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNillegal_photo_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoUpdateColumn(ctx context.Context, v interface{}) (model.IllegalPhotoUpdateColumn, error) {
	var res model.IllegalPhotoUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNillegal_photo_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.IllegalPhotoUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNillegal_photo_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.IllegalPhotoUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.IllegalPhotoUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNillegal_photo_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNillegal_photo_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.IllegalPhotoUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNillegal_photo_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNnumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNnumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNpoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNpoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNregional_violation_register2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.RegionalViolationRegister) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNregional_violation_register2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegister(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNregional_violation_register2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegister(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegister) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._regional_violation_register(ctx, sel, v)
}

func (ec *executionContext) marshalNregional_violation_register_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterAggregate(ctx context.Context, sel ast.SelectionSet, v model.RegionalViolationRegisterAggregate) graphql.Marshaler {
	return ec._regional_violation_register_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNregional_violation_register_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterAggregate(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._regional_violation_register_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNregional_violation_register_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx context.Context, v interface{}) (model.RegionalViolationRegisterBoolExp, error) {
	res, err := ec.unmarshalInputregional_violation_register_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNregional_violation_register_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterConstraint(ctx context.Context, v interface{}) (model.RegionalViolationRegisterConstraint, error) {
	var res model.RegionalViolationRegisterConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNregional_violation_register_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterConstraint(ctx context.Context, sel ast.SelectionSet, v model.RegionalViolationRegisterConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNregional_violation_register_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterInsertInput(ctx context.Context, v interface{}) (model.RegionalViolationRegisterInsertInput, error) {
	res, err := ec.unmarshalInputregional_violation_register_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNregional_violation_register_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.RegionalViolationRegisterInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RegionalViolationRegisterInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNregional_violation_register_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNregional_violation_register_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterInsertInput(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterInsertInput, error) {
	res, err := ec.unmarshalInputregional_violation_register_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNregional_violation_register_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterOrderBy(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterOrderBy, error) {
	res, err := ec.unmarshalInputregional_violation_register_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNregional_violation_register_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterPkColumnsInput(ctx context.Context, v interface{}) (model.RegionalViolationRegisterPkColumnsInput, error) {
	res, err := ec.unmarshalInputregional_violation_register_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNregional_violation_register_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumn(ctx context.Context, v interface{}) (model.RegionalViolationRegisterSelectColumn, error) {
	var res model.RegionalViolationRegisterSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNregional_violation_register_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.RegionalViolationRegisterSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNregional_violation_register_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterUpdateColumn(ctx context.Context, v interface{}) (model.RegionalViolationRegisterUpdateColumn, error) {
	var res model.RegionalViolationRegisterUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNregional_violation_register_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.RegionalViolationRegisterUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNregional_violation_register_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.RegionalViolationRegisterUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.RegionalViolationRegisterUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNregional_violation_register_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNregional_violation_register_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.RegionalViolationRegisterUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNregional_violation_register_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNtimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNuser_operation_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.UserOperationLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNuser_operation_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNuser_operation_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLog(ctx context.Context, sel ast.SelectionSet, v *model.UserOperationLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._user_operation_log(ctx, sel, v)
}

func (ec *executionContext) marshalNuser_operation_log_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogAggregate(ctx context.Context, sel ast.SelectionSet, v model.UserOperationLogAggregate) graphql.Marshaler {
	return ec._user_operation_log_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNuser_operation_log_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogAggregate(ctx context.Context, sel ast.SelectionSet, v *model.UserOperationLogAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._user_operation_log_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNuser_operation_log_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogBoolExp(ctx context.Context, v interface{}) (model.UserOperationLogBoolExp, error) {
	res, err := ec.unmarshalInputuser_operation_log_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNuser_operation_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogConstraint(ctx context.Context, v interface{}) (model.UserOperationLogConstraint, error) {
	var res model.UserOperationLogConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNuser_operation_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogConstraint(ctx context.Context, sel ast.SelectionSet, v model.UserOperationLogConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNuser_operation_log_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogInsertInput(ctx context.Context, v interface{}) (model.UserOperationLogInsertInput, error) {
	res, err := ec.unmarshalInputuser_operation_log_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNuser_operation_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.UserOperationLogInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.UserOperationLogInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNuser_operation_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNuser_operation_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogInsertInput(ctx context.Context, v interface{}) (*model.UserOperationLogInsertInput, error) {
	res, err := ec.unmarshalInputuser_operation_log_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNuser_operation_log_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogOrderBy(ctx context.Context, v interface{}) (*model.UserOperationLogOrderBy, error) {
	res, err := ec.unmarshalInputuser_operation_log_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNuser_operation_log_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogPkColumnsInput(ctx context.Context, v interface{}) (model.UserOperationLogPkColumnsInput, error) {
	res, err := ec.unmarshalInputuser_operation_log_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNuser_operation_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogSelectColumn(ctx context.Context, v interface{}) (model.UserOperationLogSelectColumn, error) {
	var res model.UserOperationLogSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNuser_operation_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.UserOperationLogSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNuser_operation_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogUpdateColumn(ctx context.Context, v interface{}) (model.UserOperationLogUpdateColumn, error) {
	var res model.UserOperationLogUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNuser_operation_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.UserOperationLogUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNuser_operation_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.UserOperationLogUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.UserOperationLogUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNuser_operation_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNuser_operation_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.UserOperationLogUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNuser_operation_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNvehicle_detain_details2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.VehicleDetainDetails) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_detain_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetails(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNvehicle_detain_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetails(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDetainDetails) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_detain_details(ctx, sel, v)
}

func (ec *executionContext) marshalNvehicle_detain_details_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleDetainDetailsAggregate) graphql.Marshaler {
	return ec._vehicle_detain_details_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNvehicle_detain_details_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDetainDetailsAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_detain_details_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNvehicle_detain_details_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsBoolExp(ctx context.Context, v interface{}) (model.VehicleDetainDetailsBoolExp, error) {
	res, err := ec.unmarshalInputvehicle_detain_details_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_detain_details_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsConstraint(ctx context.Context, v interface{}) (model.VehicleDetainDetailsConstraint, error) {
	var res model.VehicleDetainDetailsConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_detain_details_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsConstraint(ctx context.Context, sel ast.SelectionSet, v model.VehicleDetainDetailsConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_detain_details_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsInsertInput(ctx context.Context, v interface{}) (model.VehicleDetainDetailsInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_detain_details_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_detain_details_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleDetainDetailsInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleDetainDetailsInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_detain_details_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNvehicle_detain_details_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsInsertInput(ctx context.Context, v interface{}) (*model.VehicleDetainDetailsInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_detain_details_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_detain_details_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsOrderBy(ctx context.Context, v interface{}) (*model.VehicleDetainDetailsOrderBy, error) {
	res, err := ec.unmarshalInputvehicle_detain_details_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_detain_details_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsPkColumnsInput(ctx context.Context, v interface{}) (model.VehicleDetainDetailsPkColumnsInput, error) {
	res, err := ec.unmarshalInputvehicle_detain_details_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_detain_details_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsSelectColumn(ctx context.Context, v interface{}) (model.VehicleDetainDetailsSelectColumn, error) {
	var res model.VehicleDetainDetailsSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_detain_details_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleDetainDetailsSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_detain_details_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsUpdateColumn(ctx context.Context, v interface{}) (model.VehicleDetainDetailsUpdateColumn, error) {
	var res model.VehicleDetainDetailsUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_detain_details_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleDetainDetailsUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_detain_details_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleDetainDetailsUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleDetainDetailsUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_detain_details_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNvehicle_detain_details_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleDetainDetailsUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_detain_details_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNvehicle_violation_details2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.VehicleViolationDetails) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_violation_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetails(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNvehicle_violation_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetails(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetails) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_violation_details(ctx, sel, v)
}

func (ec *executionContext) marshalNvehicle_violation_details_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleViolationDetailsAggregate) graphql.Marshaler {
	return ec._vehicle_violation_details_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNvehicle_violation_details_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_violation_details_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNvehicle_violation_details_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx context.Context, v interface{}) (model.VehicleViolationDetailsBoolExp, error) {
	res, err := ec.unmarshalInputvehicle_violation_details_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_violation_details_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsConstraint(ctx context.Context, v interface{}) (model.VehicleViolationDetailsConstraint, error) {
	var res model.VehicleViolationDetailsConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_violation_details_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsConstraint(ctx context.Context, sel ast.SelectionSet, v model.VehicleViolationDetailsConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_violation_details_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsInsertInput(ctx context.Context, v interface{}) (model.VehicleViolationDetailsInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_violation_details_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_violation_details_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleViolationDetailsInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleViolationDetailsInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_violation_details_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNvehicle_violation_details_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsInsertInput(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_violation_details_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_violation_details_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsOrderBy, error) {
	res, err := ec.unmarshalInputvehicle_violation_details_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_violation_details_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsPkColumnsInput(ctx context.Context, v interface{}) (model.VehicleViolationDetailsPkColumnsInput, error) {
	res, err := ec.unmarshalInputvehicle_violation_details_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_violation_details_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumn(ctx context.Context, v interface{}) (model.VehicleViolationDetailsSelectColumn, error) {
	var res model.VehicleViolationDetailsSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_violation_details_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleViolationDetailsSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_violation_details_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsUpdateColumn(ctx context.Context, v interface{}) (model.VehicleViolationDetailsUpdateColumn, error) {
	var res model.VehicleViolationDetailsUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_violation_details_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleViolationDetailsUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_violation_details_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleViolationDetailsUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleViolationDetailsUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_violation_details_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNvehicle_violation_details_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleViolationDetailsUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_violation_details_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNvehicle_violation_scoring_items2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.VehicleViolationScoringItems) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_violation_scoring_items2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItems(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNvehicle_violation_scoring_items2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItems(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItems) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_items(ctx, sel, v)
}

func (ec *executionContext) marshalNvehicle_violation_scoring_items_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleViolationScoringItemsAggregate) graphql.Marshaler {
	return ec._vehicle_violation_scoring_items_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNvehicle_violation_scoring_items_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_items_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_items_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx context.Context, v interface{}) (model.VehicleViolationScoringItemsBoolExp, error) {
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_items_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsConstraint(ctx context.Context, v interface{}) (model.VehicleViolationScoringItemsConstraint, error) {
	var res model.VehicleViolationScoringItemsConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_violation_scoring_items_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsConstraint(ctx context.Context, sel ast.SelectionSet, v model.VehicleViolationScoringItemsConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_items_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsInsertInput(ctx context.Context, v interface{}) (model.VehicleViolationScoringItemsInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_items_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleViolationScoringItemsInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleViolationScoringItemsInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_violation_scoring_items_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_items_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsInsertInput(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_items_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsOrderBy, error) {
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_items_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsPkColumnsInput(ctx context.Context, v interface{}) (model.VehicleViolationScoringItemsPkColumnsInput, error) {
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_items_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumn(ctx context.Context, v interface{}) (model.VehicleViolationScoringItemsSelectColumn, error) {
	var res model.VehicleViolationScoringItemsSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_violation_scoring_items_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleViolationScoringItemsSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_items_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsUpdateColumn(ctx context.Context, v interface{}) (model.VehicleViolationScoringItemsUpdateColumn, error) {
	var res model.VehicleViolationScoringItemsUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_violation_scoring_items_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleViolationScoringItemsUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_items_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleViolationScoringItemsUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleViolationScoringItemsUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_violation_scoring_items_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNvehicle_violation_scoring_items_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleViolationScoringItemsUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_violation_scoring_items_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNvehicle_violation_scoring_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.VehicleViolationScoringRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_violation_scoring_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNvehicle_violation_scoring_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecord(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_record(ctx, sel, v)
}

func (ec *executionContext) marshalNvehicle_violation_scoring_record_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleViolationScoringRecordAggregate) graphql.Marshaler {
	return ec._vehicle_violation_scoring_record_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNvehicle_violation_scoring_record_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_record_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_record_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx context.Context, v interface{}) (model.VehicleViolationScoringRecordBoolExp, error) {
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_record_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordConstraint(ctx context.Context, v interface{}) (model.VehicleViolationScoringRecordConstraint, error) {
	var res model.VehicleViolationScoringRecordConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_violation_scoring_record_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordConstraint(ctx context.Context, sel ast.SelectionSet, v model.VehicleViolationScoringRecordConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_record_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordInsertInput(ctx context.Context, v interface{}) (model.VehicleViolationScoringRecordInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_record_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleViolationScoringRecordInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleViolationScoringRecordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_violation_scoring_record_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_record_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordInsertInput(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_record_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordOrderBy, error) {
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_record_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordPkColumnsInput(ctx context.Context, v interface{}) (model.VehicleViolationScoringRecordPkColumnsInput, error) {
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumn(ctx context.Context, v interface{}) (model.VehicleViolationScoringRecordSelectColumn, error) {
	var res model.VehicleViolationScoringRecordSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_violation_scoring_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleViolationScoringRecordSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_record_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordUpdateColumn(ctx context.Context, v interface{}) (model.VehicleViolationScoringRecordUpdateColumn, error) {
	var res model.VehicleViolationScoringRecordUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_violation_scoring_record_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleViolationScoringRecordUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_violation_scoring_record_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleViolationScoringRecordUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleViolationScoringRecordUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_violation_scoring_record_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNvehicle_violation_scoring_record_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleViolationScoringRecordUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_violation_scoring_record_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model1.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBoolean_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model1.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInt_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model1.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputString_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVIO_CODEWFDM2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdm(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdm) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VIO_CODEWFDM(ctx, sel, v)
}

func (ec *executionContext) marshalOVIO_CODEWFDM_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VIO_CODEWFDM_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOVIO_CODEWFDM_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VIO_CODEWFDM_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVIO_CODEWFDM_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmAvgOrderBy(ctx context.Context, v interface{}) (*model.VioCodewfdmAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVIO_CODEWFDM_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVIO_CODEWFDM_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx context.Context, v interface{}) ([]*model.VioCodewfdmBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VioCodewfdmBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVIO_CODEWFDM_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVIO_CODEWFDM_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmBoolExp(ctx context.Context, v interface{}) (*model.VioCodewfdmBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVIO_CODEWFDM_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVIO_CODEWFDM_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmIncInput(ctx context.Context, v interface{}) (*model.VioCodewfdmIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVIO_CODEWFDM_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVIO_CODEWFDM_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VIO_CODEWFDM_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVIO_CODEWFDM_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMaxOrderBy(ctx context.Context, v interface{}) (*model.VioCodewfdmMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVIO_CODEWFDM_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVIO_CODEWFDM_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VIO_CODEWFDM_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVIO_CODEWFDM_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMinOrderBy(ctx context.Context, v interface{}) (*model.VioCodewfdmMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVIO_CODEWFDM_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVIO_CODEWFDM_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VIO_CODEWFDM_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVIO_CODEWFDM_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VioCodewfdmOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VioCodewfdmOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVIO_CODEWFDM_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVIO_CODEWFDM_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VioCodewfdmSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VioCodewfdmSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVIO_CODEWFDM_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVIO_CODEWFDM_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VioCodewfdmSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVIO_CODEWFDM_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVIO_CODEWFDM_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSetInput(ctx context.Context, v interface{}) (*model.VioCodewfdmSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVIO_CODEWFDM_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVIO_CODEWFDM_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VIO_CODEWFDM_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVIO_CODEWFDM_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmStddevOrderBy(ctx context.Context, v interface{}) (*model.VioCodewfdmStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVIO_CODEWFDM_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVIO_CODEWFDM_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VIO_CODEWFDM_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVIO_CODEWFDM_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmStddevPopOrderBy(ctx context.Context, v interface{}) (*model.VioCodewfdmStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVIO_CODEWFDM_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVIO_CODEWFDM_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VIO_CODEWFDM_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVIO_CODEWFDM_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmStddevSampOrderBy(ctx context.Context, v interface{}) (*model.VioCodewfdmStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVIO_CODEWFDM_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVIO_CODEWFDM_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VIO_CODEWFDM_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVIO_CODEWFDM_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmSumOrderBy(ctx context.Context, v interface{}) (*model.VioCodewfdmSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVIO_CODEWFDM_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVIO_CODEWFDM_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VIO_CODEWFDM_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVIO_CODEWFDM_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmVarPopOrderBy(ctx context.Context, v interface{}) (*model.VioCodewfdmVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVIO_CODEWFDM_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVIO_CODEWFDM_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VIO_CODEWFDM_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVIO_CODEWFDM_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmVarSampOrderBy(ctx context.Context, v interface{}) (*model.VioCodewfdmVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVIO_CODEWFDM_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVIO_CODEWFDM_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VioCodewfdmVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VIO_CODEWFDM_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVIO_CODEWFDM_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVioCodewfdmVarianceOrderBy(ctx context.Context, v interface{}) (*model.VioCodewfdmVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVIO_CODEWFDM_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalO_jsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_jsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalO_jsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_jsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalO_jsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO_jsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalO_text2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_text2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalO_text2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_text2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalO_text2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO_text2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalO_text_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐTextComparisonExp(ctx context.Context, v interface{}) (*model.TextComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInput_text_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOapp_enforcement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcement(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._app_enforcement(ctx, sel, v)
}

func (ec *executionContext) marshalOapp_enforcement_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._app_enforcement_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOapp_enforcement_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._app_enforcement_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOapp_enforcement_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementAvgOrderBy(ctx context.Context, v interface{}) (*model.AppEnforcementAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapp_enforcement_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOapp_enforcement_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx context.Context, v interface{}) ([]*model.AppEnforcementBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AppEnforcementBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOapp_enforcement_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOapp_enforcement_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementBoolExp(ctx context.Context, v interface{}) (*model.AppEnforcementBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapp_enforcement_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOapp_enforcement_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementIncInput(ctx context.Context, v interface{}) (*model.AppEnforcementIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapp_enforcement_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOapp_enforcement_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._app_enforcement_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOapp_enforcement_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMaxOrderBy(ctx context.Context, v interface{}) (*model.AppEnforcementMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapp_enforcement_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOapp_enforcement_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMinFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._app_enforcement_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOapp_enforcement_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMinOrderBy(ctx context.Context, v interface{}) (*model.AppEnforcementMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapp_enforcement_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOapp_enforcement_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._app_enforcement_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOapp_enforcement_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementOnConflict(ctx context.Context, v interface{}) (*model.AppEnforcementOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapp_enforcement_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOapp_enforcement_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementOrderByᚄ(ctx context.Context, v interface{}) ([]*model.AppEnforcementOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AppEnforcementOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNapp_enforcement_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOapp_enforcement_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.AppEnforcementSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.AppEnforcementSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNapp_enforcement_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOapp_enforcement_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AppEnforcementSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNapp_enforcement_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOapp_enforcement_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSetInput(ctx context.Context, v interface{}) (*model.AppEnforcementSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapp_enforcement_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOapp_enforcement_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._app_enforcement_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOapp_enforcement_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementStddevOrderBy(ctx context.Context, v interface{}) (*model.AppEnforcementStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapp_enforcement_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOapp_enforcement_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._app_enforcement_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOapp_enforcement_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementStddevPopOrderBy(ctx context.Context, v interface{}) (*model.AppEnforcementStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapp_enforcement_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOapp_enforcement_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._app_enforcement_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOapp_enforcement_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementStddevSampOrderBy(ctx context.Context, v interface{}) (*model.AppEnforcementStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapp_enforcement_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOapp_enforcement_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSumFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._app_enforcement_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOapp_enforcement_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementSumOrderBy(ctx context.Context, v interface{}) (*model.AppEnforcementSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapp_enforcement_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOapp_enforcement_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._app_enforcement_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOapp_enforcement_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementVarPopOrderBy(ctx context.Context, v interface{}) (*model.AppEnforcementVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapp_enforcement_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOapp_enforcement_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._app_enforcement_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOapp_enforcement_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementVarSampOrderBy(ctx context.Context, v interface{}) (*model.AppEnforcementVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapp_enforcement_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOapp_enforcement_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.AppEnforcementVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._app_enforcement_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOapp_enforcement_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐAppEnforcementVarianceOrderBy(ctx context.Context, v interface{}) (*model.AppEnforcementVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputapp_enforcement_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalObigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNbigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalObigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNbigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalObigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalObigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model1.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputbigint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecord(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record(ctx, sel, v)
}

func (ec *executionContext) marshalOdispute_violation_record_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOdispute_violation_record_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordAvgOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdispute_violation_record_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx context.Context, v interface{}) ([]*model.DisputeViolationRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DisputeViolationRecordBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOdispute_violation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdispute_violation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx context.Context, v interface{}) (*model.DisputeViolationRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdispute_violation_record_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordIncInput(ctx context.Context, v interface{}) (*model.DisputeViolationRecordIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLog(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLog) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_log(ctx, sel, v)
}

func (ec *executionContext) marshalOdispute_violation_record_log_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_log_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOdispute_violation_record_log_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_log_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_log_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogAvgOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_log_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdispute_violation_record_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx context.Context, v interface{}) ([]*model.DisputeViolationRecordLogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DisputeViolationRecordLogBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOdispute_violation_record_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdispute_violation_record_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_log_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdispute_violation_record_log_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogIncInput(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_log_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_log_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_log_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_log_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogMaxOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_log_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_log_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_log_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_log_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogMinOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_log_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_log_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogOnConflict(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_log_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdispute_violation_record_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DisputeViolationRecordLogOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DisputeViolationRecordLogOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdispute_violation_record_log_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdispute_violation_record_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DisputeViolationRecordLogSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DisputeViolationRecordLogSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdispute_violation_record_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOdispute_violation_record_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DisputeViolationRecordLogSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdispute_violation_record_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOdispute_violation_record_log_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogSetInput(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_log_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_log_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_log_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_log_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogStddevOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_log_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_log_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_log_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_log_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogStddevPopOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_log_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_log_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_log_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_log_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogStddevSampOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_log_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_log_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_log_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_log_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogSumOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_log_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_log_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_log_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_log_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogVarPopOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_log_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_log_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_log_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_log_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogVarSampOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_log_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_log_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_log_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_log_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordLogVarianceOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_log_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordMaxOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordMinOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordOnConflict(ctx context.Context, v interface{}) (*model.DisputeViolationRecordOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdispute_violation_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DisputeViolationRecordOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DisputeViolationRecordOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdispute_violation_record_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdispute_violation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DisputeViolationRecordSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DisputeViolationRecordSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdispute_violation_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOdispute_violation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DisputeViolationRecordSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdispute_violation_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOdispute_violation_record_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordSetInput(ctx context.Context, v interface{}) (*model.DisputeViolationRecordSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordStddevOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordStddevPopOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordStddevSampOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordSumOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordVarPopOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordVarSampOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdispute_violation_record_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dispute_violation_record_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdispute_violation_record_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDisputeViolationRecordVarianceOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdispute_violation_record_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_peccancy_check2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheck(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheck) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_peccancy_check(ctx, sel, v)
}

func (ec *executionContext) marshalOdriver_peccancy_check_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_peccancy_check_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOdriver_peccancy_check_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_peccancy_check_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_peccancy_check_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckAvgOrderBy(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_peccancy_check_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdriver_peccancy_check_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx context.Context, v interface{}) ([]*model.DriverPeccancyCheckBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverPeccancyCheckBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOdriver_peccancy_check_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdriver_peccancy_check_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckBoolExp(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_peccancy_check_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdriver_peccancy_check_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckIncInput(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_peccancy_check_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_peccancy_check_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_peccancy_check_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_peccancy_check_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMaxOrderBy(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_peccancy_check_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_peccancy_check_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_peccancy_check_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_peccancy_check_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMinOrderBy(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_peccancy_check_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_peccancy_check_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_peccancy_check_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_peccancy_check_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckOnConflict(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_peccancy_check_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdriver_peccancy_check_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DriverPeccancyCheckOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverPeccancyCheckOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_peccancy_check_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdriver_peccancy_check_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DriverPeccancyCheckSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DriverPeccancyCheckSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_peccancy_check_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOdriver_peccancy_check_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DriverPeccancyCheckSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdriver_peccancy_check_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOdriver_peccancy_check_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSetInput(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_peccancy_check_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_peccancy_check_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_peccancy_check_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_peccancy_check_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckStddevOrderBy(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_peccancy_check_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_peccancy_check_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_peccancy_check_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_peccancy_check_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckStddevPopOrderBy(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_peccancy_check_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_peccancy_check_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_peccancy_check_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_peccancy_check_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckStddevSampOrderBy(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_peccancy_check_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_peccancy_check_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_peccancy_check_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_peccancy_check_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckSumOrderBy(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_peccancy_check_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_peccancy_check_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_peccancy_check_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_peccancy_check_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckVarPopOrderBy(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_peccancy_check_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_peccancy_check_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_peccancy_check_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_peccancy_check_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckVarSampOrderBy(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_peccancy_check_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_peccancy_check_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverPeccancyCheckVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_peccancy_check_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_peccancy_check_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐDriverPeccancyCheckVarianceOrderBy(ctx context.Context, v interface{}) (*model.DriverPeccancyCheckVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_peccancy_check_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_items2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItems(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_items(ctx, sel, v)
}

func (ec *executionContext) marshalOenterprise_deduction_items_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionItemsAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_items_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOenterprise_deduction_items_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionItemsAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_items_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_items_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsAvgOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionItemsAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_items_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOenterprise_deduction_items_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsBoolExp(ctx context.Context, v interface{}) ([]*model.EnterpriseDeductionItemsBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseDeductionItemsBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOenterprise_deduction_items_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOenterprise_deduction_items_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsBoolExp(ctx context.Context, v interface{}) (*model.EnterpriseDeductionItemsBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_items_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOenterprise_deduction_items_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsIncInput(ctx context.Context, v interface{}) (*model.EnterpriseDeductionItemsIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_items_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_items_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionItemsMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_items_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_items_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsMaxOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionItemsMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_items_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_items_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionItemsMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_items_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_items_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsMinOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionItemsMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_items_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_items_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionItemsMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_items_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_items_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsOnConflict(ctx context.Context, v interface{}) (*model.EnterpriseDeductionItemsOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_items_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOenterprise_deduction_items_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseDeductionItemsOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseDeductionItemsOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNenterprise_deduction_items_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOenterprise_deduction_items_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseDeductionItemsSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseDeductionItemsSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNenterprise_deduction_items_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOenterprise_deduction_items_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseDeductionItemsSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNenterprise_deduction_items_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOenterprise_deduction_items_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsSetInput(ctx context.Context, v interface{}) (*model.EnterpriseDeductionItemsSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_items_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_items_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionItemsStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_items_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_items_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsStddevOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionItemsStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_items_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_items_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionItemsStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_items_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_items_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsStddevPopOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionItemsStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_items_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_items_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionItemsStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_items_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_items_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsStddevSampOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionItemsStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_items_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_items_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionItemsSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_items_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_items_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsSumOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionItemsSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_items_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_items_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionItemsVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_items_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_items_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsVarPopOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionItemsVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_items_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_items_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionItemsVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_items_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_items_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsVarSampOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionItemsVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_items_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_items_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionItemsVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_items_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_items_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionItemsVarianceOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionItemsVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_items_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_operation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecord(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionOperationRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_operation_record(ctx, sel, v)
}

func (ec *executionContext) marshalOenterprise_deduction_operation_record_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionOperationRecordAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_operation_record_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOenterprise_deduction_operation_record_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionOperationRecordAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_operation_record_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_operation_record_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordAvgOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionOperationRecordAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOenterprise_deduction_operation_record_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordBoolExp(ctx context.Context, v interface{}) ([]*model.EnterpriseDeductionOperationRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseDeductionOperationRecordBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOenterprise_deduction_operation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOenterprise_deduction_operation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordBoolExp(ctx context.Context, v interface{}) (*model.EnterpriseDeductionOperationRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOenterprise_deduction_operation_record_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordIncInput(ctx context.Context, v interface{}) (*model.EnterpriseDeductionOperationRecordIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_operation_record_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionOperationRecordMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_operation_record_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_operation_record_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordMaxOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionOperationRecordMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_operation_record_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionOperationRecordMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_operation_record_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_operation_record_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordMinOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionOperationRecordMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_operation_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionOperationRecordMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_operation_record_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_operation_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordOnConflict(ctx context.Context, v interface{}) (*model.EnterpriseDeductionOperationRecordOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOenterprise_deduction_operation_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseDeductionOperationRecordOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseDeductionOperationRecordOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNenterprise_deduction_operation_record_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOenterprise_deduction_operation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseDeductionOperationRecordSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseDeductionOperationRecordSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNenterprise_deduction_operation_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOenterprise_deduction_operation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseDeductionOperationRecordSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNenterprise_deduction_operation_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOenterprise_deduction_operation_record_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordSetInput(ctx context.Context, v interface{}) (*model.EnterpriseDeductionOperationRecordSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_operation_record_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionOperationRecordStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_operation_record_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_operation_record_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordStddevOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionOperationRecordStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_operation_record_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionOperationRecordStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_operation_record_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_operation_record_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordStddevPopOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionOperationRecordStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_operation_record_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionOperationRecordStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_operation_record_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_operation_record_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordStddevSampOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionOperationRecordStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_operation_record_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionOperationRecordSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_operation_record_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_operation_record_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordSumOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionOperationRecordSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_operation_record_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionOperationRecordVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_operation_record_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_operation_record_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordVarPopOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionOperationRecordVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_operation_record_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionOperationRecordVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_operation_record_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_operation_record_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordVarSampOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionOperationRecordVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_deduction_operation_record_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDeductionOperationRecordVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_deduction_operation_record_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_deduction_operation_record_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐEnterpriseDeductionOperationRecordVarianceOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseDeductionOperationRecordVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_deduction_operation_record_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOillegal_photo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhoto(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhoto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._illegal_photo(ctx, sel, v)
}

func (ec *executionContext) marshalOillegal_photo_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._illegal_photo_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOillegal_photo_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._illegal_photo_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOillegal_photo_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoAvgOrderBy(ctx context.Context, v interface{}) (*model.IllegalPhotoAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputillegal_photo_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOillegal_photo_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx context.Context, v interface{}) ([]*model.IllegalPhotoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.IllegalPhotoBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOillegal_photo_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOillegal_photo_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoBoolExp(ctx context.Context, v interface{}) (*model.IllegalPhotoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputillegal_photo_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOillegal_photo_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoIncInput(ctx context.Context, v interface{}) (*model.IllegalPhotoIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputillegal_photo_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOillegal_photo_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._illegal_photo_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOillegal_photo_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMaxOrderBy(ctx context.Context, v interface{}) (*model.IllegalPhotoMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputillegal_photo_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOillegal_photo_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMinFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._illegal_photo_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOillegal_photo_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMinOrderBy(ctx context.Context, v interface{}) (*model.IllegalPhotoMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputillegal_photo_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOillegal_photo_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._illegal_photo_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOillegal_photo_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoOnConflict(ctx context.Context, v interface{}) (*model.IllegalPhotoOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputillegal_photo_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOillegal_photo_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoOrderByᚄ(ctx context.Context, v interface{}) ([]*model.IllegalPhotoOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.IllegalPhotoOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNillegal_photo_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOillegal_photo_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.IllegalPhotoSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.IllegalPhotoSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNillegal_photo_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOillegal_photo_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.IllegalPhotoSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNillegal_photo_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOillegal_photo_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSetInput(ctx context.Context, v interface{}) (*model.IllegalPhotoSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputillegal_photo_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOillegal_photo_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._illegal_photo_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOillegal_photo_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoStddevOrderBy(ctx context.Context, v interface{}) (*model.IllegalPhotoStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputillegal_photo_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOillegal_photo_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._illegal_photo_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOillegal_photo_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoStddevPopOrderBy(ctx context.Context, v interface{}) (*model.IllegalPhotoStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputillegal_photo_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOillegal_photo_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._illegal_photo_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOillegal_photo_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoStddevSampOrderBy(ctx context.Context, v interface{}) (*model.IllegalPhotoStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputillegal_photo_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOillegal_photo_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSumFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._illegal_photo_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOillegal_photo_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoSumOrderBy(ctx context.Context, v interface{}) (*model.IllegalPhotoSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputillegal_photo_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOillegal_photo_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._illegal_photo_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOillegal_photo_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoVarPopOrderBy(ctx context.Context, v interface{}) (*model.IllegalPhotoVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputillegal_photo_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOillegal_photo_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._illegal_photo_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOillegal_photo_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoVarSampOrderBy(ctx context.Context, v interface{}) (*model.IllegalPhotoVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputillegal_photo_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOillegal_photo_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.IllegalPhotoVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._illegal_photo_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOillegal_photo_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐIllegalPhotoVarianceOrderBy(ctx context.Context, v interface{}) (*model.IllegalPhotoVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputillegal_photo_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNnumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNnumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOnumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOnumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx context.Context, v interface{}) (*model1.NumericComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnumeric_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model1.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model1.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model1.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOpoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNpoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOpoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNpoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOpoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOpoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOpoint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx context.Context, v interface{}) (*model1.PointComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputpoint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOregional_violation_register2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegister(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegister) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._regional_violation_register(ctx, sel, v)
}

func (ec *executionContext) marshalOregional_violation_register_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._regional_violation_register_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOregional_violation_register_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._regional_violation_register_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOregional_violation_register_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterAvgOrderBy(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputregional_violation_register_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOregional_violation_register_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx context.Context, v interface{}) ([]*model.RegionalViolationRegisterBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RegionalViolationRegisterBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOregional_violation_register_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOregional_violation_register_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterBoolExp(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputregional_violation_register_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOregional_violation_register_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterIncInput(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputregional_violation_register_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOregional_violation_register_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._regional_violation_register_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOregional_violation_register_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMaxOrderBy(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputregional_violation_register_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOregional_violation_register_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMinFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._regional_violation_register_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOregional_violation_register_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMinOrderBy(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputregional_violation_register_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOregional_violation_register_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._regional_violation_register_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOregional_violation_register_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterOnConflict(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputregional_violation_register_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOregional_violation_register_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterOrderByᚄ(ctx context.Context, v interface{}) ([]*model.RegionalViolationRegisterOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RegionalViolationRegisterOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNregional_violation_register_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOregional_violation_register_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.RegionalViolationRegisterSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.RegionalViolationRegisterSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNregional_violation_register_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOregional_violation_register_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.RegionalViolationRegisterSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNregional_violation_register_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOregional_violation_register_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSetInput(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputregional_violation_register_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOregional_violation_register_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._regional_violation_register_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOregional_violation_register_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterStddevOrderBy(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputregional_violation_register_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOregional_violation_register_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._regional_violation_register_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOregional_violation_register_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterStddevPopOrderBy(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputregional_violation_register_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOregional_violation_register_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._regional_violation_register_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOregional_violation_register_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterStddevSampOrderBy(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputregional_violation_register_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOregional_violation_register_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSumFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._regional_violation_register_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOregional_violation_register_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterSumOrderBy(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputregional_violation_register_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOregional_violation_register_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._regional_violation_register_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOregional_violation_register_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterVarPopOrderBy(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputregional_violation_register_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOregional_violation_register_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._regional_violation_register_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOregional_violation_register_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterVarSampOrderBy(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputregional_violation_register_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOregional_violation_register_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionalViolationRegisterVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._regional_violation_register_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOregional_violation_register_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐRegionalViolationRegisterVarianceOrderBy(ctx context.Context, v interface{}) (*model.RegionalViolationRegisterVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputregional_violation_register_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNtimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model1.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtimestamptz_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOuser_operation_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLog(ctx context.Context, sel ast.SelectionSet, v *model.UserOperationLog) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._user_operation_log(ctx, sel, v)
}

func (ec *executionContext) marshalOuser_operation_log_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.UserOperationLogAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._user_operation_log_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOuser_operation_log_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.UserOperationLogAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._user_operation_log_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOuser_operation_log_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogAvgOrderBy(ctx context.Context, v interface{}) (*model.UserOperationLogAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputuser_operation_log_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOuser_operation_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogBoolExp(ctx context.Context, v interface{}) ([]*model.UserOperationLogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.UserOperationLogBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOuser_operation_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOuser_operation_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogBoolExp(ctx context.Context, v interface{}) (*model.UserOperationLogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputuser_operation_log_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOuser_operation_log_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogIncInput(ctx context.Context, v interface{}) (*model.UserOperationLogIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputuser_operation_log_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOuser_operation_log_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.UserOperationLogMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._user_operation_log_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOuser_operation_log_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogMaxOrderBy(ctx context.Context, v interface{}) (*model.UserOperationLogMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputuser_operation_log_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOuser_operation_log_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogMinFields(ctx context.Context, sel ast.SelectionSet, v *model.UserOperationLogMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._user_operation_log_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOuser_operation_log_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogMinOrderBy(ctx context.Context, v interface{}) (*model.UserOperationLogMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputuser_operation_log_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOuser_operation_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.UserOperationLogMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._user_operation_log_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOuser_operation_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogOnConflict(ctx context.Context, v interface{}) (*model.UserOperationLogOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputuser_operation_log_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOuser_operation_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogOrderByᚄ(ctx context.Context, v interface{}) ([]*model.UserOperationLogOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.UserOperationLogOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNuser_operation_log_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOuser_operation_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.UserOperationLogSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.UserOperationLogSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNuser_operation_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOuser_operation_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.UserOperationLogSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNuser_operation_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOuser_operation_log_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogSetInput(ctx context.Context, v interface{}) (*model.UserOperationLogSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputuser_operation_log_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOuser_operation_log_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.UserOperationLogStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._user_operation_log_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOuser_operation_log_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogStddevOrderBy(ctx context.Context, v interface{}) (*model.UserOperationLogStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputuser_operation_log_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOuser_operation_log_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.UserOperationLogStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._user_operation_log_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOuser_operation_log_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogStddevPopOrderBy(ctx context.Context, v interface{}) (*model.UserOperationLogStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputuser_operation_log_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOuser_operation_log_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.UserOperationLogStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._user_operation_log_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOuser_operation_log_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogStddevSampOrderBy(ctx context.Context, v interface{}) (*model.UserOperationLogStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputuser_operation_log_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOuser_operation_log_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogSumFields(ctx context.Context, sel ast.SelectionSet, v *model.UserOperationLogSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._user_operation_log_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOuser_operation_log_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogSumOrderBy(ctx context.Context, v interface{}) (*model.UserOperationLogSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputuser_operation_log_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOuser_operation_log_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.UserOperationLogVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._user_operation_log_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOuser_operation_log_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogVarPopOrderBy(ctx context.Context, v interface{}) (*model.UserOperationLogVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputuser_operation_log_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOuser_operation_log_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.UserOperationLogVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._user_operation_log_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOuser_operation_log_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogVarSampOrderBy(ctx context.Context, v interface{}) (*model.UserOperationLogVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputuser_operation_log_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOuser_operation_log_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.UserOperationLogVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._user_operation_log_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOuser_operation_log_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐUserOperationLogVarianceOrderBy(ctx context.Context, v interface{}) (*model.UserOperationLogVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputuser_operation_log_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_detain_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetails(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDetainDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_detain_details(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_detain_details_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDetainDetailsAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_detain_details_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_detain_details_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDetainDetailsAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_detain_details_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_detain_details_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsAvgOrderBy(ctx context.Context, v interface{}) (*model.VehicleDetainDetailsAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_detain_details_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_detain_details_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleDetainDetailsBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleDetainDetailsBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOvehicle_detain_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_detain_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsBoolExp(ctx context.Context, v interface{}) (*model.VehicleDetainDetailsBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_detain_details_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_detain_details_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsIncInput(ctx context.Context, v interface{}) (*model.VehicleDetainDetailsIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_detain_details_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_detain_details_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDetainDetailsMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_detain_details_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_detain_details_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsMaxOrderBy(ctx context.Context, v interface{}) (*model.VehicleDetainDetailsMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_detain_details_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_detain_details_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDetainDetailsMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_detain_details_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_detain_details_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsMinOrderBy(ctx context.Context, v interface{}) (*model.VehicleDetainDetailsMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_detain_details_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_detain_details_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDetainDetailsMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_detain_details_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_detain_details_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsOnConflict(ctx context.Context, v interface{}) (*model.VehicleDetainDetailsOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_detain_details_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_detain_details_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleDetainDetailsOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleDetainDetailsOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_detain_details_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_detain_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleDetainDetailsSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleDetainDetailsSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_detain_details_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOvehicle_detain_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleDetainDetailsSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_detain_details_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOvehicle_detain_details_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsSetInput(ctx context.Context, v interface{}) (*model.VehicleDetainDetailsSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_detain_details_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_detain_details_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDetainDetailsStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_detain_details_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_detain_details_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsStddevOrderBy(ctx context.Context, v interface{}) (*model.VehicleDetainDetailsStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_detain_details_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_detain_details_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDetainDetailsStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_detain_details_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_detain_details_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsStddevPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleDetainDetailsStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_detain_details_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_detain_details_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDetainDetailsStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_detain_details_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_detain_details_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsStddevSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleDetainDetailsStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_detain_details_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_detain_details_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDetainDetailsSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_detain_details_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_detain_details_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsSumOrderBy(ctx context.Context, v interface{}) (*model.VehicleDetainDetailsSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_detain_details_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_detain_details_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDetainDetailsVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_detain_details_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_detain_details_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsVarPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleDetainDetailsVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_detain_details_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_detain_details_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDetainDetailsVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_detain_details_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_detain_details_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsVarSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleDetainDetailsVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_detain_details_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_detain_details_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDetainDetailsVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_detain_details_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_detain_details_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleDetainDetailsVarianceOrderBy(ctx context.Context, v interface{}) (*model.VehicleDetainDetailsVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_detain_details_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetails(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_details(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_violation_details_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_details_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_violation_details_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_details_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_details_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsAvgOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_details_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_violation_details_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleViolationDetailsBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleViolationDetailsBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOvehicle_violation_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_violation_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsBoolExp(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_details_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_violation_details_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsIncInput(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_details_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_details_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_details_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_details_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMaxOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_details_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_details_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_details_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_details_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMinOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_details_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_details_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_details_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_details_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsOnConflict(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_details_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_violation_details_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleViolationDetailsOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleViolationDetailsOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_violation_details_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_violation_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleViolationDetailsSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleViolationDetailsSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_violation_details_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOvehicle_violation_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleViolationDetailsSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_violation_details_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOvehicle_violation_details_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSetInput(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_details_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_details_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_details_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_details_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsStddevOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_details_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_details_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_details_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_details_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsStddevPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_details_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_details_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_details_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_details_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsStddevSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_details_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_details_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_details_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_details_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsSumOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_details_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_details_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_details_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_details_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsVarPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_details_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_details_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_details_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_details_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsVarSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_details_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_details_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationDetailsVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_details_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_details_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationDetailsVarianceOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationDetailsVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_details_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_items2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItems(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_items(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_items_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_items_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_items_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_items_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_items_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsAvgOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_items_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleViolationScoringItemsBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleViolationScoringItemsBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOvehicle_violation_scoring_items_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_items_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsBoolExp(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_items_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsIncInput(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_items_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_items_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_items_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMaxOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_items_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_items_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_items_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMinOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_items_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_items_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_items_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsOnConflict(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_items_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleViolationScoringItemsOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleViolationScoringItemsOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_violation_scoring_items_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_items_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleViolationScoringItemsSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleViolationScoringItemsSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_violation_scoring_items_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOvehicle_violation_scoring_items_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleViolationScoringItemsSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_violation_scoring_items_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_items_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSetInput(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_items_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_items_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_items_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsStddevOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_items_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_items_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_items_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsStddevPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_items_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_items_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_items_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsStddevSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_items_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_items_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_items_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsSumOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_items_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_items_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_items_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsVarPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_items_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_items_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_items_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsVarSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_items_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringItemsVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_items_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_items_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringItemsVarianceOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringItemsVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_items_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecord(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_record(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_record_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_record_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_record_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_record_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_record_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordAvgOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_record_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleViolationScoringRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleViolationScoringRecordBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOvehicle_violation_scoring_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordBoolExp(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_record_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordIncInput(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_record_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_record_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_record_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMaxOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_record_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_record_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_record_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMinOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_record_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordOnConflict(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleViolationScoringRecordOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleViolationScoringRecordOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_violation_scoring_record_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleViolationScoringRecordSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleViolationScoringRecordSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_violation_scoring_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOvehicle_violation_scoring_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleViolationScoringRecordSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_violation_scoring_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_record_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSetInput(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_record_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_record_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_record_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordStddevOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_record_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_record_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_record_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordStddevPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_record_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_record_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_record_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordStddevSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_record_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_record_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_record_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordSumOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_record_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_record_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_record_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordVarPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_record_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_record_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_record_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordVarSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_violation_scoring_record_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleViolationScoringRecordVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_violation_scoring_record_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_violation_scoring_record_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_violationᚋgraphᚋmodelᚐVehicleViolationScoringRecordVarianceOrderBy(ctx context.Context, v interface{}) (*model.VehicleViolationScoringRecordVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_violation_scoring_record_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
