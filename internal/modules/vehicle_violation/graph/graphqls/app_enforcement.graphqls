schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

# APP现场执法表
#
#
# columns and relationships of "app_enforcement"
#
type app_enforcement {
    # 空间数据类型point表示经度(longitude)和纬度(latitude)
    coordinate: point

    # 创建时间
    create_at: timestamptz!

    # 创建人
    created_by: String!

    # 删除时间
    deleted_at: timestamptz

    # 删除人
    deleted_by: String

    # 编辑文本
    edit_text: String

    # 企业类型字典
    enterprise_type: String

    # 主键
    id: bigint!

    # 联合主键
    illegal_photo_id: String!

    # 位置描述
    location_description: String

    # 操作用户
    operation_user: String

    # 纠察状态
    picket_status: Int

    # 修改时间
    updated_at: timestamptz

    # 修改人
    updated_by: String

    # vehicle_info 车辆信息表 的vehicle_id
    vehicle_id: String

    # 违法明细表ID(vehicle_violation_details的violation_detail_id)
    violation_detail_id: String
}

# aggregated selection of "app_enforcement"
type app_enforcement_aggregate {
    aggregate: app_enforcement_aggregate_fields
    nodes: [app_enforcement!]!
}

# aggregate fields of "app_enforcement"
type app_enforcement_aggregate_fields {
    avg: app_enforcement_avg_fields
    count(columns: [app_enforcement_select_column!], distinct: Boolean): Int
    max: app_enforcement_max_fields
    min: app_enforcement_min_fields
    stddev: app_enforcement_stddev_fields
    stddev_pop: app_enforcement_stddev_pop_fields
    stddev_samp: app_enforcement_stddev_samp_fields
    sum: app_enforcement_sum_fields
    var_pop: app_enforcement_var_pop_fields
    var_samp: app_enforcement_var_samp_fields
    variance: app_enforcement_variance_fields
}

# order by aggregate values of table "app_enforcement"
input app_enforcement_aggregate_order_by {
    avg: app_enforcement_avg_order_by
    count: order_by
    max: app_enforcement_max_order_by
    min: app_enforcement_min_order_by
    stddev: app_enforcement_stddev_order_by
    stddev_pop: app_enforcement_stddev_pop_order_by
    stddev_samp: app_enforcement_stddev_samp_order_by
    sum: app_enforcement_sum_order_by
    var_pop: app_enforcement_var_pop_order_by
    var_samp: app_enforcement_var_samp_order_by
    variance: app_enforcement_variance_order_by
}

# input type for inserting array relation for remote table "app_enforcement"
input app_enforcement_arr_rel_insert_input {
    data: [app_enforcement_insert_input!]!
    on_conflict: app_enforcement_on_conflict
}

# aggregate avg on columns
type app_enforcement_avg_fields {
    id: Float
    picket_status: Float
}

# order by avg() on columns of table "app_enforcement"
input app_enforcement_avg_order_by {
    id: order_by
    picket_status: order_by
}

# Boolean expression to filter rows from the table "app_enforcement". All fields are combined with a logical 'AND'.
input app_enforcement_bool_exp {
    _and: [app_enforcement_bool_exp]
    _not: app_enforcement_bool_exp
    _or: [app_enforcement_bool_exp]
    coordinate: point_comparison_exp
    create_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    edit_text: String_comparison_exp
    enterprise_type: String_comparison_exp
    id: bigint_comparison_exp
    illegal_photo_id: String_comparison_exp
    location_description: String_comparison_exp
    operation_user: String_comparison_exp
    picket_status: Int_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    vehicle_id: String_comparison_exp
    violation_detail_id: String_comparison_exp
}

# unique or primary key constraints on table "app_enforcement"
enum app_enforcement_constraint {
    # unique or primary key constraint
    app_enforcement_pkey
}

# input type for incrementing integer column in table "app_enforcement"
input app_enforcement_inc_input {
    id: bigint
    picket_status: Int
}

# input type for inserting data into table "app_enforcement"
input app_enforcement_insert_input {
    coordinate: point
    create_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    edit_text: String
    enterprise_type: String
    id: bigint
    illegal_photo_id: String
    location_description: String
    operation_user: String
    picket_status: Int
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    violation_detail_id: String
}

# aggregate max on columns
type app_enforcement_max_fields {
    create_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    edit_text: String
    enterprise_type: String
    id: bigint
    illegal_photo_id: String
    location_description: String
    operation_user: String
    picket_status: Int
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    violation_detail_id: String
}

# order by max() on columns of table "app_enforcement"
input app_enforcement_max_order_by {
    create_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    edit_text: order_by
    enterprise_type: order_by
    id: order_by
    illegal_photo_id: order_by
    location_description: order_by
    operation_user: order_by
    picket_status: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
    violation_detail_id: order_by
}

# aggregate min on columns
type app_enforcement_min_fields {
    create_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    edit_text: String
    enterprise_type: String
    id: bigint
    illegal_photo_id: String
    location_description: String
    operation_user: String
    picket_status: Int
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    violation_detail_id: String
}

# order by min() on columns of table "app_enforcement"
input app_enforcement_min_order_by {
    create_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    edit_text: order_by
    enterprise_type: order_by
    id: order_by
    illegal_photo_id: order_by
    location_description: order_by
    operation_user: order_by
    picket_status: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
    violation_detail_id: order_by
}

# response of any mutation on the table "app_enforcement"
type app_enforcement_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!

    # data of the affected rows by the mutation
    returning: [app_enforcement!]!
}

# input type for inserting object relation for remote table "app_enforcement"
input app_enforcement_obj_rel_insert_input {
    data: app_enforcement_insert_input!
    on_conflict: app_enforcement_on_conflict
}

# on conflict condition type for table "app_enforcement"
input app_enforcement_on_conflict {
    constraint: app_enforcement_constraint!
    update_columns: [app_enforcement_update_column!]!
    where: app_enforcement_bool_exp
}

# ordering options when selecting data from "app_enforcement"
input app_enforcement_order_by {
    coordinate: order_by
    create_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    edit_text: order_by
    enterprise_type: order_by
    id: order_by
    illegal_photo_id: order_by
    location_description: order_by
    operation_user: order_by
    picket_status: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
    violation_detail_id: order_by
}

# primary key columns input for table: "app_enforcement"
input app_enforcement_pk_columns_input {
    # 主键
    id: bigint!

    # 联合主键
    illegal_photo_id: String!
}

# select columns of table "app_enforcement"
enum app_enforcement_select_column {
    # column name
    coordinate

    # column name
    create_at

    # column name
    created_by

    # column name
    deleted_at

    # column name
    deleted_by

    # column name
    edit_text

    # column name
    enterprise_type

    # column name
    id

    # column name
    illegal_photo_id

    # column name
    location_description

    # column name
    operation_user

    # column name
    picket_status

    # column name
    updated_at

    # column name
    updated_by

    # column name
    vehicle_id

    # column name
    violation_detail_id
}

# input type for updating data in table "app_enforcement"
input app_enforcement_set_input {
    coordinate: point
    create_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    edit_text: String
    enterprise_type: String
    id: bigint
    illegal_photo_id: String
    location_description: String
    operation_user: String
    picket_status: Int
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
    violation_detail_id: String
}

# aggregate stddev on columns
type app_enforcement_stddev_fields {
    id: Float
    picket_status: Float
}

# order by stddev() on columns of table "app_enforcement"
input app_enforcement_stddev_order_by {
    id: order_by
    picket_status: order_by
}

# aggregate stddev_pop on columns
type app_enforcement_stddev_pop_fields {
    id: Float
    picket_status: Float
}

# order by stddev_pop() on columns of table "app_enforcement"
input app_enforcement_stddev_pop_order_by {
    id: order_by
    picket_status: order_by
}

# aggregate stddev_samp on columns
type app_enforcement_stddev_samp_fields {
    id: Float
    picket_status: Float
}

# order by stddev_samp() on columns of table "app_enforcement"
input app_enforcement_stddev_samp_order_by {
    id: order_by
    picket_status: order_by
}

# aggregate sum on columns
type app_enforcement_sum_fields {
    id: bigint
    picket_status: Int
}

# order by sum() on columns of table "app_enforcement"
input app_enforcement_sum_order_by {
    id: order_by
    picket_status: order_by
}

# update columns of table "app_enforcement"
enum app_enforcement_update_column {
    # column name
    coordinate

    # column name
    create_at

    # column name
    created_by

    # column name
    deleted_at

    # column name
    deleted_by

    # column name
    edit_text

    # column name
    enterprise_type

    # column name
    id

    # column name
    illegal_photo_id

    # column name
    location_description

    # column name
    operation_user

    # column name
    picket_status

    # column name
    updated_at

    # column name
    updated_by

    # column name
    vehicle_id

    # column name
    violation_detail_id
}

# aggregate var_pop on columns
type app_enforcement_var_pop_fields {
    id: Float
    picket_status: Float
}

# order by var_pop() on columns of table "app_enforcement"
input app_enforcement_var_pop_order_by {
    id: order_by
    picket_status: order_by
}

# aggregate var_samp on columns
type app_enforcement_var_samp_fields {
    id: Float
    picket_status: Float
}

# order by var_samp() on columns of table "app_enforcement"
input app_enforcement_var_samp_order_by {
    id: order_by
    picket_status: order_by
}

# aggregate variance on columns
type app_enforcement_variance_fields {
    id: Float
    picket_status: Float
}

# order by variance() on columns of table "app_enforcement"
input app_enforcement_variance_order_by {
    id: order_by
    picket_status: order_by
}

scalar bigint

# expression to compare columns of type bigint. All fields are combined with logical 'AND'.
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}

# expression to compare columns of type Int. All fields are combined with logical 'AND'.
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

# mutation root
type mutation_root {
    # delete data from the table: "app_enforcement"
    delete_app_enforcement(
        # filter the rows which have to be deleted
        where: app_enforcement_bool_exp!
    ): app_enforcement_mutation_response

    # delete single row from the table: "app_enforcement"
    delete_app_enforcement_by_pk(
        # 主键
        id: bigint!

        # 联合主键
        illegal_photo_id: String!
    ): app_enforcement

    # insert data into the table: "app_enforcement"
    insert_app_enforcement(
        # the rows to be inserted
        objects: [app_enforcement_insert_input!]!

        # on conflict condition
        on_conflict: app_enforcement_on_conflict
    ): app_enforcement_mutation_response

    # insert a single row into the table: "app_enforcement"
    insert_app_enforcement_one(
        # the row to be inserted
        object: app_enforcement_insert_input!

        # on conflict condition
        on_conflict: app_enforcement_on_conflict
    ): app_enforcement

    # update data of the table: "app_enforcement"
    update_app_enforcement(
        # increments the integer columns with given value of the filtered values
        _inc: app_enforcement_inc_input

        # sets the columns of the filtered rows to the given values
        _set: app_enforcement_set_input

        # filter the rows which have to be updated
        where: app_enforcement_bool_exp!
    ): app_enforcement_mutation_response

    # update single row of the table: "app_enforcement"
    update_app_enforcement_by_pk(
        # increments the integer columns with given value of the filtered values
        _inc: app_enforcement_inc_input

        # sets the columns of the filtered rows to the given values
        _set: app_enforcement_set_input
        pk_columns: app_enforcement_pk_columns_input!
    ): app_enforcement
}

# column ordering options
enum order_by {
    # in the ascending order, nulls last
    asc

    # in the ascending order, nulls first
    asc_nulls_first

    # in the ascending order, nulls last
    asc_nulls_last

    # in the descending order, nulls first
    desc

    # in the descending order, nulls first
    desc_nulls_first

    # in the descending order, nulls last
    desc_nulls_last
}

scalar point

# expression to compare columns of type point. All fields are combined with logical 'AND'.
input point_comparison_exp {
    _eq: point
    _gt: point
    _gte: point
    _in: [point!]
    _is_null: Boolean
    _lt: point
    _lte: point
    _neq: point
    _nin: [point!]
}

# query root
type query_root {
    # fetch data from the table: "app_enforcement"
    app_enforcement(
        # distinct select on columns
        distinct_on: [app_enforcement_select_column!]

        # limit the number of rows returned
        limit: Int

        # skip the first n rows. Use only with order_by
        offset: Int

        # sort the rows by one or more columns
        order_by: [app_enforcement_order_by!]

        # filter the rows returned
        where: app_enforcement_bool_exp
    ): [app_enforcement!]!

    # fetch aggregated fields from the table: "app_enforcement"
    app_enforcement_aggregate(
        # distinct select on columns
        distinct_on: [app_enforcement_select_column!]

        # limit the number of rows returned
        limit: Int

        # skip the first n rows. Use only with order_by
        offset: Int

        # sort the rows by one or more columns
        order_by: [app_enforcement_order_by!]

        # filter the rows returned
        where: app_enforcement_bool_exp
    ): app_enforcement_aggregate!

    # fetch data from the table: "app_enforcement" using primary key columns
    app_enforcement_by_pk(
        # 主键
        id: bigint!

        # 联合主键
        illegal_photo_id: String!
    ): app_enforcement
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}

# subscription root
type subscription_root {
    # fetch data from the table: "app_enforcement"
    app_enforcement(
        # distinct select on columns
        distinct_on: [app_enforcement_select_column!]

        # limit the number of rows returned
        limit: Int

        # skip the first n rows. Use only with order_by
        offset: Int

        # sort the rows by one or more columns
        order_by: [app_enforcement_order_by!]

        # filter the rows returned
        where: app_enforcement_bool_exp
    ): [app_enforcement!]!

    # fetch aggregated fields from the table: "app_enforcement"
    app_enforcement_aggregate(
        # distinct select on columns
        distinct_on: [app_enforcement_select_column!]

        # limit the number of rows returned
        limit: Int

        # skip the first n rows. Use only with order_by
        offset: Int

        # sort the rows by one or more columns
        order_by: [app_enforcement_order_by!]

        # filter the rows returned
        where: app_enforcement_bool_exp
    ): app_enforcement_aggregate!

    # fetch data from the table: "app_enforcement" using primary key columns
    app_enforcement_by_pk(
        # 主键
        id: bigint!

        # 联合主键
        illegal_photo_id: String!
    ): app_enforcement
}

scalar timestamptz

# expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

