extend type Mutation {
    """
    delete data from the table: "user_operation_log"
  """
    delete_user_operation_log(
        """filter the rows which have to be deleted"""
        where: user_operation_log_bool_exp!
    ): user_operation_log_mutation_response

    """
    delete single row from the table: "user_operation_log"
  """
    delete_user_operation_log_by_pk(
        """主键"""
        id: bigint!
    ): user_operation_log

    """
    insert data into the table: "user_operation_log"
  """
    insert_user_operation_log(
        """the rows to be inserted"""
        objects: [user_operation_log_insert_input!]!

        """on conflict condition"""
        on_conflict: user_operation_log_on_conflict
    ): user_operation_log_mutation_response

    """
    insert a single row into the table: "user_operation_log"
  """
    insert_user_operation_log_one(
        """the row to be inserted"""
        object: user_operation_log_insert_input!

        """on conflict condition"""
        on_conflict: user_operation_log_on_conflict
    ): user_operation_log

    """
    update data of the table: "user_operation_log"
  """
    update_user_operation_log(
        """increments the integer columns with given value of the filtered values"""
        _inc: user_operation_log_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: user_operation_log_set_input

        """filter the rows which have to be updated"""
        where: user_operation_log_bool_exp!
    ): user_operation_log_mutation_response

    """
    update single row of the table: "user_operation_log"
  """
    update_user_operation_log_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: user_operation_log_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: user_operation_log_set_input
        pk_columns: user_operation_log_pk_columns_input!
    ): user_operation_log
}



extend type Query {
    """
    fetch data from the table: "user_operation_log"
  """
    user_operation_log(
        """distinct select on columns"""
        distinct_on: [user_operation_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [user_operation_log_order_by!]

        """filter the rows returned"""
        where: user_operation_log_bool_exp
    ): [user_operation_log!]!

    """
    fetch aggregated fields from the table: "user_operation_log"
  """
    user_operation_log_aggregate(
        """distinct select on columns"""
        distinct_on: [user_operation_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [user_operation_log_order_by!]

        """filter the rows returned"""
        where: user_operation_log_bool_exp
    ): user_operation_log_aggregate!

    """
    fetch data from the table: "user_operation_log" using primary key columns
    """
    user_operation_log_by_pk(
        """主键"""
        id: bigint!
    ): user_operation_log
}



extend type Subscription {
    """
    fetch data from the table: "user_operation_log"
  """
    user_operation_log(
        """distinct select on columns"""
        distinct_on: [user_operation_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [user_operation_log_order_by!]

        """filter the rows returned"""
        where: user_operation_log_bool_exp
    ): [user_operation_log!]!

    """
    fetch aggregated fields from the table: "user_operation_log"
  """
    user_operation_log_aggregate(
        """distinct select on columns"""
        distinct_on: [user_operation_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [user_operation_log_order_by!]

        """filter the rows returned"""
        where: user_operation_log_bool_exp
    ): user_operation_log_aggregate!

    """
    fetch data from the table: "user_operation_log" using primary key columns
    """
    user_operation_log_by_pk(
        """主键"""
        id: bigint!
    ): user_operation_log
}


"""
交警大队窗口查询违章记录表


columns and relationships of "user_operation_log"

"""
type user_operation_log {
    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """主键"""
    id: bigint!

    """违法时间"""
    illegal_time: timestamptz

    """车牌号"""
    license_plate_number: String

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String

    """用户IP"""
    user_ip: String
}

"""
aggregated selection of "user_operation_log"
"""
type user_operation_log_aggregate {
    aggregate: user_operation_log_aggregate_fields
    nodes: [user_operation_log!]!
}

"""
aggregate fields of "user_operation_log"
"""
type user_operation_log_aggregate_fields {
    avg: user_operation_log_avg_fields
    count(columns: [user_operation_log_select_column!], distinct: Boolean): Int
    max: user_operation_log_max_fields
    min: user_operation_log_min_fields
    stddev: user_operation_log_stddev_fields
    stddev_pop: user_operation_log_stddev_pop_fields
    stddev_samp: user_operation_log_stddev_samp_fields
    sum: user_operation_log_sum_fields
    var_pop: user_operation_log_var_pop_fields
    var_samp: user_operation_log_var_samp_fields
    variance: user_operation_log_variance_fields
}

"""
order by aggregate values of table "user_operation_log"
"""
input user_operation_log_aggregate_order_by {
    avg: user_operation_log_avg_order_by
    count: order_by
    max: user_operation_log_max_order_by
    min: user_operation_log_min_order_by
    stddev: user_operation_log_stddev_order_by
    stddev_pop: user_operation_log_stddev_pop_order_by
    stddev_samp: user_operation_log_stddev_samp_order_by
    sum: user_operation_log_sum_order_by
    var_pop: user_operation_log_var_pop_order_by
    var_samp: user_operation_log_var_samp_order_by
    variance: user_operation_log_variance_order_by
}

"""
input type for inserting array relation for remote table "user_operation_log"
"""
input user_operation_log_arr_rel_insert_input {
    data: [user_operation_log_insert_input!]!
    on_conflict: user_operation_log_on_conflict
}

"""aggregate avg on columns"""
type user_operation_log_avg_fields {
    id: Float
}

"""
order by avg() on columns of table "user_operation_log"
"""
input user_operation_log_avg_order_by {
    id: order_by
}

"""
Boolean expression to filter rows from the table "user_operation_log". All fields are combined with a logical 'AND'.
"""
input user_operation_log_bool_exp {
    _and: [user_operation_log_bool_exp]
    _not: user_operation_log_bool_exp
    _or: [user_operation_log_bool_exp]
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    id: bigint_comparison_exp
    illegal_time: timestamptz_comparison_exp
    license_plate_number: String_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    user_ip: String_comparison_exp
}

"""
unique or primary key constraints on table "user_operation_log"
"""
enum user_operation_log_constraint {
    """unique or primary key constraint"""
    user_operation_log_pkey
}

"""
input type for incrementing integer column in table "user_operation_log"
"""
input user_operation_log_inc_input {
    id: bigint
}

"""
input type for inserting data into table "user_operation_log"
"""
input user_operation_log_insert_input {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    id: bigint
    illegal_time: timestamptz
    license_plate_number: String
    updated_at: timestamptz
    updated_by: String
    user_ip: String
}

"""aggregate max on columns"""
type user_operation_log_max_fields {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    id: bigint
    illegal_time: timestamptz
    license_plate_number: String
    updated_at: timestamptz
    updated_by: String
    user_ip: String
}

"""
order by max() on columns of table "user_operation_log"
"""
input user_operation_log_max_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    id: order_by
    illegal_time: order_by
    license_plate_number: order_by
    updated_at: order_by
    updated_by: order_by
    user_ip: order_by
}

"""aggregate min on columns"""
type user_operation_log_min_fields {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    id: bigint
    illegal_time: timestamptz
    license_plate_number: String
    updated_at: timestamptz
    updated_by: String
    user_ip: String
}

"""
order by min() on columns of table "user_operation_log"
"""
input user_operation_log_min_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    id: order_by
    illegal_time: order_by
    license_plate_number: order_by
    updated_at: order_by
    updated_by: order_by
    user_ip: order_by
}

"""
response of any mutation on the table "user_operation_log"
"""
type user_operation_log_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [user_operation_log!]!
}

"""
input type for inserting object relation for remote table "user_operation_log"
"""
input user_operation_log_obj_rel_insert_input {
    data: user_operation_log_insert_input!
    on_conflict: user_operation_log_on_conflict
}

"""
on conflict condition type for table "user_operation_log"
"""
input user_operation_log_on_conflict {
    constraint: user_operation_log_constraint!
    update_columns: [user_operation_log_update_column!]!
    where: user_operation_log_bool_exp
}

"""
ordering options when selecting data from "user_operation_log"
"""
input user_operation_log_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    id: order_by
    illegal_time: order_by
    license_plate_number: order_by
    updated_at: order_by
    updated_by: order_by
    user_ip: order_by
}

"""
primary key columns input for table: "user_operation_log"
"""
input user_operation_log_pk_columns_input {
    """主键"""
    id: bigint!
}

"""
select columns of table "user_operation_log"
"""
enum user_operation_log_select_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    id

    """column name"""
    illegal_time

    """column name"""
    license_plate_number

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    user_ip
}

"""
input type for updating data in table "user_operation_log"
"""
input user_operation_log_set_input {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    id: bigint
    illegal_time: timestamptz
    license_plate_number: String
    updated_at: timestamptz
    updated_by: String
    user_ip: String
}

"""aggregate stddev on columns"""
type user_operation_log_stddev_fields {
    id: Float
}

"""
order by stddev() on columns of table "user_operation_log"
"""
input user_operation_log_stddev_order_by {
    id: order_by
}

"""aggregate stddev_pop on columns"""
type user_operation_log_stddev_pop_fields {
    id: Float
}

"""
order by stddev_pop() on columns of table "user_operation_log"
"""
input user_operation_log_stddev_pop_order_by {
    id: order_by
}

"""aggregate stddev_samp on columns"""
type user_operation_log_stddev_samp_fields {
    id: Float
}

"""
order by stddev_samp() on columns of table "user_operation_log"
"""
input user_operation_log_stddev_samp_order_by {
    id: order_by
}

"""aggregate sum on columns"""
type user_operation_log_sum_fields {
    id: bigint
}

"""
order by sum() on columns of table "user_operation_log"
"""
input user_operation_log_sum_order_by {
    id: order_by
}

"""
update columns of table "user_operation_log"
"""
enum user_operation_log_update_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    id

    """column name"""
    illegal_time

    """column name"""
    license_plate_number

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    user_ip
}

"""aggregate var_pop on columns"""
type user_operation_log_var_pop_fields {
    id: Float
}

"""
order by var_pop() on columns of table "user_operation_log"
"""
input user_operation_log_var_pop_order_by {
    id: order_by
}

"""aggregate var_samp on columns"""
type user_operation_log_var_samp_fields {
    id: Float
}

"""
order by var_samp() on columns of table "user_operation_log"
"""
input user_operation_log_var_samp_order_by {
    id: order_by
}

"""aggregate variance on columns"""
type user_operation_log_variance_fields {
    id: Float
}

"""
order by variance() on columns of table "user_operation_log"
"""
input user_operation_log_variance_order_by {
    id: order_by
}

