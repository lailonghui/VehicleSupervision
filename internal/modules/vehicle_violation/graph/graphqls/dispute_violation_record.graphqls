schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

scalar _text

# expression to compare columns of type _text. All fields are combined with logical 'AND'.
input _text_comparison_exp {
    _eq: _text
    _gt: _text
    _gte: _text
    _in: [_text!]
    _is_null: Boolean
    _lt: _text
    _lte: _text
    _neq: _text
    _nin: [_text!]
}

scalar bigint

# expression to compare columns of type bigint. All fields are combined with logical 'AND'.
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}

# expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

# 违章争议记录表
#
#
# columns and relationships of "dispute_violation_record"
#
type dispute_violation_record {
    # 委托代理人身份证
    agent_id_number: String

    # 审批状态(车辆违法审批状态字典)
    approve_state: Int

    # 机动车所有人营业执照
    business_license: String

    # 联系地址
    contact_address: String

    # 创建时间
    create_at: timestamptz!

    # 创建人
    created_by: String!

    # 删除时间
    deleted_at: timestamptz

    # 删除人
    deleted_by: String

    # 联合主键
    dispute_violation_id: String!

    # 行为人驾驶证
    driver_license: String

    # 机动车行驶证
    driving_license: String

    # 行车日志
    driving_log: String

    # 主键
    id: bigint!

    # 行为人身份证
    id_card: String

    # 是否删除
    is_delete: Boolean

    # 劳动合同或租赁合同
    labor_contract: String

    # 法定代表人身份证
    legal_person_id_number: String

    # 机动车所有人组织机构代码证
    organization_code: String

    # 其他证据材料
    other_evidence: _text

    # 图像证据材料
    pic_evidence: String

    # 当事人陈述
    statement: String

    # 内网更新时间
    update_time_in: timestamptz

    # 修改时间
    updated_at: timestamptz

    # 修改人
    updated_by: String

    # 机动车管理人身份证
    vehicle_manager_id_card: String

    # 违章明细表id(vehicle_violation _details 表的violation_detail_id)
    violation_detail_id: String

    # 证人证言
    witness: String

    # 书面申请材料
    written_application_materials: String
}

# aggregated selection of "dispute_violation_record"
type dispute_violation_record_aggregate {
    aggregate: dispute_violation_record_aggregate_fields
    nodes: [dispute_violation_record!]!
}

# aggregate fields of "dispute_violation_record"
type dispute_violation_record_aggregate_fields {
    avg: dispute_violation_record_avg_fields
    count(columns: [dispute_violation_record_select_column!], distinct: Boolean): Int
    max: dispute_violation_record_max_fields
    min: dispute_violation_record_min_fields
    stddev: dispute_violation_record_stddev_fields
    stddev_pop: dispute_violation_record_stddev_pop_fields
    stddev_samp: dispute_violation_record_stddev_samp_fields
    sum: dispute_violation_record_sum_fields
    var_pop: dispute_violation_record_var_pop_fields
    var_samp: dispute_violation_record_var_samp_fields
    variance: dispute_violation_record_variance_fields
}

# order by aggregate values of table "dispute_violation_record"
input dispute_violation_record_aggregate_order_by {
    avg: dispute_violation_record_avg_order_by
    count: order_by
    max: dispute_violation_record_max_order_by
    min: dispute_violation_record_min_order_by
    stddev: dispute_violation_record_stddev_order_by
    stddev_pop: dispute_violation_record_stddev_pop_order_by
    stddev_samp: dispute_violation_record_stddev_samp_order_by
    sum: dispute_violation_record_sum_order_by
    var_pop: dispute_violation_record_var_pop_order_by
    var_samp: dispute_violation_record_var_samp_order_by
    variance: dispute_violation_record_variance_order_by
}

# input type for inserting array relation for remote table "dispute_violation_record"
input dispute_violation_record_arr_rel_insert_input {
    data: [dispute_violation_record_insert_input!]!
    on_conflict: dispute_violation_record_on_conflict
}

# aggregate avg on columns
type dispute_violation_record_avg_fields {
    approve_state: Float
    id: Float
}

# order by avg() on columns of table "dispute_violation_record"
input dispute_violation_record_avg_order_by {
    approve_state: order_by
    id: order_by
}

# Boolean expression to filter rows from the table "dispute_violation_record". All fields are combined with a logical 'AND'.
input dispute_violation_record_bool_exp {
    _and: [dispute_violation_record_bool_exp]
    _not: dispute_violation_record_bool_exp
    _or: [dispute_violation_record_bool_exp]
    agent_id_number: String_comparison_exp
    approve_state: Int_comparison_exp
    business_license: String_comparison_exp
    contact_address: String_comparison_exp
    create_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    dispute_violation_id: String_comparison_exp
    driver_license: String_comparison_exp
    driving_license: String_comparison_exp
    driving_log: String_comparison_exp
    id: bigint_comparison_exp
    id_card: String_comparison_exp
    is_delete: Boolean_comparison_exp
    labor_contract: String_comparison_exp
    legal_person_id_number: String_comparison_exp
    organization_code: String_comparison_exp
    other_evidence: _text_comparison_exp
    pic_evidence: String_comparison_exp
    statement: String_comparison_exp
    update_time_in: timestamptz_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    vehicle_manager_id_card: String_comparison_exp
    violation_detail_id: String_comparison_exp
    witness: String_comparison_exp
    written_application_materials: String_comparison_exp
}

# unique or primary key constraints on table "dispute_violation_record"
enum dispute_violation_record_constraint {
    # unique or primary key constraint
    dispute_violation_record_pkey
}

# input type for incrementing integer column in table "dispute_violation_record"
input dispute_violation_record_inc_input {
    approve_state: Int
    id: bigint
}

# input type for inserting data into table "dispute_violation_record"
input dispute_violation_record_insert_input {
    agent_id_number: String
    approve_state: Int
    business_license: String
    contact_address: String
    create_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    dispute_violation_id: String
    driver_license: String
    driving_license: String
    driving_log: String
    id: bigint
    id_card: String
    is_delete: Boolean
    labor_contract: String
    legal_person_id_number: String
    organization_code: String
    other_evidence: _text
    pic_evidence: String
    statement: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_manager_id_card: String
    violation_detail_id: String
    witness: String
    written_application_materials: String
}

# aggregate max on columns
type dispute_violation_record_max_fields {
    agent_id_number: String
    approve_state: Int
    business_license: String
    contact_address: String
    create_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    dispute_violation_id: String
    driver_license: String
    driving_license: String
    driving_log: String
    id: bigint
    id_card: String
    labor_contract: String
    legal_person_id_number: String
    organization_code: String
    pic_evidence: String
    statement: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_manager_id_card: String
    violation_detail_id: String
    witness: String
    written_application_materials: String
}

# order by max() on columns of table "dispute_violation_record"
input dispute_violation_record_max_order_by {
    agent_id_number: order_by
    approve_state: order_by
    business_license: order_by
    contact_address: order_by
    create_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    dispute_violation_id: order_by
    driver_license: order_by
    driving_license: order_by
    driving_log: order_by
    id: order_by
    id_card: order_by
    labor_contract: order_by
    legal_person_id_number: order_by
    organization_code: order_by
    pic_evidence: order_by
    statement: order_by
    update_time_in: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_manager_id_card: order_by
    violation_detail_id: order_by
    witness: order_by
    written_application_materials: order_by
}

# aggregate min on columns
type dispute_violation_record_min_fields {
    agent_id_number: String
    approve_state: Int
    business_license: String
    contact_address: String
    create_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    dispute_violation_id: String
    driver_license: String
    driving_license: String
    driving_log: String
    id: bigint
    id_card: String
    labor_contract: String
    legal_person_id_number: String
    organization_code: String
    pic_evidence: String
    statement: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_manager_id_card: String
    violation_detail_id: String
    witness: String
    written_application_materials: String
}

# order by min() on columns of table "dispute_violation_record"
input dispute_violation_record_min_order_by {
    agent_id_number: order_by
    approve_state: order_by
    business_license: order_by
    contact_address: order_by
    create_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    dispute_violation_id: order_by
    driver_license: order_by
    driving_license: order_by
    driving_log: order_by
    id: order_by
    id_card: order_by
    labor_contract: order_by
    legal_person_id_number: order_by
    organization_code: order_by
    pic_evidence: order_by
    statement: order_by
    update_time_in: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_manager_id_card: order_by
    violation_detail_id: order_by
    witness: order_by
    written_application_materials: order_by
}

# response of any mutation on the table "dispute_violation_record"
type dispute_violation_record_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!

    # data of the affected rows by the mutation
    returning: [dispute_violation_record!]!
}

# input type for inserting object relation for remote table "dispute_violation_record"
input dispute_violation_record_obj_rel_insert_input {
    data: dispute_violation_record_insert_input!
    on_conflict: dispute_violation_record_on_conflict
}

# on conflict condition type for table "dispute_violation_record"
input dispute_violation_record_on_conflict {
    constraint: dispute_violation_record_constraint!
    update_columns: [dispute_violation_record_update_column!]!
    where: dispute_violation_record_bool_exp
}

# ordering options when selecting data from "dispute_violation_record"
input dispute_violation_record_order_by {
    agent_id_number: order_by
    approve_state: order_by
    business_license: order_by
    contact_address: order_by
    create_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    dispute_violation_id: order_by
    driver_license: order_by
    driving_license: order_by
    driving_log: order_by
    id: order_by
    id_card: order_by
    is_delete: order_by
    labor_contract: order_by
    legal_person_id_number: order_by
    organization_code: order_by
    other_evidence: order_by
    pic_evidence: order_by
    statement: order_by
    update_time_in: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_manager_id_card: order_by
    violation_detail_id: order_by
    witness: order_by
    written_application_materials: order_by
}

# primary key columns input for table: "dispute_violation_record"
input dispute_violation_record_pk_columns_input {
    # 联合主键
    dispute_violation_id: String!

    # 主键
    id: bigint!
}

# select columns of table "dispute_violation_record"
enum dispute_violation_record_select_column {
    # column name
    agent_id_number

    # column name
    approve_state

    # column name
    business_license

    # column name
    contact_address

    # column name
    create_at

    # column name
    created_by

    # column name
    deleted_at

    # column name
    deleted_by

    # column name
    dispute_violation_id

    # column name
    driver_license

    # column name
    driving_license

    # column name
    driving_log

    # column name
    id

    # column name
    id_card

    # column name
    is_delete

    # column name
    labor_contract

    # column name
    legal_person_id_number

    # column name
    organization_code

    # column name
    other_evidence

    # column name
    pic_evidence

    # column name
    statement

    # column name
    update_time_in

    # column name
    updated_at

    # column name
    updated_by

    # column name
    vehicle_manager_id_card

    # column name
    violation_detail_id

    # column name
    witness

    # column name
    written_application_materials
}

# input type for updating data in table "dispute_violation_record"
input dispute_violation_record_set_input {
    agent_id_number: String
    approve_state: Int
    business_license: String
    contact_address: String
    create_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    dispute_violation_id: String
    driver_license: String
    driving_license: String
    driving_log: String
    id: bigint
    id_card: String
    is_delete: Boolean
    labor_contract: String
    legal_person_id_number: String
    organization_code: String
    other_evidence: _text
    pic_evidence: String
    statement: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_manager_id_card: String
    violation_detail_id: String
    witness: String
    written_application_materials: String
}

# aggregate stddev on columns
type dispute_violation_record_stddev_fields {
    approve_state: Float
    id: Float
}

# order by stddev() on columns of table "dispute_violation_record"
input dispute_violation_record_stddev_order_by {
    approve_state: order_by
    id: order_by
}

# aggregate stddev_pop on columns
type dispute_violation_record_stddev_pop_fields {
    approve_state: Float
    id: Float
}

# order by stddev_pop() on columns of table "dispute_violation_record"
input dispute_violation_record_stddev_pop_order_by {
    approve_state: order_by
    id: order_by
}

# aggregate stddev_samp on columns
type dispute_violation_record_stddev_samp_fields {
    approve_state: Float
    id: Float
}

# order by stddev_samp() on columns of table "dispute_violation_record"
input dispute_violation_record_stddev_samp_order_by {
    approve_state: order_by
    id: order_by
}

# aggregate sum on columns
type dispute_violation_record_sum_fields {
    approve_state: Int
    id: bigint
}

# order by sum() on columns of table "dispute_violation_record"
input dispute_violation_record_sum_order_by {
    approve_state: order_by
    id: order_by
}

# update columns of table "dispute_violation_record"
enum dispute_violation_record_update_column {
    # column name
    agent_id_number

    # column name
    approve_state

    # column name
    business_license

    # column name
    contact_address

    # column name
    create_at

    # column name
    created_by

    # column name
    deleted_at

    # column name
    deleted_by

    # column name
    dispute_violation_id

    # column name
    driver_license

    # column name
    driving_license

    # column name
    driving_log

    # column name
    id

    # column name
    id_card

    # column name
    is_delete

    # column name
    labor_contract

    # column name
    legal_person_id_number

    # column name
    organization_code

    # column name
    other_evidence

    # column name
    pic_evidence

    # column name
    statement

    # column name
    update_time_in

    # column name
    updated_at

    # column name
    updated_by

    # column name
    vehicle_manager_id_card

    # column name
    violation_detail_id

    # column name
    witness

    # column name
    written_application_materials
}

# aggregate var_pop on columns
type dispute_violation_record_var_pop_fields {
    approve_state: Float
    id: Float
}

# order by var_pop() on columns of table "dispute_violation_record"
input dispute_violation_record_var_pop_order_by {
    approve_state: order_by
    id: order_by
}

# aggregate var_samp on columns
type dispute_violation_record_var_samp_fields {
    approve_state: Float
    id: Float
}

# order by var_samp() on columns of table "dispute_violation_record"
input dispute_violation_record_var_samp_order_by {
    approve_state: order_by
    id: order_by
}

# aggregate variance on columns
type dispute_violation_record_variance_fields {
    approve_state: Float
    id: Float
}

# order by variance() on columns of table "dispute_violation_record"
input dispute_violation_record_variance_order_by {
    approve_state: order_by
    id: order_by
}

# expression to compare columns of type Int. All fields are combined with logical 'AND'.
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

# mutation root
type mutation_root {
    # delete data from the table: "dispute_violation_record"
    delete_dispute_violation_record(
        # filter the rows which have to be deleted
        where: dispute_violation_record_bool_exp!
    ): dispute_violation_record_mutation_response

    # delete single row from the table: "dispute_violation_record"
    delete_dispute_violation_record_by_pk(
        # 联合主键
        dispute_violation_id: String!

        # 主键
        id: bigint!
    ): dispute_violation_record

    # insert data into the table: "dispute_violation_record"
    insert_dispute_violation_record(
        # the rows to be inserted
        objects: [dispute_violation_record_insert_input!]!

        # on conflict condition
        on_conflict: dispute_violation_record_on_conflict
    ): dispute_violation_record_mutation_response

    # insert a single row into the table: "dispute_violation_record"
    insert_dispute_violation_record_one(
        # the row to be inserted
        object: dispute_violation_record_insert_input!

        # on conflict condition
        on_conflict: dispute_violation_record_on_conflict
    ): dispute_violation_record

    # update data of the table: "dispute_violation_record"
    update_dispute_violation_record(
        # increments the integer columns with given value of the filtered values
        _inc: dispute_violation_record_inc_input

        # sets the columns of the filtered rows to the given values
        _set: dispute_violation_record_set_input

        # filter the rows which have to be updated
        where: dispute_violation_record_bool_exp!
    ): dispute_violation_record_mutation_response

    # update single row of the table: "dispute_violation_record"
    update_dispute_violation_record_by_pk(
        # increments the integer columns with given value of the filtered values
        _inc: dispute_violation_record_inc_input

        # sets the columns of the filtered rows to the given values
        _set: dispute_violation_record_set_input
        pk_columns: dispute_violation_record_pk_columns_input!
    ): dispute_violation_record
}

# column ordering options
enum order_by {
    # in the ascending order, nulls last
    asc

    # in the ascending order, nulls first
    asc_nulls_first

    # in the ascending order, nulls last
    asc_nulls_last

    # in the descending order, nulls first
    desc

    # in the descending order, nulls first
    desc_nulls_first

    # in the descending order, nulls last
    desc_nulls_last
}

# query root
type query_root {
    # fetch data from the table: "dispute_violation_record"
    dispute_violation_record(
        # distinct select on columns
        distinct_on: [dispute_violation_record_select_column!]

        # limit the number of rows returned
        limit: Int

        # skip the first n rows. Use only with order_by
        offset: Int

        # sort the rows by one or more columns
        order_by: [dispute_violation_record_order_by!]

        # filter the rows returned
        where: dispute_violation_record_bool_exp
    ): [dispute_violation_record!]!

    # fetch aggregated fields from the table: "dispute_violation_record"
    dispute_violation_record_aggregate(
        # distinct select on columns
        distinct_on: [dispute_violation_record_select_column!]

        # limit the number of rows returned
        limit: Int

        # skip the first n rows. Use only with order_by
        offset: Int

        # sort the rows by one or more columns
        order_by: [dispute_violation_record_order_by!]

        # filter the rows returned
        where: dispute_violation_record_bool_exp
    ): dispute_violation_record_aggregate!

    # fetch data from the table: "dispute_violation_record" using primary key columns
    dispute_violation_record_by_pk(
        # 联合主键
        dispute_violation_id: String!

        # 主键
        id: bigint!
    ): dispute_violation_record
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}

# subscription root
type subscription_root {
    # fetch data from the table: "dispute_violation_record"
    dispute_violation_record(
        # distinct select on columns
        distinct_on: [dispute_violation_record_select_column!]

        # limit the number of rows returned
        limit: Int

        # skip the first n rows. Use only with order_by
        offset: Int

        # sort the rows by one or more columns
        order_by: [dispute_violation_record_order_by!]

        # filter the rows returned
        where: dispute_violation_record_bool_exp
    ): [dispute_violation_record!]!

    # fetch aggregated fields from the table: "dispute_violation_record"
    dispute_violation_record_aggregate(
        # distinct select on columns
        distinct_on: [dispute_violation_record_select_column!]

        # limit the number of rows returned
        limit: Int

        # skip the first n rows. Use only with order_by
        offset: Int

        # sort the rows by one or more columns
        order_by: [dispute_violation_record_order_by!]

        # filter the rows returned
        where: dispute_violation_record_bool_exp
    ): dispute_violation_record_aggregate!

    # fetch data from the table: "dispute_violation_record" using primary key columns
    dispute_violation_record_by_pk(
        # 联合主键
        dispute_violation_id: String!

        # 主键
        id: bigint!
    ): dispute_violation_record
}

scalar timestamptz

# expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

