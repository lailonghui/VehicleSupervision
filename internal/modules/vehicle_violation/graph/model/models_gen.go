// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	model1 "VehicleSupervision/internal/modules/vehicle_violation/model"
	"VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// aggregated selection of "app_enforcement"
type AppEnforcementAggregate struct {
	Aggregate *AppEnforcementAggregateFields `json:"aggregate"`
}

// aggregate fields of "app_enforcement"
type AppEnforcementAggregateFields struct {
	Avg        *AppEnforcementAvgFields        `json:"avg"`
	Count      *int                            `json:"count"`
	Max        *AppEnforcementMaxFields        `json:"max"`
	Min        *AppEnforcementMinFields        `json:"min"`
	Stddev     *AppEnforcementStddevFields     `json:"stddev"`
	StddevPop  *AppEnforcementStddevPopFields  `json:"stddev_pop"`
	StddevSamp *AppEnforcementStddevSampFields `json:"stddev_samp"`
	Sum        *AppEnforcementSumFields        `json:"sum"`
	VarPop     *AppEnforcementVarPopFields     `json:"var_pop"`
	VarSamp    *AppEnforcementVarSampFields    `json:"var_samp"`
	Variance   *AppEnforcementVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "app_enforcement"
type AppEnforcementAvgFields struct {
	ID           *int64 `json:"id"`
	PicketStatus *int   `json:"picket_status"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'app_enforcement'.
type AppEnforcementBoolExp struct {
	And                 []*AppEnforcementBoolExp        `json:"_and"`
	Not                 *AppEnforcementBoolExp          `json:"_not"`
	Or                  []*AppEnforcementBoolExp        `json:"_or"`
	ID                  *model.BigintComparisonExp      `json:"id"`
	IllegalPhotoID      *model.StringComparisonExp      `json:"illegal_photo_id"`
	VehicleID           *model.StringComparisonExp      `json:"vehicle_id"`
	OperationUser       *model.StringComparisonExp      `json:"operation_user"`
	EditText            *model.StringComparisonExp      `json:"edit_text"`
	Coordinate          *model.PointComparisonExp       `json:"coordinate"`
	LocationDescription *model.StringComparisonExp      `json:"location_description"`
	EnterpriseType      *model.StringComparisonExp      `json:"enterprise_type"`
	PicketStatus        *model.IntComparisonExp         `json:"picket_status"`
	CreatedAt           *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy           *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt           *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy           *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt           *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy           *model.StringComparisonExp      `json:"deleted_by"`
}

// input type for incrementing integer column in table "app_enforcement"
type AppEnforcementIncInput struct {
	ID           *int64 `json:"id"`
	PicketStatus *int   `json:"picket_status"`
}

// input type for inserting data into table "app_enforcement"
type AppEnforcementInsertInput struct {
	VehicleID           *string    `json:"vehicle_id"`
	OperationUser       *string    `json:"operation_user"`
	EditText            *string    `json:"edit_text"`
	Coordinate          *string    `json:"coordinate"`
	LocationDescription *string    `json:"location_description"`
	EnterpriseType      *string    `json:"enterprise_type"`
	PicketStatus        *int       `json:"picket_status"`
	UpdatedAt           *time.Time `json:"updated_at"`
	UpdatedBy           *string    `json:"updated_by"`
	DeletedAt           *time.Time `json:"deleted_at"`
	DeletedBy           *string    `json:"deleted_by"`
}

// aggregate max on columns of table "app_enforcement"
type AppEnforcementMaxFields struct {
	ID                  *int64     `json:"id"`
	IllegalPhotoID      *string    `json:"illegal_photo_id"`
	VehicleID           *string    `json:"vehicle_id"`
	OperationUser       *string    `json:"operation_user"`
	EditText            *string    `json:"edit_text"`
	Coordinate          *string    `json:"coordinate"`
	LocationDescription *string    `json:"location_description"`
	EnterpriseType      *string    `json:"enterprise_type"`
	PicketStatus        *int       `json:"picket_status"`
	CreatedAt           *time.Time `json:"created_at"`
	CreatedBy           *string    `json:"created_by"`
	UpdatedAt           *time.Time `json:"updated_at"`
	UpdatedBy           *string    `json:"updated_by"`
	DeletedAt           *time.Time `json:"deleted_at"`
	DeletedBy           *string    `json:"deleted_by"`
}

// aggregate min on columns of table "app_enforcement"
type AppEnforcementMinFields struct {
	ID                  *int64     `json:"id"`
	IllegalPhotoID      *string    `json:"illegal_photo_id"`
	VehicleID           *string    `json:"vehicle_id"`
	OperationUser       *string    `json:"operation_user"`
	EditText            *string    `json:"edit_text"`
	Coordinate          *string    `json:"coordinate"`
	LocationDescription *string    `json:"location_description"`
	EnterpriseType      *string    `json:"enterprise_type"`
	PicketStatus        *int       `json:"picket_status"`
	CreatedAt           *time.Time `json:"created_at"`
	CreatedBy           *string    `json:"created_by"`
	UpdatedAt           *time.Time `json:"updated_at"`
	UpdatedBy           *string    `json:"updated_by"`
	DeletedAt           *time.Time `json:"deleted_at"`
	DeletedBy           *string    `json:"deleted_by"`
}

// response of any mutation on the table "app_enforcement"
type AppEnforcementMutationResponse struct {
	AffectedRows int                      `json:"affected_rows"`
	Returning    []*model1.AppEnforcement `json:"returning"`
}

// ordering options when selecting data from "app_enforcement"
type AppEnforcementOrderBy struct {
	ID                  *model.OrderBy `json:"id"`
	IllegalPhotoID      *model.OrderBy `json:"illegal_photo_id"`
	VehicleID           *model.OrderBy `json:"vehicle_id"`
	OperationUser       *model.OrderBy `json:"operation_user"`
	EditText            *model.OrderBy `json:"edit_text"`
	Coordinate          *model.OrderBy `json:"coordinate"`
	LocationDescription *model.OrderBy `json:"location_description"`
	EnterpriseType      *model.OrderBy `json:"enterprise_type"`
	PicketStatus        *model.OrderBy `json:"picket_status"`
	CreatedAt           *model.OrderBy `json:"created_at"`
	CreatedBy           *model.OrderBy `json:"created_by"`
	UpdatedAt           *model.OrderBy `json:"updated_at"`
	UpdatedBy           *model.OrderBy `json:"updated_by"`
	DeletedAt           *model.OrderBy `json:"deleted_at"`
	DeletedBy           *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "app_enforcement"
type AppEnforcementSetInput struct {
	ID                  *int64     `json:"id"`
	IllegalPhotoID      *string    `json:"illegal_photo_id"`
	VehicleID           *string    `json:"vehicle_id"`
	OperationUser       *string    `json:"operation_user"`
	EditText            *string    `json:"edit_text"`
	Coordinate          *string    `json:"coordinate"`
	LocationDescription *string    `json:"location_description"`
	EnterpriseType      *string    `json:"enterprise_type"`
	PicketStatus        *int       `json:"picket_status"`
	CreatedAt           *time.Time `json:"created_at"`
	CreatedBy           *string    `json:"created_by"`
	UpdatedAt           *time.Time `json:"updated_at"`
	UpdatedBy           *string    `json:"updated_by"`
	DeletedAt           *time.Time `json:"deleted_at"`
	DeletedBy           *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "app_enforcement"
type AppEnforcementStddevFields struct {
	ID           *int64 `json:"id"`
	PicketStatus *int   `json:"picket_status"`
}

// aggregate stddev_pop on columns of table "app_enforcement"
type AppEnforcementStddevPopFields struct {
	ID           *int64 `json:"id"`
	PicketStatus *int   `json:"picket_status"`
}

// aggregate stddev_samp on columns of table "app_enforcement"
type AppEnforcementStddevSampFields struct {
	ID           *int64 `json:"id"`
	PicketStatus *int   `json:"picket_status"`
}

// aggregate sum on columns of table "app_enforcement"
type AppEnforcementSumFields struct {
	ID           *int64 `json:"id"`
	PicketStatus *int   `json:"picket_status"`
}

// aggregate var_pop on columns of table "app_enforcement"
type AppEnforcementVarPopFields struct {
	ID           *int64 `json:"id"`
	PicketStatus *int   `json:"picket_status"`
}

// aggregate var_samp on columns of table "app_enforcement"
type AppEnforcementVarSampFields struct {
	ID           *int64 `json:"id"`
	PicketStatus *int   `json:"picket_status"`
}

// aggregate variance on columns of table "app_enforcement"
type AppEnforcementVarianceFields struct {
	ID           *int64 `json:"id"`
	PicketStatus *int   `json:"picket_status"`
}

// aggregated selection of "deduction_report"
type DeductionReportAggregate struct {
	Aggregate *DeductionReportAggregateFields `json:"aggregate"`
}

// aggregate fields of "deduction_report"
type DeductionReportAggregateFields struct {
	Avg        *DeductionReportAvgFields        `json:"avg"`
	Count      *int                             `json:"count"`
	Max        *DeductionReportMaxFields        `json:"max"`
	Min        *DeductionReportMinFields        `json:"min"`
	Stddev     *DeductionReportStddevFields     `json:"stddev"`
	StddevPop  *DeductionReportStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DeductionReportStddevSampFields `json:"stddev_samp"`
	Sum        *DeductionReportSumFields        `json:"sum"`
	VarPop     *DeductionReportVarPopFields     `json:"var_pop"`
	VarSamp    *DeductionReportVarSampFields    `json:"var_samp"`
	Variance   *DeductionReportVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "deduction_report"
type DeductionReportAvgFields struct {
	ID            *int64   `json:"id"`
	DemeritPoints *float64 `json:"demerit_points"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'deduction_report'.
type DeductionReportBoolExp struct {
	And               []*DeductionReportBoolExp       `json:"_and"`
	Not               *DeductionReportBoolExp         `json:"_not"`
	Or                []*DeductionReportBoolExp       `json:"_or"`
	ID                *model.BigintComparisonExp      `json:"id"`
	DeductionReportID *model.StringComparisonExp      `json:"deduction_report_id"`
	AreaID            *model.StringComparisonExp      `json:"area_id"`
	Date              *model.StringComparisonExp      `json:"date"`
	Cause             *model.StringComparisonExp      `json:"cause"`
	InputPerson       *model.StringComparisonExp      `json:"input_person"`
	InputTime         *model.TimestamptzComparisonExp `json:"input_time"`
	DemeritPoints     *model.NumericComparisonExp     `json:"demerit_points"`
	CreatedAt         *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy         *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt         *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy         *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt         *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy         *model.StringComparisonExp      `json:"deleted_by"`
}

// input type for incrementing integer column in table "deduction_report"
type DeductionReportIncInput struct {
	ID            *int64   `json:"id"`
	DemeritPoints *float64 `json:"demerit_points"`
}

// input type for inserting data into table "deduction_report"
type DeductionReportInsertInput struct {
	AreaID        *string    `json:"area_id"`
	Date          *string    `json:"date"`
	Cause         *string    `json:"cause"`
	InputPerson   *string    `json:"input_person"`
	InputTime     *time.Time `json:"input_time"`
	DemeritPoints *float64   `json:"demerit_points"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
}

// aggregate max on columns of table "deduction_report"
type DeductionReportMaxFields struct {
	ID                *int64     `json:"id"`
	DeductionReportID *string    `json:"deduction_report_id"`
	AreaID            *string    `json:"area_id"`
	Date              *string    `json:"date"`
	Cause             *string    `json:"cause"`
	InputPerson       *string    `json:"input_person"`
	InputTime         *time.Time `json:"input_time"`
	DemeritPoints     *float64   `json:"demerit_points"`
	CreatedAt         *time.Time `json:"created_at"`
	CreatedBy         *string    `json:"created_by"`
	UpdatedAt         *time.Time `json:"updated_at"`
	UpdatedBy         *string    `json:"updated_by"`
	DeletedAt         *time.Time `json:"deleted_at"`
	DeletedBy         *string    `json:"deleted_by"`
}

// aggregate min on columns of table "deduction_report"
type DeductionReportMinFields struct {
	ID                *int64     `json:"id"`
	DeductionReportID *string    `json:"deduction_report_id"`
	AreaID            *string    `json:"area_id"`
	Date              *string    `json:"date"`
	Cause             *string    `json:"cause"`
	InputPerson       *string    `json:"input_person"`
	InputTime         *time.Time `json:"input_time"`
	DemeritPoints     *float64   `json:"demerit_points"`
	CreatedAt         *time.Time `json:"created_at"`
	CreatedBy         *string    `json:"created_by"`
	UpdatedAt         *time.Time `json:"updated_at"`
	UpdatedBy         *string    `json:"updated_by"`
	DeletedAt         *time.Time `json:"deleted_at"`
	DeletedBy         *string    `json:"deleted_by"`
}

// response of any mutation on the table "deduction_report"
type DeductionReportMutationResponse struct {
	AffectedRows int                       `json:"affected_rows"`
	Returning    []*model1.DeductionReport `json:"returning"`
}

// ordering options when selecting data from "deduction_report"
type DeductionReportOrderBy struct {
	ID                *model.OrderBy `json:"id"`
	DeductionReportID *model.OrderBy `json:"deduction_report_id"`
	AreaID            *model.OrderBy `json:"area_id"`
	Date              *model.OrderBy `json:"date"`
	Cause             *model.OrderBy `json:"cause"`
	InputPerson       *model.OrderBy `json:"input_person"`
	InputTime         *model.OrderBy `json:"input_time"`
	DemeritPoints     *model.OrderBy `json:"demerit_points"`
	CreatedAt         *model.OrderBy `json:"created_at"`
	CreatedBy         *model.OrderBy `json:"created_by"`
	UpdatedAt         *model.OrderBy `json:"updated_at"`
	UpdatedBy         *model.OrderBy `json:"updated_by"`
	DeletedAt         *model.OrderBy `json:"deleted_at"`
	DeletedBy         *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "deduction_report"
type DeductionReportSetInput struct {
	ID                *int64     `json:"id"`
	DeductionReportID *string    `json:"deduction_report_id"`
	AreaID            *string    `json:"area_id"`
	Date              *string    `json:"date"`
	Cause             *string    `json:"cause"`
	InputPerson       *string    `json:"input_person"`
	InputTime         *time.Time `json:"input_time"`
	DemeritPoints     *float64   `json:"demerit_points"`
	CreatedAt         *time.Time `json:"created_at"`
	CreatedBy         *string    `json:"created_by"`
	UpdatedAt         *time.Time `json:"updated_at"`
	UpdatedBy         *string    `json:"updated_by"`
	DeletedAt         *time.Time `json:"deleted_at"`
	DeletedBy         *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "deduction_report"
type DeductionReportStddevFields struct {
	ID            *int64   `json:"id"`
	DemeritPoints *float64 `json:"demerit_points"`
}

// aggregate stddev_pop on columns of table "deduction_report"
type DeductionReportStddevPopFields struct {
	ID            *int64   `json:"id"`
	DemeritPoints *float64 `json:"demerit_points"`
}

// aggregate stddev_samp on columns of table "deduction_report"
type DeductionReportStddevSampFields struct {
	ID            *int64   `json:"id"`
	DemeritPoints *float64 `json:"demerit_points"`
}

// aggregate sum on columns of table "deduction_report"
type DeductionReportSumFields struct {
	ID            *int64   `json:"id"`
	DemeritPoints *float64 `json:"demerit_points"`
}

// aggregate var_pop on columns of table "deduction_report"
type DeductionReportVarPopFields struct {
	ID            *int64   `json:"id"`
	DemeritPoints *float64 `json:"demerit_points"`
}

// aggregate var_samp on columns of table "deduction_report"
type DeductionReportVarSampFields struct {
	ID            *int64   `json:"id"`
	DemeritPoints *float64 `json:"demerit_points"`
}

// aggregate variance on columns of table "deduction_report"
type DeductionReportVarianceFields struct {
	ID            *int64   `json:"id"`
	DemeritPoints *float64 `json:"demerit_points"`
}

// aggregated selection of "driver_peccancy_check"
type DriverPeccancyCheckAggregate struct {
	Aggregate *DriverPeccancyCheckAggregateFields `json:"aggregate"`
}

// aggregate fields of "driver_peccancy_check"
type DriverPeccancyCheckAggregateFields struct {
	Avg        *DriverPeccancyCheckAvgFields        `json:"avg"`
	Count      *int                                 `json:"count"`
	Max        *DriverPeccancyCheckMaxFields        `json:"max"`
	Min        *DriverPeccancyCheckMinFields        `json:"min"`
	Stddev     *DriverPeccancyCheckStddevFields     `json:"stddev"`
	StddevPop  *DriverPeccancyCheckStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DriverPeccancyCheckStddevSampFields `json:"stddev_samp"`
	Sum        *DriverPeccancyCheckSumFields        `json:"sum"`
	VarPop     *DriverPeccancyCheckVarPopFields     `json:"var_pop"`
	VarSamp    *DriverPeccancyCheckVarSampFields    `json:"var_samp"`
	Variance   *DriverPeccancyCheckVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "driver_peccancy_check"
type DriverPeccancyCheckAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driver_peccancy_check'.
type DriverPeccancyCheckBoolExp struct {
	And          []*DriverPeccancyCheckBoolExp   `json:"_and"`
	Not          *DriverPeccancyCheckBoolExp     `json:"_not"`
	Or           []*DriverPeccancyCheckBoolExp   `json:"_or"`
	ID           *model.BigintComparisonExp      `json:"id"`
	VehicleID    *model.StringComparisonExp      `json:"vehicle_id"`
	DriverID     *model.StringComparisonExp      `json:"driver_id"`
	EnterpriseID *model.StringComparisonExp      `json:"enterprise_id"`
	CreatedAt    *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy    *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt    *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy    *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt    *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy    *model.StringComparisonExp      `json:"deleted_by"`
}

// input type for incrementing integer column in table "driver_peccancy_check"
type DriverPeccancyCheckIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "driver_peccancy_check"
type DriverPeccancyCheckInsertInput struct {
	VehicleID    *string    `json:"vehicle_id"`
	DriverID     *string    `json:"driver_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	UpdatedAt    *time.Time `json:"updated_at"`
	UpdatedBy    *string    `json:"updated_by"`
	DeletedAt    *time.Time `json:"deleted_at"`
	DeletedBy    *string    `json:"deleted_by"`
}

// aggregate max on columns of table "driver_peccancy_check"
type DriverPeccancyCheckMaxFields struct {
	ID           *int64     `json:"id"`
	VehicleID    *string    `json:"vehicle_id"`
	DriverID     *string    `json:"driver_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	CreatedAt    *time.Time `json:"created_at"`
	CreatedBy    *string    `json:"created_by"`
	UpdatedAt    *time.Time `json:"updated_at"`
	UpdatedBy    *string    `json:"updated_by"`
	DeletedAt    *time.Time `json:"deleted_at"`
	DeletedBy    *string    `json:"deleted_by"`
}

// aggregate min on columns of table "driver_peccancy_check"
type DriverPeccancyCheckMinFields struct {
	ID           *int64     `json:"id"`
	VehicleID    *string    `json:"vehicle_id"`
	DriverID     *string    `json:"driver_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	CreatedAt    *time.Time `json:"created_at"`
	CreatedBy    *string    `json:"created_by"`
	UpdatedAt    *time.Time `json:"updated_at"`
	UpdatedBy    *string    `json:"updated_by"`
	DeletedAt    *time.Time `json:"deleted_at"`
	DeletedBy    *string    `json:"deleted_by"`
}

// response of any mutation on the table "driver_peccancy_check"
type DriverPeccancyCheckMutationResponse struct {
	AffectedRows int                           `json:"affected_rows"`
	Returning    []*model1.DriverPeccancyCheck `json:"returning"`
}

// ordering options when selecting data from "driver_peccancy_check"
type DriverPeccancyCheckOrderBy struct {
	ID           *model.OrderBy `json:"id"`
	VehicleID    *model.OrderBy `json:"vehicle_id"`
	DriverID     *model.OrderBy `json:"driver_id"`
	EnterpriseID *model.OrderBy `json:"enterprise_id"`
	CreatedAt    *model.OrderBy `json:"created_at"`
	CreatedBy    *model.OrderBy `json:"created_by"`
	UpdatedAt    *model.OrderBy `json:"updated_at"`
	UpdatedBy    *model.OrderBy `json:"updated_by"`
	DeletedAt    *model.OrderBy `json:"deleted_at"`
	DeletedBy    *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "driver_peccancy_check"
type DriverPeccancyCheckSetInput struct {
	ID           *int64     `json:"id"`
	VehicleID    *string    `json:"vehicle_id"`
	DriverID     *string    `json:"driver_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	CreatedAt    *time.Time `json:"created_at"`
	CreatedBy    *string    `json:"created_by"`
	UpdatedAt    *time.Time `json:"updated_at"`
	UpdatedBy    *string    `json:"updated_by"`
	DeletedAt    *time.Time `json:"deleted_at"`
	DeletedBy    *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "driver_peccancy_check"
type DriverPeccancyCheckStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "driver_peccancy_check"
type DriverPeccancyCheckStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "driver_peccancy_check"
type DriverPeccancyCheckStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "driver_peccancy_check"
type DriverPeccancyCheckSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "driver_peccancy_check"
type DriverPeccancyCheckVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "driver_peccancy_check"
type DriverPeccancyCheckVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "driver_peccancy_check"
type DriverPeccancyCheckVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregated selection of "illegal_photo"
type IllegalPhotoAggregate struct {
	Aggregate *IllegalPhotoAggregateFields `json:"aggregate"`
}

// aggregate fields of "illegal_photo"
type IllegalPhotoAggregateFields struct {
	Avg        *IllegalPhotoAvgFields        `json:"avg"`
	Count      *int                          `json:"count"`
	Max        *IllegalPhotoMaxFields        `json:"max"`
	Min        *IllegalPhotoMinFields        `json:"min"`
	Stddev     *IllegalPhotoStddevFields     `json:"stddev"`
	StddevPop  *IllegalPhotoStddevPopFields  `json:"stddev_pop"`
	StddevSamp *IllegalPhotoStddevSampFields `json:"stddev_samp"`
	Sum        *IllegalPhotoSumFields        `json:"sum"`
	VarPop     *IllegalPhotoVarPopFields     `json:"var_pop"`
	VarSamp    *IllegalPhotoVarSampFields    `json:"var_samp"`
	Variance   *IllegalPhotoVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "illegal_photo"
type IllegalPhotoAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'illegal_photo'.
type IllegalPhotoBoolExp struct {
	And            []*IllegalPhotoBoolExp          `json:"_and"`
	Not            *IllegalPhotoBoolExp            `json:"_not"`
	Or             []*IllegalPhotoBoolExp          `json:"_or"`
	ID             *model.BigintComparisonExp      `json:"id"`
	IllegalPhotoID *model.StringComparisonExp      `json:"illegal_photo_id"`
	PictureName    *model.StringComparisonExp      `json:"picture_name"`
	PictureAddress *model.StringComparisonExp      `json:"picture_address"`
	IsSynchronized *model.BooleanComparisonExp     `json:"is_synchronized"`
	IsDeleted      *model.BooleanComparisonExp     `json:"is_deleted"`
	CreatedAt      *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy      *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt      *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy      *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt      *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy      *model.StringComparisonExp      `json:"deleted_by"`
}

// input type for incrementing integer column in table "illegal_photo"
type IllegalPhotoIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "illegal_photo"
type IllegalPhotoInsertInput struct {
	PictureName    *string    `json:"picture_name"`
	PictureAddress *string    `json:"picture_address"`
	IsSynchronized *bool      `json:"is_synchronized"`
	IsDeleted      *bool      `json:"is_deleted"`
	UpdatedAt      *time.Time `json:"updated_at"`
	UpdatedBy      *string    `json:"updated_by"`
	DeletedAt      *time.Time `json:"deleted_at"`
	DeletedBy      *string    `json:"deleted_by"`
}

// aggregate max on columns of table "illegal_photo"
type IllegalPhotoMaxFields struct {
	ID             *int64     `json:"id"`
	IllegalPhotoID *string    `json:"illegal_photo_id"`
	PictureName    *string    `json:"picture_name"`
	PictureAddress *string    `json:"picture_address"`
	IsSynchronized *bool      `json:"is_synchronized"`
	IsDeleted      *bool      `json:"is_deleted"`
	CreatedAt      *time.Time `json:"created_at"`
	CreatedBy      *string    `json:"created_by"`
	UpdatedAt      *time.Time `json:"updated_at"`
	UpdatedBy      *string    `json:"updated_by"`
	DeletedAt      *time.Time `json:"deleted_at"`
	DeletedBy      *string    `json:"deleted_by"`
}

// aggregate min on columns of table "illegal_photo"
type IllegalPhotoMinFields struct {
	ID             *int64     `json:"id"`
	IllegalPhotoID *string    `json:"illegal_photo_id"`
	PictureName    *string    `json:"picture_name"`
	PictureAddress *string    `json:"picture_address"`
	IsSynchronized *bool      `json:"is_synchronized"`
	IsDeleted      *bool      `json:"is_deleted"`
	CreatedAt      *time.Time `json:"created_at"`
	CreatedBy      *string    `json:"created_by"`
	UpdatedAt      *time.Time `json:"updated_at"`
	UpdatedBy      *string    `json:"updated_by"`
	DeletedAt      *time.Time `json:"deleted_at"`
	DeletedBy      *string    `json:"deleted_by"`
}

// response of any mutation on the table "illegal_photo"
type IllegalPhotoMutationResponse struct {
	AffectedRows int                    `json:"affected_rows"`
	Returning    []*model1.IllegalPhoto `json:"returning"`
}

// ordering options when selecting data from "illegal_photo"
type IllegalPhotoOrderBy struct {
	ID             *model.OrderBy `json:"id"`
	IllegalPhotoID *model.OrderBy `json:"illegal_photo_id"`
	PictureName    *model.OrderBy `json:"picture_name"`
	PictureAddress *model.OrderBy `json:"picture_address"`
	IsSynchronized *model.OrderBy `json:"is_synchronized"`
	IsDeleted      *model.OrderBy `json:"is_deleted"`
	CreatedAt      *model.OrderBy `json:"created_at"`
	CreatedBy      *model.OrderBy `json:"created_by"`
	UpdatedAt      *model.OrderBy `json:"updated_at"`
	UpdatedBy      *model.OrderBy `json:"updated_by"`
	DeletedAt      *model.OrderBy `json:"deleted_at"`
	DeletedBy      *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "illegal_photo"
type IllegalPhotoSetInput struct {
	ID             *int64     `json:"id"`
	IllegalPhotoID *string    `json:"illegal_photo_id"`
	PictureName    *string    `json:"picture_name"`
	PictureAddress *string    `json:"picture_address"`
	IsSynchronized *bool      `json:"is_synchronized"`
	IsDeleted      *bool      `json:"is_deleted"`
	CreatedAt      *time.Time `json:"created_at"`
	CreatedBy      *string    `json:"created_by"`
	UpdatedAt      *time.Time `json:"updated_at"`
	UpdatedBy      *string    `json:"updated_by"`
	DeletedAt      *time.Time `json:"deleted_at"`
	DeletedBy      *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "illegal_photo"
type IllegalPhotoStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "illegal_photo"
type IllegalPhotoStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "illegal_photo"
type IllegalPhotoStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "illegal_photo"
type IllegalPhotoSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "illegal_photo"
type IllegalPhotoVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "illegal_photo"
type IllegalPhotoVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "illegal_photo"
type IllegalPhotoVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregated selection of "regional_violation_register"
type RegionalViolationRegisterAggregate struct {
	Aggregate *RegionalViolationRegisterAggregateFields `json:"aggregate"`
}

// aggregate fields of "regional_violation_register"
type RegionalViolationRegisterAggregateFields struct {
	Avg        *RegionalViolationRegisterAvgFields        `json:"avg"`
	Count      *int                                       `json:"count"`
	Max        *RegionalViolationRegisterMaxFields        `json:"max"`
	Min        *RegionalViolationRegisterMinFields        `json:"min"`
	Stddev     *RegionalViolationRegisterStddevFields     `json:"stddev"`
	StddevPop  *RegionalViolationRegisterStddevPopFields  `json:"stddev_pop"`
	StddevSamp *RegionalViolationRegisterStddevSampFields `json:"stddev_samp"`
	Sum        *RegionalViolationRegisterSumFields        `json:"sum"`
	VarPop     *RegionalViolationRegisterVarPopFields     `json:"var_pop"`
	VarSamp    *RegionalViolationRegisterVarSampFields    `json:"var_samp"`
	Variance   *RegionalViolationRegisterVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "regional_violation_register"
type RegionalViolationRegisterAvgFields struct {
	ID          *int64 `json:"id"`
	IllegalCode *int   `json:"illegal_code"`
	IllegalType *int   `json:"illegal_type"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'regional_violation_register'.
type RegionalViolationRegisterBoolExp struct {
	And                         []*RegionalViolationRegisterBoolExp `json:"_and"`
	Not                         *RegionalViolationRegisterBoolExp   `json:"_not"`
	Or                          []*RegionalViolationRegisterBoolExp `json:"_or"`
	ID                          *model.BigintComparisonExp          `json:"id"`
	RegionalViolationRegisterID *model.StringComparisonExp          `json:"regional_violation_register_id"`
	ViolationDetailID           *model.StringComparisonExp          `json:"violation_detail_id"`
	VehicleID                   *model.StringComparisonExp          `json:"vehicle_id"`
	DriverID                    *model.StringComparisonExp          `json:"driver_id"`
	IllegalCode                 *model.IntComparisonExp             `json:"illegal_code"`
	IllegalTime                 *model.TimestamptzComparisonExp     `json:"illegal_time"`
	IllegalType                 *model.IntComparisonExp             `json:"illegal_type"`
	RegisterTime                *model.TimestamptzComparisonExp     `json:"register_time"`
	ProcessingAgency            *model.StringComparisonExp          `json:"processing_agency"`
	Operator                    *model.StringComparisonExp          `json:"operator"`
	IsRegister                  *model.BooleanComparisonExp         `json:"is_register"`
	CreatedAt                   *model.TimestamptzComparisonExp     `json:"created_at"`
	CreatedBy                   *model.StringComparisonExp          `json:"created_by"`
	UpdatedAt                   *model.TimestamptzComparisonExp     `json:"updated_at"`
	UpdatedBy                   *model.StringComparisonExp          `json:"updated_by"`
	DeletedAt                   *model.TimestamptzComparisonExp     `json:"deleted_at"`
	DeletedBy                   *model.StringComparisonExp          `json:"deleted_by"`
	IsDeleted                   *model.BooleanComparisonExp         `json:"is_deleted"`
}

// input type for incrementing integer column in table "regional_violation_register"
type RegionalViolationRegisterIncInput struct {
	ID          *int64 `json:"id"`
	IllegalCode *int   `json:"illegal_code"`
	IllegalType *int   `json:"illegal_type"`
}

// input type for inserting data into table "regional_violation_register"
type RegionalViolationRegisterInsertInput struct {
	ViolationDetailID *string    `json:"violation_detail_id"`
	VehicleID         *string    `json:"vehicle_id"`
	DriverID          *string    `json:"driver_id"`
	IllegalCode       *int       `json:"illegal_code"`
	IllegalTime       *time.Time `json:"illegal_time"`
	IllegalType       *int       `json:"illegal_type"`
	RegisterTime      *time.Time `json:"register_time"`
	ProcessingAgency  *string    `json:"processing_agency"`
	Operator          *string    `json:"operator"`
	IsRegister        *bool      `json:"is_register"`
	UpdatedAt         *time.Time `json:"updated_at"`
	UpdatedBy         *string    `json:"updated_by"`
	DeletedAt         *time.Time `json:"deleted_at"`
	DeletedBy         *string    `json:"deleted_by"`
	IsDeleted         *bool      `json:"is_deleted"`
}

// aggregate max on columns of table "regional_violation_register"
type RegionalViolationRegisterMaxFields struct {
	ID                          *int64     `json:"id"`
	RegionalViolationRegisterID *string    `json:"regional_violation_register_id"`
	ViolationDetailID           *string    `json:"violation_detail_id"`
	VehicleID                   *string    `json:"vehicle_id"`
	DriverID                    *string    `json:"driver_id"`
	IllegalCode                 *int       `json:"illegal_code"`
	IllegalTime                 *time.Time `json:"illegal_time"`
	IllegalType                 *int       `json:"illegal_type"`
	RegisterTime                *time.Time `json:"register_time"`
	ProcessingAgency            *string    `json:"processing_agency"`
	Operator                    *string    `json:"operator"`
	IsRegister                  *bool      `json:"is_register"`
	CreatedAt                   *time.Time `json:"created_at"`
	CreatedBy                   *string    `json:"created_by"`
	UpdatedAt                   *time.Time `json:"updated_at"`
	UpdatedBy                   *string    `json:"updated_by"`
	DeletedAt                   *time.Time `json:"deleted_at"`
	DeletedBy                   *string    `json:"deleted_by"`
	IsDeleted                   *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "regional_violation_register"
type RegionalViolationRegisterMinFields struct {
	ID                          *int64     `json:"id"`
	RegionalViolationRegisterID *string    `json:"regional_violation_register_id"`
	ViolationDetailID           *string    `json:"violation_detail_id"`
	VehicleID                   *string    `json:"vehicle_id"`
	DriverID                    *string    `json:"driver_id"`
	IllegalCode                 *int       `json:"illegal_code"`
	IllegalTime                 *time.Time `json:"illegal_time"`
	IllegalType                 *int       `json:"illegal_type"`
	RegisterTime                *time.Time `json:"register_time"`
	ProcessingAgency            *string    `json:"processing_agency"`
	Operator                    *string    `json:"operator"`
	IsRegister                  *bool      `json:"is_register"`
	CreatedAt                   *time.Time `json:"created_at"`
	CreatedBy                   *string    `json:"created_by"`
	UpdatedAt                   *time.Time `json:"updated_at"`
	UpdatedBy                   *string    `json:"updated_by"`
	DeletedAt                   *time.Time `json:"deleted_at"`
	DeletedBy                   *string    `json:"deleted_by"`
	IsDeleted                   *bool      `json:"is_deleted"`
}

// response of any mutation on the table "regional_violation_register"
type RegionalViolationRegisterMutationResponse struct {
	AffectedRows int                                 `json:"affected_rows"`
	Returning    []*model1.RegionalViolationRegister `json:"returning"`
}

// ordering options when selecting data from "regional_violation_register"
type RegionalViolationRegisterOrderBy struct {
	ID                          *model.OrderBy `json:"id"`
	RegionalViolationRegisterID *model.OrderBy `json:"regional_violation_register_id"`
	ViolationDetailID           *model.OrderBy `json:"violation_detail_id"`
	VehicleID                   *model.OrderBy `json:"vehicle_id"`
	DriverID                    *model.OrderBy `json:"driver_id"`
	IllegalCode                 *model.OrderBy `json:"illegal_code"`
	IllegalTime                 *model.OrderBy `json:"illegal_time"`
	IllegalType                 *model.OrderBy `json:"illegal_type"`
	RegisterTime                *model.OrderBy `json:"register_time"`
	ProcessingAgency            *model.OrderBy `json:"processing_agency"`
	Operator                    *model.OrderBy `json:"operator"`
	IsRegister                  *model.OrderBy `json:"is_register"`
	CreatedAt                   *model.OrderBy `json:"created_at"`
	CreatedBy                   *model.OrderBy `json:"created_by"`
	UpdatedAt                   *model.OrderBy `json:"updated_at"`
	UpdatedBy                   *model.OrderBy `json:"updated_by"`
	DeletedAt                   *model.OrderBy `json:"deleted_at"`
	DeletedBy                   *model.OrderBy `json:"deleted_by"`
	IsDeleted                   *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "regional_violation_register"
type RegionalViolationRegisterSetInput struct {
	ID                          *int64     `json:"id"`
	RegionalViolationRegisterID *string    `json:"regional_violation_register_id"`
	ViolationDetailID           *string    `json:"violation_detail_id"`
	VehicleID                   *string    `json:"vehicle_id"`
	DriverID                    *string    `json:"driver_id"`
	IllegalCode                 *int       `json:"illegal_code"`
	IllegalTime                 *time.Time `json:"illegal_time"`
	IllegalType                 *int       `json:"illegal_type"`
	RegisterTime                *time.Time `json:"register_time"`
	ProcessingAgency            *string    `json:"processing_agency"`
	Operator                    *string    `json:"operator"`
	IsRegister                  *bool      `json:"is_register"`
	CreatedAt                   *time.Time `json:"created_at"`
	CreatedBy                   *string    `json:"created_by"`
	UpdatedAt                   *time.Time `json:"updated_at"`
	UpdatedBy                   *string    `json:"updated_by"`
	DeletedAt                   *time.Time `json:"deleted_at"`
	DeletedBy                   *string    `json:"deleted_by"`
	IsDeleted                   *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "regional_violation_register"
type RegionalViolationRegisterStddevFields struct {
	ID          *int64 `json:"id"`
	IllegalCode *int   `json:"illegal_code"`
	IllegalType *int   `json:"illegal_type"`
}

// aggregate stddev_pop on columns of table "regional_violation_register"
type RegionalViolationRegisterStddevPopFields struct {
	ID          *int64 `json:"id"`
	IllegalCode *int   `json:"illegal_code"`
	IllegalType *int   `json:"illegal_type"`
}

// aggregate stddev_samp on columns of table "regional_violation_register"
type RegionalViolationRegisterStddevSampFields struct {
	ID          *int64 `json:"id"`
	IllegalCode *int   `json:"illegal_code"`
	IllegalType *int   `json:"illegal_type"`
}

// aggregate sum on columns of table "regional_violation_register"
type RegionalViolationRegisterSumFields struct {
	ID          *int64 `json:"id"`
	IllegalCode *int   `json:"illegal_code"`
	IllegalType *int   `json:"illegal_type"`
}

// aggregate var_pop on columns of table "regional_violation_register"
type RegionalViolationRegisterVarPopFields struct {
	ID          *int64 `json:"id"`
	IllegalCode *int   `json:"illegal_code"`
	IllegalType *int   `json:"illegal_type"`
}

// aggregate var_samp on columns of table "regional_violation_register"
type RegionalViolationRegisterVarSampFields struct {
	ID          *int64 `json:"id"`
	IllegalCode *int   `json:"illegal_code"`
	IllegalType *int   `json:"illegal_type"`
}

// aggregate variance on columns of table "regional_violation_register"
type RegionalViolationRegisterVarianceFields struct {
	ID          *int64 `json:"id"`
	IllegalCode *int   `json:"illegal_code"`
	IllegalType *int   `json:"illegal_type"`
}

// aggregated selection of "serious_traffic_violation"
type SeriousTrafficViolationAggregate struct {
	Aggregate *SeriousTrafficViolationAggregateFields `json:"aggregate"`
}

// aggregate fields of "serious_traffic_violation"
type SeriousTrafficViolationAggregateFields struct {
	Avg        *SeriousTrafficViolationAvgFields        `json:"avg"`
	Count      *int                                     `json:"count"`
	Max        *SeriousTrafficViolationMaxFields        `json:"max"`
	Min        *SeriousTrafficViolationMinFields        `json:"min"`
	Stddev     *SeriousTrafficViolationStddevFields     `json:"stddev"`
	StddevPop  *SeriousTrafficViolationStddevPopFields  `json:"stddev_pop"`
	StddevSamp *SeriousTrafficViolationStddevSampFields `json:"stddev_samp"`
	Sum        *SeriousTrafficViolationSumFields        `json:"sum"`
	VarPop     *SeriousTrafficViolationVarPopFields     `json:"var_pop"`
	VarSamp    *SeriousTrafficViolationVarSampFields    `json:"var_samp"`
	Variance   *SeriousTrafficViolationVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "serious_traffic_violation"
type SeriousTrafficViolationAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'serious_traffic_violation'.
type SeriousTrafficViolationBoolExp struct {
	And                       []*SeriousTrafficViolationBoolExp `json:"_and"`
	Not                       *SeriousTrafficViolationBoolExp   `json:"_not"`
	Or                        []*SeriousTrafficViolationBoolExp `json:"_or"`
	ID                        *model.BigintComparisonExp        `json:"id"`
	SeriousTrafficViolationID *model.StringComparisonExp        `json:"serious_traffic_violation_id"`
	VehicleID                 *model.StringComparisonExp        `json:"vehicle_id"`
	IllegalCode               *model.StringComparisonExp        `json:"illegal_code"`
	IllegalTime               *model.TimestamptzComparisonExp   `json:"illegal_time"`
	CreatedAt                 *model.TimestamptzComparisonExp   `json:"created_at"`
	CreatedBy                 *model.StringComparisonExp        `json:"created_by"`
	UpdatedAt                 *model.TimestamptzComparisonExp   `json:"updated_at"`
	UpdatedBy                 *model.StringComparisonExp        `json:"updated_by"`
	DeletedAt                 *model.TimestamptzComparisonExp   `json:"deleted_at"`
	DeletedBy                 *model.StringComparisonExp        `json:"deleted_by"`
}

// input type for incrementing integer column in table "serious_traffic_violation"
type SeriousTrafficViolationIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "serious_traffic_violation"
type SeriousTrafficViolationInsertInput struct {
	VehicleID   *string    `json:"vehicle_id"`
	IllegalCode *string    `json:"illegal_code"`
	IllegalTime *time.Time `json:"illegal_time"`
	UpdatedAt   *time.Time `json:"updated_at"`
	UpdatedBy   *string    `json:"updated_by"`
	DeletedAt   *time.Time `json:"deleted_at"`
	DeletedBy   *string    `json:"deleted_by"`
}

// aggregate max on columns of table "serious_traffic_violation"
type SeriousTrafficViolationMaxFields struct {
	ID                        *int64     `json:"id"`
	SeriousTrafficViolationID *string    `json:"serious_traffic_violation_id"`
	VehicleID                 *string    `json:"vehicle_id"`
	IllegalCode               *string    `json:"illegal_code"`
	IllegalTime               *time.Time `json:"illegal_time"`
	CreatedAt                 *time.Time `json:"created_at"`
	CreatedBy                 *string    `json:"created_by"`
	UpdatedAt                 *time.Time `json:"updated_at"`
	UpdatedBy                 *string    `json:"updated_by"`
	DeletedAt                 *time.Time `json:"deleted_at"`
	DeletedBy                 *string    `json:"deleted_by"`
}

// aggregate min on columns of table "serious_traffic_violation"
type SeriousTrafficViolationMinFields struct {
	ID                        *int64     `json:"id"`
	SeriousTrafficViolationID *string    `json:"serious_traffic_violation_id"`
	VehicleID                 *string    `json:"vehicle_id"`
	IllegalCode               *string    `json:"illegal_code"`
	IllegalTime               *time.Time `json:"illegal_time"`
	CreatedAt                 *time.Time `json:"created_at"`
	CreatedBy                 *string    `json:"created_by"`
	UpdatedAt                 *time.Time `json:"updated_at"`
	UpdatedBy                 *string    `json:"updated_by"`
	DeletedAt                 *time.Time `json:"deleted_at"`
	DeletedBy                 *string    `json:"deleted_by"`
}

// response of any mutation on the table "serious_traffic_violation"
type SeriousTrafficViolationMutationResponse struct {
	AffectedRows int                               `json:"affected_rows"`
	Returning    []*model1.SeriousTrafficViolation `json:"returning"`
}

// ordering options when selecting data from "serious_traffic_violation"
type SeriousTrafficViolationOrderBy struct {
	ID                        *model.OrderBy `json:"id"`
	SeriousTrafficViolationID *model.OrderBy `json:"serious_traffic_violation_id"`
	VehicleID                 *model.OrderBy `json:"vehicle_id"`
	IllegalCode               *model.OrderBy `json:"illegal_code"`
	IllegalTime               *model.OrderBy `json:"illegal_time"`
	CreatedAt                 *model.OrderBy `json:"created_at"`
	CreatedBy                 *model.OrderBy `json:"created_by"`
	UpdatedAt                 *model.OrderBy `json:"updated_at"`
	UpdatedBy                 *model.OrderBy `json:"updated_by"`
	DeletedAt                 *model.OrderBy `json:"deleted_at"`
	DeletedBy                 *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "serious_traffic_violation"
type SeriousTrafficViolationSetInput struct {
	ID                        *int64     `json:"id"`
	SeriousTrafficViolationID *string    `json:"serious_traffic_violation_id"`
	VehicleID                 *string    `json:"vehicle_id"`
	IllegalCode               *string    `json:"illegal_code"`
	IllegalTime               *time.Time `json:"illegal_time"`
	CreatedAt                 *time.Time `json:"created_at"`
	CreatedBy                 *string    `json:"created_by"`
	UpdatedAt                 *time.Time `json:"updated_at"`
	UpdatedBy                 *string    `json:"updated_by"`
	DeletedAt                 *time.Time `json:"deleted_at"`
	DeletedBy                 *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "serious_traffic_violation"
type SeriousTrafficViolationStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "serious_traffic_violation"
type SeriousTrafficViolationStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "serious_traffic_violation"
type SeriousTrafficViolationStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "serious_traffic_violation"
type SeriousTrafficViolationSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "serious_traffic_violation"
type SeriousTrafficViolationVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "serious_traffic_violation"
type SeriousTrafficViolationVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "serious_traffic_violation"
type SeriousTrafficViolationVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregated selection of "vehicle_violation_details"
type VehicleViolationDetailsAggregate struct {
	Aggregate *VehicleViolationDetailsAggregateFields `json:"aggregate"`
}

// aggregate fields of "vehicle_violation_details"
type VehicleViolationDetailsAggregateFields struct {
	Avg        *VehicleViolationDetailsAvgFields        `json:"avg"`
	Count      *int                                     `json:"count"`
	Max        *VehicleViolationDetailsMaxFields        `json:"max"`
	Min        *VehicleViolationDetailsMinFields        `json:"min"`
	Stddev     *VehicleViolationDetailsStddevFields     `json:"stddev"`
	StddevPop  *VehicleViolationDetailsStddevPopFields  `json:"stddev_pop"`
	StddevSamp *VehicleViolationDetailsStddevSampFields `json:"stddev_samp"`
	Sum        *VehicleViolationDetailsSumFields        `json:"sum"`
	VarPop     *VehicleViolationDetailsVarPopFields     `json:"var_pop"`
	VarSamp    *VehicleViolationDetailsVarSampFields    `json:"var_samp"`
	Variance   *VehicleViolationDetailsVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "vehicle_violation_details"
type VehicleViolationDetailsAvgFields struct {
	ID                    *int64 `json:"id"`
	IllegalHandlingStatus *int   `json:"illegal_handling_status"`
	PaymentMark           *int   `json:"payment_mark"`
	InformationSource     *int   `json:"information_source"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_violation_details'.
type VehicleViolationDetailsBoolExp struct {
	And                   []*VehicleViolationDetailsBoolExp `json:"_and"`
	Not                   *VehicleViolationDetailsBoolExp   `json:"_not"`
	Or                    []*VehicleViolationDetailsBoolExp `json:"_or"`
	ID                    *model.BigintComparisonExp        `json:"id"`
	ViolationDetailID     *model.StringComparisonExp        `json:"violation_detail_id"`
	VehicleID             *model.StringComparisonExp        `json:"vehicle_id"`
	DriverID              *model.StringComparisonExp        `json:"driver_id"`
	EnterpriseID          *model.StringComparisonExp        `json:"enterprise_id"`
	IllegalCode           *model.StringComparisonExp        `json:"illegal_code"`
	IllegalTime           *model.TimestamptzComparisonExp   `json:"illegal_time"`
	IllegalHandlingStatus *model.IntComparisonExp           `json:"illegal_handling_status"`
	IllegalLocation       *model.StringComparisonExp        `json:"illegal_location"`
	StandardValue         *model.StringComparisonExp        `json:"standard_value"`
	MeasuredValue         *model.StringComparisonExp        `json:"measured_value"`
	DiscoveryAgency       *model.StringComparisonExp        `json:"discovery_agency"`
	IllegalPhoto          *model.StringComparisonExp        `json:"illegal_photo"`
	IsNoticeDriver        *model.BooleanComparisonExp       `json:"is_notice_driver"`
	NoticeTime            *model.TimestamptzComparisonExp   `json:"notice_time"`
	DecisionNumber        *model.StringComparisonExp        `json:"decision_number"`
	PaymentMark           *model.IntComparisonExp           `json:"payment_mark"`
	PartyName             *model.StringComparisonExp        `json:"party_name"`
	InformationSource     *model.IntComparisonExp           `json:"information_source"`
	VehicleInformation    *model.StringComparisonExp        `json:"vehicle_information"`
	UpdateTimeIn          *model.TimestamptzComparisonExp   `json:"update_time_in"`
	IsHandle              *model.BooleanComparisonExp       `json:"is_handle"`
	HandleBy              *model.StringComparisonExp        `json:"handle_by"`
	HandleAt              *model.TimestamptzComparisonExp   `json:"handle_at"`
	IsSend                *model.BooleanComparisonExp       `json:"is_send"`
	IsDeleted             *model.BooleanComparisonExp       `json:"is_deleted"`
	CreatedAt             *model.TimestamptzComparisonExp   `json:"created_at"`
	CreatedBy             *model.StringComparisonExp        `json:"created_by"`
	UpdatedAt             *model.TimestamptzComparisonExp   `json:"updated_at"`
	UpdatedBy             *model.StringComparisonExp        `json:"updated_by"`
	DeletedAt             *model.TimestamptzComparisonExp   `json:"deleted_at"`
	DeletedBy             *model.StringComparisonExp        `json:"deleted_by"`
}

// input type for incrementing integer column in table "vehicle_violation_details"
type VehicleViolationDetailsIncInput struct {
	ID                    *int64 `json:"id"`
	IllegalHandlingStatus *int   `json:"illegal_handling_status"`
	PaymentMark           *int   `json:"payment_mark"`
	InformationSource     *int   `json:"information_source"`
}

// input type for inserting data into table "vehicle_violation_details"
type VehicleViolationDetailsInsertInput struct {
	VehicleID             *string    `json:"vehicle_id"`
	DriverID              *string    `json:"driver_id"`
	EnterpriseID          *string    `json:"enterprise_id"`
	IllegalCode           *string    `json:"illegal_code"`
	IllegalTime           *time.Time `json:"illegal_time"`
	IllegalHandlingStatus *int       `json:"illegal_handling_status"`
	IllegalLocation       *string    `json:"illegal_location"`
	StandardValue         *string    `json:"standard_value"`
	MeasuredValue         *string    `json:"measured_value"`
	DiscoveryAgency       *string    `json:"discovery_agency"`
	IllegalPhoto          *string    `json:"illegal_photo"`
	IsNoticeDriver        *bool      `json:"is_notice_driver"`
	NoticeTime            *time.Time `json:"notice_time"`
	DecisionNumber        *string    `json:"decision_number"`
	PaymentMark           *int       `json:"payment_mark"`
	PartyName             *string    `json:"party_name"`
	InformationSource     *int       `json:"information_source"`
	VehicleInformation    *string    `json:"vehicle_information"`
	UpdateTimeIn          *time.Time `json:"update_time_in"`
	IsHandle              *bool      `json:"is_handle"`
	HandleBy              *string    `json:"handle_by"`
	HandleAt              *time.Time `json:"handle_at"`
	IsSend                *bool      `json:"is_send"`
	IsDeleted             *bool      `json:"is_deleted"`
	UpdatedAt             *time.Time `json:"updated_at"`
	UpdatedBy             *string    `json:"updated_by"`
	DeletedAt             *time.Time `json:"deleted_at"`
	DeletedBy             *string    `json:"deleted_by"`
}

// aggregate max on columns of table "vehicle_violation_details"
type VehicleViolationDetailsMaxFields struct {
	ID                    *int64     `json:"id"`
	ViolationDetailID     *string    `json:"violation_detail_id"`
	VehicleID             *string    `json:"vehicle_id"`
	DriverID              *string    `json:"driver_id"`
	EnterpriseID          *string    `json:"enterprise_id"`
	IllegalCode           *string    `json:"illegal_code"`
	IllegalTime           *time.Time `json:"illegal_time"`
	IllegalHandlingStatus *int       `json:"illegal_handling_status"`
	IllegalLocation       *string    `json:"illegal_location"`
	StandardValue         *string    `json:"standard_value"`
	MeasuredValue         *string    `json:"measured_value"`
	DiscoveryAgency       *string    `json:"discovery_agency"`
	IllegalPhoto          *string    `json:"illegal_photo"`
	IsNoticeDriver        *bool      `json:"is_notice_driver"`
	NoticeTime            *time.Time `json:"notice_time"`
	DecisionNumber        *string    `json:"decision_number"`
	PaymentMark           *int       `json:"payment_mark"`
	PartyName             *string    `json:"party_name"`
	InformationSource     *int       `json:"information_source"`
	VehicleInformation    *string    `json:"vehicle_information"`
	UpdateTimeIn          *time.Time `json:"update_time_in"`
	IsHandle              *bool      `json:"is_handle"`
	HandleBy              *string    `json:"handle_by"`
	HandleAt              *time.Time `json:"handle_at"`
	IsSend                *bool      `json:"is_send"`
	IsDeleted             *bool      `json:"is_deleted"`
	CreatedAt             *time.Time `json:"created_at"`
	CreatedBy             *string    `json:"created_by"`
	UpdatedAt             *time.Time `json:"updated_at"`
	UpdatedBy             *string    `json:"updated_by"`
	DeletedAt             *time.Time `json:"deleted_at"`
	DeletedBy             *string    `json:"deleted_by"`
}

// aggregate min on columns of table "vehicle_violation_details"
type VehicleViolationDetailsMinFields struct {
	ID                    *int64     `json:"id"`
	ViolationDetailID     *string    `json:"violation_detail_id"`
	VehicleID             *string    `json:"vehicle_id"`
	DriverID              *string    `json:"driver_id"`
	EnterpriseID          *string    `json:"enterprise_id"`
	IllegalCode           *string    `json:"illegal_code"`
	IllegalTime           *time.Time `json:"illegal_time"`
	IllegalHandlingStatus *int       `json:"illegal_handling_status"`
	IllegalLocation       *string    `json:"illegal_location"`
	StandardValue         *string    `json:"standard_value"`
	MeasuredValue         *string    `json:"measured_value"`
	DiscoveryAgency       *string    `json:"discovery_agency"`
	IllegalPhoto          *string    `json:"illegal_photo"`
	IsNoticeDriver        *bool      `json:"is_notice_driver"`
	NoticeTime            *time.Time `json:"notice_time"`
	DecisionNumber        *string    `json:"decision_number"`
	PaymentMark           *int       `json:"payment_mark"`
	PartyName             *string    `json:"party_name"`
	InformationSource     *int       `json:"information_source"`
	VehicleInformation    *string    `json:"vehicle_information"`
	UpdateTimeIn          *time.Time `json:"update_time_in"`
	IsHandle              *bool      `json:"is_handle"`
	HandleBy              *string    `json:"handle_by"`
	HandleAt              *time.Time `json:"handle_at"`
	IsSend                *bool      `json:"is_send"`
	IsDeleted             *bool      `json:"is_deleted"`
	CreatedAt             *time.Time `json:"created_at"`
	CreatedBy             *string    `json:"created_by"`
	UpdatedAt             *time.Time `json:"updated_at"`
	UpdatedBy             *string    `json:"updated_by"`
	DeletedAt             *time.Time `json:"deleted_at"`
	DeletedBy             *string    `json:"deleted_by"`
}

// response of any mutation on the table "vehicle_violation_details"
type VehicleViolationDetailsMutationResponse struct {
	AffectedRows int                               `json:"affected_rows"`
	Returning    []*model1.VehicleViolationDetails `json:"returning"`
}

// ordering options when selecting data from "vehicle_violation_details"
type VehicleViolationDetailsOrderBy struct {
	ID                    *model.OrderBy `json:"id"`
	ViolationDetailID     *model.OrderBy `json:"violation_detail_id"`
	VehicleID             *model.OrderBy `json:"vehicle_id"`
	DriverID              *model.OrderBy `json:"driver_id"`
	EnterpriseID          *model.OrderBy `json:"enterprise_id"`
	IllegalCode           *model.OrderBy `json:"illegal_code"`
	IllegalTime           *model.OrderBy `json:"illegal_time"`
	IllegalHandlingStatus *model.OrderBy `json:"illegal_handling_status"`
	IllegalLocation       *model.OrderBy `json:"illegal_location"`
	StandardValue         *model.OrderBy `json:"standard_value"`
	MeasuredValue         *model.OrderBy `json:"measured_value"`
	DiscoveryAgency       *model.OrderBy `json:"discovery_agency"`
	IllegalPhoto          *model.OrderBy `json:"illegal_photo"`
	IsNoticeDriver        *model.OrderBy `json:"is_notice_driver"`
	NoticeTime            *model.OrderBy `json:"notice_time"`
	DecisionNumber        *model.OrderBy `json:"decision_number"`
	PaymentMark           *model.OrderBy `json:"payment_mark"`
	PartyName             *model.OrderBy `json:"party_name"`
	InformationSource     *model.OrderBy `json:"information_source"`
	VehicleInformation    *model.OrderBy `json:"vehicle_information"`
	UpdateTimeIn          *model.OrderBy `json:"update_time_in"`
	IsHandle              *model.OrderBy `json:"is_handle"`
	HandleBy              *model.OrderBy `json:"handle_by"`
	HandleAt              *model.OrderBy `json:"handle_at"`
	IsSend                *model.OrderBy `json:"is_send"`
	IsDeleted             *model.OrderBy `json:"is_deleted"`
	CreatedAt             *model.OrderBy `json:"created_at"`
	CreatedBy             *model.OrderBy `json:"created_by"`
	UpdatedAt             *model.OrderBy `json:"updated_at"`
	UpdatedBy             *model.OrderBy `json:"updated_by"`
	DeletedAt             *model.OrderBy `json:"deleted_at"`
	DeletedBy             *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "vehicle_violation_details"
type VehicleViolationDetailsSetInput struct {
	ID                    *int64     `json:"id"`
	ViolationDetailID     *string    `json:"violation_detail_id"`
	VehicleID             *string    `json:"vehicle_id"`
	DriverID              *string    `json:"driver_id"`
	EnterpriseID          *string    `json:"enterprise_id"`
	IllegalCode           *string    `json:"illegal_code"`
	IllegalTime           *time.Time `json:"illegal_time"`
	IllegalHandlingStatus *int       `json:"illegal_handling_status"`
	IllegalLocation       *string    `json:"illegal_location"`
	StandardValue         *string    `json:"standard_value"`
	MeasuredValue         *string    `json:"measured_value"`
	DiscoveryAgency       *string    `json:"discovery_agency"`
	IllegalPhoto          *string    `json:"illegal_photo"`
	IsNoticeDriver        *bool      `json:"is_notice_driver"`
	NoticeTime            *time.Time `json:"notice_time"`
	DecisionNumber        *string    `json:"decision_number"`
	PaymentMark           *int       `json:"payment_mark"`
	PartyName             *string    `json:"party_name"`
	InformationSource     *int       `json:"information_source"`
	VehicleInformation    *string    `json:"vehicle_information"`
	UpdateTimeIn          *time.Time `json:"update_time_in"`
	IsHandle              *bool      `json:"is_handle"`
	HandleBy              *string    `json:"handle_by"`
	HandleAt              *time.Time `json:"handle_at"`
	IsSend                *bool      `json:"is_send"`
	IsDeleted             *bool      `json:"is_deleted"`
	CreatedAt             *time.Time `json:"created_at"`
	CreatedBy             *string    `json:"created_by"`
	UpdatedAt             *time.Time `json:"updated_at"`
	UpdatedBy             *string    `json:"updated_by"`
	DeletedAt             *time.Time `json:"deleted_at"`
	DeletedBy             *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "vehicle_violation_details"
type VehicleViolationDetailsStddevFields struct {
	ID                    *int64 `json:"id"`
	IllegalHandlingStatus *int   `json:"illegal_handling_status"`
	PaymentMark           *int   `json:"payment_mark"`
	InformationSource     *int   `json:"information_source"`
}

// aggregate stddev_pop on columns of table "vehicle_violation_details"
type VehicleViolationDetailsStddevPopFields struct {
	ID                    *int64 `json:"id"`
	IllegalHandlingStatus *int   `json:"illegal_handling_status"`
	PaymentMark           *int   `json:"payment_mark"`
	InformationSource     *int   `json:"information_source"`
}

// aggregate stddev_samp on columns of table "vehicle_violation_details"
type VehicleViolationDetailsStddevSampFields struct {
	ID                    *int64 `json:"id"`
	IllegalHandlingStatus *int   `json:"illegal_handling_status"`
	PaymentMark           *int   `json:"payment_mark"`
	InformationSource     *int   `json:"information_source"`
}

// aggregate sum on columns of table "vehicle_violation_details"
type VehicleViolationDetailsSumFields struct {
	ID                    *int64 `json:"id"`
	IllegalHandlingStatus *int   `json:"illegal_handling_status"`
	PaymentMark           *int   `json:"payment_mark"`
	InformationSource     *int   `json:"information_source"`
}

// aggregate var_pop on columns of table "vehicle_violation_details"
type VehicleViolationDetailsVarPopFields struct {
	ID                    *int64 `json:"id"`
	IllegalHandlingStatus *int   `json:"illegal_handling_status"`
	PaymentMark           *int   `json:"payment_mark"`
	InformationSource     *int   `json:"information_source"`
}

// aggregate var_samp on columns of table "vehicle_violation_details"
type VehicleViolationDetailsVarSampFields struct {
	ID                    *int64 `json:"id"`
	IllegalHandlingStatus *int   `json:"illegal_handling_status"`
	PaymentMark           *int   `json:"payment_mark"`
	InformationSource     *int   `json:"information_source"`
}

// aggregate variance on columns of table "vehicle_violation_details"
type VehicleViolationDetailsVarianceFields struct {
	ID                    *int64 `json:"id"`
	IllegalHandlingStatus *int   `json:"illegal_handling_status"`
	PaymentMark           *int   `json:"payment_mark"`
	InformationSource     *int   `json:"information_source"`
}

// aggregated selection of "vehicle_violation_scoring_items"
type VehicleViolationScoringItemsAggregate struct {
	Aggregate *VehicleViolationScoringItemsAggregateFields `json:"aggregate"`
}

// aggregate fields of "vehicle_violation_scoring_items"
type VehicleViolationScoringItemsAggregateFields struct {
	Avg        *VehicleViolationScoringItemsAvgFields        `json:"avg"`
	Count      *int                                          `json:"count"`
	Max        *VehicleViolationScoringItemsMaxFields        `json:"max"`
	Min        *VehicleViolationScoringItemsMinFields        `json:"min"`
	Stddev     *VehicleViolationScoringItemsStddevFields     `json:"stddev"`
	StddevPop  *VehicleViolationScoringItemsStddevPopFields  `json:"stddev_pop"`
	StddevSamp *VehicleViolationScoringItemsStddevSampFields `json:"stddev_samp"`
	Sum        *VehicleViolationScoringItemsSumFields        `json:"sum"`
	VarPop     *VehicleViolationScoringItemsVarPopFields     `json:"var_pop"`
	VarSamp    *VehicleViolationScoringItemsVarSampFields    `json:"var_samp"`
	Variance   *VehicleViolationScoringItemsVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "vehicle_violation_scoring_items"
type VehicleViolationScoringItemsAvgFields struct {
	ID                *int64   `json:"id"`
	DeductionCategory *int     `json:"deduction_category"`
	DemeritPoints     *float64 `json:"demerit_points"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_violation_scoring_items'.
type VehicleViolationScoringItemsBoolExp struct {
	And                      []*VehicleViolationScoringItemsBoolExp `json:"_and"`
	Not                      *VehicleViolationScoringItemsBoolExp   `json:"_not"`
	Or                       []*VehicleViolationScoringItemsBoolExp `json:"_or"`
	ID                       *model.BigintComparisonExp             `json:"id"`
	ViolationScoringItemID   *model.StringComparisonExp             `json:"violation_scoring_item_id"`
	DeductionItemDescription *model.StringComparisonExp             `json:"deduction_item_description"`
	DeductionCategory        *model.IntComparisonExp                `json:"deduction_category"`
	DemeritPoints            *model.NumericComparisonExp            `json:"demerit_points"`
	IsDeleted                *model.BooleanComparisonExp            `json:"is_deleted"`
	CreatedAt                *model.TimestamptzComparisonExp        `json:"created_at"`
	CreatedBy                *model.StringComparisonExp             `json:"created_by"`
	UpdatedAt                *model.TimestamptzComparisonExp        `json:"updated_at"`
	UpdatedBy                *model.StringComparisonExp             `json:"updated_by"`
	DeletedAt                *model.TimestamptzComparisonExp        `json:"deleted_at"`
	DeletedBy                *model.StringComparisonExp             `json:"deleted_by"`
}

// input type for incrementing integer column in table "vehicle_violation_scoring_items"
type VehicleViolationScoringItemsIncInput struct {
	ID                *int64   `json:"id"`
	DeductionCategory *int     `json:"deduction_category"`
	DemeritPoints     *float64 `json:"demerit_points"`
}

// input type for inserting data into table "vehicle_violation_scoring_items"
type VehicleViolationScoringItemsInsertInput struct {
	DeductionItemDescription *string    `json:"deduction_item_description"`
	DeductionCategory        *int       `json:"deduction_category"`
	DemeritPoints            *float64   `json:"demerit_points"`
	IsDeleted                *bool      `json:"is_deleted"`
	UpdatedAt                *time.Time `json:"updated_at"`
	UpdatedBy                *string    `json:"updated_by"`
	DeletedAt                *time.Time `json:"deleted_at"`
	DeletedBy                *string    `json:"deleted_by"`
}

// aggregate max on columns of table "vehicle_violation_scoring_items"
type VehicleViolationScoringItemsMaxFields struct {
	ID                       *int64     `json:"id"`
	ViolationScoringItemID   *string    `json:"violation_scoring_item_id"`
	DeductionItemDescription *string    `json:"deduction_item_description"`
	DeductionCategory        *int       `json:"deduction_category"`
	DemeritPoints            *float64   `json:"demerit_points"`
	IsDeleted                *bool      `json:"is_deleted"`
	CreatedAt                *time.Time `json:"created_at"`
	CreatedBy                *string    `json:"created_by"`
	UpdatedAt                *time.Time `json:"updated_at"`
	UpdatedBy                *string    `json:"updated_by"`
	DeletedAt                *time.Time `json:"deleted_at"`
	DeletedBy                *string    `json:"deleted_by"`
}

// aggregate min on columns of table "vehicle_violation_scoring_items"
type VehicleViolationScoringItemsMinFields struct {
	ID                       *int64     `json:"id"`
	ViolationScoringItemID   *string    `json:"violation_scoring_item_id"`
	DeductionItemDescription *string    `json:"deduction_item_description"`
	DeductionCategory        *int       `json:"deduction_category"`
	DemeritPoints            *float64   `json:"demerit_points"`
	IsDeleted                *bool      `json:"is_deleted"`
	CreatedAt                *time.Time `json:"created_at"`
	CreatedBy                *string    `json:"created_by"`
	UpdatedAt                *time.Time `json:"updated_at"`
	UpdatedBy                *string    `json:"updated_by"`
	DeletedAt                *time.Time `json:"deleted_at"`
	DeletedBy                *string    `json:"deleted_by"`
}

// response of any mutation on the table "vehicle_violation_scoring_items"
type VehicleViolationScoringItemsMutationResponse struct {
	AffectedRows int                                    `json:"affected_rows"`
	Returning    []*model1.VehicleViolationScoringItems `json:"returning"`
}

// ordering options when selecting data from "vehicle_violation_scoring_items"
type VehicleViolationScoringItemsOrderBy struct {
	ID                       *model.OrderBy `json:"id"`
	ViolationScoringItemID   *model.OrderBy `json:"violation_scoring_item_id"`
	DeductionItemDescription *model.OrderBy `json:"deduction_item_description"`
	DeductionCategory        *model.OrderBy `json:"deduction_category"`
	DemeritPoints            *model.OrderBy `json:"demerit_points"`
	IsDeleted                *model.OrderBy `json:"is_deleted"`
	CreatedAt                *model.OrderBy `json:"created_at"`
	CreatedBy                *model.OrderBy `json:"created_by"`
	UpdatedAt                *model.OrderBy `json:"updated_at"`
	UpdatedBy                *model.OrderBy `json:"updated_by"`
	DeletedAt                *model.OrderBy `json:"deleted_at"`
	DeletedBy                *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "vehicle_violation_scoring_items"
type VehicleViolationScoringItemsSetInput struct {
	ID                       *int64     `json:"id"`
	ViolationScoringItemID   *string    `json:"violation_scoring_item_id"`
	DeductionItemDescription *string    `json:"deduction_item_description"`
	DeductionCategory        *int       `json:"deduction_category"`
	DemeritPoints            *float64   `json:"demerit_points"`
	IsDeleted                *bool      `json:"is_deleted"`
	CreatedAt                *time.Time `json:"created_at"`
	CreatedBy                *string    `json:"created_by"`
	UpdatedAt                *time.Time `json:"updated_at"`
	UpdatedBy                *string    `json:"updated_by"`
	DeletedAt                *time.Time `json:"deleted_at"`
	DeletedBy                *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "vehicle_violation_scoring_items"
type VehicleViolationScoringItemsStddevFields struct {
	ID                *int64   `json:"id"`
	DeductionCategory *int     `json:"deduction_category"`
	DemeritPoints     *float64 `json:"demerit_points"`
}

// aggregate stddev_pop on columns of table "vehicle_violation_scoring_items"
type VehicleViolationScoringItemsStddevPopFields struct {
	ID                *int64   `json:"id"`
	DeductionCategory *int     `json:"deduction_category"`
	DemeritPoints     *float64 `json:"demerit_points"`
}

// aggregate stddev_samp on columns of table "vehicle_violation_scoring_items"
type VehicleViolationScoringItemsStddevSampFields struct {
	ID                *int64   `json:"id"`
	DeductionCategory *int     `json:"deduction_category"`
	DemeritPoints     *float64 `json:"demerit_points"`
}

// aggregate sum on columns of table "vehicle_violation_scoring_items"
type VehicleViolationScoringItemsSumFields struct {
	ID                *int64   `json:"id"`
	DeductionCategory *int     `json:"deduction_category"`
	DemeritPoints     *float64 `json:"demerit_points"`
}

// aggregate var_pop on columns of table "vehicle_violation_scoring_items"
type VehicleViolationScoringItemsVarPopFields struct {
	ID                *int64   `json:"id"`
	DeductionCategory *int     `json:"deduction_category"`
	DemeritPoints     *float64 `json:"demerit_points"`
}

// aggregate var_samp on columns of table "vehicle_violation_scoring_items"
type VehicleViolationScoringItemsVarSampFields struct {
	ID                *int64   `json:"id"`
	DeductionCategory *int     `json:"deduction_category"`
	DemeritPoints     *float64 `json:"demerit_points"`
}

// aggregate variance on columns of table "vehicle_violation_scoring_items"
type VehicleViolationScoringItemsVarianceFields struct {
	ID                *int64   `json:"id"`
	DeductionCategory *int     `json:"deduction_category"`
	DemeritPoints     *float64 `json:"demerit_points"`
}

// aggregated selection of "vehicle_violation_scoring_record"
type VehicleViolationScoringRecordAggregate struct {
	Aggregate *VehicleViolationScoringRecordAggregateFields `json:"aggregate"`
}

// aggregate fields of "vehicle_violation_scoring_record"
type VehicleViolationScoringRecordAggregateFields struct {
	Avg        *VehicleViolationScoringRecordAvgFields        `json:"avg"`
	Count      *int                                           `json:"count"`
	Max        *VehicleViolationScoringRecordMaxFields        `json:"max"`
	Min        *VehicleViolationScoringRecordMinFields        `json:"min"`
	Stddev     *VehicleViolationScoringRecordStddevFields     `json:"stddev"`
	StddevPop  *VehicleViolationScoringRecordStddevPopFields  `json:"stddev_pop"`
	StddevSamp *VehicleViolationScoringRecordStddevSampFields `json:"stddev_samp"`
	Sum        *VehicleViolationScoringRecordSumFields        `json:"sum"`
	VarPop     *VehicleViolationScoringRecordVarPopFields     `json:"var_pop"`
	VarSamp    *VehicleViolationScoringRecordVarSampFields    `json:"var_samp"`
	Variance   *VehicleViolationScoringRecordVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "vehicle_violation_scoring_record"
type VehicleViolationScoringRecordAvgFields struct {
	ID            *int64   `json:"id"`
	DemeritPoints *float64 `json:"demerit_points"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_violation_scoring_record'.
type VehicleViolationScoringRecordBoolExp struct {
	And                    []*VehicleViolationScoringRecordBoolExp `json:"_and"`
	Not                    *VehicleViolationScoringRecordBoolExp   `json:"_not"`
	Or                     []*VehicleViolationScoringRecordBoolExp `json:"_or"`
	ID                     *model.BigintComparisonExp              `json:"id"`
	ViolationScoringID     *model.StringComparisonExp              `json:"violation_scoring_id"`
	VehicleID              *model.StringComparisonExp              `json:"vehicle_id"`
	ViolationScoringItemID *model.StringComparisonExp              `json:"violation_scoring_item_id"`
	DemeritPoints          *model.NumericComparisonExp             `json:"demerit_points"`
	Remarks                *model.StringComparisonExp              `json:"remarks"`
	IsDeleted              *model.BooleanComparisonExp             `json:"is_deleted"`
	CreatedAt              *model.TimestamptzComparisonExp         `json:"created_at"`
	CreatedBy              *model.StringComparisonExp              `json:"created_by"`
	UpdatedAt              *model.TimestamptzComparisonExp         `json:"updated_at"`
	UpdatedBy              *model.StringComparisonExp              `json:"updated_by"`
	DeletedAt              *model.TimestamptzComparisonExp         `json:"deleted_at"`
	DeletedBy              *model.StringComparisonExp              `json:"deleted_by"`
}

// input type for incrementing integer column in table "vehicle_violation_scoring_record"
type VehicleViolationScoringRecordIncInput struct {
	ID            *int64   `json:"id"`
	DemeritPoints *float64 `json:"demerit_points"`
}

// input type for inserting data into table "vehicle_violation_scoring_record"
type VehicleViolationScoringRecordInsertInput struct {
	VehicleID              *string    `json:"vehicle_id"`
	ViolationScoringItemID *string    `json:"violation_scoring_item_id"`
	DemeritPoints          *float64   `json:"demerit_points"`
	Remarks                *string    `json:"remarks"`
	IsDeleted              *bool      `json:"is_deleted"`
	UpdatedAt              *time.Time `json:"updated_at"`
	UpdatedBy              *string    `json:"updated_by"`
	DeletedAt              *time.Time `json:"deleted_at"`
	DeletedBy              *string    `json:"deleted_by"`
}

// aggregate max on columns of table "vehicle_violation_scoring_record"
type VehicleViolationScoringRecordMaxFields struct {
	ID                     *int64     `json:"id"`
	ViolationScoringID     *string    `json:"violation_scoring_id"`
	VehicleID              *string    `json:"vehicle_id"`
	ViolationScoringItemID *string    `json:"violation_scoring_item_id"`
	DemeritPoints          *float64   `json:"demerit_points"`
	Remarks                *string    `json:"remarks"`
	IsDeleted              *bool      `json:"is_deleted"`
	CreatedAt              *time.Time `json:"created_at"`
	CreatedBy              *string    `json:"created_by"`
	UpdatedAt              *time.Time `json:"updated_at"`
	UpdatedBy              *string    `json:"updated_by"`
	DeletedAt              *time.Time `json:"deleted_at"`
	DeletedBy              *string    `json:"deleted_by"`
}

// aggregate min on columns of table "vehicle_violation_scoring_record"
type VehicleViolationScoringRecordMinFields struct {
	ID                     *int64     `json:"id"`
	ViolationScoringID     *string    `json:"violation_scoring_id"`
	VehicleID              *string    `json:"vehicle_id"`
	ViolationScoringItemID *string    `json:"violation_scoring_item_id"`
	DemeritPoints          *float64   `json:"demerit_points"`
	Remarks                *string    `json:"remarks"`
	IsDeleted              *bool      `json:"is_deleted"`
	CreatedAt              *time.Time `json:"created_at"`
	CreatedBy              *string    `json:"created_by"`
	UpdatedAt              *time.Time `json:"updated_at"`
	UpdatedBy              *string    `json:"updated_by"`
	DeletedAt              *time.Time `json:"deleted_at"`
	DeletedBy              *string    `json:"deleted_by"`
}

// response of any mutation on the table "vehicle_violation_scoring_record"
type VehicleViolationScoringRecordMutationResponse struct {
	AffectedRows int                                     `json:"affected_rows"`
	Returning    []*model1.VehicleViolationScoringRecord `json:"returning"`
}

// ordering options when selecting data from "vehicle_violation_scoring_record"
type VehicleViolationScoringRecordOrderBy struct {
	ID                     *model.OrderBy `json:"id"`
	ViolationScoringID     *model.OrderBy `json:"violation_scoring_id"`
	VehicleID              *model.OrderBy `json:"vehicle_id"`
	ViolationScoringItemID *model.OrderBy `json:"violation_scoring_item_id"`
	DemeritPoints          *model.OrderBy `json:"demerit_points"`
	Remarks                *model.OrderBy `json:"remarks"`
	IsDeleted              *model.OrderBy `json:"is_deleted"`
	CreatedAt              *model.OrderBy `json:"created_at"`
	CreatedBy              *model.OrderBy `json:"created_by"`
	UpdatedAt              *model.OrderBy `json:"updated_at"`
	UpdatedBy              *model.OrderBy `json:"updated_by"`
	DeletedAt              *model.OrderBy `json:"deleted_at"`
	DeletedBy              *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "vehicle_violation_scoring_record"
type VehicleViolationScoringRecordSetInput struct {
	ID                     *int64     `json:"id"`
	ViolationScoringID     *string    `json:"violation_scoring_id"`
	VehicleID              *string    `json:"vehicle_id"`
	ViolationScoringItemID *string    `json:"violation_scoring_item_id"`
	DemeritPoints          *float64   `json:"demerit_points"`
	Remarks                *string    `json:"remarks"`
	IsDeleted              *bool      `json:"is_deleted"`
	CreatedAt              *time.Time `json:"created_at"`
	CreatedBy              *string    `json:"created_by"`
	UpdatedAt              *time.Time `json:"updated_at"`
	UpdatedBy              *string    `json:"updated_by"`
	DeletedAt              *time.Time `json:"deleted_at"`
	DeletedBy              *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "vehicle_violation_scoring_record"
type VehicleViolationScoringRecordStddevFields struct {
	ID            *int64   `json:"id"`
	DemeritPoints *float64 `json:"demerit_points"`
}

// aggregate stddev_pop on columns of table "vehicle_violation_scoring_record"
type VehicleViolationScoringRecordStddevPopFields struct {
	ID            *int64   `json:"id"`
	DemeritPoints *float64 `json:"demerit_points"`
}

// aggregate stddev_samp on columns of table "vehicle_violation_scoring_record"
type VehicleViolationScoringRecordStddevSampFields struct {
	ID            *int64   `json:"id"`
	DemeritPoints *float64 `json:"demerit_points"`
}

// aggregate sum on columns of table "vehicle_violation_scoring_record"
type VehicleViolationScoringRecordSumFields struct {
	ID            *int64   `json:"id"`
	DemeritPoints *float64 `json:"demerit_points"`
}

// aggregate var_pop on columns of table "vehicle_violation_scoring_record"
type VehicleViolationScoringRecordVarPopFields struct {
	ID            *int64   `json:"id"`
	DemeritPoints *float64 `json:"demerit_points"`
}

// aggregate var_samp on columns of table "vehicle_violation_scoring_record"
type VehicleViolationScoringRecordVarSampFields struct {
	ID            *int64   `json:"id"`
	DemeritPoints *float64 `json:"demerit_points"`
}

// aggregate variance on columns of table "vehicle_violation_scoring_record"
type VehicleViolationScoringRecordVarianceFields struct {
	ID            *int64   `json:"id"`
	DemeritPoints *float64 `json:"demerit_points"`
}

// aggregated selection of "vio_codewfdm"
type VioCodewfdmAggregate struct {
	Aggregate *VioCodewfdmAggregateFields `json:"aggregate"`
}

// aggregate fields of "vio_codewfdm"
type VioCodewfdmAggregateFields struct {
	Avg        *VioCodewfdmAvgFields        `json:"avg"`
	Count      *int                         `json:"count"`
	Max        *VioCodewfdmMaxFields        `json:"max"`
	Min        *VioCodewfdmMinFields        `json:"min"`
	Stddev     *VioCodewfdmStddevFields     `json:"stddev"`
	StddevPop  *VioCodewfdmStddevPopFields  `json:"stddev_pop"`
	StddevSamp *VioCodewfdmStddevSampFields `json:"stddev_samp"`
	Sum        *VioCodewfdmSumFields        `json:"sum"`
	VarPop     *VioCodewfdmVarPopFields     `json:"var_pop"`
	VarSamp    *VioCodewfdmVarSampFields    `json:"var_samp"`
	Variance   *VioCodewfdmVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "vio_codewfdm"
type VioCodewfdmAvgFields struct {
	Wfjfs   *float64 `json:"wfjfs"`
	FkjeMin *float64 `json:"fkje_min"`
	FkjeMax *float64 `json:"fkje_max"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vio_codewfdm'.
type VioCodewfdmBoolExp struct {
	And     []*VioCodewfdmBoolExp       `json:"_and"`
	Not     *VioCodewfdmBoolExp         `json:"_not"`
	Or      []*VioCodewfdmBoolExp       `json:"_or"`
	Wfxw    *model.StringComparisonExp  `json:"wfxw"`
	Wfms    *model.StringComparisonExp  `json:"wfms"`
	Wfjfs   *model.NumericComparisonExp `json:"wfjfs"`
	FkjeMin *model.NumericComparisonExp `json:"fkje_min"`
	FkjeMax *model.NumericComparisonExp `json:"fkje_max"`
	Xh      *model.StringComparisonExp  `json:"xh"`
}

// input type for incrementing integer column in table "vio_codewfdm"
type VioCodewfdmIncInput struct {
	Wfjfs   *float64 `json:"wfjfs"`
	FkjeMin *float64 `json:"fkje_min"`
	FkjeMax *float64 `json:"fkje_max"`
}

// input type for inserting data into table "vio_codewfdm"
type VioCodewfdmInsertInput struct {
	Wfms    *string  `json:"wfms"`
	Wfjfs   *float64 `json:"wfjfs"`
	FkjeMin *float64 `json:"fkje_min"`
	FkjeMax *float64 `json:"fkje_max"`
	Xh      *string  `json:"xh"`
}

// aggregate max on columns of table "vio_codewfdm"
type VioCodewfdmMaxFields struct {
	Wfxw    *string  `json:"wfxw"`
	Wfms    *string  `json:"wfms"`
	Wfjfs   *float64 `json:"wfjfs"`
	FkjeMin *float64 `json:"fkje_min"`
	FkjeMax *float64 `json:"fkje_max"`
	Xh      *string  `json:"xh"`
}

// aggregate min on columns of table "vio_codewfdm"
type VioCodewfdmMinFields struct {
	Wfxw    *string  `json:"wfxw"`
	Wfms    *string  `json:"wfms"`
	Wfjfs   *float64 `json:"wfjfs"`
	FkjeMin *float64 `json:"fkje_min"`
	FkjeMax *float64 `json:"fkje_max"`
	Xh      *string  `json:"xh"`
}

// response of any mutation on the table "vio_codewfdm"
type VioCodewfdmMutationResponse struct {
	AffectedRows int                   `json:"affected_rows"`
	Returning    []*model1.VioCodewfdm `json:"returning"`
}

// ordering options when selecting data from "vio_codewfdm"
type VioCodewfdmOrderBy struct {
	Wfxw    *model.OrderBy `json:"wfxw"`
	Wfms    *model.OrderBy `json:"wfms"`
	Wfjfs   *model.OrderBy `json:"wfjfs"`
	FkjeMin *model.OrderBy `json:"fkje_min"`
	FkjeMax *model.OrderBy `json:"fkje_max"`
	Xh      *model.OrderBy `json:"xh"`
}

// input type for updating data in table "vio_codewfdm"
type VioCodewfdmSetInput struct {
	Wfxw    *string  `json:"wfxw"`
	Wfms    *string  `json:"wfms"`
	Wfjfs   *float64 `json:"wfjfs"`
	FkjeMin *float64 `json:"fkje_min"`
	FkjeMax *float64 `json:"fkje_max"`
	Xh      *string  `json:"xh"`
}

// aggregate stddev on columns of table "vio_codewfdm"
type VioCodewfdmStddevFields struct {
	Wfjfs   *float64 `json:"wfjfs"`
	FkjeMin *float64 `json:"fkje_min"`
	FkjeMax *float64 `json:"fkje_max"`
}

// aggregate stddev_pop on columns of table "vio_codewfdm"
type VioCodewfdmStddevPopFields struct {
	Wfjfs   *float64 `json:"wfjfs"`
	FkjeMin *float64 `json:"fkje_min"`
	FkjeMax *float64 `json:"fkje_max"`
}

// aggregate stddev_samp on columns of table "vio_codewfdm"
type VioCodewfdmStddevSampFields struct {
	Wfjfs   *float64 `json:"wfjfs"`
	FkjeMin *float64 `json:"fkje_min"`
	FkjeMax *float64 `json:"fkje_max"`
}

// aggregate sum on columns of table "vio_codewfdm"
type VioCodewfdmSumFields struct {
	Wfjfs   *float64 `json:"wfjfs"`
	FkjeMin *float64 `json:"fkje_min"`
	FkjeMax *float64 `json:"fkje_max"`
}

// aggregate var_pop on columns of table "vio_codewfdm"
type VioCodewfdmVarPopFields struct {
	Wfjfs   *float64 `json:"wfjfs"`
	FkjeMin *float64 `json:"fkje_min"`
	FkjeMax *float64 `json:"fkje_max"`
}

// aggregate var_samp on columns of table "vio_codewfdm"
type VioCodewfdmVarSampFields struct {
	Wfjfs   *float64 `json:"wfjfs"`
	FkjeMin *float64 `json:"fkje_min"`
	FkjeMax *float64 `json:"fkje_max"`
}

// aggregate variance on columns of table "vio_codewfdm"
type VioCodewfdmVarianceFields struct {
	Wfjfs   *float64 `json:"wfjfs"`
	FkjeMin *float64 `json:"fkje_min"`
	FkjeMax *float64 `json:"fkje_max"`
}

// aggregated selection of "violation_registration"
type ViolationRegistrationAggregate struct {
	Aggregate *ViolationRegistrationAggregateFields `json:"aggregate"`
}

// aggregate fields of "violation_registration"
type ViolationRegistrationAggregateFields struct {
	Avg        *ViolationRegistrationAvgFields        `json:"avg"`
	Count      *int                                   `json:"count"`
	Max        *ViolationRegistrationMaxFields        `json:"max"`
	Min        *ViolationRegistrationMinFields        `json:"min"`
	Stddev     *ViolationRegistrationStddevFields     `json:"stddev"`
	StddevPop  *ViolationRegistrationStddevPopFields  `json:"stddev_pop"`
	StddevSamp *ViolationRegistrationStddevSampFields `json:"stddev_samp"`
	Sum        *ViolationRegistrationSumFields        `json:"sum"`
	VarPop     *ViolationRegistrationVarPopFields     `json:"var_pop"`
	VarSamp    *ViolationRegistrationVarSampFields    `json:"var_samp"`
	Variance   *ViolationRegistrationVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "violation_registration"
type ViolationRegistrationAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'violation_registration'.
type ViolationRegistrationBoolExp struct {
	And                     []*ViolationRegistrationBoolExp `json:"_and"`
	Not                     *ViolationRegistrationBoolExp   `json:"_not"`
	Or                      []*ViolationRegistrationBoolExp `json:"_or"`
	ID                      *model.BigintComparisonExp      `json:"id"`
	ViolationRegistrationID *model.StringComparisonExp      `json:"violation_registration_id"`
	VehicleID               *model.StringComparisonExp      `json:"vehicle_id"`
	LicensePlateNumber      *model.StringComparisonExp      `json:"license_plate_number"`
	IDCardNum               *model.StringComparisonExp      `json:"id_card_num"`
	Name                    *model.StringComparisonExp      `json:"name"`
	Location                *model.StringComparisonExp      `json:"location"`
	Cause                   *model.StringComparisonExp      `json:"cause"`
	IllegalTime             *model.TimestamptzComparisonExp `json:"illegal_time"`
	Operator                *model.StringComparisonExp      `json:"operator"`
	IllegalArea             *model.StringComparisonExp      `json:"illegal_area"`
	IllegalCode             *model.StringComparisonExp      `json:"illegal_code"`
	VehicleArea             *model.StringComparisonExp      `json:"vehicle_area"`
	VehicleEnterprise       *model.StringComparisonExp      `json:"vehicle_enterprise"`
	ProvinceID              *model.StringComparisonExp      `json:"province_id"`
	CityID                  *model.StringComparisonExp      `json:"city_id"`
	DistrictID              *model.StringComparisonExp      `json:"district_id"`
	Supervisor              *model.StringComparisonExp      `json:"supervisor"`
	SupervisionTime         *model.StringComparisonExp      `json:"supervision_time"`
	SepervisionRemarks      *model.StringComparisonExp      `json:"sepervision_remarks"`
	IsSupervised            *model.StringComparisonExp      `json:"is_supervised"`
	IsAccident              *model.StringComparisonExp      `json:"is_accident"`
	IsDeleted               *model.BooleanComparisonExp     `json:"is_deleted"`
	CreatedAt               *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy               *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt               *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy               *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt               *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy               *model.StringComparisonExp      `json:"deleted_by"`
}

// input type for incrementing integer column in table "violation_registration"
type ViolationRegistrationIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "violation_registration"
type ViolationRegistrationInsertInput struct {
	VehicleID          *string    `json:"vehicle_id"`
	LicensePlateNumber *string    `json:"license_plate_number"`
	IDCardNum          *string    `json:"id_card_num"`
	Name               *string    `json:"name"`
	Location           *string    `json:"location"`
	Cause              *string    `json:"cause"`
	IllegalTime        *time.Time `json:"illegal_time"`
	Operator           *string    `json:"operator"`
	IllegalArea        *string    `json:"illegal_area"`
	IllegalCode        *string    `json:"illegal_code"`
	VehicleArea        *string    `json:"vehicle_area"`
	VehicleEnterprise  *string    `json:"vehicle_enterprise"`
	ProvinceID         *string    `json:"province_id"`
	CityID             *string    `json:"city_id"`
	DistrictID         *string    `json:"district_id"`
	Supervisor         *string    `json:"supervisor"`
	SupervisionTime    *string    `json:"supervision_time"`
	SepervisionRemarks *string    `json:"sepervision_remarks"`
	IsSupervised       *string    `json:"is_supervised"`
	IsAccident         *string    `json:"is_accident"`
	IsDeleted          *bool      `json:"is_deleted"`
	UpdatedAt          *time.Time `json:"updated_at"`
	UpdatedBy          *string    `json:"updated_by"`
	DeletedAt          *time.Time `json:"deleted_at"`
	DeletedBy          *string    `json:"deleted_by"`
}

// aggregate max on columns of table "violation_registration"
type ViolationRegistrationMaxFields struct {
	ID                      *int64     `json:"id"`
	ViolationRegistrationID *string    `json:"violation_registration_id"`
	VehicleID               *string    `json:"vehicle_id"`
	LicensePlateNumber      *string    `json:"license_plate_number"`
	IDCardNum               *string    `json:"id_card_num"`
	Name                    *string    `json:"name"`
	Location                *string    `json:"location"`
	Cause                   *string    `json:"cause"`
	IllegalTime             *time.Time `json:"illegal_time"`
	Operator                *string    `json:"operator"`
	IllegalArea             *string    `json:"illegal_area"`
	IllegalCode             *string    `json:"illegal_code"`
	VehicleArea             *string    `json:"vehicle_area"`
	VehicleEnterprise       *string    `json:"vehicle_enterprise"`
	ProvinceID              *string    `json:"province_id"`
	CityID                  *string    `json:"city_id"`
	DistrictID              *string    `json:"district_id"`
	Supervisor              *string    `json:"supervisor"`
	SupervisionTime         *string    `json:"supervision_time"`
	SepervisionRemarks      *string    `json:"sepervision_remarks"`
	IsSupervised            *string    `json:"is_supervised"`
	IsAccident              *string    `json:"is_accident"`
	IsDeleted               *bool      `json:"is_deleted"`
	CreatedAt               *time.Time `json:"created_at"`
	CreatedBy               *string    `json:"created_by"`
	UpdatedAt               *time.Time `json:"updated_at"`
	UpdatedBy               *string    `json:"updated_by"`
	DeletedAt               *time.Time `json:"deleted_at"`
	DeletedBy               *string    `json:"deleted_by"`
}

// aggregate min on columns of table "violation_registration"
type ViolationRegistrationMinFields struct {
	ID                      *int64     `json:"id"`
	ViolationRegistrationID *string    `json:"violation_registration_id"`
	VehicleID               *string    `json:"vehicle_id"`
	LicensePlateNumber      *string    `json:"license_plate_number"`
	IDCardNum               *string    `json:"id_card_num"`
	Name                    *string    `json:"name"`
	Location                *string    `json:"location"`
	Cause                   *string    `json:"cause"`
	IllegalTime             *time.Time `json:"illegal_time"`
	Operator                *string    `json:"operator"`
	IllegalArea             *string    `json:"illegal_area"`
	IllegalCode             *string    `json:"illegal_code"`
	VehicleArea             *string    `json:"vehicle_area"`
	VehicleEnterprise       *string    `json:"vehicle_enterprise"`
	ProvinceID              *string    `json:"province_id"`
	CityID                  *string    `json:"city_id"`
	DistrictID              *string    `json:"district_id"`
	Supervisor              *string    `json:"supervisor"`
	SupervisionTime         *string    `json:"supervision_time"`
	SepervisionRemarks      *string    `json:"sepervision_remarks"`
	IsSupervised            *string    `json:"is_supervised"`
	IsAccident              *string    `json:"is_accident"`
	IsDeleted               *bool      `json:"is_deleted"`
	CreatedAt               *time.Time `json:"created_at"`
	CreatedBy               *string    `json:"created_by"`
	UpdatedAt               *time.Time `json:"updated_at"`
	UpdatedBy               *string    `json:"updated_by"`
	DeletedAt               *time.Time `json:"deleted_at"`
	DeletedBy               *string    `json:"deleted_by"`
}

// response of any mutation on the table "violation_registration"
type ViolationRegistrationMutationResponse struct {
	AffectedRows int                             `json:"affected_rows"`
	Returning    []*model1.ViolationRegistration `json:"returning"`
}

// ordering options when selecting data from "violation_registration"
type ViolationRegistrationOrderBy struct {
	ID                      *model.OrderBy `json:"id"`
	ViolationRegistrationID *model.OrderBy `json:"violation_registration_id"`
	VehicleID               *model.OrderBy `json:"vehicle_id"`
	LicensePlateNumber      *model.OrderBy `json:"license_plate_number"`
	IDCardNum               *model.OrderBy `json:"id_card_num"`
	Name                    *model.OrderBy `json:"name"`
	Location                *model.OrderBy `json:"location"`
	Cause                   *model.OrderBy `json:"cause"`
	IllegalTime             *model.OrderBy `json:"illegal_time"`
	Operator                *model.OrderBy `json:"operator"`
	IllegalArea             *model.OrderBy `json:"illegal_area"`
	IllegalCode             *model.OrderBy `json:"illegal_code"`
	VehicleArea             *model.OrderBy `json:"vehicle_area"`
	VehicleEnterprise       *model.OrderBy `json:"vehicle_enterprise"`
	ProvinceID              *model.OrderBy `json:"province_id"`
	CityID                  *model.OrderBy `json:"city_id"`
	DistrictID              *model.OrderBy `json:"district_id"`
	Supervisor              *model.OrderBy `json:"supervisor"`
	SupervisionTime         *model.OrderBy `json:"supervision_time"`
	SepervisionRemarks      *model.OrderBy `json:"sepervision_remarks"`
	IsSupervised            *model.OrderBy `json:"is_supervised"`
	IsAccident              *model.OrderBy `json:"is_accident"`
	IsDeleted               *model.OrderBy `json:"is_deleted"`
	CreatedAt               *model.OrderBy `json:"created_at"`
	CreatedBy               *model.OrderBy `json:"created_by"`
	UpdatedAt               *model.OrderBy `json:"updated_at"`
	UpdatedBy               *model.OrderBy `json:"updated_by"`
	DeletedAt               *model.OrderBy `json:"deleted_at"`
	DeletedBy               *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "violation_registration"
type ViolationRegistrationSetInput struct {
	ID                      *int64     `json:"id"`
	ViolationRegistrationID *string    `json:"violation_registration_id"`
	VehicleID               *string    `json:"vehicle_id"`
	LicensePlateNumber      *string    `json:"license_plate_number"`
	IDCardNum               *string    `json:"id_card_num"`
	Name                    *string    `json:"name"`
	Location                *string    `json:"location"`
	Cause                   *string    `json:"cause"`
	IllegalTime             *time.Time `json:"illegal_time"`
	Operator                *string    `json:"operator"`
	IllegalArea             *string    `json:"illegal_area"`
	IllegalCode             *string    `json:"illegal_code"`
	VehicleArea             *string    `json:"vehicle_area"`
	VehicleEnterprise       *string    `json:"vehicle_enterprise"`
	ProvinceID              *string    `json:"province_id"`
	CityID                  *string    `json:"city_id"`
	DistrictID              *string    `json:"district_id"`
	Supervisor              *string    `json:"supervisor"`
	SupervisionTime         *string    `json:"supervision_time"`
	SepervisionRemarks      *string    `json:"sepervision_remarks"`
	IsSupervised            *string    `json:"is_supervised"`
	IsAccident              *string    `json:"is_accident"`
	IsDeleted               *bool      `json:"is_deleted"`
	CreatedAt               *time.Time `json:"created_at"`
	CreatedBy               *string    `json:"created_by"`
	UpdatedAt               *time.Time `json:"updated_at"`
	UpdatedBy               *string    `json:"updated_by"`
	DeletedAt               *time.Time `json:"deleted_at"`
	DeletedBy               *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "violation_registration"
type ViolationRegistrationStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "violation_registration"
type ViolationRegistrationStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "violation_registration"
type ViolationRegistrationStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "violation_registration"
type ViolationRegistrationSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "violation_registration"
type ViolationRegistrationVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "violation_registration"
type ViolationRegistrationVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "violation_registration"
type ViolationRegistrationVarianceFields struct {
	ID *int64 `json:"id"`
}

// 可选select
type AppEnforcementSelectColumn string

const (
	// 按指定方法生成                                               ( 主键                       )
	AppEnforcementSelectColumnID AppEnforcementSelectColumn = "id"
	// APP现场执法表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	AppEnforcementSelectColumnIllegalPhotoID AppEnforcementSelectColumn = "illegal_photo_id"
	// vehicle_info 车辆信息表 的vehicle_id
	AppEnforcementSelectColumnVehicleID AppEnforcementSelectColumn = "vehicle_id"
	// 操作用户                                                     ( system_user表的user_id )
	AppEnforcementSelectColumnOperationUser AppEnforcementSelectColumn = "operation_user"
	// 编辑文本
	AppEnforcementSelectColumnEditText AppEnforcementSelectColumn = "edit_text"
	// 空间数据类型point表示经度(longitude)和纬度(latitude)
	AppEnforcementSelectColumnCoordinate AppEnforcementSelectColumn = "coordinate"
	// 位置描述
	AppEnforcementSelectColumnLocationDescription AppEnforcementSelectColumn = "location_description"
	// 企业类型                                                     ( 企业类型字典           )
	AppEnforcementSelectColumnEnterpriseType AppEnforcementSelectColumn = "enterprise_type"
	// 纠察状态（1.反馈辖区管理 2.执法考评 3.其他 4.查处“两非”渣土车）
	AppEnforcementSelectColumnPicketStatus AppEnforcementSelectColumn = "picket_status"
	// 创建时间
	AppEnforcementSelectColumnCreatedAt AppEnforcementSelectColumn = "created_at"
	// 创建人                                                       ( system_user表的user_id )
	AppEnforcementSelectColumnCreatedBy AppEnforcementSelectColumn = "created_by"
	// 修改时间
	AppEnforcementSelectColumnUpdatedAt AppEnforcementSelectColumn = "updated_at"
	// 修改人                                                       ( system_user表的user_id )
	AppEnforcementSelectColumnUpdatedBy AppEnforcementSelectColumn = "updated_by"
	// 删除时间
	AppEnforcementSelectColumnDeletedAt AppEnforcementSelectColumn = "deleted_at"
	// 删除人                                                       ( system_user表的user_id )
	AppEnforcementSelectColumnDeletedBy AppEnforcementSelectColumn = "deleted_by"
)

var AllAppEnforcementSelectColumn = []AppEnforcementSelectColumn{
	AppEnforcementSelectColumnID,
	AppEnforcementSelectColumnIllegalPhotoID,
	AppEnforcementSelectColumnVehicleID,
	AppEnforcementSelectColumnOperationUser,
	AppEnforcementSelectColumnEditText,
	AppEnforcementSelectColumnCoordinate,
	AppEnforcementSelectColumnLocationDescription,
	AppEnforcementSelectColumnEnterpriseType,
	AppEnforcementSelectColumnPicketStatus,
	AppEnforcementSelectColumnCreatedAt,
	AppEnforcementSelectColumnCreatedBy,
	AppEnforcementSelectColumnUpdatedAt,
	AppEnforcementSelectColumnUpdatedBy,
	AppEnforcementSelectColumnDeletedAt,
	AppEnforcementSelectColumnDeletedBy,
}

func (e AppEnforcementSelectColumn) IsValid() bool {
	switch e {
	case AppEnforcementSelectColumnID, AppEnforcementSelectColumnIllegalPhotoID, AppEnforcementSelectColumnVehicleID, AppEnforcementSelectColumnOperationUser, AppEnforcementSelectColumnEditText, AppEnforcementSelectColumnCoordinate, AppEnforcementSelectColumnLocationDescription, AppEnforcementSelectColumnEnterpriseType, AppEnforcementSelectColumnPicketStatus, AppEnforcementSelectColumnCreatedAt, AppEnforcementSelectColumnCreatedBy, AppEnforcementSelectColumnUpdatedAt, AppEnforcementSelectColumnUpdatedBy, AppEnforcementSelectColumnDeletedAt, AppEnforcementSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e AppEnforcementSelectColumn) String() string {
	return string(e)
}

func (e *AppEnforcementSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppEnforcementSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppEnforcementSelectColumn", str)
	}
	return nil
}

func (e AppEnforcementSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type DeductionReportSelectColumn string

const (
	// 按指定方法生成                                  ( 主键                       )
	DeductionReportSelectColumnID DeductionReportSelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	DeductionReportSelectColumnDeductionReportID DeductionReportSelectColumn = "deduction_report_id"
	// 地区
	DeductionReportSelectColumnAreaID DeductionReportSelectColumn = "area_id"
	// 年份.月份  如2015.3
	DeductionReportSelectColumnDate DeductionReportSelectColumn = "date"
	// 扣分事由
	DeductionReportSelectColumnCause DeductionReportSelectColumn = "cause"
	// 录入人                                          ( system_user表的user_id )
	DeductionReportSelectColumnInputPerson DeductionReportSelectColumn = "input_person"
	// 录入时间
	DeductionReportSelectColumnInputTime DeductionReportSelectColumn = "input_time"
	// 扣分分值
	DeductionReportSelectColumnDemeritPoints DeductionReportSelectColumn = "demerit_points"
	// 创建时间
	DeductionReportSelectColumnCreatedAt DeductionReportSelectColumn = "created_at"
	// 创建人                                          ( system_user表的user_id )
	DeductionReportSelectColumnCreatedBy DeductionReportSelectColumn = "created_by"
	// 修改时间
	DeductionReportSelectColumnUpdatedAt DeductionReportSelectColumn = "updated_at"
	// 修改人                                          ( system_user表的user_id )
	DeductionReportSelectColumnUpdatedBy DeductionReportSelectColumn = "updated_by"
	// 删除时间
	DeductionReportSelectColumnDeletedAt DeductionReportSelectColumn = "deleted_at"
	// 删除人                                          ( system_user表的user_id )
	DeductionReportSelectColumnDeletedBy DeductionReportSelectColumn = "deleted_by"
)

var AllDeductionReportSelectColumn = []DeductionReportSelectColumn{
	DeductionReportSelectColumnID,
	DeductionReportSelectColumnDeductionReportID,
	DeductionReportSelectColumnAreaID,
	DeductionReportSelectColumnDate,
	DeductionReportSelectColumnCause,
	DeductionReportSelectColumnInputPerson,
	DeductionReportSelectColumnInputTime,
	DeductionReportSelectColumnDemeritPoints,
	DeductionReportSelectColumnCreatedAt,
	DeductionReportSelectColumnCreatedBy,
	DeductionReportSelectColumnUpdatedAt,
	DeductionReportSelectColumnUpdatedBy,
	DeductionReportSelectColumnDeletedAt,
	DeductionReportSelectColumnDeletedBy,
}

func (e DeductionReportSelectColumn) IsValid() bool {
	switch e {
	case DeductionReportSelectColumnID, DeductionReportSelectColumnDeductionReportID, DeductionReportSelectColumnAreaID, DeductionReportSelectColumnDate, DeductionReportSelectColumnCause, DeductionReportSelectColumnInputPerson, DeductionReportSelectColumnInputTime, DeductionReportSelectColumnDemeritPoints, DeductionReportSelectColumnCreatedAt, DeductionReportSelectColumnCreatedBy, DeductionReportSelectColumnUpdatedAt, DeductionReportSelectColumnUpdatedBy, DeductionReportSelectColumnDeletedAt, DeductionReportSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e DeductionReportSelectColumn) String() string {
	return string(e)
}

func (e *DeductionReportSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeductionReportSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeductionReportSelectColumn", str)
	}
	return nil
}

func (e DeductionReportSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type DriverPeccancyCheckSelectColumn string

const (
	// 按指定方法生成 ( 主键                                 )
	DriverPeccancyCheckSelectColumnID DriverPeccancyCheckSelectColumn = "id"
	// 违章车辆id     ( vehicle_info表的vehicle_id       )
	DriverPeccancyCheckSelectColumnVehicleID DriverPeccancyCheckSelectColumn = "vehicle_id"
	// 违章驾驶员id   ( driver_info表的driver_id         )
	DriverPeccancyCheckSelectColumnDriverID DriverPeccancyCheckSelectColumn = "driver_id"
	// 所在企业id     ( enterprise_info表的enterprise_id )
	DriverPeccancyCheckSelectColumnEnterpriseID DriverPeccancyCheckSelectColumn = "enterprise_id"
	// 创建时间
	DriverPeccancyCheckSelectColumnCreatedAt DriverPeccancyCheckSelectColumn = "created_at"
	// 创建人         ( system_user表的user_id           )
	DriverPeccancyCheckSelectColumnCreatedBy DriverPeccancyCheckSelectColumn = "created_by"
	// 修改时间
	DriverPeccancyCheckSelectColumnUpdatedAt DriverPeccancyCheckSelectColumn = "updated_at"
	// 修改人         ( system_user表的user_id           )
	DriverPeccancyCheckSelectColumnUpdatedBy DriverPeccancyCheckSelectColumn = "updated_by"
	// 删除时间
	DriverPeccancyCheckSelectColumnDeletedAt DriverPeccancyCheckSelectColumn = "deleted_at"
	// 删除人         ( system_user表的user_id           )
	DriverPeccancyCheckSelectColumnDeletedBy DriverPeccancyCheckSelectColumn = "deleted_by"
)

var AllDriverPeccancyCheckSelectColumn = []DriverPeccancyCheckSelectColumn{
	DriverPeccancyCheckSelectColumnID,
	DriverPeccancyCheckSelectColumnVehicleID,
	DriverPeccancyCheckSelectColumnDriverID,
	DriverPeccancyCheckSelectColumnEnterpriseID,
	DriverPeccancyCheckSelectColumnCreatedAt,
	DriverPeccancyCheckSelectColumnCreatedBy,
	DriverPeccancyCheckSelectColumnUpdatedAt,
	DriverPeccancyCheckSelectColumnUpdatedBy,
	DriverPeccancyCheckSelectColumnDeletedAt,
	DriverPeccancyCheckSelectColumnDeletedBy,
}

func (e DriverPeccancyCheckSelectColumn) IsValid() bool {
	switch e {
	case DriverPeccancyCheckSelectColumnID, DriverPeccancyCheckSelectColumnVehicleID, DriverPeccancyCheckSelectColumnDriverID, DriverPeccancyCheckSelectColumnEnterpriseID, DriverPeccancyCheckSelectColumnCreatedAt, DriverPeccancyCheckSelectColumnCreatedBy, DriverPeccancyCheckSelectColumnUpdatedAt, DriverPeccancyCheckSelectColumnUpdatedBy, DriverPeccancyCheckSelectColumnDeletedAt, DriverPeccancyCheckSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e DriverPeccancyCheckSelectColumn) String() string {
	return string(e)
}

func (e *DriverPeccancyCheckSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DriverPeccancyCheckSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DriverPeccancyCheckSelectColumn", str)
	}
	return nil
}

func (e DriverPeccancyCheckSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type IllegalPhotoSelectColumn string

const (
	// 按指定方法生成                                            ( 主键                       )
	IllegalPhotoSelectColumnID IllegalPhotoSelectColumn = "id"
	// 违法照片表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	IllegalPhotoSelectColumnIllegalPhotoID IllegalPhotoSelectColumn = "illegal_photo_id"
	// 违法照片名称
	IllegalPhotoSelectColumnPictureName IllegalPhotoSelectColumn = "picture_name"
	// 违法照片地址
	IllegalPhotoSelectColumnPictureAddress IllegalPhotoSelectColumn = "picture_address"
	// 是否同步                                                  ( false                      )
	IllegalPhotoSelectColumnIsSynchronized IllegalPhotoSelectColumn = "is_synchronized"
	// 是否删除                                                  ( false                      )
	IllegalPhotoSelectColumnIsDeleted IllegalPhotoSelectColumn = "is_deleted"
	// 创建时间
	IllegalPhotoSelectColumnCreatedAt IllegalPhotoSelectColumn = "created_at"
	// 创建人                                                    ( system_user表的user_id )
	IllegalPhotoSelectColumnCreatedBy IllegalPhotoSelectColumn = "created_by"
	// 修改时间
	IllegalPhotoSelectColumnUpdatedAt IllegalPhotoSelectColumn = "updated_at"
	// 修改人                                                    ( system_user表的user_id )
	IllegalPhotoSelectColumnUpdatedBy IllegalPhotoSelectColumn = "updated_by"
	// 删除时间
	IllegalPhotoSelectColumnDeletedAt IllegalPhotoSelectColumn = "deleted_at"
	// 删除人                                                    ( system_user表的user_id )
	IllegalPhotoSelectColumnDeletedBy IllegalPhotoSelectColumn = "deleted_by"
)

var AllIllegalPhotoSelectColumn = []IllegalPhotoSelectColumn{
	IllegalPhotoSelectColumnID,
	IllegalPhotoSelectColumnIllegalPhotoID,
	IllegalPhotoSelectColumnPictureName,
	IllegalPhotoSelectColumnPictureAddress,
	IllegalPhotoSelectColumnIsSynchronized,
	IllegalPhotoSelectColumnIsDeleted,
	IllegalPhotoSelectColumnCreatedAt,
	IllegalPhotoSelectColumnCreatedBy,
	IllegalPhotoSelectColumnUpdatedAt,
	IllegalPhotoSelectColumnUpdatedBy,
	IllegalPhotoSelectColumnDeletedAt,
	IllegalPhotoSelectColumnDeletedBy,
}

func (e IllegalPhotoSelectColumn) IsValid() bool {
	switch e {
	case IllegalPhotoSelectColumnID, IllegalPhotoSelectColumnIllegalPhotoID, IllegalPhotoSelectColumnPictureName, IllegalPhotoSelectColumnPictureAddress, IllegalPhotoSelectColumnIsSynchronized, IllegalPhotoSelectColumnIsDeleted, IllegalPhotoSelectColumnCreatedAt, IllegalPhotoSelectColumnCreatedBy, IllegalPhotoSelectColumnUpdatedAt, IllegalPhotoSelectColumnUpdatedBy, IllegalPhotoSelectColumnDeletedAt, IllegalPhotoSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e IllegalPhotoSelectColumn) String() string {
	return string(e)
}

func (e *IllegalPhotoSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IllegalPhotoSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IllegalPhotoSelectColumn", str)
	}
	return nil
}

func (e IllegalPhotoSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type RegionalViolationRegisterSelectColumn string

const (
	// 按指定方法生成                                               ( 主键                                               )
	RegionalViolationRegisterSelectColumnID RegionalViolationRegisterSelectColumn = "id"
	// 区域处理机关交通违法违规登记表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                           )
	RegionalViolationRegisterSelectColumnRegionalViolationRegisterID RegionalViolationRegisterSelectColumn = "regional_violation_register_id"
	// 违法记录表ID                                                 ( vehicle_violation_details的violation_detail_id )
	RegionalViolationRegisterSelectColumnViolationDetailID RegionalViolationRegisterSelectColumn = "violation_detail_id"
	// 违章车辆id                                                   ( vehicle_info表的vehicle_id                     )
	RegionalViolationRegisterSelectColumnVehicleID RegionalViolationRegisterSelectColumn = "vehicle_id"
	// 驾驶员id                                                     ( driver_info 表的driver_id                      )
	RegionalViolationRegisterSelectColumnDriverID RegionalViolationRegisterSelectColumn = "driver_id"
	// 违法代码                                                     ( VIO_CODEWFDM 违法描述字典表                    )
	RegionalViolationRegisterSelectColumnIllegalCode RegionalViolationRegisterSelectColumn = "illegal_code"
	// 违法时间
	RegionalViolationRegisterSelectColumnIllegalTime RegionalViolationRegisterSelectColumn = "illegal_time"
	// 类型(1车辆2驾驶员)                                           ( 违法类型字典表                                 )
	RegionalViolationRegisterSelectColumnIllegalType RegionalViolationRegisterSelectColumn = "illegal_type"
	// 登记时间
	RegionalViolationRegisterSelectColumnRegisterTime RegionalViolationRegisterSelectColumn = "register_time"
	// 处理机关
	RegionalViolationRegisterSelectColumnProcessingAgency RegionalViolationRegisterSelectColumn = "processing_agency"
	// 操作员                                                       ( system_user表的user_id                         )
	RegionalViolationRegisterSelectColumnOperator RegionalViolationRegisterSelectColumn = "operator"
	// 类型(false未登记true已登记)                                  ( fase                                               )
	RegionalViolationRegisterSelectColumnIsRegister RegionalViolationRegisterSelectColumn = "is_register"
	// 创建时间
	RegionalViolationRegisterSelectColumnCreatedAt RegionalViolationRegisterSelectColumn = "created_at"
	// 创建人                                                       ( system_user表的user_id                         )
	RegionalViolationRegisterSelectColumnCreatedBy RegionalViolationRegisterSelectColumn = "created_by"
	// 修改时间
	RegionalViolationRegisterSelectColumnUpdatedAt RegionalViolationRegisterSelectColumn = "updated_at"
	// 修改人                                                       ( system_user表的user_id                         )
	RegionalViolationRegisterSelectColumnUpdatedBy RegionalViolationRegisterSelectColumn = "updated_by"
	// 删除时间
	RegionalViolationRegisterSelectColumnDeletedAt RegionalViolationRegisterSelectColumn = "deleted_at"
	// 删除人                                                       ( system_user表的user_id                         )
	RegionalViolationRegisterSelectColumnDeletedBy RegionalViolationRegisterSelectColumn = "deleted_by"
	// 是否删除
	RegionalViolationRegisterSelectColumnIsDeleted RegionalViolationRegisterSelectColumn = "is_deleted"
)

var AllRegionalViolationRegisterSelectColumn = []RegionalViolationRegisterSelectColumn{
	RegionalViolationRegisterSelectColumnID,
	RegionalViolationRegisterSelectColumnRegionalViolationRegisterID,
	RegionalViolationRegisterSelectColumnViolationDetailID,
	RegionalViolationRegisterSelectColumnVehicleID,
	RegionalViolationRegisterSelectColumnDriverID,
	RegionalViolationRegisterSelectColumnIllegalCode,
	RegionalViolationRegisterSelectColumnIllegalTime,
	RegionalViolationRegisterSelectColumnIllegalType,
	RegionalViolationRegisterSelectColumnRegisterTime,
	RegionalViolationRegisterSelectColumnProcessingAgency,
	RegionalViolationRegisterSelectColumnOperator,
	RegionalViolationRegisterSelectColumnIsRegister,
	RegionalViolationRegisterSelectColumnCreatedAt,
	RegionalViolationRegisterSelectColumnCreatedBy,
	RegionalViolationRegisterSelectColumnUpdatedAt,
	RegionalViolationRegisterSelectColumnUpdatedBy,
	RegionalViolationRegisterSelectColumnDeletedAt,
	RegionalViolationRegisterSelectColumnDeletedBy,
	RegionalViolationRegisterSelectColumnIsDeleted,
}

func (e RegionalViolationRegisterSelectColumn) IsValid() bool {
	switch e {
	case RegionalViolationRegisterSelectColumnID, RegionalViolationRegisterSelectColumnRegionalViolationRegisterID, RegionalViolationRegisterSelectColumnViolationDetailID, RegionalViolationRegisterSelectColumnVehicleID, RegionalViolationRegisterSelectColumnDriverID, RegionalViolationRegisterSelectColumnIllegalCode, RegionalViolationRegisterSelectColumnIllegalTime, RegionalViolationRegisterSelectColumnIllegalType, RegionalViolationRegisterSelectColumnRegisterTime, RegionalViolationRegisterSelectColumnProcessingAgency, RegionalViolationRegisterSelectColumnOperator, RegionalViolationRegisterSelectColumnIsRegister, RegionalViolationRegisterSelectColumnCreatedAt, RegionalViolationRegisterSelectColumnCreatedBy, RegionalViolationRegisterSelectColumnUpdatedAt, RegionalViolationRegisterSelectColumnUpdatedBy, RegionalViolationRegisterSelectColumnDeletedAt, RegionalViolationRegisterSelectColumnDeletedBy, RegionalViolationRegisterSelectColumnIsDeleted:
		return true
	}
	return false
}

func (e RegionalViolationRegisterSelectColumn) String() string {
	return string(e)
}

func (e *RegionalViolationRegisterSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RegionalViolationRegisterSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RegionalViolationRegisterSelectColumn", str)
	}
	return nil
}

func (e RegionalViolationRegisterSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type SeriousTrafficViolationSelectColumn string

const (
	// 按指定方法生成                                  ( 主键                            )
	SeriousTrafficViolationSelectColumnID SeriousTrafficViolationSelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                        )
	SeriousTrafficViolationSelectColumnSeriousTrafficViolationID SeriousTrafficViolationSelectColumn = "serious_traffic_violation_id"
	// 违章车辆id                                      ( vehicle_info表的vehicle_id  )
	SeriousTrafficViolationSelectColumnVehicleID SeriousTrafficViolationSelectColumn = "vehicle_id"
	// 违法代码                                        ( VIO_CODEWFDM 违法描述字典表 )
	SeriousTrafficViolationSelectColumnIllegalCode SeriousTrafficViolationSelectColumn = "illegal_code"
	// 违法日期
	SeriousTrafficViolationSelectColumnIllegalTime SeriousTrafficViolationSelectColumn = "illegal_time"
	// 创建时间
	SeriousTrafficViolationSelectColumnCreatedAt SeriousTrafficViolationSelectColumn = "created_at"
	// 创建人                                          ( system_user表的user_id      )
	SeriousTrafficViolationSelectColumnCreatedBy SeriousTrafficViolationSelectColumn = "created_by"
	// 修改时间
	SeriousTrafficViolationSelectColumnUpdatedAt SeriousTrafficViolationSelectColumn = "updated_at"
	// 修改人                                          ( system_user表的user_id      )
	SeriousTrafficViolationSelectColumnUpdatedBy SeriousTrafficViolationSelectColumn = "updated_by"
	// 删除时间
	SeriousTrafficViolationSelectColumnDeletedAt SeriousTrafficViolationSelectColumn = "deleted_at"
	// 删除人                                          ( system_user表的user_id      )
	SeriousTrafficViolationSelectColumnDeletedBy SeriousTrafficViolationSelectColumn = "deleted_by"
)

var AllSeriousTrafficViolationSelectColumn = []SeriousTrafficViolationSelectColumn{
	SeriousTrafficViolationSelectColumnID,
	SeriousTrafficViolationSelectColumnSeriousTrafficViolationID,
	SeriousTrafficViolationSelectColumnVehicleID,
	SeriousTrafficViolationSelectColumnIllegalCode,
	SeriousTrafficViolationSelectColumnIllegalTime,
	SeriousTrafficViolationSelectColumnCreatedAt,
	SeriousTrafficViolationSelectColumnCreatedBy,
	SeriousTrafficViolationSelectColumnUpdatedAt,
	SeriousTrafficViolationSelectColumnUpdatedBy,
	SeriousTrafficViolationSelectColumnDeletedAt,
	SeriousTrafficViolationSelectColumnDeletedBy,
}

func (e SeriousTrafficViolationSelectColumn) IsValid() bool {
	switch e {
	case SeriousTrafficViolationSelectColumnID, SeriousTrafficViolationSelectColumnSeriousTrafficViolationID, SeriousTrafficViolationSelectColumnVehicleID, SeriousTrafficViolationSelectColumnIllegalCode, SeriousTrafficViolationSelectColumnIllegalTime, SeriousTrafficViolationSelectColumnCreatedAt, SeriousTrafficViolationSelectColumnCreatedBy, SeriousTrafficViolationSelectColumnUpdatedAt, SeriousTrafficViolationSelectColumnUpdatedBy, SeriousTrafficViolationSelectColumnDeletedAt, SeriousTrafficViolationSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e SeriousTrafficViolationSelectColumn) String() string {
	return string(e)
}

func (e *SeriousTrafficViolationSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SeriousTrafficViolationSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SeriousTrafficViolationSelectColumn", str)
	}
	return nil
}

func (e SeriousTrafficViolationSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type VehicleViolationDetailsSelectColumn string

const (
	// 按指定方法生成                                              ( 主键                                                         )
	VehicleViolationDetailsSelectColumnID VehicleViolationDetailsSelectColumn = "id"
	// 车辆违章明细外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                     )
	VehicleViolationDetailsSelectColumnViolationDetailID VehicleViolationDetailsSelectColumn = "violation_detail_id"
	// 违章车辆id                                                  ( vehicle_info表的vehicle_id                               )
	VehicleViolationDetailsSelectColumnVehicleID VehicleViolationDetailsSelectColumn = "vehicle_id"
	// 违章驾驶员id                                                ( driver_info表的driver_id                                 )
	VehicleViolationDetailsSelectColumnDriverID VehicleViolationDetailsSelectColumn = "driver_id"
	// 所在企业id                                                  ( enterprise_info表的enterprise_id                         )
	VehicleViolationDetailsSelectColumnEnterpriseID VehicleViolationDetailsSelectColumn = "enterprise_id"
	// 违法代码                                                    ( VIO_CODEWFDM 违法描述字典表                              )
	VehicleViolationDetailsSelectColumnIllegalCode VehicleViolationDetailsSelectColumn = "illegal_code"
	// 违法时间
	VehicleViolationDetailsSelectColumnIllegalTime VehicleViolationDetailsSelectColumn = "illegal_time"
	// 违法处理状态                                                ( 车辆违法处理状态字典                                     )
	VehicleViolationDetailsSelectColumnIllegalHandlingStatus VehicleViolationDetailsSelectColumn = "illegal_handling_status"
	// 违法地点
	VehicleViolationDetailsSelectColumnIllegalLocation VehicleViolationDetailsSelectColumn = "illegal_location"
	// 标准值                                                      ( 路段的限速阈值或核载的人数，根据违法的种类不同而不同。       )
	VehicleViolationDetailsSelectColumnStandardValue VehicleViolationDetailsSelectColumn = "standard_value"
	// 实测值                                                      ( 车辆实际行驶的车速或实际载的人数，根据违法的种类不同而不同。 )
	VehicleViolationDetailsSelectColumnMeasuredValue VehicleViolationDetailsSelectColumn = "measured_value"
	// 发现机构
	VehicleViolationDetailsSelectColumnDiscoveryAgency VehicleViolationDetailsSelectColumn = "discovery_agency"
	// 违法照片
	VehicleViolationDetailsSelectColumnIllegalPhoto VehicleViolationDetailsSelectColumn = "illegal_photo"
	// 是否通知驾驶员
	VehicleViolationDetailsSelectColumnIsNoticeDriver VehicleViolationDetailsSelectColumn = "is_notice_driver"
	// 通知时间
	VehicleViolationDetailsSelectColumnNoticeTime VehicleViolationDetailsSelectColumn = "notice_time"
	// 决定书号
	VehicleViolationDetailsSelectColumnDecisionNumber VehicleViolationDetailsSelectColumn = "decision_number"
	// 缴款标记                                                    ( 是否缴款字典                                             )
	VehicleViolationDetailsSelectColumnPaymentMark VehicleViolationDetailsSelectColumn = "payment_mark"
	// 当事人姓名
	VehicleViolationDetailsSelectColumnPartyName VehicleViolationDetailsSelectColumn = "party_name"
	// 信息来源：1，强制，2，非现场，0，简易                       ( 信息来源字典表                                           )
	VehicleViolationDetailsSelectColumnInformationSource VehicleViolationDetailsSelectColumn = "information_source"
	// 驾驶人处理的交通违法记录对应的机动车信息
	VehicleViolationDetailsSelectColumnVehicleInformation VehicleViolationDetailsSelectColumn = "vehicle_information"
	// 内网更新时间
	VehicleViolationDetailsSelectColumnUpdateTimeIn VehicleViolationDetailsSelectColumn = "update_time_in"
	// 是否处理
	VehicleViolationDetailsSelectColumnIsHandle VehicleViolationDetailsSelectColumn = "is_handle"
	// 处理人                                                      ( system_user表的user_id                                   )
	VehicleViolationDetailsSelectColumnHandleBy VehicleViolationDetailsSelectColumn = "handle_by"
	// 处理时间
	VehicleViolationDetailsSelectColumnHandleAt VehicleViolationDetailsSelectColumn = "handle_at"
	// 是否发送短信
	VehicleViolationDetailsSelectColumnIsSend VehicleViolationDetailsSelectColumn = "is_send"
	// 是否删除
	VehicleViolationDetailsSelectColumnIsDeleted VehicleViolationDetailsSelectColumn = "is_deleted"
	// 创建时间
	VehicleViolationDetailsSelectColumnCreatedAt VehicleViolationDetailsSelectColumn = "created_at"
	// 创建人                                                      ( system_user表的user_id                                   )
	VehicleViolationDetailsSelectColumnCreatedBy VehicleViolationDetailsSelectColumn = "created_by"
	// 修改时间
	VehicleViolationDetailsSelectColumnUpdatedAt VehicleViolationDetailsSelectColumn = "updated_at"
	// 修改人                                                      ( system_user表的user_id                                   )
	VehicleViolationDetailsSelectColumnUpdatedBy VehicleViolationDetailsSelectColumn = "updated_by"
	// 删除时间
	VehicleViolationDetailsSelectColumnDeletedAt VehicleViolationDetailsSelectColumn = "deleted_at"
	// 删除人                                                      ( system_user表的user_id                                   )
	VehicleViolationDetailsSelectColumnDeletedBy VehicleViolationDetailsSelectColumn = "deleted_by"
)

var AllVehicleViolationDetailsSelectColumn = []VehicleViolationDetailsSelectColumn{
	VehicleViolationDetailsSelectColumnID,
	VehicleViolationDetailsSelectColumnViolationDetailID,
	VehicleViolationDetailsSelectColumnVehicleID,
	VehicleViolationDetailsSelectColumnDriverID,
	VehicleViolationDetailsSelectColumnEnterpriseID,
	VehicleViolationDetailsSelectColumnIllegalCode,
	VehicleViolationDetailsSelectColumnIllegalTime,
	VehicleViolationDetailsSelectColumnIllegalHandlingStatus,
	VehicleViolationDetailsSelectColumnIllegalLocation,
	VehicleViolationDetailsSelectColumnStandardValue,
	VehicleViolationDetailsSelectColumnMeasuredValue,
	VehicleViolationDetailsSelectColumnDiscoveryAgency,
	VehicleViolationDetailsSelectColumnIllegalPhoto,
	VehicleViolationDetailsSelectColumnIsNoticeDriver,
	VehicleViolationDetailsSelectColumnNoticeTime,
	VehicleViolationDetailsSelectColumnDecisionNumber,
	VehicleViolationDetailsSelectColumnPaymentMark,
	VehicleViolationDetailsSelectColumnPartyName,
	VehicleViolationDetailsSelectColumnInformationSource,
	VehicleViolationDetailsSelectColumnVehicleInformation,
	VehicleViolationDetailsSelectColumnUpdateTimeIn,
	VehicleViolationDetailsSelectColumnIsHandle,
	VehicleViolationDetailsSelectColumnHandleBy,
	VehicleViolationDetailsSelectColumnHandleAt,
	VehicleViolationDetailsSelectColumnIsSend,
	VehicleViolationDetailsSelectColumnIsDeleted,
	VehicleViolationDetailsSelectColumnCreatedAt,
	VehicleViolationDetailsSelectColumnCreatedBy,
	VehicleViolationDetailsSelectColumnUpdatedAt,
	VehicleViolationDetailsSelectColumnUpdatedBy,
	VehicleViolationDetailsSelectColumnDeletedAt,
	VehicleViolationDetailsSelectColumnDeletedBy,
}

func (e VehicleViolationDetailsSelectColumn) IsValid() bool {
	switch e {
	case VehicleViolationDetailsSelectColumnID, VehicleViolationDetailsSelectColumnViolationDetailID, VehicleViolationDetailsSelectColumnVehicleID, VehicleViolationDetailsSelectColumnDriverID, VehicleViolationDetailsSelectColumnEnterpriseID, VehicleViolationDetailsSelectColumnIllegalCode, VehicleViolationDetailsSelectColumnIllegalTime, VehicleViolationDetailsSelectColumnIllegalHandlingStatus, VehicleViolationDetailsSelectColumnIllegalLocation, VehicleViolationDetailsSelectColumnStandardValue, VehicleViolationDetailsSelectColumnMeasuredValue, VehicleViolationDetailsSelectColumnDiscoveryAgency, VehicleViolationDetailsSelectColumnIllegalPhoto, VehicleViolationDetailsSelectColumnIsNoticeDriver, VehicleViolationDetailsSelectColumnNoticeTime, VehicleViolationDetailsSelectColumnDecisionNumber, VehicleViolationDetailsSelectColumnPaymentMark, VehicleViolationDetailsSelectColumnPartyName, VehicleViolationDetailsSelectColumnInformationSource, VehicleViolationDetailsSelectColumnVehicleInformation, VehicleViolationDetailsSelectColumnUpdateTimeIn, VehicleViolationDetailsSelectColumnIsHandle, VehicleViolationDetailsSelectColumnHandleBy, VehicleViolationDetailsSelectColumnHandleAt, VehicleViolationDetailsSelectColumnIsSend, VehicleViolationDetailsSelectColumnIsDeleted, VehicleViolationDetailsSelectColumnCreatedAt, VehicleViolationDetailsSelectColumnCreatedBy, VehicleViolationDetailsSelectColumnUpdatedAt, VehicleViolationDetailsSelectColumnUpdatedBy, VehicleViolationDetailsSelectColumnDeletedAt, VehicleViolationDetailsSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e VehicleViolationDetailsSelectColumn) String() string {
	return string(e)
}

func (e *VehicleViolationDetailsSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleViolationDetailsSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehicleViolationDetailsSelectColumn", str)
	}
	return nil
}

func (e VehicleViolationDetailsSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type VehicleViolationScoringItemsSelectColumn string

const (
	// 按指定方法生成                                               ( 主键                       )
	VehicleViolationScoringItemsSelectColumnID VehicleViolationScoringItemsSelectColumn = "id"
	// 车辆违规计分项表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	VehicleViolationScoringItemsSelectColumnViolationScoringItemID VehicleViolationScoringItemsSelectColumn = "violation_scoring_item_id"
	// 扣分事项描述
	VehicleViolationScoringItemsSelectColumnDeductionItemDescription VehicleViolationScoringItemsSelectColumn = "deduction_item_description"
	// 扣分事项类别                                                 ( 车辆评分扣分类别字典   )
	VehicleViolationScoringItemsSelectColumnDeductionCategory VehicleViolationScoringItemsSelectColumn = "deduction_category"
	// 扣分分值
	VehicleViolationScoringItemsSelectColumnDemeritPoints VehicleViolationScoringItemsSelectColumn = "demerit_points"
	// 是否删除
	VehicleViolationScoringItemsSelectColumnIsDeleted VehicleViolationScoringItemsSelectColumn = "is_deleted"
	// 创建时间
	VehicleViolationScoringItemsSelectColumnCreatedAt VehicleViolationScoringItemsSelectColumn = "created_at"
	// 创建人                                                       ( system_user表的user_id )
	VehicleViolationScoringItemsSelectColumnCreatedBy VehicleViolationScoringItemsSelectColumn = "created_by"
	// 修改时间
	VehicleViolationScoringItemsSelectColumnUpdatedAt VehicleViolationScoringItemsSelectColumn = "updated_at"
	// 修改人                                                       ( system_user表的user_id )
	VehicleViolationScoringItemsSelectColumnUpdatedBy VehicleViolationScoringItemsSelectColumn = "updated_by"
	// 删除时间
	VehicleViolationScoringItemsSelectColumnDeletedAt VehicleViolationScoringItemsSelectColumn = "deleted_at"
	// 删除人                                                       ( system_user表的user_id )
	VehicleViolationScoringItemsSelectColumnDeletedBy VehicleViolationScoringItemsSelectColumn = "deleted_by"
)

var AllVehicleViolationScoringItemsSelectColumn = []VehicleViolationScoringItemsSelectColumn{
	VehicleViolationScoringItemsSelectColumnID,
	VehicleViolationScoringItemsSelectColumnViolationScoringItemID,
	VehicleViolationScoringItemsSelectColumnDeductionItemDescription,
	VehicleViolationScoringItemsSelectColumnDeductionCategory,
	VehicleViolationScoringItemsSelectColumnDemeritPoints,
	VehicleViolationScoringItemsSelectColumnIsDeleted,
	VehicleViolationScoringItemsSelectColumnCreatedAt,
	VehicleViolationScoringItemsSelectColumnCreatedBy,
	VehicleViolationScoringItemsSelectColumnUpdatedAt,
	VehicleViolationScoringItemsSelectColumnUpdatedBy,
	VehicleViolationScoringItemsSelectColumnDeletedAt,
	VehicleViolationScoringItemsSelectColumnDeletedBy,
}

func (e VehicleViolationScoringItemsSelectColumn) IsValid() bool {
	switch e {
	case VehicleViolationScoringItemsSelectColumnID, VehicleViolationScoringItemsSelectColumnViolationScoringItemID, VehicleViolationScoringItemsSelectColumnDeductionItemDescription, VehicleViolationScoringItemsSelectColumnDeductionCategory, VehicleViolationScoringItemsSelectColumnDemeritPoints, VehicleViolationScoringItemsSelectColumnIsDeleted, VehicleViolationScoringItemsSelectColumnCreatedAt, VehicleViolationScoringItemsSelectColumnCreatedBy, VehicleViolationScoringItemsSelectColumnUpdatedAt, VehicleViolationScoringItemsSelectColumnUpdatedBy, VehicleViolationScoringItemsSelectColumnDeletedAt, VehicleViolationScoringItemsSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e VehicleViolationScoringItemsSelectColumn) String() string {
	return string(e)
}

func (e *VehicleViolationScoringItemsSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleViolationScoringItemsSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehicleViolationScoringItemsSelectColumn", str)
	}
	return nil
}

func (e VehicleViolationScoringItemsSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type VehicleViolationScoringRecordSelectColumn string

const (
	// 按指定方法生成                                               ( 主键                                                         )
	VehicleViolationScoringRecordSelectColumnID VehicleViolationScoringRecordSelectColumn = "id"
	// 车辆违规计分记录外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                     )
	VehicleViolationScoringRecordSelectColumnViolationScoringID VehicleViolationScoringRecordSelectColumn = "violation_scoring_id"
	// 扣分车辆id                                                   ( vehicle_info表的vehicle_id                               )
	VehicleViolationScoringRecordSelectColumnVehicleID VehicleViolationScoringRecordSelectColumn = "vehicle_id"
	// 扣分明细id                                                   ( vehicle_violation_scoring_ items表的violation_scoring_item_id )
	VehicleViolationScoringRecordSelectColumnViolationScoringItemID VehicleViolationScoringRecordSelectColumn = "violation_scoring_item_id"
	// 扣分分值
	VehicleViolationScoringRecordSelectColumnDemeritPoints VehicleViolationScoringRecordSelectColumn = "demerit_points"
	// 备注
	VehicleViolationScoringRecordSelectColumnRemarks VehicleViolationScoringRecordSelectColumn = "remarks"
	// 是否删除
	VehicleViolationScoringRecordSelectColumnIsDeleted VehicleViolationScoringRecordSelectColumn = "is_deleted"
	// 创建时间
	VehicleViolationScoringRecordSelectColumnCreatedAt VehicleViolationScoringRecordSelectColumn = "created_at"
	// 创建人                                                       ( system_user表的user_id                                   )
	VehicleViolationScoringRecordSelectColumnCreatedBy VehicleViolationScoringRecordSelectColumn = "created_by"
	// 修改时间
	VehicleViolationScoringRecordSelectColumnUpdatedAt VehicleViolationScoringRecordSelectColumn = "updated_at"
	// 修改人                                                       ( system_user表的user_id                                   )
	VehicleViolationScoringRecordSelectColumnUpdatedBy VehicleViolationScoringRecordSelectColumn = "updated_by"
	// 删除时间
	VehicleViolationScoringRecordSelectColumnDeletedAt VehicleViolationScoringRecordSelectColumn = "deleted_at"
	// 删除人                                                       ( system_user表的user_id                                   )
	VehicleViolationScoringRecordSelectColumnDeletedBy VehicleViolationScoringRecordSelectColumn = "deleted_by"
)

var AllVehicleViolationScoringRecordSelectColumn = []VehicleViolationScoringRecordSelectColumn{
	VehicleViolationScoringRecordSelectColumnID,
	VehicleViolationScoringRecordSelectColumnViolationScoringID,
	VehicleViolationScoringRecordSelectColumnVehicleID,
	VehicleViolationScoringRecordSelectColumnViolationScoringItemID,
	VehicleViolationScoringRecordSelectColumnDemeritPoints,
	VehicleViolationScoringRecordSelectColumnRemarks,
	VehicleViolationScoringRecordSelectColumnIsDeleted,
	VehicleViolationScoringRecordSelectColumnCreatedAt,
	VehicleViolationScoringRecordSelectColumnCreatedBy,
	VehicleViolationScoringRecordSelectColumnUpdatedAt,
	VehicleViolationScoringRecordSelectColumnUpdatedBy,
	VehicleViolationScoringRecordSelectColumnDeletedAt,
	VehicleViolationScoringRecordSelectColumnDeletedBy,
}

func (e VehicleViolationScoringRecordSelectColumn) IsValid() bool {
	switch e {
	case VehicleViolationScoringRecordSelectColumnID, VehicleViolationScoringRecordSelectColumnViolationScoringID, VehicleViolationScoringRecordSelectColumnVehicleID, VehicleViolationScoringRecordSelectColumnViolationScoringItemID, VehicleViolationScoringRecordSelectColumnDemeritPoints, VehicleViolationScoringRecordSelectColumnRemarks, VehicleViolationScoringRecordSelectColumnIsDeleted, VehicleViolationScoringRecordSelectColumnCreatedAt, VehicleViolationScoringRecordSelectColumnCreatedBy, VehicleViolationScoringRecordSelectColumnUpdatedAt, VehicleViolationScoringRecordSelectColumnUpdatedBy, VehicleViolationScoringRecordSelectColumnDeletedAt, VehicleViolationScoringRecordSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e VehicleViolationScoringRecordSelectColumn) String() string {
	return string(e)
}

func (e *VehicleViolationScoringRecordSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleViolationScoringRecordSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehicleViolationScoringRecordSelectColumn", str)
	}
	return nil
}

func (e VehicleViolationScoringRecordSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type VioCodewfdmSelectColumn string

const (
	// 违法行为
	VioCodewfdmSelectColumnWfxw VioCodewfdmSelectColumn = "wfxw"
	// 违法描述
	VioCodewfdmSelectColumnWfms VioCodewfdmSelectColumn = "wfms"
	// 违法计分数
	VioCodewfdmSelectColumnWfjfs VioCodewfdmSelectColumn = "wfjfs"
	// 最小罚款金额
	VioCodewfdmSelectColumnFkjeMin VioCodewfdmSelectColumn = "fkje_min"
	// 最大罚款金额
	VioCodewfdmSelectColumnFkjeMax VioCodewfdmSelectColumn = "fkje_max"
	// 序号
	VioCodewfdmSelectColumnXh VioCodewfdmSelectColumn = "xh"
)

var AllVioCodewfdmSelectColumn = []VioCodewfdmSelectColumn{
	VioCodewfdmSelectColumnWfxw,
	VioCodewfdmSelectColumnWfms,
	VioCodewfdmSelectColumnWfjfs,
	VioCodewfdmSelectColumnFkjeMin,
	VioCodewfdmSelectColumnFkjeMax,
	VioCodewfdmSelectColumnXh,
}

func (e VioCodewfdmSelectColumn) IsValid() bool {
	switch e {
	case VioCodewfdmSelectColumnWfxw, VioCodewfdmSelectColumnWfms, VioCodewfdmSelectColumnWfjfs, VioCodewfdmSelectColumnFkjeMin, VioCodewfdmSelectColumnFkjeMax, VioCodewfdmSelectColumnXh:
		return true
	}
	return false
}

func (e VioCodewfdmSelectColumn) String() string {
	return string(e)
}

func (e *VioCodewfdmSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VioCodewfdmSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VioCodewfdmSelectColumn", str)
	}
	return nil
}

func (e VioCodewfdmSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type ViolationRegistrationSelectColumn string

const (
	// 按指定方法生成                                  ( 主键                           )
	ViolationRegistrationSelectColumnID ViolationRegistrationSelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                       )
	ViolationRegistrationSelectColumnViolationRegistrationID ViolationRegistrationSelectColumn = "violation_registration_id"
	// 违章车辆id                                      ( vehicle_info表的vehicle_id )
	ViolationRegistrationSelectColumnVehicleID ViolationRegistrationSelectColumn = "vehicle_id"
	// 车牌号
	ViolationRegistrationSelectColumnLicensePlateNumber ViolationRegistrationSelectColumn = "license_plate_number"
	// 码身份证号
	ViolationRegistrationSelectColumnIDCardNum ViolationRegistrationSelectColumn = "id_card_num"
	// 姓名
	ViolationRegistrationSelectColumnName ViolationRegistrationSelectColumn = "name"
	// 地点
	ViolationRegistrationSelectColumnLocation ViolationRegistrationSelectColumn = "location"
	// 原因
	ViolationRegistrationSelectColumnCause ViolationRegistrationSelectColumn = "cause"
	// 违法时间
	ViolationRegistrationSelectColumnIllegalTime ViolationRegistrationSelectColumn = "illegal_time"
	// 操作人                                          ( system_user表的user_id     )
	ViolationRegistrationSelectColumnOperator ViolationRegistrationSelectColumn = "operator"
	// 违法地区
	ViolationRegistrationSelectColumnIllegalArea ViolationRegistrationSelectColumn = "illegal_area"
	// 违法代码
	ViolationRegistrationSelectColumnIllegalCode ViolationRegistrationSelectColumn = "illegal_code"
	// 车辆所属地区
	ViolationRegistrationSelectColumnVehicleArea ViolationRegistrationSelectColumn = "vehicle_area"
	// 车辆所属单位
	ViolationRegistrationSelectColumnVehicleEnterprise ViolationRegistrationSelectColumn = "vehicle_enterprise"
	// 所在省                                          ( 省份表province_id          )
	ViolationRegistrationSelectColumnProvinceID ViolationRegistrationSelectColumn = "province_id"
	// 所在市                                          ( 城市表city_id              )
	ViolationRegistrationSelectColumnCityID ViolationRegistrationSelectColumn = "city_id"
	// 所在县                                          ( 区域表district_id          )
	ViolationRegistrationSelectColumnDistrictID ViolationRegistrationSelectColumn = "district_id"
	// 监管人
	ViolationRegistrationSelectColumnSupervisor ViolationRegistrationSelectColumn = "supervisor"
	// 监管时间
	ViolationRegistrationSelectColumnSupervisionTime ViolationRegistrationSelectColumn = "supervision_time"
	// 监管备注
	ViolationRegistrationSelectColumnSepervisionRemarks ViolationRegistrationSelectColumn = "sepervision_remarks"
	// 是否监管
	ViolationRegistrationSelectColumnIsSupervised ViolationRegistrationSelectColumn = "is_supervised"
	// 是否事故
	ViolationRegistrationSelectColumnIsAccident ViolationRegistrationSelectColumn = "is_accident"
	// 是否删除
	ViolationRegistrationSelectColumnIsDeleted ViolationRegistrationSelectColumn = "is_deleted"
	// 创建时间
	ViolationRegistrationSelectColumnCreatedAt ViolationRegistrationSelectColumn = "created_at"
	// 创建人                                          ( system_user表的user_id     )
	ViolationRegistrationSelectColumnCreatedBy ViolationRegistrationSelectColumn = "created_by"
	// 修改时间
	ViolationRegistrationSelectColumnUpdatedAt ViolationRegistrationSelectColumn = "updated_at"
	// 修改人                                          ( system_user表的user_id     )
	ViolationRegistrationSelectColumnUpdatedBy ViolationRegistrationSelectColumn = "updated_by"
	// 删除时间
	ViolationRegistrationSelectColumnDeletedAt ViolationRegistrationSelectColumn = "deleted_at"
	// 删除人                                          ( system_user表的user_id     )
	ViolationRegistrationSelectColumnDeletedBy ViolationRegistrationSelectColumn = "deleted_by"
)

var AllViolationRegistrationSelectColumn = []ViolationRegistrationSelectColumn{
	ViolationRegistrationSelectColumnID,
	ViolationRegistrationSelectColumnViolationRegistrationID,
	ViolationRegistrationSelectColumnVehicleID,
	ViolationRegistrationSelectColumnLicensePlateNumber,
	ViolationRegistrationSelectColumnIDCardNum,
	ViolationRegistrationSelectColumnName,
	ViolationRegistrationSelectColumnLocation,
	ViolationRegistrationSelectColumnCause,
	ViolationRegistrationSelectColumnIllegalTime,
	ViolationRegistrationSelectColumnOperator,
	ViolationRegistrationSelectColumnIllegalArea,
	ViolationRegistrationSelectColumnIllegalCode,
	ViolationRegistrationSelectColumnVehicleArea,
	ViolationRegistrationSelectColumnVehicleEnterprise,
	ViolationRegistrationSelectColumnProvinceID,
	ViolationRegistrationSelectColumnCityID,
	ViolationRegistrationSelectColumnDistrictID,
	ViolationRegistrationSelectColumnSupervisor,
	ViolationRegistrationSelectColumnSupervisionTime,
	ViolationRegistrationSelectColumnSepervisionRemarks,
	ViolationRegistrationSelectColumnIsSupervised,
	ViolationRegistrationSelectColumnIsAccident,
	ViolationRegistrationSelectColumnIsDeleted,
	ViolationRegistrationSelectColumnCreatedAt,
	ViolationRegistrationSelectColumnCreatedBy,
	ViolationRegistrationSelectColumnUpdatedAt,
	ViolationRegistrationSelectColumnUpdatedBy,
	ViolationRegistrationSelectColumnDeletedAt,
	ViolationRegistrationSelectColumnDeletedBy,
}

func (e ViolationRegistrationSelectColumn) IsValid() bool {
	switch e {
	case ViolationRegistrationSelectColumnID, ViolationRegistrationSelectColumnViolationRegistrationID, ViolationRegistrationSelectColumnVehicleID, ViolationRegistrationSelectColumnLicensePlateNumber, ViolationRegistrationSelectColumnIDCardNum, ViolationRegistrationSelectColumnName, ViolationRegistrationSelectColumnLocation, ViolationRegistrationSelectColumnCause, ViolationRegistrationSelectColumnIllegalTime, ViolationRegistrationSelectColumnOperator, ViolationRegistrationSelectColumnIllegalArea, ViolationRegistrationSelectColumnIllegalCode, ViolationRegistrationSelectColumnVehicleArea, ViolationRegistrationSelectColumnVehicleEnterprise, ViolationRegistrationSelectColumnProvinceID, ViolationRegistrationSelectColumnCityID, ViolationRegistrationSelectColumnDistrictID, ViolationRegistrationSelectColumnSupervisor, ViolationRegistrationSelectColumnSupervisionTime, ViolationRegistrationSelectColumnSepervisionRemarks, ViolationRegistrationSelectColumnIsSupervised, ViolationRegistrationSelectColumnIsAccident, ViolationRegistrationSelectColumnIsDeleted, ViolationRegistrationSelectColumnCreatedAt, ViolationRegistrationSelectColumnCreatedBy, ViolationRegistrationSelectColumnUpdatedAt, ViolationRegistrationSelectColumnUpdatedBy, ViolationRegistrationSelectColumnDeletedAt, ViolationRegistrationSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e ViolationRegistrationSelectColumn) String() string {
	return string(e)
}

func (e *ViolationRegistrationSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ViolationRegistrationSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ViolationRegistrationSelectColumn", str)
	}
	return nil
}

func (e ViolationRegistrationSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
