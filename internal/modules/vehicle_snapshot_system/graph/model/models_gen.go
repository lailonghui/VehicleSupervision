// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	model1 "VehicleSupervision/internal/modules/vehicle_snapshot_system/model"
	"VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// aggregated selection of "construction_camera"
type ConstructionCameraAggregate struct {
	Aggregate *ConstructionCameraAggregateFields `json:"aggregate"`
}

// aggregate fields of "construction_camera"
type ConstructionCameraAggregateFields struct {
	Avg        *ConstructionCameraAvgFields        `json:"avg"`
	Count      *int                                `json:"count"`
	Max        *ConstructionCameraMaxFields        `json:"max"`
	Min        *ConstructionCameraMinFields        `json:"min"`
	Stddev     *ConstructionCameraStddevFields     `json:"stddev"`
	StddevPop  *ConstructionCameraStddevPopFields  `json:"stddev_pop"`
	StddevSamp *ConstructionCameraStddevSampFields `json:"stddev_samp"`
	Sum        *ConstructionCameraSumFields        `json:"sum"`
	VarPop     *ConstructionCameraVarPopFields     `json:"var_pop"`
	VarSamp    *ConstructionCameraVarSampFields    `json:"var_samp"`
	Variance   *ConstructionCameraVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "construction_camera"
type ConstructionCameraAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'construction_camera'.
type ConstructionCameraBoolExp struct {
	And                  []*ConstructionCameraBoolExp    `json:"_and"`
	Not                  *ConstructionCameraBoolExp      `json:"_not"`
	Or                   []*ConstructionCameraBoolExp    `json:"_or"`
	ID                   *model.BigintComparisonExp      `json:"id"`
	ConstructionCameraID *model.StringComparisonExp      `json:"construction_camera_id"`
	DeviceName           *model.StringComparisonExp      `json:"device_name"`
	IPAddress            *model.StringComparisonExp      `json:"ip_address"`
	Port                 *model.StringComparisonExp      `json:"port"`
	DeviceID             *model.StringComparisonExp      `json:"device_id"`
	ConstructionInfoID   *model.StringComparisonExp      `json:"construction_info_id"`
	SimNumber            *model.StringComparisonExp      `json:"sim_number"`
	RegistrationTime     *model.TimestamptzComparisonExp `json:"registration_time"`
	IsDeleted            *model.BooleanComparisonExp     `json:"is_deleted"`
	CreatedAt            *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy            *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt            *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy            *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt            *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy            *model.StringComparisonExp      `json:"deleted_by"`
}

// input type for incrementing integer column in table "construction_camera"
type ConstructionCameraIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "construction_camera"
type ConstructionCameraInsertInput struct {
	ID                   *int64     `json:"id"`
	ConstructionCameraID *string    `json:"construction_camera_id"`
	DeviceName           *string    `json:"device_name"`
	IPAddress            *string    `json:"ip_address"`
	Port                 *string    `json:"port"`
	DeviceID             *string    `json:"device_id"`
	ConstructionInfoID   *string    `json:"construction_info_id"`
	SimNumber            *string    `json:"sim_number"`
	RegistrationTime     *time.Time `json:"registration_time"`
	IsDeleted            *bool      `json:"is_deleted"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
}

// aggregate max on columns of table "construction_camera"
type ConstructionCameraMaxFields struct {
	ID                   *int64     `json:"id"`
	ConstructionCameraID *string    `json:"construction_camera_id"`
	DeviceName           *string    `json:"device_name"`
	IPAddress            *string    `json:"ip_address"`
	Port                 *string    `json:"port"`
	DeviceID             *string    `json:"device_id"`
	ConstructionInfoID   *string    `json:"construction_info_id"`
	SimNumber            *string    `json:"sim_number"`
	RegistrationTime     *time.Time `json:"registration_time"`
	IsDeleted            *bool      `json:"is_deleted"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
}

// aggregate min on columns of table "construction_camera"
type ConstructionCameraMinFields struct {
	ID                   *int64     `json:"id"`
	ConstructionCameraID *string    `json:"construction_camera_id"`
	DeviceName           *string    `json:"device_name"`
	IPAddress            *string    `json:"ip_address"`
	Port                 *string    `json:"port"`
	DeviceID             *string    `json:"device_id"`
	ConstructionInfoID   *string    `json:"construction_info_id"`
	SimNumber            *string    `json:"sim_number"`
	RegistrationTime     *time.Time `json:"registration_time"`
	IsDeleted            *bool      `json:"is_deleted"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
}

// response of any mutation on the table "construction_camera"
type ConstructionCameraMutationResponse struct {
	AffectedRows int                          `json:"affected_rows"`
	Returning    []*model1.ConstructionCamera `json:"returning"`
}

// ordering options when selecting data from "construction_camera"
type ConstructionCameraOrderBy struct {
	ID                   *model.OrderBy `json:"id"`
	ConstructionCameraID *model.OrderBy `json:"construction_camera_id"`
	DeviceName           *model.OrderBy `json:"device_name"`
	IPAddress            *model.OrderBy `json:"ip_address"`
	Port                 *model.OrderBy `json:"port"`
	DeviceID             *model.OrderBy `json:"device_id"`
	ConstructionInfoID   *model.OrderBy `json:"construction_info_id"`
	SimNumber            *model.OrderBy `json:"sim_number"`
	RegistrationTime     *model.OrderBy `json:"registration_time"`
	IsDeleted            *model.OrderBy `json:"is_deleted"`
	CreatedAt            *model.OrderBy `json:"created_at"`
	CreatedBy            *model.OrderBy `json:"created_by"`
	UpdatedAt            *model.OrderBy `json:"updated_at"`
	UpdatedBy            *model.OrderBy `json:"updated_by"`
	DeletedAt            *model.OrderBy `json:"deleted_at"`
	DeletedBy            *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "construction_camera"
type ConstructionCameraSetInput struct {
	ID                   *int64     `json:"id"`
	ConstructionCameraID *string    `json:"construction_camera_id"`
	DeviceName           *string    `json:"device_name"`
	IPAddress            *string    `json:"ip_address"`
	Port                 *string    `json:"port"`
	DeviceID             *string    `json:"device_id"`
	ConstructionInfoID   *string    `json:"construction_info_id"`
	SimNumber            *string    `json:"sim_number"`
	RegistrationTime     *time.Time `json:"registration_time"`
	IsDeleted            *bool      `json:"is_deleted"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "construction_camera"
type ConstructionCameraStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "construction_camera"
type ConstructionCameraStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "construction_camera"
type ConstructionCameraStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "construction_camera"
type ConstructionCameraSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "construction_camera"
type ConstructionCameraVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "construction_camera"
type ConstructionCameraVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "construction_camera"
type ConstructionCameraVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregated selection of "construction_info"
type ConstructionInfoAggregate struct {
	Aggregate *ConstructionInfoAggregateFields `json:"aggregate"`
}

// aggregate fields of "construction_info"
type ConstructionInfoAggregateFields struct {
	Avg        *ConstructionInfoAvgFields        `json:"avg"`
	Count      *int                              `json:"count"`
	Max        *ConstructionInfoMaxFields        `json:"max"`
	Min        *ConstructionInfoMinFields        `json:"min"`
	Stddev     *ConstructionInfoStddevFields     `json:"stddev"`
	StddevPop  *ConstructionInfoStddevPopFields  `json:"stddev_pop"`
	StddevSamp *ConstructionInfoStddevSampFields `json:"stddev_samp"`
	Sum        *ConstructionInfoSumFields        `json:"sum"`
	VarPop     *ConstructionInfoVarPopFields     `json:"var_pop"`
	VarSamp    *ConstructionInfoVarSampFields    `json:"var_samp"`
	Variance   *ConstructionInfoVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "construction_info"
type ConstructionInfoAvgFields struct {
	ID               *int64 `json:"id"`
	ConstructionType *int   `json:"construction_type"`
	Finished         *int   `json:"finished"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'construction_info'.
type ConstructionInfoBoolExp struct {
	And                        []*ConstructionInfoBoolExp      `json:"_and"`
	Not                        *ConstructionInfoBoolExp        `json:"_not"`
	Or                         []*ConstructionInfoBoolExp      `json:"_or"`
	ID                         *model.BigintComparisonExp      `json:"id"`
	ConstructionInfoID         *model.StringComparisonExp      `json:"construction_info_id"`
	ProjectName                *model.StringComparisonExp      `json:"project_name"`
	ProjectCode                *model.StringComparisonExp      `json:"project_code"`
	ContractStartDate          *model.TimestamptzComparisonExp `json:"contract_start_date"`
	ContractCompletionDate     *model.TimestamptzComparisonExp `json:"contract_completion_date"`
	BuildAgency                *model.StringComparisonExp      `json:"build_agency"`
	ProjectManager             *model.StringComparisonExp      `json:"project_manager"`
	AreaID                     *model.StringComparisonExp      `json:"area_id"`
	Address                    *model.StringComparisonExp      `json:"address"`
	MapCoordinate              *model.PointComparisonExp       `json:"map_coordinate"`
	ConstructionAgency         *model.StringComparisonExp      `json:"construction_agency"`
	SupervisionAgency          *model.StringComparisonExp      `json:"supervision_agency"`
	DeviceInstallationAgency   *model.StringComparisonExp      `json:"device_installation_agency"`
	DeviceInstallationLocation *model.StringComparisonExp      `json:"device_installation_location"`
	ServiceContractNumber      *model.StringComparisonExp      `json:"service_contract_number"`
	ContractSigningTime        *model.TimestamptzComparisonExp `json:"contract_signing_time"`
	ServiceActivationDate      *model.TimestamptzComparisonExp `json:"service_activation_date"`
	ProofValidDate             *model.TimestamptzComparisonExp `json:"proof_valid_date"`
	Coordinate                 *model.PointComparisonExp       `json:"coordinate"`
	InstallationTime           *model.TimestamptzComparisonExp `json:"installation_time"`
	ProjectNameTag             *model.StringComparisonExp      `json:"project_name_tag"`
	ImportExportQuantity       *model.StringComparisonExp      `json:"import_export_quantity"`
	DeactivationReason         *model.StringComparisonExp      `json:"deactivation_reason"`
	UninstalledReason          *model.StringComparisonExp      `json:"uninstalled_reason"`
	ProofValidDateUntil        *model.TimestamptzComparisonExp `json:"proof_valid_date_until"`
	ConstructionType           *model.IntComparisonExp         `json:"construction_type"`
	ContactPerson              *model.StringComparisonExp      `json:"contact_person"`
	ContactPhone               *model.StringComparisonExp      `json:"contact_phone"`
	Finished                   *model.IntComparisonExp         `json:"finished"`
	IsCityDirectly             *model.StringComparisonExp      `json:"is_city_directly"`
	IsInstallation             *model.StringComparisonExp      `json:"is_installation"`
	IsDeleted                  *model.BooleanComparisonExp     `json:"is_deleted"`
	RegistrationTime           *model.TimestamptzComparisonExp `json:"registration_time"`
	CreatedAt                  *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy                  *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt                  *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy                  *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt                  *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy                  *model.StringComparisonExp      `json:"deleted_by"`
}

// input type for incrementing integer column in table "construction_info"
type ConstructionInfoIncInput struct {
	ID               *int64 `json:"id"`
	ConstructionType *int   `json:"construction_type"`
	Finished         *int   `json:"finished"`
}

// input type for inserting data into table "construction_info"
type ConstructionInfoInsertInput struct {
	ID                         *int64     `json:"id"`
	ConstructionInfoID         *string    `json:"construction_info_id"`
	ProjectName                *string    `json:"project_name"`
	ProjectCode                *string    `json:"project_code"`
	ContractStartDate          *time.Time `json:"contract_start_date"`
	ContractCompletionDate     *time.Time `json:"contract_completion_date"`
	BuildAgency                *string    `json:"build_agency"`
	ProjectManager             *string    `json:"project_manager"`
	AreaID                     *string    `json:"area_id"`
	Address                    *string    `json:"address"`
	MapCoordinate              *string    `json:"map_coordinate"`
	ConstructionAgency         *string    `json:"construction_agency"`
	SupervisionAgency          *string    `json:"supervision_agency"`
	DeviceInstallationAgency   *string    `json:"device_installation_agency"`
	DeviceInstallationLocation *string    `json:"device_installation_location"`
	ServiceContractNumber      *string    `json:"service_contract_number"`
	ContractSigningTime        *time.Time `json:"contract_signing_time"`
	ServiceActivationDate      *time.Time `json:"service_activation_date"`
	ProofValidDate             *time.Time `json:"proof_valid_date"`
	Coordinate                 *string    `json:"coordinate"`
	InstallationTime           *time.Time `json:"installation_time"`
	ProjectNameTag             *string    `json:"project_name_tag"`
	ImportExportQuantity       *string    `json:"import_export_quantity"`
	DeactivationReason         *string    `json:"deactivation_reason"`
	UninstalledReason          *string    `json:"uninstalled_reason"`
	ProofValidDateUntil        *time.Time `json:"proof_valid_date_until"`
	ConstructionType           *int       `json:"construction_type"`
	ContactPerson              *string    `json:"contact_person"`
	ContactPhone               *string    `json:"contact_phone"`
	Finished                   *int       `json:"finished"`
	IsCityDirectly             *string    `json:"is_city_directly"`
	IsInstallation             *string    `json:"is_installation"`
	IsDeleted                  *bool      `json:"is_deleted"`
	RegistrationTime           *time.Time `json:"registration_time"`
	CreatedAt                  *time.Time `json:"created_at"`
	CreatedBy                  *string    `json:"created_by"`
	UpdatedAt                  *time.Time `json:"updated_at"`
	UpdatedBy                  *string    `json:"updated_by"`
	DeletedAt                  *time.Time `json:"deleted_at"`
	DeletedBy                  *string    `json:"deleted_by"`
}

// aggregate max on columns of table "construction_info"
type ConstructionInfoMaxFields struct {
	ID                         *int64     `json:"id"`
	ConstructionInfoID         *string    `json:"construction_info_id"`
	ProjectName                *string    `json:"project_name"`
	ProjectCode                *string    `json:"project_code"`
	ContractStartDate          *time.Time `json:"contract_start_date"`
	ContractCompletionDate     *time.Time `json:"contract_completion_date"`
	BuildAgency                *string    `json:"build_agency"`
	ProjectManager             *string    `json:"project_manager"`
	AreaID                     *string    `json:"area_id"`
	Address                    *string    `json:"address"`
	MapCoordinate              *string    `json:"map_coordinate"`
	ConstructionAgency         *string    `json:"construction_agency"`
	SupervisionAgency          *string    `json:"supervision_agency"`
	DeviceInstallationAgency   *string    `json:"device_installation_agency"`
	DeviceInstallationLocation *string    `json:"device_installation_location"`
	ServiceContractNumber      *string    `json:"service_contract_number"`
	ContractSigningTime        *time.Time `json:"contract_signing_time"`
	ServiceActivationDate      *time.Time `json:"service_activation_date"`
	ProofValidDate             *time.Time `json:"proof_valid_date"`
	Coordinate                 *string    `json:"coordinate"`
	InstallationTime           *time.Time `json:"installation_time"`
	ProjectNameTag             *string    `json:"project_name_tag"`
	ImportExportQuantity       *string    `json:"import_export_quantity"`
	DeactivationReason         *string    `json:"deactivation_reason"`
	UninstalledReason          *string    `json:"uninstalled_reason"`
	ProofValidDateUntil        *time.Time `json:"proof_valid_date_until"`
	ConstructionType           *int       `json:"construction_type"`
	ContactPerson              *string    `json:"contact_person"`
	ContactPhone               *string    `json:"contact_phone"`
	Finished                   *int       `json:"finished"`
	IsCityDirectly             *string    `json:"is_city_directly"`
	IsInstallation             *string    `json:"is_installation"`
	IsDeleted                  *bool      `json:"is_deleted"`
	RegistrationTime           *time.Time `json:"registration_time"`
	CreatedAt                  *time.Time `json:"created_at"`
	CreatedBy                  *string    `json:"created_by"`
	UpdatedAt                  *time.Time `json:"updated_at"`
	UpdatedBy                  *string    `json:"updated_by"`
	DeletedAt                  *time.Time `json:"deleted_at"`
	DeletedBy                  *string    `json:"deleted_by"`
}

// aggregate min on columns of table "construction_info"
type ConstructionInfoMinFields struct {
	ID                         *int64     `json:"id"`
	ConstructionInfoID         *string    `json:"construction_info_id"`
	ProjectName                *string    `json:"project_name"`
	ProjectCode                *string    `json:"project_code"`
	ContractStartDate          *time.Time `json:"contract_start_date"`
	ContractCompletionDate     *time.Time `json:"contract_completion_date"`
	BuildAgency                *string    `json:"build_agency"`
	ProjectManager             *string    `json:"project_manager"`
	AreaID                     *string    `json:"area_id"`
	Address                    *string    `json:"address"`
	MapCoordinate              *string    `json:"map_coordinate"`
	ConstructionAgency         *string    `json:"construction_agency"`
	SupervisionAgency          *string    `json:"supervision_agency"`
	DeviceInstallationAgency   *string    `json:"device_installation_agency"`
	DeviceInstallationLocation *string    `json:"device_installation_location"`
	ServiceContractNumber      *string    `json:"service_contract_number"`
	ContractSigningTime        *time.Time `json:"contract_signing_time"`
	ServiceActivationDate      *time.Time `json:"service_activation_date"`
	ProofValidDate             *time.Time `json:"proof_valid_date"`
	Coordinate                 *string    `json:"coordinate"`
	InstallationTime           *time.Time `json:"installation_time"`
	ProjectNameTag             *string    `json:"project_name_tag"`
	ImportExportQuantity       *string    `json:"import_export_quantity"`
	DeactivationReason         *string    `json:"deactivation_reason"`
	UninstalledReason          *string    `json:"uninstalled_reason"`
	ProofValidDateUntil        *time.Time `json:"proof_valid_date_until"`
	ConstructionType           *int       `json:"construction_type"`
	ContactPerson              *string    `json:"contact_person"`
	ContactPhone               *string    `json:"contact_phone"`
	Finished                   *int       `json:"finished"`
	IsCityDirectly             *string    `json:"is_city_directly"`
	IsInstallation             *string    `json:"is_installation"`
	IsDeleted                  *bool      `json:"is_deleted"`
	RegistrationTime           *time.Time `json:"registration_time"`
	CreatedAt                  *time.Time `json:"created_at"`
	CreatedBy                  *string    `json:"created_by"`
	UpdatedAt                  *time.Time `json:"updated_at"`
	UpdatedBy                  *string    `json:"updated_by"`
	DeletedAt                  *time.Time `json:"deleted_at"`
	DeletedBy                  *string    `json:"deleted_by"`
}

// response of any mutation on the table "construction_info"
type ConstructionInfoMutationResponse struct {
	AffectedRows int                        `json:"affected_rows"`
	Returning    []*model1.ConstructionInfo `json:"returning"`
}

// ordering options when selecting data from "construction_info"
type ConstructionInfoOrderBy struct {
	ID                         *model.OrderBy `json:"id"`
	ConstructionInfoID         *model.OrderBy `json:"construction_info_id"`
	ProjectName                *model.OrderBy `json:"project_name"`
	ProjectCode                *model.OrderBy `json:"project_code"`
	ContractStartDate          *model.OrderBy `json:"contract_start_date"`
	ContractCompletionDate     *model.OrderBy `json:"contract_completion_date"`
	BuildAgency                *model.OrderBy `json:"build_agency"`
	ProjectManager             *model.OrderBy `json:"project_manager"`
	AreaID                     *model.OrderBy `json:"area_id"`
	Address                    *model.OrderBy `json:"address"`
	MapCoordinate              *model.OrderBy `json:"map_coordinate"`
	ConstructionAgency         *model.OrderBy `json:"construction_agency"`
	SupervisionAgency          *model.OrderBy `json:"supervision_agency"`
	DeviceInstallationAgency   *model.OrderBy `json:"device_installation_agency"`
	DeviceInstallationLocation *model.OrderBy `json:"device_installation_location"`
	ServiceContractNumber      *model.OrderBy `json:"service_contract_number"`
	ContractSigningTime        *model.OrderBy `json:"contract_signing_time"`
	ServiceActivationDate      *model.OrderBy `json:"service_activation_date"`
	ProofValidDate             *model.OrderBy `json:"proof_valid_date"`
	Coordinate                 *model.OrderBy `json:"coordinate"`
	InstallationTime           *model.OrderBy `json:"installation_time"`
	ProjectNameTag             *model.OrderBy `json:"project_name_tag"`
	ImportExportQuantity       *model.OrderBy `json:"import_export_quantity"`
	DeactivationReason         *model.OrderBy `json:"deactivation_reason"`
	UninstalledReason          *model.OrderBy `json:"uninstalled_reason"`
	ProofValidDateUntil        *model.OrderBy `json:"proof_valid_date_until"`
	ConstructionType           *model.OrderBy `json:"construction_type"`
	ContactPerson              *model.OrderBy `json:"contact_person"`
	ContactPhone               *model.OrderBy `json:"contact_phone"`
	Finished                   *model.OrderBy `json:"finished"`
	IsCityDirectly             *model.OrderBy `json:"is_city_directly"`
	IsInstallation             *model.OrderBy `json:"is_installation"`
	IsDeleted                  *model.OrderBy `json:"is_deleted"`
	RegistrationTime           *model.OrderBy `json:"registration_time"`
	CreatedAt                  *model.OrderBy `json:"created_at"`
	CreatedBy                  *model.OrderBy `json:"created_by"`
	UpdatedAt                  *model.OrderBy `json:"updated_at"`
	UpdatedBy                  *model.OrderBy `json:"updated_by"`
	DeletedAt                  *model.OrderBy `json:"deleted_at"`
	DeletedBy                  *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "construction_info"
type ConstructionInfoSetInput struct {
	ID                         *int64     `json:"id"`
	ConstructionInfoID         *string    `json:"construction_info_id"`
	ProjectName                *string    `json:"project_name"`
	ProjectCode                *string    `json:"project_code"`
	ContractStartDate          *time.Time `json:"contract_start_date"`
	ContractCompletionDate     *time.Time `json:"contract_completion_date"`
	BuildAgency                *string    `json:"build_agency"`
	ProjectManager             *string    `json:"project_manager"`
	AreaID                     *string    `json:"area_id"`
	Address                    *string    `json:"address"`
	MapCoordinate              *string    `json:"map_coordinate"`
	ConstructionAgency         *string    `json:"construction_agency"`
	SupervisionAgency          *string    `json:"supervision_agency"`
	DeviceInstallationAgency   *string    `json:"device_installation_agency"`
	DeviceInstallationLocation *string    `json:"device_installation_location"`
	ServiceContractNumber      *string    `json:"service_contract_number"`
	ContractSigningTime        *time.Time `json:"contract_signing_time"`
	ServiceActivationDate      *time.Time `json:"service_activation_date"`
	ProofValidDate             *time.Time `json:"proof_valid_date"`
	Coordinate                 *string    `json:"coordinate"`
	InstallationTime           *time.Time `json:"installation_time"`
	ProjectNameTag             *string    `json:"project_name_tag"`
	ImportExportQuantity       *string    `json:"import_export_quantity"`
	DeactivationReason         *string    `json:"deactivation_reason"`
	UninstalledReason          *string    `json:"uninstalled_reason"`
	ProofValidDateUntil        *time.Time `json:"proof_valid_date_until"`
	ConstructionType           *int       `json:"construction_type"`
	ContactPerson              *string    `json:"contact_person"`
	ContactPhone               *string    `json:"contact_phone"`
	Finished                   *int       `json:"finished"`
	IsCityDirectly             *string    `json:"is_city_directly"`
	IsInstallation             *string    `json:"is_installation"`
	IsDeleted                  *bool      `json:"is_deleted"`
	RegistrationTime           *time.Time `json:"registration_time"`
	CreatedAt                  *time.Time `json:"created_at"`
	CreatedBy                  *string    `json:"created_by"`
	UpdatedAt                  *time.Time `json:"updated_at"`
	UpdatedBy                  *string    `json:"updated_by"`
	DeletedAt                  *time.Time `json:"deleted_at"`
	DeletedBy                  *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "construction_info"
type ConstructionInfoStddevFields struct {
	ID               *int64 `json:"id"`
	ConstructionType *int   `json:"construction_type"`
	Finished         *int   `json:"finished"`
}

// aggregate stddev_pop on columns of table "construction_info"
type ConstructionInfoStddevPopFields struct {
	ID               *int64 `json:"id"`
	ConstructionType *int   `json:"construction_type"`
	Finished         *int   `json:"finished"`
}

// aggregate stddev_samp on columns of table "construction_info"
type ConstructionInfoStddevSampFields struct {
	ID               *int64 `json:"id"`
	ConstructionType *int   `json:"construction_type"`
	Finished         *int   `json:"finished"`
}

// aggregate sum on columns of table "construction_info"
type ConstructionInfoSumFields struct {
	ID               *int64 `json:"id"`
	ConstructionType *int   `json:"construction_type"`
	Finished         *int   `json:"finished"`
}

// aggregate var_pop on columns of table "construction_info"
type ConstructionInfoVarPopFields struct {
	ID               *int64 `json:"id"`
	ConstructionType *int   `json:"construction_type"`
	Finished         *int   `json:"finished"`
}

// aggregate var_samp on columns of table "construction_info"
type ConstructionInfoVarSampFields struct {
	ID               *int64 `json:"id"`
	ConstructionType *int   `json:"construction_type"`
	Finished         *int   `json:"finished"`
}

// aggregate variance on columns of table "construction_info"
type ConstructionInfoVarianceFields struct {
	ID               *int64 `json:"id"`
	ConstructionType *int   `json:"construction_type"`
	Finished         *int   `json:"finished"`
}

// aggregated selection of "construction_upload_pic"
type ConstructionUploadPicAggregate struct {
	Aggregate *ConstructionUploadPicAggregateFields `json:"aggregate"`
}

// aggregate fields of "construction_upload_pic"
type ConstructionUploadPicAggregateFields struct {
	Avg        *ConstructionUploadPicAvgFields        `json:"avg"`
	Count      *int                                   `json:"count"`
	Max        *ConstructionUploadPicMaxFields        `json:"max"`
	Min        *ConstructionUploadPicMinFields        `json:"min"`
	Stddev     *ConstructionUploadPicStddevFields     `json:"stddev"`
	StddevPop  *ConstructionUploadPicStddevPopFields  `json:"stddev_pop"`
	StddevSamp *ConstructionUploadPicStddevSampFields `json:"stddev_samp"`
	Sum        *ConstructionUploadPicSumFields        `json:"sum"`
	VarPop     *ConstructionUploadPicVarPopFields     `json:"var_pop"`
	VarSamp    *ConstructionUploadPicVarSampFields    `json:"var_samp"`
	Variance   *ConstructionUploadPicVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "construction_upload_pic"
type ConstructionUploadPicAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'construction_upload_pic'.
type ConstructionUploadPicBoolExp struct {
	And                     []*ConstructionUploadPicBoolExp `json:"_and"`
	Not                     *ConstructionUploadPicBoolExp   `json:"_not"`
	Or                      []*ConstructionUploadPicBoolExp `json:"_or"`
	ID                      *model.BigintComparisonExp      `json:"id"`
	ConstructionUploadPicID *model.StringComparisonExp      `json:"construction_upload_pic_id"`
	ConstructionInfoID      *model.StringComparisonExp      `json:"construction_info_id"`
	PictureURL              *model.StringComparisonExp      `json:"picture_url"`
	IsDeleted               *model.BooleanComparisonExp     `json:"is_deleted"`
	CreatedAt               *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy               *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt               *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy               *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt               *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy               *model.StringComparisonExp      `json:"deleted_by"`
}

// input type for incrementing integer column in table "construction_upload_pic"
type ConstructionUploadPicIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "construction_upload_pic"
type ConstructionUploadPicInsertInput struct {
	ID                      *int64     `json:"id"`
	ConstructionUploadPicID *string    `json:"construction_upload_pic_id"`
	ConstructionInfoID      *string    `json:"construction_info_id"`
	PictureURL              *string    `json:"picture_url"`
	IsDeleted               *bool      `json:"is_deleted"`
	CreatedAt               *time.Time `json:"created_at"`
	CreatedBy               *string    `json:"created_by"`
	UpdatedAt               *time.Time `json:"updated_at"`
	UpdatedBy               *string    `json:"updated_by"`
	DeletedAt               *time.Time `json:"deleted_at"`
	DeletedBy               *string    `json:"deleted_by"`
}

// aggregate max on columns of table "construction_upload_pic"
type ConstructionUploadPicMaxFields struct {
	ID                      *int64     `json:"id"`
	ConstructionUploadPicID *string    `json:"construction_upload_pic_id"`
	ConstructionInfoID      *string    `json:"construction_info_id"`
	PictureURL              *string    `json:"picture_url"`
	IsDeleted               *bool      `json:"is_deleted"`
	CreatedAt               *time.Time `json:"created_at"`
	CreatedBy               *string    `json:"created_by"`
	UpdatedAt               *time.Time `json:"updated_at"`
	UpdatedBy               *string    `json:"updated_by"`
	DeletedAt               *time.Time `json:"deleted_at"`
	DeletedBy               *string    `json:"deleted_by"`
}

// aggregate min on columns of table "construction_upload_pic"
type ConstructionUploadPicMinFields struct {
	ID                      *int64     `json:"id"`
	ConstructionUploadPicID *string    `json:"construction_upload_pic_id"`
	ConstructionInfoID      *string    `json:"construction_info_id"`
	PictureURL              *string    `json:"picture_url"`
	IsDeleted               *bool      `json:"is_deleted"`
	CreatedAt               *time.Time `json:"created_at"`
	CreatedBy               *string    `json:"created_by"`
	UpdatedAt               *time.Time `json:"updated_at"`
	UpdatedBy               *string    `json:"updated_by"`
	DeletedAt               *time.Time `json:"deleted_at"`
	DeletedBy               *string    `json:"deleted_by"`
}

// response of any mutation on the table "construction_upload_pic"
type ConstructionUploadPicMutationResponse struct {
	AffectedRows int                             `json:"affected_rows"`
	Returning    []*model1.ConstructionUploadPic `json:"returning"`
}

// ordering options when selecting data from "construction_upload_pic"
type ConstructionUploadPicOrderBy struct {
	ID                      *model.OrderBy `json:"id"`
	ConstructionUploadPicID *model.OrderBy `json:"construction_upload_pic_id"`
	ConstructionInfoID      *model.OrderBy `json:"construction_info_id"`
	PictureURL              *model.OrderBy `json:"picture_url"`
	IsDeleted               *model.OrderBy `json:"is_deleted"`
	CreatedAt               *model.OrderBy `json:"created_at"`
	CreatedBy               *model.OrderBy `json:"created_by"`
	UpdatedAt               *model.OrderBy `json:"updated_at"`
	UpdatedBy               *model.OrderBy `json:"updated_by"`
	DeletedAt               *model.OrderBy `json:"deleted_at"`
	DeletedBy               *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "construction_upload_pic"
type ConstructionUploadPicSetInput struct {
	ID                      *int64     `json:"id"`
	ConstructionUploadPicID *string    `json:"construction_upload_pic_id"`
	ConstructionInfoID      *string    `json:"construction_info_id"`
	PictureURL              *string    `json:"picture_url"`
	IsDeleted               *bool      `json:"is_deleted"`
	CreatedAt               *time.Time `json:"created_at"`
	CreatedBy               *string    `json:"created_by"`
	UpdatedAt               *time.Time `json:"updated_at"`
	UpdatedBy               *string    `json:"updated_by"`
	DeletedAt               *time.Time `json:"deleted_at"`
	DeletedBy               *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "construction_upload_pic"
type ConstructionUploadPicStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "construction_upload_pic"
type ConstructionUploadPicStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "construction_upload_pic"
type ConstructionUploadPicStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "construction_upload_pic"
type ConstructionUploadPicSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "construction_upload_pic"
type ConstructionUploadPicVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "construction_upload_pic"
type ConstructionUploadPicVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "construction_upload_pic"
type ConstructionUploadPicVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregated selection of "offline_registration_record"
type OfflineRegistrationRecordAggregate struct {
	Aggregate *OfflineRegistrationRecordAggregateFields `json:"aggregate"`
}

// aggregate fields of "offline_registration_record"
type OfflineRegistrationRecordAggregateFields struct {
	Avg        *OfflineRegistrationRecordAvgFields        `json:"avg"`
	Count      *int                                       `json:"count"`
	Max        *OfflineRegistrationRecordMaxFields        `json:"max"`
	Min        *OfflineRegistrationRecordMinFields        `json:"min"`
	Stddev     *OfflineRegistrationRecordStddevFields     `json:"stddev"`
	StddevPop  *OfflineRegistrationRecordStddevPopFields  `json:"stddev_pop"`
	StddevSamp *OfflineRegistrationRecordStddevSampFields `json:"stddev_samp"`
	Sum        *OfflineRegistrationRecordSumFields        `json:"sum"`
	VarPop     *OfflineRegistrationRecordVarPopFields     `json:"var_pop"`
	VarSamp    *OfflineRegistrationRecordVarSampFields    `json:"var_samp"`
	Variance   *OfflineRegistrationRecordVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "offline_registration_record"
type OfflineRegistrationRecordAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'offline_registration_record'.
type OfflineRegistrationRecordBoolExp struct {
	And                       []*OfflineRegistrationRecordBoolExp `json:"_and"`
	Not                       *OfflineRegistrationRecordBoolExp   `json:"_not"`
	Or                        []*OfflineRegistrationRecordBoolExp `json:"_or"`
	ID                        *model.BigintComparisonExp          `json:"id"`
	OfflineRegistrationRecord *model.StringComparisonExp          `json:"offline_registration_record"`
	OutageRegistrationID      *model.StringComparisonExp          `json:"outage_registration_id"`
	RegistrationContent       *model.StringComparisonExp          `json:"registration_content"`
	RegistrationTime          *model.TimestamptzComparisonExp     `json:"registration_time"`
	Registrant                *model.StringComparisonExp          `json:"registrant"`
	IsDeleted                 *model.BooleanComparisonExp         `json:"is_deleted"`
	CreatedAt                 *model.TimestamptzComparisonExp     `json:"created_at"`
	CreatedBy                 *model.StringComparisonExp          `json:"created_by"`
	UpdatedAt                 *model.TimestamptzComparisonExp     `json:"updated_at"`
	UpdatedBy                 *model.StringComparisonExp          `json:"updated_by"`
	DeletedAt                 *model.TimestamptzComparisonExp     `json:"deleted_at"`
	DeletedBy                 *model.StringComparisonExp          `json:"deleted_by"`
}

// input type for incrementing integer column in table "offline_registration_record"
type OfflineRegistrationRecordIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "offline_registration_record"
type OfflineRegistrationRecordInsertInput struct {
	ID                        *int64     `json:"id"`
	OfflineRegistrationRecord *string    `json:"offline_registration_record"`
	OutageRegistrationID      *string    `json:"outage_registration_id"`
	RegistrationContent       *string    `json:"registration_content"`
	RegistrationTime          *time.Time `json:"registration_time"`
	Registrant                *string    `json:"registrant"`
	IsDeleted                 *bool      `json:"is_deleted"`
	CreatedAt                 *time.Time `json:"created_at"`
	CreatedBy                 *string    `json:"created_by"`
	UpdatedAt                 *time.Time `json:"updated_at"`
	UpdatedBy                 *string    `json:"updated_by"`
	DeletedAt                 *time.Time `json:"deleted_at"`
	DeletedBy                 *string    `json:"deleted_by"`
}

// aggregate max on columns of table "offline_registration_record"
type OfflineRegistrationRecordMaxFields struct {
	ID                        *int64     `json:"id"`
	OfflineRegistrationRecord *string    `json:"offline_registration_record"`
	OutageRegistrationID      *string    `json:"outage_registration_id"`
	RegistrationContent       *string    `json:"registration_content"`
	RegistrationTime          *time.Time `json:"registration_time"`
	Registrant                *string    `json:"registrant"`
	IsDeleted                 *bool      `json:"is_deleted"`
	CreatedAt                 *time.Time `json:"created_at"`
	CreatedBy                 *string    `json:"created_by"`
	UpdatedAt                 *time.Time `json:"updated_at"`
	UpdatedBy                 *string    `json:"updated_by"`
	DeletedAt                 *time.Time `json:"deleted_at"`
	DeletedBy                 *string    `json:"deleted_by"`
}

// aggregate min on columns of table "offline_registration_record"
type OfflineRegistrationRecordMinFields struct {
	ID                        *int64     `json:"id"`
	OfflineRegistrationRecord *string    `json:"offline_registration_record"`
	OutageRegistrationID      *string    `json:"outage_registration_id"`
	RegistrationContent       *string    `json:"registration_content"`
	RegistrationTime          *time.Time `json:"registration_time"`
	Registrant                *string    `json:"registrant"`
	IsDeleted                 *bool      `json:"is_deleted"`
	CreatedAt                 *time.Time `json:"created_at"`
	CreatedBy                 *string    `json:"created_by"`
	UpdatedAt                 *time.Time `json:"updated_at"`
	UpdatedBy                 *string    `json:"updated_by"`
	DeletedAt                 *time.Time `json:"deleted_at"`
	DeletedBy                 *string    `json:"deleted_by"`
}

// response of any mutation on the table "offline_registration_record"
type OfflineRegistrationRecordMutationResponse struct {
	AffectedRows int                                 `json:"affected_rows"`
	Returning    []*model1.OfflineRegistrationRecord `json:"returning"`
}

// ordering options when selecting data from "offline_registration_record"
type OfflineRegistrationRecordOrderBy struct {
	ID                        *model.OrderBy `json:"id"`
	OfflineRegistrationRecord *model.OrderBy `json:"offline_registration_record"`
	OutageRegistrationID      *model.OrderBy `json:"outage_registration_id"`
	RegistrationContent       *model.OrderBy `json:"registration_content"`
	RegistrationTime          *model.OrderBy `json:"registration_time"`
	Registrant                *model.OrderBy `json:"registrant"`
	IsDeleted                 *model.OrderBy `json:"is_deleted"`
	CreatedAt                 *model.OrderBy `json:"created_at"`
	CreatedBy                 *model.OrderBy `json:"created_by"`
	UpdatedAt                 *model.OrderBy `json:"updated_at"`
	UpdatedBy                 *model.OrderBy `json:"updated_by"`
	DeletedAt                 *model.OrderBy `json:"deleted_at"`
	DeletedBy                 *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "offline_registration_record"
type OfflineRegistrationRecordSetInput struct {
	ID                        *int64     `json:"id"`
	OfflineRegistrationRecord *string    `json:"offline_registration_record"`
	OutageRegistrationID      *string    `json:"outage_registration_id"`
	RegistrationContent       *string    `json:"registration_content"`
	RegistrationTime          *time.Time `json:"registration_time"`
	Registrant                *string    `json:"registrant"`
	IsDeleted                 *bool      `json:"is_deleted"`
	CreatedAt                 *time.Time `json:"created_at"`
	CreatedBy                 *string    `json:"created_by"`
	UpdatedAt                 *time.Time `json:"updated_at"`
	UpdatedBy                 *string    `json:"updated_by"`
	DeletedAt                 *time.Time `json:"deleted_at"`
	DeletedBy                 *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "offline_registration_record"
type OfflineRegistrationRecordStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "offline_registration_record"
type OfflineRegistrationRecordStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "offline_registration_record"
type OfflineRegistrationRecordStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "offline_registration_record"
type OfflineRegistrationRecordSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "offline_registration_record"
type OfflineRegistrationRecordVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "offline_registration_record"
type OfflineRegistrationRecordVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "offline_registration_record"
type OfflineRegistrationRecordVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregated selection of "snapshot_system_passing_alarm"
type SnapshotSystemPassingAlarmAggregate struct {
	Aggregate *SnapshotSystemPassingAlarmAggregateFields `json:"aggregate"`
}

// aggregate fields of "snapshot_system_passing_alarm"
type SnapshotSystemPassingAlarmAggregateFields struct {
	Avg        *SnapshotSystemPassingAlarmAvgFields        `json:"avg"`
	Count      *int                                        `json:"count"`
	Max        *SnapshotSystemPassingAlarmMaxFields        `json:"max"`
	Min        *SnapshotSystemPassingAlarmMinFields        `json:"min"`
	Stddev     *SnapshotSystemPassingAlarmStddevFields     `json:"stddev"`
	StddevPop  *SnapshotSystemPassingAlarmStddevPopFields  `json:"stddev_pop"`
	StddevSamp *SnapshotSystemPassingAlarmStddevSampFields `json:"stddev_samp"`
	Sum        *SnapshotSystemPassingAlarmSumFields        `json:"sum"`
	VarPop     *SnapshotSystemPassingAlarmVarPopFields     `json:"var_pop"`
	VarSamp    *SnapshotSystemPassingAlarmVarSampFields    `json:"var_samp"`
	Variance   *SnapshotSystemPassingAlarmVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "snapshot_system_passing_alarm"
type SnapshotSystemPassingAlarmAvgFields struct {
	ID          *int64 `json:"id"`
	AlarmType   *int   `json:"alarm_type"`
	VehicleType *int   `json:"vehicle_type"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'snapshot_system_passing_alarm'.
type SnapshotSystemPassingAlarmBoolExp struct {
	And                          []*SnapshotSystemPassingAlarmBoolExp `json:"_and"`
	Not                          *SnapshotSystemPassingAlarmBoolExp   `json:"_not"`
	Or                           []*SnapshotSystemPassingAlarmBoolExp `json:"_or"`
	ID                           *model.BigintComparisonExp           `json:"id"`
	SnapshotSystemPassingAlarmID *model.StringComparisonExp           `json:"snapshot_system_passing_alarm_id"`
	PassingID                    *model.StringComparisonExp           `json:"passing_id"`
	VehicleID                    *model.StringComparisonExp           `json:"vehicle_id"`
	LicensePlateNumber           *model.StringComparisonExp           `json:"license_plate_number"`
	RegistrationTime             *model.TimestamptzComparisonExp      `json:"registration_time"`
	SupervisionTime              *model.TimestamptzComparisonExp      `json:"supervision_time"`
	Remarks                      *model.StringComparisonExp           `json:"remarks"`
	CameraID                     *model.StringComparisonExp           `json:"camera_id"`
	AlarmType                    *model.IntComparisonExp              `json:"alarm_type"`
	ReviewStatus                 *model.StringComparisonExp           `json:"review_status"`
	VehicleType                  *model.IntComparisonExp              `json:"vehicle_type"`
	IsOnline                     *model.BooleanComparisonExp          `json:"is_online"`
	IsSupervision                *model.BooleanComparisonExp          `json:"is_supervision"`
	CreatedAt                    *model.TimestamptzComparisonExp      `json:"created_at"`
	CreatedBy                    *model.StringComparisonExp           `json:"created_by"`
	UpdatedAt                    *model.TimestamptzComparisonExp      `json:"updated_at"`
	UpdatedBy                    *model.StringComparisonExp           `json:"updated_by"`
	DeletedAt                    *model.TimestamptzComparisonExp      `json:"deleted_at"`
	DeletedBy                    *model.StringComparisonExp           `json:"deleted_by"`
}

// input type for incrementing integer column in table "snapshot_system_passing_alarm"
type SnapshotSystemPassingAlarmIncInput struct {
	ID          *int64 `json:"id"`
	AlarmType   *int   `json:"alarm_type"`
	VehicleType *int   `json:"vehicle_type"`
}

// input type for inserting data into table "snapshot_system_passing_alarm"
type SnapshotSystemPassingAlarmInsertInput struct {
	ID                           *int64     `json:"id"`
	SnapshotSystemPassingAlarmID *string    `json:"snapshot_system_passing_alarm_id"`
	PassingID                    *string    `json:"passing_id"`
	VehicleID                    *string    `json:"vehicle_id"`
	LicensePlateNumber           *string    `json:"license_plate_number"`
	RegistrationTime             *time.Time `json:"registration_time"`
	SupervisionTime              *time.Time `json:"supervision_time"`
	Remarks                      *string    `json:"remarks"`
	CameraID                     *string    `json:"camera_id"`
	AlarmType                    *int       `json:"alarm_type"`
	ReviewStatus                 *string    `json:"review_status"`
	VehicleType                  *int       `json:"vehicle_type"`
	IsOnline                     *bool      `json:"is_online"`
	IsSupervision                *bool      `json:"is_supervision"`
	CreatedAt                    *time.Time `json:"created_at"`
	CreatedBy                    *string    `json:"created_by"`
	UpdatedAt                    *time.Time `json:"updated_at"`
	UpdatedBy                    *string    `json:"updated_by"`
	DeletedAt                    *time.Time `json:"deleted_at"`
	DeletedBy                    *string    `json:"deleted_by"`
}

// aggregate max on columns of table "snapshot_system_passing_alarm"
type SnapshotSystemPassingAlarmMaxFields struct {
	ID                           *int64     `json:"id"`
	SnapshotSystemPassingAlarmID *string    `json:"snapshot_system_passing_alarm_id"`
	PassingID                    *string    `json:"passing_id"`
	VehicleID                    *string    `json:"vehicle_id"`
	LicensePlateNumber           *string    `json:"license_plate_number"`
	RegistrationTime             *time.Time `json:"registration_time"`
	SupervisionTime              *time.Time `json:"supervision_time"`
	Remarks                      *string    `json:"remarks"`
	CameraID                     *string    `json:"camera_id"`
	AlarmType                    *int       `json:"alarm_type"`
	ReviewStatus                 *string    `json:"review_status"`
	VehicleType                  *int       `json:"vehicle_type"`
	IsOnline                     *bool      `json:"is_online"`
	IsSupervision                *bool      `json:"is_supervision"`
	CreatedAt                    *time.Time `json:"created_at"`
	CreatedBy                    *string    `json:"created_by"`
	UpdatedAt                    *time.Time `json:"updated_at"`
	UpdatedBy                    *string    `json:"updated_by"`
	DeletedAt                    *time.Time `json:"deleted_at"`
	DeletedBy                    *string    `json:"deleted_by"`
}

// aggregate min on columns of table "snapshot_system_passing_alarm"
type SnapshotSystemPassingAlarmMinFields struct {
	ID                           *int64     `json:"id"`
	SnapshotSystemPassingAlarmID *string    `json:"snapshot_system_passing_alarm_id"`
	PassingID                    *string    `json:"passing_id"`
	VehicleID                    *string    `json:"vehicle_id"`
	LicensePlateNumber           *string    `json:"license_plate_number"`
	RegistrationTime             *time.Time `json:"registration_time"`
	SupervisionTime              *time.Time `json:"supervision_time"`
	Remarks                      *string    `json:"remarks"`
	CameraID                     *string    `json:"camera_id"`
	AlarmType                    *int       `json:"alarm_type"`
	ReviewStatus                 *string    `json:"review_status"`
	VehicleType                  *int       `json:"vehicle_type"`
	IsOnline                     *bool      `json:"is_online"`
	IsSupervision                *bool      `json:"is_supervision"`
	CreatedAt                    *time.Time `json:"created_at"`
	CreatedBy                    *string    `json:"created_by"`
	UpdatedAt                    *time.Time `json:"updated_at"`
	UpdatedBy                    *string    `json:"updated_by"`
	DeletedAt                    *time.Time `json:"deleted_at"`
	DeletedBy                    *string    `json:"deleted_by"`
}

// response of any mutation on the table "snapshot_system_passing_alarm"
type SnapshotSystemPassingAlarmMutationResponse struct {
	AffectedRows int                                  `json:"affected_rows"`
	Returning    []*model1.SnapshotSystemPassingAlarm `json:"returning"`
}

// ordering options when selecting data from "snapshot_system_passing_alarm"
type SnapshotSystemPassingAlarmOrderBy struct {
	ID                           *model.OrderBy `json:"id"`
	SnapshotSystemPassingAlarmID *model.OrderBy `json:"snapshot_system_passing_alarm_id"`
	PassingID                    *model.OrderBy `json:"passing_id"`
	VehicleID                    *model.OrderBy `json:"vehicle_id"`
	LicensePlateNumber           *model.OrderBy `json:"license_plate_number"`
	RegistrationTime             *model.OrderBy `json:"registration_time"`
	SupervisionTime              *model.OrderBy `json:"supervision_time"`
	Remarks                      *model.OrderBy `json:"remarks"`
	CameraID                     *model.OrderBy `json:"camera_id"`
	AlarmType                    *model.OrderBy `json:"alarm_type"`
	ReviewStatus                 *model.OrderBy `json:"review_status"`
	VehicleType                  *model.OrderBy `json:"vehicle_type"`
	IsOnline                     *model.OrderBy `json:"is_online"`
	IsSupervision                *model.OrderBy `json:"is_supervision"`
	CreatedAt                    *model.OrderBy `json:"created_at"`
	CreatedBy                    *model.OrderBy `json:"created_by"`
	UpdatedAt                    *model.OrderBy `json:"updated_at"`
	UpdatedBy                    *model.OrderBy `json:"updated_by"`
	DeletedAt                    *model.OrderBy `json:"deleted_at"`
	DeletedBy                    *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "snapshot_system_passing_alarm"
type SnapshotSystemPassingAlarmSetInput struct {
	ID                           *int64     `json:"id"`
	SnapshotSystemPassingAlarmID *string    `json:"snapshot_system_passing_alarm_id"`
	PassingID                    *string    `json:"passing_id"`
	VehicleID                    *string    `json:"vehicle_id"`
	LicensePlateNumber           *string    `json:"license_plate_number"`
	RegistrationTime             *time.Time `json:"registration_time"`
	SupervisionTime              *time.Time `json:"supervision_time"`
	Remarks                      *string    `json:"remarks"`
	CameraID                     *string    `json:"camera_id"`
	AlarmType                    *int       `json:"alarm_type"`
	ReviewStatus                 *string    `json:"review_status"`
	VehicleType                  *int       `json:"vehicle_type"`
	IsOnline                     *bool      `json:"is_online"`
	IsSupervision                *bool      `json:"is_supervision"`
	CreatedAt                    *time.Time `json:"created_at"`
	CreatedBy                    *string    `json:"created_by"`
	UpdatedAt                    *time.Time `json:"updated_at"`
	UpdatedBy                    *string    `json:"updated_by"`
	DeletedAt                    *time.Time `json:"deleted_at"`
	DeletedBy                    *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "snapshot_system_passing_alarm"
type SnapshotSystemPassingAlarmStddevFields struct {
	ID          *int64 `json:"id"`
	AlarmType   *int   `json:"alarm_type"`
	VehicleType *int   `json:"vehicle_type"`
}

// aggregate stddev_pop on columns of table "snapshot_system_passing_alarm"
type SnapshotSystemPassingAlarmStddevPopFields struct {
	ID          *int64 `json:"id"`
	AlarmType   *int   `json:"alarm_type"`
	VehicleType *int   `json:"vehicle_type"`
}

// aggregate stddev_samp on columns of table "snapshot_system_passing_alarm"
type SnapshotSystemPassingAlarmStddevSampFields struct {
	ID          *int64 `json:"id"`
	AlarmType   *int   `json:"alarm_type"`
	VehicleType *int   `json:"vehicle_type"`
}

// aggregate sum on columns of table "snapshot_system_passing_alarm"
type SnapshotSystemPassingAlarmSumFields struct {
	ID          *int64 `json:"id"`
	AlarmType   *int   `json:"alarm_type"`
	VehicleType *int   `json:"vehicle_type"`
}

// aggregate var_pop on columns of table "snapshot_system_passing_alarm"
type SnapshotSystemPassingAlarmVarPopFields struct {
	ID          *int64 `json:"id"`
	AlarmType   *int   `json:"alarm_type"`
	VehicleType *int   `json:"vehicle_type"`
}

// aggregate var_samp on columns of table "snapshot_system_passing_alarm"
type SnapshotSystemPassingAlarmVarSampFields struct {
	ID          *int64 `json:"id"`
	AlarmType   *int   `json:"alarm_type"`
	VehicleType *int   `json:"vehicle_type"`
}

// aggregate variance on columns of table "snapshot_system_passing_alarm"
type SnapshotSystemPassingAlarmVarianceFields struct {
	ID          *int64 `json:"id"`
	AlarmType   *int   `json:"alarm_type"`
	VehicleType *int   `json:"vehicle_type"`
}

// aggregated selection of "vehicle_passing_record"
type VehiclePassingRecordAggregate struct {
	Aggregate *VehiclePassingRecordAggregateFields `json:"aggregate"`
}

// aggregate fields of "vehicle_passing_record"
type VehiclePassingRecordAggregateFields struct {
	Avg        *VehiclePassingRecordAvgFields        `json:"avg"`
	Count      *int                                  `json:"count"`
	Max        *VehiclePassingRecordMaxFields        `json:"max"`
	Min        *VehiclePassingRecordMinFields        `json:"min"`
	Stddev     *VehiclePassingRecordStddevFields     `json:"stddev"`
	StddevPop  *VehiclePassingRecordStddevPopFields  `json:"stddev_pop"`
	StddevSamp *VehiclePassingRecordStddevSampFields `json:"stddev_samp"`
	Sum        *VehiclePassingRecordSumFields        `json:"sum"`
	VarPop     *VehiclePassingRecordVarPopFields     `json:"var_pop"`
	VarSamp    *VehiclePassingRecordVarSampFields    `json:"var_samp"`
	Variance   *VehiclePassingRecordVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "vehicle_passing_record"
type VehiclePassingRecordAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_passing_record'.
type VehiclePassingRecordBoolExp struct {
	And                    []*VehiclePassingRecordBoolExp  `json:"_and"`
	Not                    *VehiclePassingRecordBoolExp    `json:"_not"`
	Or                     []*VehiclePassingRecordBoolExp  `json:"_or"`
	ID                     *model.BigintComparisonExp      `json:"id"`
	VehiclePassingRecordID *model.StringComparisonExp      `json:"vehicle_passing_record_id"`
	VehicleID              *model.StringComparisonExp      `json:"vehicle_id"`
	LicensePlateNumber     *model.StringComparisonExp      `json:"license_plate_number"`
	PassingTime            *model.TimestamptzComparisonExp `json:"passing_time"`
	RegistrationTime       *model.TimestamptzComparisonExp `json:"registration_time"`
	CameraID               *model.StringComparisonExp      `json:"camera_id"`
	PassType               *model.StringComparisonExp      `json:"pass_type"`
	PictureURL             *model.StringComparisonExp      `json:"picture_url"`
	ReviewStatus           *model.StringComparisonExp      `json:"review_status"`
	VehicleType            *model.StringComparisonExp      `json:"vehicle_type"`
	IsOnline               *model.BooleanComparisonExp     `json:"is_online"`
	CreatedAt              *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy              *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt              *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy              *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt              *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy              *model.StringComparisonExp      `json:"deleted_by"`
}

// input type for incrementing integer column in table "vehicle_passing_record"
type VehiclePassingRecordIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "vehicle_passing_record"
type VehiclePassingRecordInsertInput struct {
	ID                     *int64     `json:"id"`
	VehiclePassingRecordID *string    `json:"vehicle_passing_record_id"`
	VehicleID              *string    `json:"vehicle_id"`
	LicensePlateNumber     *string    `json:"license_plate_number"`
	PassingTime            *time.Time `json:"passing_time"`
	RegistrationTime       *time.Time `json:"registration_time"`
	CameraID               *string    `json:"camera_id"`
	PassType               *string    `json:"pass_type"`
	PictureURL             *string    `json:"picture_url"`
	ReviewStatus           *string    `json:"review_status"`
	VehicleType            *string    `json:"vehicle_type"`
	IsOnline               *bool      `json:"is_online"`
	CreatedAt              *time.Time `json:"created_at"`
	CreatedBy              *string    `json:"created_by"`
	UpdatedAt              *time.Time `json:"updated_at"`
	UpdatedBy              *string    `json:"updated_by"`
	DeletedAt              *time.Time `json:"deleted_at"`
	DeletedBy              *string    `json:"deleted_by"`
}

// aggregate max on columns of table "vehicle_passing_record"
type VehiclePassingRecordMaxFields struct {
	ID                     *int64     `json:"id"`
	VehiclePassingRecordID *string    `json:"vehicle_passing_record_id"`
	VehicleID              *string    `json:"vehicle_id"`
	LicensePlateNumber     *string    `json:"license_plate_number"`
	PassingTime            *time.Time `json:"passing_time"`
	RegistrationTime       *time.Time `json:"registration_time"`
	CameraID               *string    `json:"camera_id"`
	PassType               *string    `json:"pass_type"`
	PictureURL             *string    `json:"picture_url"`
	ReviewStatus           *string    `json:"review_status"`
	VehicleType            *string    `json:"vehicle_type"`
	IsOnline               *bool      `json:"is_online"`
	CreatedAt              *time.Time `json:"created_at"`
	CreatedBy              *string    `json:"created_by"`
	UpdatedAt              *time.Time `json:"updated_at"`
	UpdatedBy              *string    `json:"updated_by"`
	DeletedAt              *time.Time `json:"deleted_at"`
	DeletedBy              *string    `json:"deleted_by"`
}

// aggregate min on columns of table "vehicle_passing_record"
type VehiclePassingRecordMinFields struct {
	ID                     *int64     `json:"id"`
	VehiclePassingRecordID *string    `json:"vehicle_passing_record_id"`
	VehicleID              *string    `json:"vehicle_id"`
	LicensePlateNumber     *string    `json:"license_plate_number"`
	PassingTime            *time.Time `json:"passing_time"`
	RegistrationTime       *time.Time `json:"registration_time"`
	CameraID               *string    `json:"camera_id"`
	PassType               *string    `json:"pass_type"`
	PictureURL             *string    `json:"picture_url"`
	ReviewStatus           *string    `json:"review_status"`
	VehicleType            *string    `json:"vehicle_type"`
	IsOnline               *bool      `json:"is_online"`
	CreatedAt              *time.Time `json:"created_at"`
	CreatedBy              *string    `json:"created_by"`
	UpdatedAt              *time.Time `json:"updated_at"`
	UpdatedBy              *string    `json:"updated_by"`
	DeletedAt              *time.Time `json:"deleted_at"`
	DeletedBy              *string    `json:"deleted_by"`
}

// response of any mutation on the table "vehicle_passing_record"
type VehiclePassingRecordMutationResponse struct {
	AffectedRows int                            `json:"affected_rows"`
	Returning    []*model1.VehiclePassingRecord `json:"returning"`
}

// ordering options when selecting data from "vehicle_passing_record"
type VehiclePassingRecordOrderBy struct {
	ID                     *model.OrderBy `json:"id"`
	VehiclePassingRecordID *model.OrderBy `json:"vehicle_passing_record_id"`
	VehicleID              *model.OrderBy `json:"vehicle_id"`
	LicensePlateNumber     *model.OrderBy `json:"license_plate_number"`
	PassingTime            *model.OrderBy `json:"passing_time"`
	RegistrationTime       *model.OrderBy `json:"registration_time"`
	CameraID               *model.OrderBy `json:"camera_id"`
	PassType               *model.OrderBy `json:"pass_type"`
	PictureURL             *model.OrderBy `json:"picture_url"`
	ReviewStatus           *model.OrderBy `json:"review_status"`
	VehicleType            *model.OrderBy `json:"vehicle_type"`
	IsOnline               *model.OrderBy `json:"is_online"`
	CreatedAt              *model.OrderBy `json:"created_at"`
	CreatedBy              *model.OrderBy `json:"created_by"`
	UpdatedAt              *model.OrderBy `json:"updated_at"`
	UpdatedBy              *model.OrderBy `json:"updated_by"`
	DeletedAt              *model.OrderBy `json:"deleted_at"`
	DeletedBy              *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "vehicle_passing_record"
type VehiclePassingRecordSetInput struct {
	ID                     *int64     `json:"id"`
	VehiclePassingRecordID *string    `json:"vehicle_passing_record_id"`
	VehicleID              *string    `json:"vehicle_id"`
	LicensePlateNumber     *string    `json:"license_plate_number"`
	PassingTime            *time.Time `json:"passing_time"`
	RegistrationTime       *time.Time `json:"registration_time"`
	CameraID               *string    `json:"camera_id"`
	PassType               *string    `json:"pass_type"`
	PictureURL             *string    `json:"picture_url"`
	ReviewStatus           *string    `json:"review_status"`
	VehicleType            *string    `json:"vehicle_type"`
	IsOnline               *bool      `json:"is_online"`
	CreatedAt              *time.Time `json:"created_at"`
	CreatedBy              *string    `json:"created_by"`
	UpdatedAt              *time.Time `json:"updated_at"`
	UpdatedBy              *string    `json:"updated_by"`
	DeletedAt              *time.Time `json:"deleted_at"`
	DeletedBy              *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "vehicle_passing_record"
type VehiclePassingRecordStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "vehicle_passing_record"
type VehiclePassingRecordStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "vehicle_passing_record"
type VehiclePassingRecordStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "vehicle_passing_record"
type VehiclePassingRecordSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "vehicle_passing_record"
type VehiclePassingRecordVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "vehicle_passing_record"
type VehiclePassingRecordVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "vehicle_passing_record"
type VehiclePassingRecordVarianceFields struct {
	ID *int64 `json:"id"`
}

// 可选select
type ConstructionCameraSelectColumn string

const (
	// 按指定方法生成                                  ( 主键                                                   )
	ConstructionCameraSelectColumnID ConstructionCameraSelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                               )
	ConstructionCameraSelectColumnConstructionCameraID ConstructionCameraSelectColumn = "construction_camera_id"
	// 设备名称                                        (                                                        )
	ConstructionCameraSelectColumnDeviceName ConstructionCameraSelectColumn = "device_name"
	// IP地址                                          (                                                        )
	ConstructionCameraSelectColumnIPAddress ConstructionCameraSelectColumn = "ip_address"
	// 端口                                            (                                                        )
	ConstructionCameraSelectColumnPort ConstructionCameraSelectColumn = "port"
	// 设备编号                                        (                                                        )
	ConstructionCameraSelectColumnDeviceID ConstructionCameraSelectColumn = "device_id"
	// 关联工地                                        ( construction_info 工地信息表的construction_info_id )
	ConstructionCameraSelectColumnConstructionInfoID ConstructionCameraSelectColumn = "construction_info_id"
	// 卡号                                            (                                                        )
	ConstructionCameraSelectColumnSimNumber ConstructionCameraSelectColumn = "sim_number"
	// 登记时间                                        (                                                        )
	ConstructionCameraSelectColumnRegistrationTime ConstructionCameraSelectColumn = "registration_time"
	// 是否删除                                        (                                                        )
	ConstructionCameraSelectColumnIsDeleted ConstructionCameraSelectColumn = "is_deleted"
	// 创建时间                                        (                                                        )
	ConstructionCameraSelectColumnCreatedAt ConstructionCameraSelectColumn = "created_at"
	// 创建人                                          ( system_user表的user_id                             )
	ConstructionCameraSelectColumnCreatedBy ConstructionCameraSelectColumn = "created_by"
	// 修改时间                                        (                                                        )
	ConstructionCameraSelectColumnUpdatedAt ConstructionCameraSelectColumn = "updated_at"
	// 修改人                                          ( system_user表的user_id                             )
	ConstructionCameraSelectColumnUpdatedBy ConstructionCameraSelectColumn = "updated_by"
	// 删除时间                                        (                                                        )
	ConstructionCameraSelectColumnDeletedAt ConstructionCameraSelectColumn = "deleted_at"
	// 删除人                                          ( system_user表的user_id                             )
	ConstructionCameraSelectColumnDeletedBy ConstructionCameraSelectColumn = "deleted_by"
)

var AllConstructionCameraSelectColumn = []ConstructionCameraSelectColumn{
	ConstructionCameraSelectColumnID,
	ConstructionCameraSelectColumnConstructionCameraID,
	ConstructionCameraSelectColumnDeviceName,
	ConstructionCameraSelectColumnIPAddress,
	ConstructionCameraSelectColumnPort,
	ConstructionCameraSelectColumnDeviceID,
	ConstructionCameraSelectColumnConstructionInfoID,
	ConstructionCameraSelectColumnSimNumber,
	ConstructionCameraSelectColumnRegistrationTime,
	ConstructionCameraSelectColumnIsDeleted,
	ConstructionCameraSelectColumnCreatedAt,
	ConstructionCameraSelectColumnCreatedBy,
	ConstructionCameraSelectColumnUpdatedAt,
	ConstructionCameraSelectColumnUpdatedBy,
	ConstructionCameraSelectColumnDeletedAt,
	ConstructionCameraSelectColumnDeletedBy,
}

func (e ConstructionCameraSelectColumn) IsValid() bool {
	switch e {
	case ConstructionCameraSelectColumnID, ConstructionCameraSelectColumnConstructionCameraID, ConstructionCameraSelectColumnDeviceName, ConstructionCameraSelectColumnIPAddress, ConstructionCameraSelectColumnPort, ConstructionCameraSelectColumnDeviceID, ConstructionCameraSelectColumnConstructionInfoID, ConstructionCameraSelectColumnSimNumber, ConstructionCameraSelectColumnRegistrationTime, ConstructionCameraSelectColumnIsDeleted, ConstructionCameraSelectColumnCreatedAt, ConstructionCameraSelectColumnCreatedBy, ConstructionCameraSelectColumnUpdatedAt, ConstructionCameraSelectColumnUpdatedBy, ConstructionCameraSelectColumnDeletedAt, ConstructionCameraSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e ConstructionCameraSelectColumn) String() string {
	return string(e)
}

func (e *ConstructionCameraSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ConstructionCameraSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ConstructionCameraSelectColumn", str)
	}
	return nil
}

func (e ConstructionCameraSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type ConstructionInfoSelectColumn string

const (
	// 按指定方法生成                                  ( 主键                       )
	ConstructionInfoSelectColumnID ConstructionInfoSelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	ConstructionInfoSelectColumnConstructionInfoID ConstructionInfoSelectColumn = "construction_info_id"
	// 项目名称                                        (                            )
	ConstructionInfoSelectColumnProjectName ConstructionInfoSelectColumn = "project_name"
	// 工程项目代码                                    (                            )
	ConstructionInfoSelectColumnProjectCode ConstructionInfoSelectColumn = "project_code"
	// 合同开工日期                                    (                            )
	ConstructionInfoSelectColumnContractStartDate ConstructionInfoSelectColumn = "contract_start_date"
	// 合同竣工日期                                    (                            )
	ConstructionInfoSelectColumnContractCompletionDate ConstructionInfoSelectColumn = "contract_completion_date"
	// 建设单位                                        (                            )
	ConstructionInfoSelectColumnBuildAgency ConstructionInfoSelectColumn = "build_agency"
	// 项目负责人                                      (                            )
	ConstructionInfoSelectColumnProjectManager ConstructionInfoSelectColumn = "project_manager"
	// 地区                                            (                            )
	ConstructionInfoSelectColumnAreaID ConstructionInfoSelectColumn = "area_id"
	// 地址                                            (                            )
	ConstructionInfoSelectColumnAddress ConstructionInfoSelectColumn = "address"
	// 地图经纬度                                      (                            )
	ConstructionInfoSelectColumnMapCoordinate ConstructionInfoSelectColumn = "map_coordinate"
	// 施工单位                                        ( 与建设单位的区别？         )
	ConstructionInfoSelectColumnConstructionAgency ConstructionInfoSelectColumn = "construction_agency"
	// 监理单位                                        (                            )
	ConstructionInfoSelectColumnSupervisionAgency ConstructionInfoSelectColumn = "supervision_agency"
	// 设备安装单位                                    (                            )
	ConstructionInfoSelectColumnDeviceInstallationAgency ConstructionInfoSelectColumn = "device_installation_agency"
	// 设备安装地点                                    (                            )
	ConstructionInfoSelectColumnDeviceInstallationLocation ConstructionInfoSelectColumn = "device_installation_location"
	// 服务合同编号                                    (                            )
	ConstructionInfoSelectColumnServiceContractNumber ConstructionInfoSelectColumn = "service_contract_number"
	// 合同签署时间                                    (                            )
	ConstructionInfoSelectColumnContractSigningTime ConstructionInfoSelectColumn = "contract_signing_time"
	// 服务启用日期                                    (                            )
	ConstructionInfoSelectColumnServiceActivationDate ConstructionInfoSelectColumn = "service_activation_date"
	// 证明有效期                                      (                            )
	ConstructionInfoSelectColumnProofValidDate ConstructionInfoSelectColumn = "proof_valid_date"
	// 经纬度                                          (                            )
	ConstructionInfoSelectColumnCoordinate ConstructionInfoSelectColumn = "coordinate"
	// 安装时间                                        (                            )
	ConstructionInfoSelectColumnInstallationTime ConstructionInfoSelectColumn = "installation_time"
	// 项目名称标签                                    (                            )
	ConstructionInfoSelectColumnProjectNameTag ConstructionInfoSelectColumn = "project_name_tag"
	// 进出口数量                                      (                            )
	ConstructionInfoSelectColumnImportExportQuantity ConstructionInfoSelectColumn = "import_export_quantity"
	// 停用原因                                        (                            )
	ConstructionInfoSelectColumnDeactivationReason ConstructionInfoSelectColumn = "deactivation_reason"
	// 未安装原因                                      (                            )
	ConstructionInfoSelectColumnUninstalledReason ConstructionInfoSelectColumn = "uninstalled_reason"
	// 证明起始有效期                                  (                            )
	ConstructionInfoSelectColumnProofValidDateUntil ConstructionInfoSelectColumn = "proof_valid_date_until"
	// 类型（1.工地 2.矿山）                           (                            )
	ConstructionInfoSelectColumnConstructionType ConstructionInfoSelectColumn = "construction_type"
	// 联系人                                          (                            )
	ConstructionInfoSelectColumnContactPerson ConstructionInfoSelectColumn = "contact_person"
	// 联系电话                                        (                            )
	ConstructionInfoSelectColumnContactPhone ConstructionInfoSelectColumn = "contact_phone"
	// 是否完工（0.未完工 1.已完工 2.已停用）          (                            )
	ConstructionInfoSelectColumnFinished ConstructionInfoSelectColumn = "finished"
	// 是否市直属                                      (                            )
	ConstructionInfoSelectColumnIsCityDirectly ConstructionInfoSelectColumn = "is_city_directly"
	// 是否安装（0.未申请 1.已安装 2.已申请未安装）    (                            )
	ConstructionInfoSelectColumnIsInstallation ConstructionInfoSelectColumn = "is_installation"
	// 是否删除                                        (                            )
	ConstructionInfoSelectColumnIsDeleted ConstructionInfoSelectColumn = "is_deleted"
	// 登记时间                                        (                            )
	ConstructionInfoSelectColumnRegistrationTime ConstructionInfoSelectColumn = "registration_time"
	// 创建时间                                        (                            )
	ConstructionInfoSelectColumnCreatedAt ConstructionInfoSelectColumn = "created_at"
	// 创建人                                          ( system_user表的user_id )
	ConstructionInfoSelectColumnCreatedBy ConstructionInfoSelectColumn = "created_by"
	// 修改时间                                        (                            )
	ConstructionInfoSelectColumnUpdatedAt ConstructionInfoSelectColumn = "updated_at"
	// 修改人                                          ( system_user表的user_id )
	ConstructionInfoSelectColumnUpdatedBy ConstructionInfoSelectColumn = "updated_by"
	// 删除时间                                        (                            )
	ConstructionInfoSelectColumnDeletedAt ConstructionInfoSelectColumn = "deleted_at"
	// 删除人                                          ( system_user表的user_id )
	ConstructionInfoSelectColumnDeletedBy ConstructionInfoSelectColumn = "deleted_by"
)

var AllConstructionInfoSelectColumn = []ConstructionInfoSelectColumn{
	ConstructionInfoSelectColumnID,
	ConstructionInfoSelectColumnConstructionInfoID,
	ConstructionInfoSelectColumnProjectName,
	ConstructionInfoSelectColumnProjectCode,
	ConstructionInfoSelectColumnContractStartDate,
	ConstructionInfoSelectColumnContractCompletionDate,
	ConstructionInfoSelectColumnBuildAgency,
	ConstructionInfoSelectColumnProjectManager,
	ConstructionInfoSelectColumnAreaID,
	ConstructionInfoSelectColumnAddress,
	ConstructionInfoSelectColumnMapCoordinate,
	ConstructionInfoSelectColumnConstructionAgency,
	ConstructionInfoSelectColumnSupervisionAgency,
	ConstructionInfoSelectColumnDeviceInstallationAgency,
	ConstructionInfoSelectColumnDeviceInstallationLocation,
	ConstructionInfoSelectColumnServiceContractNumber,
	ConstructionInfoSelectColumnContractSigningTime,
	ConstructionInfoSelectColumnServiceActivationDate,
	ConstructionInfoSelectColumnProofValidDate,
	ConstructionInfoSelectColumnCoordinate,
	ConstructionInfoSelectColumnInstallationTime,
	ConstructionInfoSelectColumnProjectNameTag,
	ConstructionInfoSelectColumnImportExportQuantity,
	ConstructionInfoSelectColumnDeactivationReason,
	ConstructionInfoSelectColumnUninstalledReason,
	ConstructionInfoSelectColumnProofValidDateUntil,
	ConstructionInfoSelectColumnConstructionType,
	ConstructionInfoSelectColumnContactPerson,
	ConstructionInfoSelectColumnContactPhone,
	ConstructionInfoSelectColumnFinished,
	ConstructionInfoSelectColumnIsCityDirectly,
	ConstructionInfoSelectColumnIsInstallation,
	ConstructionInfoSelectColumnIsDeleted,
	ConstructionInfoSelectColumnRegistrationTime,
	ConstructionInfoSelectColumnCreatedAt,
	ConstructionInfoSelectColumnCreatedBy,
	ConstructionInfoSelectColumnUpdatedAt,
	ConstructionInfoSelectColumnUpdatedBy,
	ConstructionInfoSelectColumnDeletedAt,
	ConstructionInfoSelectColumnDeletedBy,
}

func (e ConstructionInfoSelectColumn) IsValid() bool {
	switch e {
	case ConstructionInfoSelectColumnID, ConstructionInfoSelectColumnConstructionInfoID, ConstructionInfoSelectColumnProjectName, ConstructionInfoSelectColumnProjectCode, ConstructionInfoSelectColumnContractStartDate, ConstructionInfoSelectColumnContractCompletionDate, ConstructionInfoSelectColumnBuildAgency, ConstructionInfoSelectColumnProjectManager, ConstructionInfoSelectColumnAreaID, ConstructionInfoSelectColumnAddress, ConstructionInfoSelectColumnMapCoordinate, ConstructionInfoSelectColumnConstructionAgency, ConstructionInfoSelectColumnSupervisionAgency, ConstructionInfoSelectColumnDeviceInstallationAgency, ConstructionInfoSelectColumnDeviceInstallationLocation, ConstructionInfoSelectColumnServiceContractNumber, ConstructionInfoSelectColumnContractSigningTime, ConstructionInfoSelectColumnServiceActivationDate, ConstructionInfoSelectColumnProofValidDate, ConstructionInfoSelectColumnCoordinate, ConstructionInfoSelectColumnInstallationTime, ConstructionInfoSelectColumnProjectNameTag, ConstructionInfoSelectColumnImportExportQuantity, ConstructionInfoSelectColumnDeactivationReason, ConstructionInfoSelectColumnUninstalledReason, ConstructionInfoSelectColumnProofValidDateUntil, ConstructionInfoSelectColumnConstructionType, ConstructionInfoSelectColumnContactPerson, ConstructionInfoSelectColumnContactPhone, ConstructionInfoSelectColumnFinished, ConstructionInfoSelectColumnIsCityDirectly, ConstructionInfoSelectColumnIsInstallation, ConstructionInfoSelectColumnIsDeleted, ConstructionInfoSelectColumnRegistrationTime, ConstructionInfoSelectColumnCreatedAt, ConstructionInfoSelectColumnCreatedBy, ConstructionInfoSelectColumnUpdatedAt, ConstructionInfoSelectColumnUpdatedBy, ConstructionInfoSelectColumnDeletedAt, ConstructionInfoSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e ConstructionInfoSelectColumn) String() string {
	return string(e)
}

func (e *ConstructionInfoSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ConstructionInfoSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ConstructionInfoSelectColumn", str)
	}
	return nil
}

func (e ConstructionInfoSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type ConstructionUploadPicSelectColumn string

const (
	// 按指定方法生成                                  ( 主键                                                   )
	ConstructionUploadPicSelectColumnID ConstructionUploadPicSelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                               )
	ConstructionUploadPicSelectColumnConstructionUploadPicID ConstructionUploadPicSelectColumn = "construction_upload_pic_id"
	// 工地ID                                          ( construction_info 工地信息表的construction_info_id )
	ConstructionUploadPicSelectColumnConstructionInfoID ConstructionUploadPicSelectColumn = "construction_info_id"
	// 图片                                            (                                                        )
	ConstructionUploadPicSelectColumnPictureURL ConstructionUploadPicSelectColumn = "picture_url"
	// 是否删除                                        (                                                        )
	ConstructionUploadPicSelectColumnIsDeleted ConstructionUploadPicSelectColumn = "is_deleted"
	// 创建时间                                        (                                                        )
	ConstructionUploadPicSelectColumnCreatedAt ConstructionUploadPicSelectColumn = "created_at"
	// 创建人                                          ( system_user表的user_id                             )
	ConstructionUploadPicSelectColumnCreatedBy ConstructionUploadPicSelectColumn = "created_by"
	// 修改时间                                        (                                                        )
	ConstructionUploadPicSelectColumnUpdatedAt ConstructionUploadPicSelectColumn = "updated_at"
	// 修改人                                          ( system_user表的user_id                             )
	ConstructionUploadPicSelectColumnUpdatedBy ConstructionUploadPicSelectColumn = "updated_by"
	// 删除时间                                        (                                                        )
	ConstructionUploadPicSelectColumnDeletedAt ConstructionUploadPicSelectColumn = "deleted_at"
	// 删除人                                          ( system_user表的user_id                             )
	ConstructionUploadPicSelectColumnDeletedBy ConstructionUploadPicSelectColumn = "deleted_by"
)

var AllConstructionUploadPicSelectColumn = []ConstructionUploadPicSelectColumn{
	ConstructionUploadPicSelectColumnID,
	ConstructionUploadPicSelectColumnConstructionUploadPicID,
	ConstructionUploadPicSelectColumnConstructionInfoID,
	ConstructionUploadPicSelectColumnPictureURL,
	ConstructionUploadPicSelectColumnIsDeleted,
	ConstructionUploadPicSelectColumnCreatedAt,
	ConstructionUploadPicSelectColumnCreatedBy,
	ConstructionUploadPicSelectColumnUpdatedAt,
	ConstructionUploadPicSelectColumnUpdatedBy,
	ConstructionUploadPicSelectColumnDeletedAt,
	ConstructionUploadPicSelectColumnDeletedBy,
}

func (e ConstructionUploadPicSelectColumn) IsValid() bool {
	switch e {
	case ConstructionUploadPicSelectColumnID, ConstructionUploadPicSelectColumnConstructionUploadPicID, ConstructionUploadPicSelectColumnConstructionInfoID, ConstructionUploadPicSelectColumnPictureURL, ConstructionUploadPicSelectColumnIsDeleted, ConstructionUploadPicSelectColumnCreatedAt, ConstructionUploadPicSelectColumnCreatedBy, ConstructionUploadPicSelectColumnUpdatedAt, ConstructionUploadPicSelectColumnUpdatedBy, ConstructionUploadPicSelectColumnDeletedAt, ConstructionUploadPicSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e ConstructionUploadPicSelectColumn) String() string {
	return string(e)
}

func (e *ConstructionUploadPicSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ConstructionUploadPicSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ConstructionUploadPicSelectColumn", str)
	}
	return nil
}

func (e ConstructionUploadPicSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type OfflineRegistrationRecordSelectColumn string

const (
	// 按指定方法生成                                  ( 主键                                                       )
	OfflineRegistrationRecordSelectColumnID OfflineRegistrationRecordSelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                   )
	OfflineRegistrationRecordSelectColumnOfflineRegistrationRecord OfflineRegistrationRecordSelectColumn = "offline_registration_record"
	// 停运登记表的ID                                  ( outage_registration 停运登记表的outage_registration_id )
	OfflineRegistrationRecordSelectColumnOutageRegistrationID OfflineRegistrationRecordSelectColumn = "outage_registration_id"
	// 登记内容                                        (                                                            )
	OfflineRegistrationRecordSelectColumnRegistrationContent OfflineRegistrationRecordSelectColumn = "registration_content"
	// 登记时间                                        (                                                            )
	OfflineRegistrationRecordSelectColumnRegistrationTime OfflineRegistrationRecordSelectColumn = "registration_time"
	// 登记人                                          (                                                            )
	OfflineRegistrationRecordSelectColumnRegistrant OfflineRegistrationRecordSelectColumn = "registrant"
	// 是否删除                                        (                                                            )
	OfflineRegistrationRecordSelectColumnIsDeleted OfflineRegistrationRecordSelectColumn = "is_deleted"
	// 创建时间                                        (                                                            )
	OfflineRegistrationRecordSelectColumnCreatedAt OfflineRegistrationRecordSelectColumn = "created_at"
	// 创建人                                          ( system_user表的user_id                                 )
	OfflineRegistrationRecordSelectColumnCreatedBy OfflineRegistrationRecordSelectColumn = "created_by"
	// 修改时间                                        (                                                            )
	OfflineRegistrationRecordSelectColumnUpdatedAt OfflineRegistrationRecordSelectColumn = "updated_at"
	// 修改人                                          ( system_user表的user_id                                 )
	OfflineRegistrationRecordSelectColumnUpdatedBy OfflineRegistrationRecordSelectColumn = "updated_by"
	// 删除时间                                        (                                                            )
	OfflineRegistrationRecordSelectColumnDeletedAt OfflineRegistrationRecordSelectColumn = "deleted_at"
	// 删除人                                          ( system_user表的user_id                                 )
	OfflineRegistrationRecordSelectColumnDeletedBy OfflineRegistrationRecordSelectColumn = "deleted_by"
)

var AllOfflineRegistrationRecordSelectColumn = []OfflineRegistrationRecordSelectColumn{
	OfflineRegistrationRecordSelectColumnID,
	OfflineRegistrationRecordSelectColumnOfflineRegistrationRecord,
	OfflineRegistrationRecordSelectColumnOutageRegistrationID,
	OfflineRegistrationRecordSelectColumnRegistrationContent,
	OfflineRegistrationRecordSelectColumnRegistrationTime,
	OfflineRegistrationRecordSelectColumnRegistrant,
	OfflineRegistrationRecordSelectColumnIsDeleted,
	OfflineRegistrationRecordSelectColumnCreatedAt,
	OfflineRegistrationRecordSelectColumnCreatedBy,
	OfflineRegistrationRecordSelectColumnUpdatedAt,
	OfflineRegistrationRecordSelectColumnUpdatedBy,
	OfflineRegistrationRecordSelectColumnDeletedAt,
	OfflineRegistrationRecordSelectColumnDeletedBy,
}

func (e OfflineRegistrationRecordSelectColumn) IsValid() bool {
	switch e {
	case OfflineRegistrationRecordSelectColumnID, OfflineRegistrationRecordSelectColumnOfflineRegistrationRecord, OfflineRegistrationRecordSelectColumnOutageRegistrationID, OfflineRegistrationRecordSelectColumnRegistrationContent, OfflineRegistrationRecordSelectColumnRegistrationTime, OfflineRegistrationRecordSelectColumnRegistrant, OfflineRegistrationRecordSelectColumnIsDeleted, OfflineRegistrationRecordSelectColumnCreatedAt, OfflineRegistrationRecordSelectColumnCreatedBy, OfflineRegistrationRecordSelectColumnUpdatedAt, OfflineRegistrationRecordSelectColumnUpdatedBy, OfflineRegistrationRecordSelectColumnDeletedAt, OfflineRegistrationRecordSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e OfflineRegistrationRecordSelectColumn) String() string {
	return string(e)
}

func (e *OfflineRegistrationRecordSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OfflineRegistrationRecordSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OfflineRegistrationRecordSelectColumn", str)
	}
	return nil
}

func (e OfflineRegistrationRecordSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type SnapshotSystemPassingAlarmSelectColumn string

const (
	// 按指定方法生成                                             ( 主键                                                         )
	SnapshotSystemPassingAlarmSelectColumnID SnapshotSystemPassingAlarmSelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用            ( 联合主键                                                     )
	SnapshotSystemPassingAlarmSelectColumnSnapshotSystemPassingAlarmID SnapshotSystemPassingAlarmSelectColumn = "snapshot_system_passing_alarm_id"
	// 过车记录ID                                                 ( vehicle_passing_record 过车记录表的vehicle_passing_record_id )
	SnapshotSystemPassingAlarmSelectColumnPassingID SnapshotSystemPassingAlarmSelectColumn = "passing_id"
	// vehicle_info 车辆信息表 的vehicle_id                   (                                                              )
	SnapshotSystemPassingAlarmSelectColumnVehicleID SnapshotSystemPassingAlarmSelectColumn = "vehicle_id"
	// 车牌号                                                     (                                                              )
	SnapshotSystemPassingAlarmSelectColumnLicensePlateNumber SnapshotSystemPassingAlarmSelectColumn = "license_plate_number"
	// 登记时间                                                   (                                                              )
	SnapshotSystemPassingAlarmSelectColumnRegistrationTime SnapshotSystemPassingAlarmSelectColumn = "registration_time"
	// 监管时间                                                   (                                                              )
	SnapshotSystemPassingAlarmSelectColumnSupervisionTime SnapshotSystemPassingAlarmSelectColumn = "supervision_time"
	// 备注                                                       (                                                              )
	SnapshotSystemPassingAlarmSelectColumnRemarks SnapshotSystemPassingAlarmSelectColumn = "remarks"
	// 摄像头ID                                                   ( construction_camera 工地摄像头表的construction_camera_id )
	SnapshotSystemPassingAlarmSelectColumnCameraID SnapshotSystemPassingAlarmSelectColumn = "camera_id"
	// 报警类型（1.未纳入管控平台 2.未报备工程 3.未纳入管控平台） (                                                              )
	SnapshotSystemPassingAlarmSelectColumnAlarmType SnapshotSystemPassingAlarmSelectColumn = "alarm_type"
	// 审核状态                                                   (                                                              )
	SnapshotSystemPassingAlarmSelectColumnReviewStatus SnapshotSystemPassingAlarmSelectColumn = "review_status"
	// 车辆类型                                                   ( 车辆类型字典                                             )
	SnapshotSystemPassingAlarmSelectColumnVehicleType SnapshotSystemPassingAlarmSelectColumn = "vehicle_type"
	// 是否在线                                                   (                                                              )
	SnapshotSystemPassingAlarmSelectColumnIsOnline SnapshotSystemPassingAlarmSelectColumn = "is_online"
	// 是否监管                                                   (                                                              )
	SnapshotSystemPassingAlarmSelectColumnIsSupervision SnapshotSystemPassingAlarmSelectColumn = "is_supervision"
	// 创建时间                                                   (                                                              )
	SnapshotSystemPassingAlarmSelectColumnCreatedAt SnapshotSystemPassingAlarmSelectColumn = "created_at"
	// 创建人                                                     ( system_user表的user_id                                   )
	SnapshotSystemPassingAlarmSelectColumnCreatedBy SnapshotSystemPassingAlarmSelectColumn = "created_by"
	// 修改时间                                                   (                                                              )
	SnapshotSystemPassingAlarmSelectColumnUpdatedAt SnapshotSystemPassingAlarmSelectColumn = "updated_at"
	// 修改人                                                     ( system_user表的user_id                                   )
	SnapshotSystemPassingAlarmSelectColumnUpdatedBy SnapshotSystemPassingAlarmSelectColumn = "updated_by"
	// 删除时间                                                   (                                                              )
	SnapshotSystemPassingAlarmSelectColumnDeletedAt SnapshotSystemPassingAlarmSelectColumn = "deleted_at"
	// 删除人                                                     ( system_user表的user_id                                   )
	SnapshotSystemPassingAlarmSelectColumnDeletedBy SnapshotSystemPassingAlarmSelectColumn = "deleted_by"
)

var AllSnapshotSystemPassingAlarmSelectColumn = []SnapshotSystemPassingAlarmSelectColumn{
	SnapshotSystemPassingAlarmSelectColumnID,
	SnapshotSystemPassingAlarmSelectColumnSnapshotSystemPassingAlarmID,
	SnapshotSystemPassingAlarmSelectColumnPassingID,
	SnapshotSystemPassingAlarmSelectColumnVehicleID,
	SnapshotSystemPassingAlarmSelectColumnLicensePlateNumber,
	SnapshotSystemPassingAlarmSelectColumnRegistrationTime,
	SnapshotSystemPassingAlarmSelectColumnSupervisionTime,
	SnapshotSystemPassingAlarmSelectColumnRemarks,
	SnapshotSystemPassingAlarmSelectColumnCameraID,
	SnapshotSystemPassingAlarmSelectColumnAlarmType,
	SnapshotSystemPassingAlarmSelectColumnReviewStatus,
	SnapshotSystemPassingAlarmSelectColumnVehicleType,
	SnapshotSystemPassingAlarmSelectColumnIsOnline,
	SnapshotSystemPassingAlarmSelectColumnIsSupervision,
	SnapshotSystemPassingAlarmSelectColumnCreatedAt,
	SnapshotSystemPassingAlarmSelectColumnCreatedBy,
	SnapshotSystemPassingAlarmSelectColumnUpdatedAt,
	SnapshotSystemPassingAlarmSelectColumnUpdatedBy,
	SnapshotSystemPassingAlarmSelectColumnDeletedAt,
	SnapshotSystemPassingAlarmSelectColumnDeletedBy,
}

func (e SnapshotSystemPassingAlarmSelectColumn) IsValid() bool {
	switch e {
	case SnapshotSystemPassingAlarmSelectColumnID, SnapshotSystemPassingAlarmSelectColumnSnapshotSystemPassingAlarmID, SnapshotSystemPassingAlarmSelectColumnPassingID, SnapshotSystemPassingAlarmSelectColumnVehicleID, SnapshotSystemPassingAlarmSelectColumnLicensePlateNumber, SnapshotSystemPassingAlarmSelectColumnRegistrationTime, SnapshotSystemPassingAlarmSelectColumnSupervisionTime, SnapshotSystemPassingAlarmSelectColumnRemarks, SnapshotSystemPassingAlarmSelectColumnCameraID, SnapshotSystemPassingAlarmSelectColumnAlarmType, SnapshotSystemPassingAlarmSelectColumnReviewStatus, SnapshotSystemPassingAlarmSelectColumnVehicleType, SnapshotSystemPassingAlarmSelectColumnIsOnline, SnapshotSystemPassingAlarmSelectColumnIsSupervision, SnapshotSystemPassingAlarmSelectColumnCreatedAt, SnapshotSystemPassingAlarmSelectColumnCreatedBy, SnapshotSystemPassingAlarmSelectColumnUpdatedAt, SnapshotSystemPassingAlarmSelectColumnUpdatedBy, SnapshotSystemPassingAlarmSelectColumnDeletedAt, SnapshotSystemPassingAlarmSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e SnapshotSystemPassingAlarmSelectColumn) String() string {
	return string(e)
}

func (e *SnapshotSystemPassingAlarmSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SnapshotSystemPassingAlarmSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SnapshotSystemPassingAlarmSelectColumn", str)
	}
	return nil
}

func (e SnapshotSystemPassingAlarmSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type VehiclePassingRecordSelectColumn string

const (
	// 按指定方法生成                                  ( 主键                                                         )
	VehiclePassingRecordSelectColumnID VehiclePassingRecordSelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                     )
	VehiclePassingRecordSelectColumnVehiclePassingRecordID VehiclePassingRecordSelectColumn = "vehicle_passing_record_id"
	// vehicle_info 车辆信息表 的vehicle_id        (                                                              )
	VehiclePassingRecordSelectColumnVehicleID VehiclePassingRecordSelectColumn = "vehicle_id"
	// 车牌号                                          (                                                              )
	VehiclePassingRecordSelectColumnLicensePlateNumber VehiclePassingRecordSelectColumn = "license_plate_number"
	// 过车时间                                        (                                                              )
	VehiclePassingRecordSelectColumnPassingTime VehiclePassingRecordSelectColumn = "passing_time"
	// 登记时间                                        (                                                              )
	VehiclePassingRecordSelectColumnRegistrationTime VehiclePassingRecordSelectColumn = "registration_time"
	// 摄像头ID                                        ( construction_camera 工地摄像头表的construction_camera_id )
	VehiclePassingRecordSelectColumnCameraID VehiclePassingRecordSelectColumn = "camera_id"
	// 过车类型                                        (                                                              )
	VehiclePassingRecordSelectColumnPassType VehiclePassingRecordSelectColumn = "pass_type"
	// 图片地址                                        (                                                              )
	VehiclePassingRecordSelectColumnPictureURL VehiclePassingRecordSelectColumn = "picture_url"
	// 审核状态                                        (                                                              )
	VehiclePassingRecordSelectColumnReviewStatus VehiclePassingRecordSelectColumn = "review_status"
	// 车辆类型                                        (                                                              )
	VehiclePassingRecordSelectColumnVehicleType VehiclePassingRecordSelectColumn = "vehicle_type"
	// 是否在线                                        (                                                              )
	VehiclePassingRecordSelectColumnIsOnline VehiclePassingRecordSelectColumn = "is_online"
	// 创建时间                                        (                                                              )
	VehiclePassingRecordSelectColumnCreatedAt VehiclePassingRecordSelectColumn = "created_at"
	// 创建人                                          ( system_user表的user_id                                   )
	VehiclePassingRecordSelectColumnCreatedBy VehiclePassingRecordSelectColumn = "created_by"
	// 修改时间                                        (                                                              )
	VehiclePassingRecordSelectColumnUpdatedAt VehiclePassingRecordSelectColumn = "updated_at"
	// 修改人                                          ( system_user表的user_id                                   )
	VehiclePassingRecordSelectColumnUpdatedBy VehiclePassingRecordSelectColumn = "updated_by"
	// 删除时间                                        (                                                              )
	VehiclePassingRecordSelectColumnDeletedAt VehiclePassingRecordSelectColumn = "deleted_at"
	// 删除人                                          ( system_user表的user_id                                   )
	VehiclePassingRecordSelectColumnDeletedBy VehiclePassingRecordSelectColumn = "deleted_by"
)

var AllVehiclePassingRecordSelectColumn = []VehiclePassingRecordSelectColumn{
	VehiclePassingRecordSelectColumnID,
	VehiclePassingRecordSelectColumnVehiclePassingRecordID,
	VehiclePassingRecordSelectColumnVehicleID,
	VehiclePassingRecordSelectColumnLicensePlateNumber,
	VehiclePassingRecordSelectColumnPassingTime,
	VehiclePassingRecordSelectColumnRegistrationTime,
	VehiclePassingRecordSelectColumnCameraID,
	VehiclePassingRecordSelectColumnPassType,
	VehiclePassingRecordSelectColumnPictureURL,
	VehiclePassingRecordSelectColumnReviewStatus,
	VehiclePassingRecordSelectColumnVehicleType,
	VehiclePassingRecordSelectColumnIsOnline,
	VehiclePassingRecordSelectColumnCreatedAt,
	VehiclePassingRecordSelectColumnCreatedBy,
	VehiclePassingRecordSelectColumnUpdatedAt,
	VehiclePassingRecordSelectColumnUpdatedBy,
	VehiclePassingRecordSelectColumnDeletedAt,
	VehiclePassingRecordSelectColumnDeletedBy,
}

func (e VehiclePassingRecordSelectColumn) IsValid() bool {
	switch e {
	case VehiclePassingRecordSelectColumnID, VehiclePassingRecordSelectColumnVehiclePassingRecordID, VehiclePassingRecordSelectColumnVehicleID, VehiclePassingRecordSelectColumnLicensePlateNumber, VehiclePassingRecordSelectColumnPassingTime, VehiclePassingRecordSelectColumnRegistrationTime, VehiclePassingRecordSelectColumnCameraID, VehiclePassingRecordSelectColumnPassType, VehiclePassingRecordSelectColumnPictureURL, VehiclePassingRecordSelectColumnReviewStatus, VehiclePassingRecordSelectColumnVehicleType, VehiclePassingRecordSelectColumnIsOnline, VehiclePassingRecordSelectColumnCreatedAt, VehiclePassingRecordSelectColumnCreatedBy, VehiclePassingRecordSelectColumnUpdatedAt, VehiclePassingRecordSelectColumnUpdatedBy, VehiclePassingRecordSelectColumnDeletedAt, VehiclePassingRecordSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e VehiclePassingRecordSelectColumn) String() string {
	return string(e)
}

func (e *VehiclePassingRecordSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehiclePassingRecordSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehiclePassingRecordSelectColumn", str)
	}
	return nil
}

func (e VehiclePassingRecordSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
