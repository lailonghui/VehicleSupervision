// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/vehicle_snapshot_system/graph/model"
	model1 "VehicleSupervision/internal/modules/vehicle_snapshot_system/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	ConstructionCamera struct {
		ConstructionCameraID func(childComplexity int) int
		ConstructionInfoID   func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DeviceID             func(childComplexity int) int
		DeviceName           func(childComplexity int) int
		ID                   func(childComplexity int) int
		IPAddress            func(childComplexity int) int
		IsDeleted            func(childComplexity int) int
		Port                 func(childComplexity int) int
		RegistrationTime     func(childComplexity int) int
		SimNumber            func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
	}

	ConstructionCameraAggregate struct {
		Aggregate func(childComplexity int) int
	}

	ConstructionCameraAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	ConstructionCameraAvgFields struct {
		ID func(childComplexity int) int
	}

	ConstructionCameraMaxFields struct {
		ConstructionCameraID func(childComplexity int) int
		ConstructionInfoID   func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DeviceID             func(childComplexity int) int
		DeviceName           func(childComplexity int) int
		ID                   func(childComplexity int) int
		IPAddress            func(childComplexity int) int
		IsDeleted            func(childComplexity int) int
		Port                 func(childComplexity int) int
		RegistrationTime     func(childComplexity int) int
		SimNumber            func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
	}

	ConstructionCameraMinFields struct {
		ConstructionCameraID func(childComplexity int) int
		ConstructionInfoID   func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DeviceID             func(childComplexity int) int
		DeviceName           func(childComplexity int) int
		ID                   func(childComplexity int) int
		IPAddress            func(childComplexity int) int
		IsDeleted            func(childComplexity int) int
		Port                 func(childComplexity int) int
		RegistrationTime     func(childComplexity int) int
		SimNumber            func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
	}

	ConstructionCameraMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	ConstructionCameraStddevFields struct {
		ID func(childComplexity int) int
	}

	ConstructionCameraStddevPopFields struct {
		ID func(childComplexity int) int
	}

	ConstructionCameraStddevSampFields struct {
		ID func(childComplexity int) int
	}

	ConstructionCameraSumFields struct {
		ID func(childComplexity int) int
	}

	ConstructionCameraVarPopFields struct {
		ID func(childComplexity int) int
	}

	ConstructionCameraVarSampFields struct {
		ID func(childComplexity int) int
	}

	ConstructionCameraVarianceFields struct {
		ID func(childComplexity int) int
	}

	ConstructionInfo struct {
		Address                    func(childComplexity int) int
		AreaID                     func(childComplexity int) int
		BuildAgency                func(childComplexity int) int
		ConstructionAgency         func(childComplexity int) int
		ConstructionInfoID         func(childComplexity int) int
		ConstructionType           func(childComplexity int) int
		ContactPerson              func(childComplexity int) int
		ContactPhone               func(childComplexity int) int
		ContractCompletionDate     func(childComplexity int) int
		ContractSigningTime        func(childComplexity int) int
		ContractStartDate          func(childComplexity int) int
		Coordinate                 func(childComplexity int) int
		CreatedAt                  func(childComplexity int) int
		CreatedBy                  func(childComplexity int) int
		DeactivationReason         func(childComplexity int) int
		DeletedAt                  func(childComplexity int) int
		DeletedBy                  func(childComplexity int) int
		DeviceInstallationAgency   func(childComplexity int) int
		DeviceInstallationLocation func(childComplexity int) int
		Finished                   func(childComplexity int) int
		ID                         func(childComplexity int) int
		ImportExportQuantity       func(childComplexity int) int
		InstallationTime           func(childComplexity int) int
		IsCityDirectly             func(childComplexity int) int
		IsDeleted                  func(childComplexity int) int
		IsInstallation             func(childComplexity int) int
		MapCoordinate              func(childComplexity int) int
		ProjectCode                func(childComplexity int) int
		ProjectManager             func(childComplexity int) int
		ProjectName                func(childComplexity int) int
		ProjectNameTag             func(childComplexity int) int
		ProofValidDate             func(childComplexity int) int
		ProofValidDateUntil        func(childComplexity int) int
		RegistrationTime           func(childComplexity int) int
		ServiceActivationDate      func(childComplexity int) int
		ServiceContractNumber      func(childComplexity int) int
		SupervisionAgency          func(childComplexity int) int
		UninstalledReason          func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		UpdatedBy                  func(childComplexity int) int
	}

	ConstructionInfoAggregate struct {
		Aggregate func(childComplexity int) int
	}

	ConstructionInfoAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	ConstructionInfoAvgFields struct {
		ConstructionType func(childComplexity int) int
		Finished         func(childComplexity int) int
		ID               func(childComplexity int) int
	}

	ConstructionInfoMaxFields struct {
		Address                    func(childComplexity int) int
		AreaID                     func(childComplexity int) int
		BuildAgency                func(childComplexity int) int
		ConstructionAgency         func(childComplexity int) int
		ConstructionInfoID         func(childComplexity int) int
		ConstructionType           func(childComplexity int) int
		ContactPerson              func(childComplexity int) int
		ContactPhone               func(childComplexity int) int
		ContractCompletionDate     func(childComplexity int) int
		ContractSigningTime        func(childComplexity int) int
		ContractStartDate          func(childComplexity int) int
		Coordinate                 func(childComplexity int) int
		CreatedAt                  func(childComplexity int) int
		CreatedBy                  func(childComplexity int) int
		DeactivationReason         func(childComplexity int) int
		DeletedAt                  func(childComplexity int) int
		DeletedBy                  func(childComplexity int) int
		DeviceInstallationAgency   func(childComplexity int) int
		DeviceInstallationLocation func(childComplexity int) int
		Finished                   func(childComplexity int) int
		ID                         func(childComplexity int) int
		ImportExportQuantity       func(childComplexity int) int
		InstallationTime           func(childComplexity int) int
		IsCityDirectly             func(childComplexity int) int
		IsDeleted                  func(childComplexity int) int
		IsInstallation             func(childComplexity int) int
		MapCoordinate              func(childComplexity int) int
		ProjectCode                func(childComplexity int) int
		ProjectManager             func(childComplexity int) int
		ProjectName                func(childComplexity int) int
		ProjectNameTag             func(childComplexity int) int
		ProofValidDate             func(childComplexity int) int
		ProofValidDateUntil        func(childComplexity int) int
		RegistrationTime           func(childComplexity int) int
		ServiceActivationDate      func(childComplexity int) int
		ServiceContractNumber      func(childComplexity int) int
		SupervisionAgency          func(childComplexity int) int
		UninstalledReason          func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		UpdatedBy                  func(childComplexity int) int
	}

	ConstructionInfoMinFields struct {
		Address                    func(childComplexity int) int
		AreaID                     func(childComplexity int) int
		BuildAgency                func(childComplexity int) int
		ConstructionAgency         func(childComplexity int) int
		ConstructionInfoID         func(childComplexity int) int
		ConstructionType           func(childComplexity int) int
		ContactPerson              func(childComplexity int) int
		ContactPhone               func(childComplexity int) int
		ContractCompletionDate     func(childComplexity int) int
		ContractSigningTime        func(childComplexity int) int
		ContractStartDate          func(childComplexity int) int
		Coordinate                 func(childComplexity int) int
		CreatedAt                  func(childComplexity int) int
		CreatedBy                  func(childComplexity int) int
		DeactivationReason         func(childComplexity int) int
		DeletedAt                  func(childComplexity int) int
		DeletedBy                  func(childComplexity int) int
		DeviceInstallationAgency   func(childComplexity int) int
		DeviceInstallationLocation func(childComplexity int) int
		Finished                   func(childComplexity int) int
		ID                         func(childComplexity int) int
		ImportExportQuantity       func(childComplexity int) int
		InstallationTime           func(childComplexity int) int
		IsCityDirectly             func(childComplexity int) int
		IsDeleted                  func(childComplexity int) int
		IsInstallation             func(childComplexity int) int
		MapCoordinate              func(childComplexity int) int
		ProjectCode                func(childComplexity int) int
		ProjectManager             func(childComplexity int) int
		ProjectName                func(childComplexity int) int
		ProjectNameTag             func(childComplexity int) int
		ProofValidDate             func(childComplexity int) int
		ProofValidDateUntil        func(childComplexity int) int
		RegistrationTime           func(childComplexity int) int
		ServiceActivationDate      func(childComplexity int) int
		ServiceContractNumber      func(childComplexity int) int
		SupervisionAgency          func(childComplexity int) int
		UninstalledReason          func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		UpdatedBy                  func(childComplexity int) int
	}

	ConstructionInfoMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	ConstructionInfoStddevFields struct {
		ConstructionType func(childComplexity int) int
		Finished         func(childComplexity int) int
		ID               func(childComplexity int) int
	}

	ConstructionInfoStddevPopFields struct {
		ConstructionType func(childComplexity int) int
		Finished         func(childComplexity int) int
		ID               func(childComplexity int) int
	}

	ConstructionInfoStddevSampFields struct {
		ConstructionType func(childComplexity int) int
		Finished         func(childComplexity int) int
		ID               func(childComplexity int) int
	}

	ConstructionInfoSumFields struct {
		ConstructionType func(childComplexity int) int
		Finished         func(childComplexity int) int
		ID               func(childComplexity int) int
	}

	ConstructionInfoVarPopFields struct {
		ConstructionType func(childComplexity int) int
		Finished         func(childComplexity int) int
		ID               func(childComplexity int) int
	}

	ConstructionInfoVarSampFields struct {
		ConstructionType func(childComplexity int) int
		Finished         func(childComplexity int) int
		ID               func(childComplexity int) int
	}

	ConstructionInfoVarianceFields struct {
		ConstructionType func(childComplexity int) int
		Finished         func(childComplexity int) int
		ID               func(childComplexity int) int
	}

	ConstructionUploadPic struct {
		ConstructionInfoID      func(childComplexity int) int
		ConstructionUploadPicID func(childComplexity int) int
		CreatedAt               func(childComplexity int) int
		CreatedBy               func(childComplexity int) int
		DeletedAt               func(childComplexity int) int
		DeletedBy               func(childComplexity int) int
		ID                      func(childComplexity int) int
		IsDeleted               func(childComplexity int) int
		PictureURL              func(childComplexity int) int
		UpdatedAt               func(childComplexity int) int
		UpdatedBy               func(childComplexity int) int
	}

	ConstructionUploadPicAggregate struct {
		Aggregate func(childComplexity int) int
	}

	ConstructionUploadPicAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	ConstructionUploadPicAvgFields struct {
		ID func(childComplexity int) int
	}

	ConstructionUploadPicMaxFields struct {
		ConstructionInfoID      func(childComplexity int) int
		ConstructionUploadPicID func(childComplexity int) int
		CreatedAt               func(childComplexity int) int
		CreatedBy               func(childComplexity int) int
		DeletedAt               func(childComplexity int) int
		DeletedBy               func(childComplexity int) int
		ID                      func(childComplexity int) int
		IsDeleted               func(childComplexity int) int
		PictureURL              func(childComplexity int) int
		UpdatedAt               func(childComplexity int) int
		UpdatedBy               func(childComplexity int) int
	}

	ConstructionUploadPicMinFields struct {
		ConstructionInfoID      func(childComplexity int) int
		ConstructionUploadPicID func(childComplexity int) int
		CreatedAt               func(childComplexity int) int
		CreatedBy               func(childComplexity int) int
		DeletedAt               func(childComplexity int) int
		DeletedBy               func(childComplexity int) int
		ID                      func(childComplexity int) int
		IsDeleted               func(childComplexity int) int
		PictureURL              func(childComplexity int) int
		UpdatedAt               func(childComplexity int) int
		UpdatedBy               func(childComplexity int) int
	}

	ConstructionUploadPicMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	ConstructionUploadPicStddevFields struct {
		ID func(childComplexity int) int
	}

	ConstructionUploadPicStddevPopFields struct {
		ID func(childComplexity int) int
	}

	ConstructionUploadPicStddevSampFields struct {
		ID func(childComplexity int) int
	}

	ConstructionUploadPicSumFields struct {
		ID func(childComplexity int) int
	}

	ConstructionUploadPicVarPopFields struct {
		ID func(childComplexity int) int
	}

	ConstructionUploadPicVarSampFields struct {
		ID func(childComplexity int) int
	}

	ConstructionUploadPicVarianceFields struct {
		ID func(childComplexity int) int
	}

	Mutation struct {
		DeleteConstructionCamera                  func(childComplexity int, where model.ConstructionCameraBoolExp) int
		DeleteConstructionCameraByPk              func(childComplexity int, id int64) int
		DeleteConstructionCameraByUnionPk         func(childComplexity int, constructionCameraID string) int
		DeleteConstructionInfo                    func(childComplexity int, where model.ConstructionInfoBoolExp) int
		DeleteConstructionInfoByPk                func(childComplexity int, id int64) int
		DeleteConstructionInfoByUnionPk           func(childComplexity int, constructionInfoID string) int
		DeleteConstructionUploadPic               func(childComplexity int, where model.ConstructionUploadPicBoolExp) int
		DeleteConstructionUploadPicByPk           func(childComplexity int, id int64) int
		DeleteConstructionUploadPicByUnionPk      func(childComplexity int, constructionUploadPicID string) int
		DeleteOfflineRegistrationRecord           func(childComplexity int, where model.OfflineRegistrationRecordBoolExp) int
		DeleteOfflineRegistrationRecordByPk       func(childComplexity int, id int64) int
		DeleteOfflineRegistrationRecordByUnionPk  func(childComplexity int, offlineRegistrationRecordID string) int
		DeleteSnapshotSystemPassingAlarm          func(childComplexity int, where model.SnapshotSystemPassingAlarmBoolExp) int
		DeleteSnapshotSystemPassingAlarmByPk      func(childComplexity int, id int64) int
		DeleteSnapshotSystemPassingAlarmByUnionPk func(childComplexity int, snapshotSystemPassingAlarmID string) int
		DeleteVehiclePassingRecord                func(childComplexity int, where model.VehiclePassingRecordBoolExp) int
		DeleteVehiclePassingRecordByPk            func(childComplexity int, id int64) int
		DeleteVehiclePassingRecordByUnionPk       func(childComplexity int, vehiclePassingRecordID string) int
		InsertConstructionCamera                  func(childComplexity int, objects []*model.ConstructionCameraInsertInput) int
		InsertConstructionCameraOne               func(childComplexity int, objects model.ConstructionCameraInsertInput) int
		InsertConstructionInfo                    func(childComplexity int, objects []*model.ConstructionInfoInsertInput) int
		InsertConstructionInfoOne                 func(childComplexity int, objects model.ConstructionInfoInsertInput) int
		InsertConstructionUploadPic               func(childComplexity int, objects []*model.ConstructionUploadPicInsertInput) int
		InsertConstructionUploadPicOne            func(childComplexity int, objects model.ConstructionUploadPicInsertInput) int
		InsertOfflineRegistrationRecord           func(childComplexity int, objects []*model.OfflineRegistrationRecordInsertInput) int
		InsertOfflineRegistrationRecordOne        func(childComplexity int, objects model.OfflineRegistrationRecordInsertInput) int
		InsertSnapshotSystemPassingAlarm          func(childComplexity int, objects []*model.SnapshotSystemPassingAlarmInsertInput) int
		InsertSnapshotSystemPassingAlarmOne       func(childComplexity int, objects model.SnapshotSystemPassingAlarmInsertInput) int
		InsertVehiclePassingRecord                func(childComplexity int, objects []*model.VehiclePassingRecordInsertInput) int
		InsertVehiclePassingRecordOne             func(childComplexity int, objects model.VehiclePassingRecordInsertInput) int
		UpdateConstructionCamera                  func(childComplexity int, inc *model.ConstructionCameraIncInput, set *model.ConstructionCameraSetInput, where model.ConstructionCameraBoolExp) int
		UpdateConstructionCameraByPk              func(childComplexity int, inc *model.ConstructionCameraIncInput, set *model.ConstructionCameraSetInput, id int64) int
		UpdateConstructionCameraByUnionPk         func(childComplexity int, inc *model.ConstructionCameraIncInput, set *model.ConstructionCameraSetInput, constructionCameraID string) int
		UpdateConstructionInfo                    func(childComplexity int, inc *model.ConstructionInfoIncInput, set *model.ConstructionInfoSetInput, where model.ConstructionInfoBoolExp) int
		UpdateConstructionInfoByPk                func(childComplexity int, inc *model.ConstructionInfoIncInput, set *model.ConstructionInfoSetInput, id int64) int
		UpdateConstructionInfoByUnionPk           func(childComplexity int, inc *model.ConstructionInfoIncInput, set *model.ConstructionInfoSetInput, constructionInfoID string) int
		UpdateConstructionUploadPic               func(childComplexity int, inc *model.ConstructionUploadPicIncInput, set *model.ConstructionUploadPicSetInput, where model.ConstructionUploadPicBoolExp) int
		UpdateConstructionUploadPicByPk           func(childComplexity int, inc *model.ConstructionUploadPicIncInput, set *model.ConstructionUploadPicSetInput, id int64) int
		UpdateConstructionUploadPicByUnionPk      func(childComplexity int, inc *model.ConstructionUploadPicIncInput, set *model.ConstructionUploadPicSetInput, constructionUploadPicID string) int
		UpdateOfflineRegistrationRecord           func(childComplexity int, inc *model.OfflineRegistrationRecordIncInput, set *model.OfflineRegistrationRecordSetInput, where model.OfflineRegistrationRecordBoolExp) int
		UpdateOfflineRegistrationRecordByPk       func(childComplexity int, inc *model.OfflineRegistrationRecordIncInput, set *model.OfflineRegistrationRecordSetInput, id int64) int
		UpdateOfflineRegistrationRecordByUnionPk  func(childComplexity int, inc *model.OfflineRegistrationRecordIncInput, set *model.OfflineRegistrationRecordSetInput, offlineRegistrationRecordID string) int
		UpdateSnapshotSystemPassingAlarm          func(childComplexity int, inc *model.SnapshotSystemPassingAlarmIncInput, set *model.SnapshotSystemPassingAlarmSetInput, where model.SnapshotSystemPassingAlarmBoolExp) int
		UpdateSnapshotSystemPassingAlarmByPk      func(childComplexity int, inc *model.SnapshotSystemPassingAlarmIncInput, set *model.SnapshotSystemPassingAlarmSetInput, id int64) int
		UpdateSnapshotSystemPassingAlarmByUnionPk func(childComplexity int, inc *model.SnapshotSystemPassingAlarmIncInput, set *model.SnapshotSystemPassingAlarmSetInput, snapshotSystemPassingAlarmID string) int
		UpdateVehiclePassingRecord                func(childComplexity int, inc *model.VehiclePassingRecordIncInput, set *model.VehiclePassingRecordSetInput, where model.VehiclePassingRecordBoolExp) int
		UpdateVehiclePassingRecordByPk            func(childComplexity int, inc *model.VehiclePassingRecordIncInput, set *model.VehiclePassingRecordSetInput, id int64) int
		UpdateVehiclePassingRecordByUnionPk       func(childComplexity int, inc *model.VehiclePassingRecordIncInput, set *model.VehiclePassingRecordSetInput, vehiclePassingRecordID string) int
	}

	OfflineRegistrationRecord struct {
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		ID                          func(childComplexity int) int
		IsDeleted                   func(childComplexity int) int
		OfflineRegistrationRecordID func(childComplexity int) int
		OutageRegistrationID        func(childComplexity int) int
		Registrant                  func(childComplexity int) int
		RegistrationContent         func(childComplexity int) int
		RegistrationTime            func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
	}

	OfflineRegistrationRecordAggregate struct {
		Aggregate func(childComplexity int) int
	}

	OfflineRegistrationRecordAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	OfflineRegistrationRecordAvgFields struct {
		ID func(childComplexity int) int
	}

	OfflineRegistrationRecordMaxFields struct {
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		ID                          func(childComplexity int) int
		IsDeleted                   func(childComplexity int) int
		OfflineRegistrationRecordID func(childComplexity int) int
		OutageRegistrationID        func(childComplexity int) int
		Registrant                  func(childComplexity int) int
		RegistrationContent         func(childComplexity int) int
		RegistrationTime            func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
	}

	OfflineRegistrationRecordMinFields struct {
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		ID                          func(childComplexity int) int
		IsDeleted                   func(childComplexity int) int
		OfflineRegistrationRecordID func(childComplexity int) int
		OutageRegistrationID        func(childComplexity int) int
		Registrant                  func(childComplexity int) int
		RegistrationContent         func(childComplexity int) int
		RegistrationTime            func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
	}

	OfflineRegistrationRecordMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	OfflineRegistrationRecordStddevFields struct {
		ID func(childComplexity int) int
	}

	OfflineRegistrationRecordStddevPopFields struct {
		ID func(childComplexity int) int
	}

	OfflineRegistrationRecordStddevSampFields struct {
		ID func(childComplexity int) int
	}

	OfflineRegistrationRecordSumFields struct {
		ID func(childComplexity int) int
	}

	OfflineRegistrationRecordVarPopFields struct {
		ID func(childComplexity int) int
	}

	OfflineRegistrationRecordVarSampFields struct {
		ID func(childComplexity int) int
	}

	OfflineRegistrationRecordVarianceFields struct {
		ID func(childComplexity int) int
	}

	Query struct {
		ConstructionCamera                  func(childComplexity int, distinctOn []model.ConstructionCameraSelectColumn, limit *int, offset *int, orderBy []*model.ConstructionCameraOrderBy, where *model.ConstructionCameraBoolExp) int
		ConstructionCameraAggregate         func(childComplexity int, distinctOn []model.ConstructionCameraSelectColumn, limit *int, offset *int, orderBy []*model.ConstructionCameraOrderBy, where *model.ConstructionCameraBoolExp) int
		ConstructionCameraByPk              func(childComplexity int, id int64) int
		ConstructionCameraByUnionPk         func(childComplexity int, constructionCameraID string) int
		ConstructionInfo                    func(childComplexity int, distinctOn []model.ConstructionInfoSelectColumn, limit *int, offset *int, orderBy []*model.ConstructionInfoOrderBy, where *model.ConstructionInfoBoolExp) int
		ConstructionInfoAggregate           func(childComplexity int, distinctOn []model.ConstructionInfoSelectColumn, limit *int, offset *int, orderBy []*model.ConstructionInfoOrderBy, where *model.ConstructionInfoBoolExp) int
		ConstructionInfoByPk                func(childComplexity int, id int64) int
		ConstructionInfoByUnionPk           func(childComplexity int, constructionInfoID string) int
		ConstructionUploadPic               func(childComplexity int, distinctOn []model.ConstructionUploadPicSelectColumn, limit *int, offset *int, orderBy []*model.ConstructionUploadPicOrderBy, where *model.ConstructionUploadPicBoolExp) int
		ConstructionUploadPicAggregate      func(childComplexity int, distinctOn []model.ConstructionUploadPicSelectColumn, limit *int, offset *int, orderBy []*model.ConstructionUploadPicOrderBy, where *model.ConstructionUploadPicBoolExp) int
		ConstructionUploadPicByPk           func(childComplexity int, id int64) int
		ConstructionUploadPicByUnionPk      func(childComplexity int, constructionUploadPicID string) int
		OfflineRegistrationRecord           func(childComplexity int, distinctOn []model.OfflineRegistrationRecordSelectColumn, limit *int, offset *int, orderBy []*model.OfflineRegistrationRecordOrderBy, where *model.OfflineRegistrationRecordBoolExp) int
		OfflineRegistrationRecordAggregate  func(childComplexity int, distinctOn []model.OfflineRegistrationRecordSelectColumn, limit *int, offset *int, orderBy []*model.OfflineRegistrationRecordOrderBy, where *model.OfflineRegistrationRecordBoolExp) int
		OfflineRegistrationRecordByPk       func(childComplexity int, id int64) int
		OfflineRegistrationRecordByUnionPk  func(childComplexity int, offlineRegistrationRecordID string) int
		SnapshotSystemPassingAlarm          func(childComplexity int, distinctOn []model.SnapshotSystemPassingAlarmSelectColumn, limit *int, offset *int, orderBy []*model.SnapshotSystemPassingAlarmOrderBy, where *model.SnapshotSystemPassingAlarmBoolExp) int
		SnapshotSystemPassingAlarmAggregate func(childComplexity int, distinctOn []model.SnapshotSystemPassingAlarmSelectColumn, limit *int, offset *int, orderBy []*model.SnapshotSystemPassingAlarmOrderBy, where *model.SnapshotSystemPassingAlarmBoolExp) int
		SnapshotSystemPassingAlarmByPk      func(childComplexity int, id int64) int
		SnapshotSystemPassingAlarmByUnionPk func(childComplexity int, snapshotSystemPassingAlarmID string) int
		VehiclePassingRecord                func(childComplexity int, distinctOn []model.VehiclePassingRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehiclePassingRecordOrderBy, where *model.VehiclePassingRecordBoolExp) int
		VehiclePassingRecordAggregate       func(childComplexity int, distinctOn []model.VehiclePassingRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehiclePassingRecordOrderBy, where *model.VehiclePassingRecordBoolExp) int
		VehiclePassingRecordByPk            func(childComplexity int, id int64) int
		VehiclePassingRecordByUnionPk       func(childComplexity int, vehiclePassingRecordID string) int
	}

	SnapshotSystemPassingAlarm struct {
		AlarmType                    func(childComplexity int) int
		CameraID                     func(childComplexity int) int
		CreatedAt                    func(childComplexity int) int
		CreatedBy                    func(childComplexity int) int
		DeletedAt                    func(childComplexity int) int
		DeletedBy                    func(childComplexity int) int
		ID                           func(childComplexity int) int
		IsOnline                     func(childComplexity int) int
		IsSupervision                func(childComplexity int) int
		LicensePlateNumber           func(childComplexity int) int
		PassingID                    func(childComplexity int) int
		RegistrationTime             func(childComplexity int) int
		Remarks                      func(childComplexity int) int
		ReviewStatus                 func(childComplexity int) int
		SnapshotSystemPassingAlarmID func(childComplexity int) int
		SupervisionTime              func(childComplexity int) int
		UpdatedAt                    func(childComplexity int) int
		UpdatedBy                    func(childComplexity int) int
		VehicleID                    func(childComplexity int) int
		VehicleType                  func(childComplexity int) int
	}

	SnapshotSystemPassingAlarmAggregate struct {
		Aggregate func(childComplexity int) int
	}

	SnapshotSystemPassingAlarmAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	SnapshotSystemPassingAlarmAvgFields struct {
		AlarmType   func(childComplexity int) int
		ID          func(childComplexity int) int
		VehicleType func(childComplexity int) int
	}

	SnapshotSystemPassingAlarmMaxFields struct {
		AlarmType                    func(childComplexity int) int
		CameraID                     func(childComplexity int) int
		CreatedAt                    func(childComplexity int) int
		CreatedBy                    func(childComplexity int) int
		DeletedAt                    func(childComplexity int) int
		DeletedBy                    func(childComplexity int) int
		ID                           func(childComplexity int) int
		IsOnline                     func(childComplexity int) int
		IsSupervision                func(childComplexity int) int
		LicensePlateNumber           func(childComplexity int) int
		PassingID                    func(childComplexity int) int
		RegistrationTime             func(childComplexity int) int
		Remarks                      func(childComplexity int) int
		ReviewStatus                 func(childComplexity int) int
		SnapshotSystemPassingAlarmID func(childComplexity int) int
		SupervisionTime              func(childComplexity int) int
		UpdatedAt                    func(childComplexity int) int
		UpdatedBy                    func(childComplexity int) int
		VehicleID                    func(childComplexity int) int
		VehicleType                  func(childComplexity int) int
	}

	SnapshotSystemPassingAlarmMinFields struct {
		AlarmType                    func(childComplexity int) int
		CameraID                     func(childComplexity int) int
		CreatedAt                    func(childComplexity int) int
		CreatedBy                    func(childComplexity int) int
		DeletedAt                    func(childComplexity int) int
		DeletedBy                    func(childComplexity int) int
		ID                           func(childComplexity int) int
		IsOnline                     func(childComplexity int) int
		IsSupervision                func(childComplexity int) int
		LicensePlateNumber           func(childComplexity int) int
		PassingID                    func(childComplexity int) int
		RegistrationTime             func(childComplexity int) int
		Remarks                      func(childComplexity int) int
		ReviewStatus                 func(childComplexity int) int
		SnapshotSystemPassingAlarmID func(childComplexity int) int
		SupervisionTime              func(childComplexity int) int
		UpdatedAt                    func(childComplexity int) int
		UpdatedBy                    func(childComplexity int) int
		VehicleID                    func(childComplexity int) int
		VehicleType                  func(childComplexity int) int
	}

	SnapshotSystemPassingAlarmMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	SnapshotSystemPassingAlarmStddevFields struct {
		AlarmType   func(childComplexity int) int
		ID          func(childComplexity int) int
		VehicleType func(childComplexity int) int
	}

	SnapshotSystemPassingAlarmStddevPopFields struct {
		AlarmType   func(childComplexity int) int
		ID          func(childComplexity int) int
		VehicleType func(childComplexity int) int
	}

	SnapshotSystemPassingAlarmStddevSampFields struct {
		AlarmType   func(childComplexity int) int
		ID          func(childComplexity int) int
		VehicleType func(childComplexity int) int
	}

	SnapshotSystemPassingAlarmSumFields struct {
		AlarmType   func(childComplexity int) int
		ID          func(childComplexity int) int
		VehicleType func(childComplexity int) int
	}

	SnapshotSystemPassingAlarmVarPopFields struct {
		AlarmType   func(childComplexity int) int
		ID          func(childComplexity int) int
		VehicleType func(childComplexity int) int
	}

	SnapshotSystemPassingAlarmVarSampFields struct {
		AlarmType   func(childComplexity int) int
		ID          func(childComplexity int) int
		VehicleType func(childComplexity int) int
	}

	SnapshotSystemPassingAlarmVarianceFields struct {
		AlarmType   func(childComplexity int) int
		ID          func(childComplexity int) int
		VehicleType func(childComplexity int) int
	}

	VehiclePassingRecord struct {
		CameraID               func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DeletedBy              func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsOnline               func(childComplexity int) int
		LicensePlateNumber     func(childComplexity int) int
		PassType               func(childComplexity int) int
		PassingTime            func(childComplexity int) int
		PictureURL             func(childComplexity int) int
		RegistrationTime       func(childComplexity int) int
		ReviewStatus           func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		VehicleID              func(childComplexity int) int
		VehiclePassingRecordID func(childComplexity int) int
		VehicleType            func(childComplexity int) int
	}

	VehiclePassingRecordAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VehiclePassingRecordAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehiclePassingRecordAvgFields struct {
		ID func(childComplexity int) int
	}

	VehiclePassingRecordMaxFields struct {
		CameraID               func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DeletedBy              func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsOnline               func(childComplexity int) int
		LicensePlateNumber     func(childComplexity int) int
		PassType               func(childComplexity int) int
		PassingTime            func(childComplexity int) int
		PictureURL             func(childComplexity int) int
		RegistrationTime       func(childComplexity int) int
		ReviewStatus           func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		VehicleID              func(childComplexity int) int
		VehiclePassingRecordID func(childComplexity int) int
		VehicleType            func(childComplexity int) int
	}

	VehiclePassingRecordMinFields struct {
		CameraID               func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DeletedBy              func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsOnline               func(childComplexity int) int
		LicensePlateNumber     func(childComplexity int) int
		PassType               func(childComplexity int) int
		PassingTime            func(childComplexity int) int
		PictureURL             func(childComplexity int) int
		RegistrationTime       func(childComplexity int) int
		ReviewStatus           func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		VehicleID              func(childComplexity int) int
		VehiclePassingRecordID func(childComplexity int) int
		VehicleType            func(childComplexity int) int
	}

	VehiclePassingRecordMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehiclePassingRecordStddevFields struct {
		ID func(childComplexity int) int
	}

	VehiclePassingRecordStddevPopFields struct {
		ID func(childComplexity int) int
	}

	VehiclePassingRecordStddevSampFields struct {
		ID func(childComplexity int) int
	}

	VehiclePassingRecordSumFields struct {
		ID func(childComplexity int) int
	}

	VehiclePassingRecordVarPopFields struct {
		ID func(childComplexity int) int
	}

	VehiclePassingRecordVarSampFields struct {
		ID func(childComplexity int) int
	}

	VehiclePassingRecordVarianceFields struct {
		ID func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteConstructionCamera(ctx context.Context, where model.ConstructionCameraBoolExp) (*model.ConstructionCameraMutationResponse, error)
	DeleteConstructionCameraByPk(ctx context.Context, id int64) (*model1.ConstructionCamera, error)
	InsertConstructionCamera(ctx context.Context, objects []*model.ConstructionCameraInsertInput) (*model.ConstructionCameraMutationResponse, error)
	InsertConstructionCameraOne(ctx context.Context, objects model.ConstructionCameraInsertInput) (*model1.ConstructionCamera, error)
	UpdateConstructionCamera(ctx context.Context, inc *model.ConstructionCameraIncInput, set *model.ConstructionCameraSetInput, where model.ConstructionCameraBoolExp) (*model.ConstructionCameraMutationResponse, error)
	UpdateConstructionCameraByPk(ctx context.Context, inc *model.ConstructionCameraIncInput, set *model.ConstructionCameraSetInput, id int64) (*model1.ConstructionCamera, error)
	UpdateConstructionCameraByUnionPk(ctx context.Context, inc *model.ConstructionCameraIncInput, set *model.ConstructionCameraSetInput, constructionCameraID string) (*model1.ConstructionCamera, error)
	DeleteConstructionCameraByUnionPk(ctx context.Context, constructionCameraID string) (*model1.ConstructionCamera, error)
	DeleteConstructionInfo(ctx context.Context, where model.ConstructionInfoBoolExp) (*model.ConstructionInfoMutationResponse, error)
	DeleteConstructionInfoByPk(ctx context.Context, id int64) (*model1.ConstructionInfo, error)
	InsertConstructionInfo(ctx context.Context, objects []*model.ConstructionInfoInsertInput) (*model.ConstructionInfoMutationResponse, error)
	InsertConstructionInfoOne(ctx context.Context, objects model.ConstructionInfoInsertInput) (*model1.ConstructionInfo, error)
	UpdateConstructionInfo(ctx context.Context, inc *model.ConstructionInfoIncInput, set *model.ConstructionInfoSetInput, where model.ConstructionInfoBoolExp) (*model.ConstructionInfoMutationResponse, error)
	UpdateConstructionInfoByPk(ctx context.Context, inc *model.ConstructionInfoIncInput, set *model.ConstructionInfoSetInput, id int64) (*model1.ConstructionInfo, error)
	UpdateConstructionInfoByUnionPk(ctx context.Context, inc *model.ConstructionInfoIncInput, set *model.ConstructionInfoSetInput, constructionInfoID string) (*model1.ConstructionInfo, error)
	DeleteConstructionInfoByUnionPk(ctx context.Context, constructionInfoID string) (*model1.ConstructionInfo, error)
	DeleteConstructionUploadPic(ctx context.Context, where model.ConstructionUploadPicBoolExp) (*model.ConstructionUploadPicMutationResponse, error)
	DeleteConstructionUploadPicByPk(ctx context.Context, id int64) (*model1.ConstructionUploadPic, error)
	InsertConstructionUploadPic(ctx context.Context, objects []*model.ConstructionUploadPicInsertInput) (*model.ConstructionUploadPicMutationResponse, error)
	InsertConstructionUploadPicOne(ctx context.Context, objects model.ConstructionUploadPicInsertInput) (*model1.ConstructionUploadPic, error)
	UpdateConstructionUploadPic(ctx context.Context, inc *model.ConstructionUploadPicIncInput, set *model.ConstructionUploadPicSetInput, where model.ConstructionUploadPicBoolExp) (*model.ConstructionUploadPicMutationResponse, error)
	UpdateConstructionUploadPicByPk(ctx context.Context, inc *model.ConstructionUploadPicIncInput, set *model.ConstructionUploadPicSetInput, id int64) (*model1.ConstructionUploadPic, error)
	UpdateConstructionUploadPicByUnionPk(ctx context.Context, inc *model.ConstructionUploadPicIncInput, set *model.ConstructionUploadPicSetInput, constructionUploadPicID string) (*model1.ConstructionUploadPic, error)
	DeleteConstructionUploadPicByUnionPk(ctx context.Context, constructionUploadPicID string) (*model1.ConstructionUploadPic, error)
	DeleteOfflineRegistrationRecord(ctx context.Context, where model.OfflineRegistrationRecordBoolExp) (*model.OfflineRegistrationRecordMutationResponse, error)
	DeleteOfflineRegistrationRecordByPk(ctx context.Context, id int64) (*model1.OfflineRegistrationRecord, error)
	InsertOfflineRegistrationRecord(ctx context.Context, objects []*model.OfflineRegistrationRecordInsertInput) (*model.OfflineRegistrationRecordMutationResponse, error)
	InsertOfflineRegistrationRecordOne(ctx context.Context, objects model.OfflineRegistrationRecordInsertInput) (*model1.OfflineRegistrationRecord, error)
	UpdateOfflineRegistrationRecord(ctx context.Context, inc *model.OfflineRegistrationRecordIncInput, set *model.OfflineRegistrationRecordSetInput, where model.OfflineRegistrationRecordBoolExp) (*model.OfflineRegistrationRecordMutationResponse, error)
	UpdateOfflineRegistrationRecordByPk(ctx context.Context, inc *model.OfflineRegistrationRecordIncInput, set *model.OfflineRegistrationRecordSetInput, id int64) (*model1.OfflineRegistrationRecord, error)
	UpdateOfflineRegistrationRecordByUnionPk(ctx context.Context, inc *model.OfflineRegistrationRecordIncInput, set *model.OfflineRegistrationRecordSetInput, offlineRegistrationRecordID string) (*model1.OfflineRegistrationRecord, error)
	DeleteOfflineRegistrationRecordByUnionPk(ctx context.Context, offlineRegistrationRecordID string) (*model1.OfflineRegistrationRecord, error)
	DeleteSnapshotSystemPassingAlarm(ctx context.Context, where model.SnapshotSystemPassingAlarmBoolExp) (*model.SnapshotSystemPassingAlarmMutationResponse, error)
	DeleteSnapshotSystemPassingAlarmByPk(ctx context.Context, id int64) (*model1.SnapshotSystemPassingAlarm, error)
	InsertSnapshotSystemPassingAlarm(ctx context.Context, objects []*model.SnapshotSystemPassingAlarmInsertInput) (*model.SnapshotSystemPassingAlarmMutationResponse, error)
	InsertSnapshotSystemPassingAlarmOne(ctx context.Context, objects model.SnapshotSystemPassingAlarmInsertInput) (*model1.SnapshotSystemPassingAlarm, error)
	UpdateSnapshotSystemPassingAlarm(ctx context.Context, inc *model.SnapshotSystemPassingAlarmIncInput, set *model.SnapshotSystemPassingAlarmSetInput, where model.SnapshotSystemPassingAlarmBoolExp) (*model.SnapshotSystemPassingAlarmMutationResponse, error)
	UpdateSnapshotSystemPassingAlarmByPk(ctx context.Context, inc *model.SnapshotSystemPassingAlarmIncInput, set *model.SnapshotSystemPassingAlarmSetInput, id int64) (*model1.SnapshotSystemPassingAlarm, error)
	UpdateSnapshotSystemPassingAlarmByUnionPk(ctx context.Context, inc *model.SnapshotSystemPassingAlarmIncInput, set *model.SnapshotSystemPassingAlarmSetInput, snapshotSystemPassingAlarmID string) (*model1.SnapshotSystemPassingAlarm, error)
	DeleteSnapshotSystemPassingAlarmByUnionPk(ctx context.Context, snapshotSystemPassingAlarmID string) (*model1.SnapshotSystemPassingAlarm, error)
	DeleteVehiclePassingRecord(ctx context.Context, where model.VehiclePassingRecordBoolExp) (*model.VehiclePassingRecordMutationResponse, error)
	DeleteVehiclePassingRecordByPk(ctx context.Context, id int64) (*model1.VehiclePassingRecord, error)
	InsertVehiclePassingRecord(ctx context.Context, objects []*model.VehiclePassingRecordInsertInput) (*model.VehiclePassingRecordMutationResponse, error)
	InsertVehiclePassingRecordOne(ctx context.Context, objects model.VehiclePassingRecordInsertInput) (*model1.VehiclePassingRecord, error)
	UpdateVehiclePassingRecord(ctx context.Context, inc *model.VehiclePassingRecordIncInput, set *model.VehiclePassingRecordSetInput, where model.VehiclePassingRecordBoolExp) (*model.VehiclePassingRecordMutationResponse, error)
	UpdateVehiclePassingRecordByPk(ctx context.Context, inc *model.VehiclePassingRecordIncInput, set *model.VehiclePassingRecordSetInput, id int64) (*model1.VehiclePassingRecord, error)
	UpdateVehiclePassingRecordByUnionPk(ctx context.Context, inc *model.VehiclePassingRecordIncInput, set *model.VehiclePassingRecordSetInput, vehiclePassingRecordID string) (*model1.VehiclePassingRecord, error)
	DeleteVehiclePassingRecordByUnionPk(ctx context.Context, vehiclePassingRecordID string) (*model1.VehiclePassingRecord, error)
}
type QueryResolver interface {
	ConstructionCamera(ctx context.Context, distinctOn []model.ConstructionCameraSelectColumn, limit *int, offset *int, orderBy []*model.ConstructionCameraOrderBy, where *model.ConstructionCameraBoolExp) ([]*model1.ConstructionCamera, error)
	ConstructionCameraAggregate(ctx context.Context, distinctOn []model.ConstructionCameraSelectColumn, limit *int, offset *int, orderBy []*model.ConstructionCameraOrderBy, where *model.ConstructionCameraBoolExp) (*model.ConstructionCameraAggregate, error)
	ConstructionCameraByPk(ctx context.Context, id int64) (*model1.ConstructionCamera, error)
	ConstructionCameraByUnionPk(ctx context.Context, constructionCameraID string) (*model1.ConstructionCamera, error)
	ConstructionInfo(ctx context.Context, distinctOn []model.ConstructionInfoSelectColumn, limit *int, offset *int, orderBy []*model.ConstructionInfoOrderBy, where *model.ConstructionInfoBoolExp) ([]*model1.ConstructionInfo, error)
	ConstructionInfoAggregate(ctx context.Context, distinctOn []model.ConstructionInfoSelectColumn, limit *int, offset *int, orderBy []*model.ConstructionInfoOrderBy, where *model.ConstructionInfoBoolExp) (*model.ConstructionInfoAggregate, error)
	ConstructionInfoByPk(ctx context.Context, id int64) (*model1.ConstructionInfo, error)
	ConstructionInfoByUnionPk(ctx context.Context, constructionInfoID string) (*model1.ConstructionInfo, error)
	ConstructionUploadPic(ctx context.Context, distinctOn []model.ConstructionUploadPicSelectColumn, limit *int, offset *int, orderBy []*model.ConstructionUploadPicOrderBy, where *model.ConstructionUploadPicBoolExp) ([]*model1.ConstructionUploadPic, error)
	ConstructionUploadPicAggregate(ctx context.Context, distinctOn []model.ConstructionUploadPicSelectColumn, limit *int, offset *int, orderBy []*model.ConstructionUploadPicOrderBy, where *model.ConstructionUploadPicBoolExp) (*model.ConstructionUploadPicAggregate, error)
	ConstructionUploadPicByPk(ctx context.Context, id int64) (*model1.ConstructionUploadPic, error)
	ConstructionUploadPicByUnionPk(ctx context.Context, constructionUploadPicID string) (*model1.ConstructionUploadPic, error)
	OfflineRegistrationRecord(ctx context.Context, distinctOn []model.OfflineRegistrationRecordSelectColumn, limit *int, offset *int, orderBy []*model.OfflineRegistrationRecordOrderBy, where *model.OfflineRegistrationRecordBoolExp) ([]*model1.OfflineRegistrationRecord, error)
	OfflineRegistrationRecordAggregate(ctx context.Context, distinctOn []model.OfflineRegistrationRecordSelectColumn, limit *int, offset *int, orderBy []*model.OfflineRegistrationRecordOrderBy, where *model.OfflineRegistrationRecordBoolExp) (*model.OfflineRegistrationRecordAggregate, error)
	OfflineRegistrationRecordByPk(ctx context.Context, id int64) (*model1.OfflineRegistrationRecord, error)
	OfflineRegistrationRecordByUnionPk(ctx context.Context, offlineRegistrationRecordID string) (*model1.OfflineRegistrationRecord, error)
	SnapshotSystemPassingAlarm(ctx context.Context, distinctOn []model.SnapshotSystemPassingAlarmSelectColumn, limit *int, offset *int, orderBy []*model.SnapshotSystemPassingAlarmOrderBy, where *model.SnapshotSystemPassingAlarmBoolExp) ([]*model1.SnapshotSystemPassingAlarm, error)
	SnapshotSystemPassingAlarmAggregate(ctx context.Context, distinctOn []model.SnapshotSystemPassingAlarmSelectColumn, limit *int, offset *int, orderBy []*model.SnapshotSystemPassingAlarmOrderBy, where *model.SnapshotSystemPassingAlarmBoolExp) (*model.SnapshotSystemPassingAlarmAggregate, error)
	SnapshotSystemPassingAlarmByPk(ctx context.Context, id int64) (*model1.SnapshotSystemPassingAlarm, error)
	SnapshotSystemPassingAlarmByUnionPk(ctx context.Context, snapshotSystemPassingAlarmID string) (*model1.SnapshotSystemPassingAlarm, error)
	VehiclePassingRecord(ctx context.Context, distinctOn []model.VehiclePassingRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehiclePassingRecordOrderBy, where *model.VehiclePassingRecordBoolExp) ([]*model1.VehiclePassingRecord, error)
	VehiclePassingRecordAggregate(ctx context.Context, distinctOn []model.VehiclePassingRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehiclePassingRecordOrderBy, where *model.VehiclePassingRecordBoolExp) (*model.VehiclePassingRecordAggregate, error)
	VehiclePassingRecordByPk(ctx context.Context, id int64) (*model1.VehiclePassingRecord, error)
	VehiclePassingRecordByUnionPk(ctx context.Context, vehiclePassingRecordID string) (*model1.VehiclePassingRecord, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "ConstructionCamera.construction_camera_id":
		if e.complexity.ConstructionCamera.ConstructionCameraID == nil {
			break
		}

		return e.complexity.ConstructionCamera.ConstructionCameraID(childComplexity), true

	case "ConstructionCamera.construction_info_id":
		if e.complexity.ConstructionCamera.ConstructionInfoID == nil {
			break
		}

		return e.complexity.ConstructionCamera.ConstructionInfoID(childComplexity), true

	case "ConstructionCamera.created_at":
		if e.complexity.ConstructionCamera.CreatedAt == nil {
			break
		}

		return e.complexity.ConstructionCamera.CreatedAt(childComplexity), true

	case "ConstructionCamera.created_by":
		if e.complexity.ConstructionCamera.CreatedBy == nil {
			break
		}

		return e.complexity.ConstructionCamera.CreatedBy(childComplexity), true

	case "ConstructionCamera.deleted_at":
		if e.complexity.ConstructionCamera.DeletedAt == nil {
			break
		}

		return e.complexity.ConstructionCamera.DeletedAt(childComplexity), true

	case "ConstructionCamera.deleted_by":
		if e.complexity.ConstructionCamera.DeletedBy == nil {
			break
		}

		return e.complexity.ConstructionCamera.DeletedBy(childComplexity), true

	case "ConstructionCamera.device_id":
		if e.complexity.ConstructionCamera.DeviceID == nil {
			break
		}

		return e.complexity.ConstructionCamera.DeviceID(childComplexity), true

	case "ConstructionCamera.device_name":
		if e.complexity.ConstructionCamera.DeviceName == nil {
			break
		}

		return e.complexity.ConstructionCamera.DeviceName(childComplexity), true

	case "ConstructionCamera.id":
		if e.complexity.ConstructionCamera.ID == nil {
			break
		}

		return e.complexity.ConstructionCamera.ID(childComplexity), true

	case "ConstructionCamera.ip_address":
		if e.complexity.ConstructionCamera.IPAddress == nil {
			break
		}

		return e.complexity.ConstructionCamera.IPAddress(childComplexity), true

	case "ConstructionCamera.is_deleted":
		if e.complexity.ConstructionCamera.IsDeleted == nil {
			break
		}

		return e.complexity.ConstructionCamera.IsDeleted(childComplexity), true

	case "ConstructionCamera.port":
		if e.complexity.ConstructionCamera.Port == nil {
			break
		}

		return e.complexity.ConstructionCamera.Port(childComplexity), true

	case "ConstructionCamera.registration_time":
		if e.complexity.ConstructionCamera.RegistrationTime == nil {
			break
		}

		return e.complexity.ConstructionCamera.RegistrationTime(childComplexity), true

	case "ConstructionCamera.sim_number":
		if e.complexity.ConstructionCamera.SimNumber == nil {
			break
		}

		return e.complexity.ConstructionCamera.SimNumber(childComplexity), true

	case "ConstructionCamera.updated_at":
		if e.complexity.ConstructionCamera.UpdatedAt == nil {
			break
		}

		return e.complexity.ConstructionCamera.UpdatedAt(childComplexity), true

	case "ConstructionCamera.updated_by":
		if e.complexity.ConstructionCamera.UpdatedBy == nil {
			break
		}

		return e.complexity.ConstructionCamera.UpdatedBy(childComplexity), true

	case "ConstructionCameraAggregate.aggregate":
		if e.complexity.ConstructionCameraAggregate.Aggregate == nil {
			break
		}

		return e.complexity.ConstructionCameraAggregate.Aggregate(childComplexity), true

	case "ConstructionCameraAggregateFields.avg":
		if e.complexity.ConstructionCameraAggregateFields.Avg == nil {
			break
		}

		return e.complexity.ConstructionCameraAggregateFields.Avg(childComplexity), true

	case "ConstructionCameraAggregateFields.count":
		if e.complexity.ConstructionCameraAggregateFields.Count == nil {
			break
		}

		return e.complexity.ConstructionCameraAggregateFields.Count(childComplexity), true

	case "ConstructionCameraAggregateFields.max":
		if e.complexity.ConstructionCameraAggregateFields.Max == nil {
			break
		}

		return e.complexity.ConstructionCameraAggregateFields.Max(childComplexity), true

	case "ConstructionCameraAggregateFields.min":
		if e.complexity.ConstructionCameraAggregateFields.Min == nil {
			break
		}

		return e.complexity.ConstructionCameraAggregateFields.Min(childComplexity), true

	case "ConstructionCameraAggregateFields.stddev":
		if e.complexity.ConstructionCameraAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.ConstructionCameraAggregateFields.Stddev(childComplexity), true

	case "ConstructionCameraAggregateFields.stddev_pop":
		if e.complexity.ConstructionCameraAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.ConstructionCameraAggregateFields.StddevPop(childComplexity), true

	case "ConstructionCameraAggregateFields.stddev_samp":
		if e.complexity.ConstructionCameraAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.ConstructionCameraAggregateFields.StddevSamp(childComplexity), true

	case "ConstructionCameraAggregateFields.sum":
		if e.complexity.ConstructionCameraAggregateFields.Sum == nil {
			break
		}

		return e.complexity.ConstructionCameraAggregateFields.Sum(childComplexity), true

	case "ConstructionCameraAggregateFields.var_pop":
		if e.complexity.ConstructionCameraAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.ConstructionCameraAggregateFields.VarPop(childComplexity), true

	case "ConstructionCameraAggregateFields.var_samp":
		if e.complexity.ConstructionCameraAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.ConstructionCameraAggregateFields.VarSamp(childComplexity), true

	case "ConstructionCameraAggregateFields.variance":
		if e.complexity.ConstructionCameraAggregateFields.Variance == nil {
			break
		}

		return e.complexity.ConstructionCameraAggregateFields.Variance(childComplexity), true

	case "ConstructionCameraAvgFields.id":
		if e.complexity.ConstructionCameraAvgFields.ID == nil {
			break
		}

		return e.complexity.ConstructionCameraAvgFields.ID(childComplexity), true

	case "ConstructionCameraMaxFields.construction_camera_id":
		if e.complexity.ConstructionCameraMaxFields.ConstructionCameraID == nil {
			break
		}

		return e.complexity.ConstructionCameraMaxFields.ConstructionCameraID(childComplexity), true

	case "ConstructionCameraMaxFields.construction_info_id":
		if e.complexity.ConstructionCameraMaxFields.ConstructionInfoID == nil {
			break
		}

		return e.complexity.ConstructionCameraMaxFields.ConstructionInfoID(childComplexity), true

	case "ConstructionCameraMaxFields.created_at":
		if e.complexity.ConstructionCameraMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.ConstructionCameraMaxFields.CreatedAt(childComplexity), true

	case "ConstructionCameraMaxFields.created_by":
		if e.complexity.ConstructionCameraMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.ConstructionCameraMaxFields.CreatedBy(childComplexity), true

	case "ConstructionCameraMaxFields.deleted_at":
		if e.complexity.ConstructionCameraMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.ConstructionCameraMaxFields.DeletedAt(childComplexity), true

	case "ConstructionCameraMaxFields.deleted_by":
		if e.complexity.ConstructionCameraMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.ConstructionCameraMaxFields.DeletedBy(childComplexity), true

	case "ConstructionCameraMaxFields.device_id":
		if e.complexity.ConstructionCameraMaxFields.DeviceID == nil {
			break
		}

		return e.complexity.ConstructionCameraMaxFields.DeviceID(childComplexity), true

	case "ConstructionCameraMaxFields.device_name":
		if e.complexity.ConstructionCameraMaxFields.DeviceName == nil {
			break
		}

		return e.complexity.ConstructionCameraMaxFields.DeviceName(childComplexity), true

	case "ConstructionCameraMaxFields.id":
		if e.complexity.ConstructionCameraMaxFields.ID == nil {
			break
		}

		return e.complexity.ConstructionCameraMaxFields.ID(childComplexity), true

	case "ConstructionCameraMaxFields.ip_address":
		if e.complexity.ConstructionCameraMaxFields.IPAddress == nil {
			break
		}

		return e.complexity.ConstructionCameraMaxFields.IPAddress(childComplexity), true

	case "ConstructionCameraMaxFields.is_deleted":
		if e.complexity.ConstructionCameraMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.ConstructionCameraMaxFields.IsDeleted(childComplexity), true

	case "ConstructionCameraMaxFields.port":
		if e.complexity.ConstructionCameraMaxFields.Port == nil {
			break
		}

		return e.complexity.ConstructionCameraMaxFields.Port(childComplexity), true

	case "ConstructionCameraMaxFields.registration_time":
		if e.complexity.ConstructionCameraMaxFields.RegistrationTime == nil {
			break
		}

		return e.complexity.ConstructionCameraMaxFields.RegistrationTime(childComplexity), true

	case "ConstructionCameraMaxFields.sim_number":
		if e.complexity.ConstructionCameraMaxFields.SimNumber == nil {
			break
		}

		return e.complexity.ConstructionCameraMaxFields.SimNumber(childComplexity), true

	case "ConstructionCameraMaxFields.updated_at":
		if e.complexity.ConstructionCameraMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.ConstructionCameraMaxFields.UpdatedAt(childComplexity), true

	case "ConstructionCameraMaxFields.updated_by":
		if e.complexity.ConstructionCameraMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.ConstructionCameraMaxFields.UpdatedBy(childComplexity), true

	case "ConstructionCameraMinFields.construction_camera_id":
		if e.complexity.ConstructionCameraMinFields.ConstructionCameraID == nil {
			break
		}

		return e.complexity.ConstructionCameraMinFields.ConstructionCameraID(childComplexity), true

	case "ConstructionCameraMinFields.construction_info_id":
		if e.complexity.ConstructionCameraMinFields.ConstructionInfoID == nil {
			break
		}

		return e.complexity.ConstructionCameraMinFields.ConstructionInfoID(childComplexity), true

	case "ConstructionCameraMinFields.created_at":
		if e.complexity.ConstructionCameraMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.ConstructionCameraMinFields.CreatedAt(childComplexity), true

	case "ConstructionCameraMinFields.created_by":
		if e.complexity.ConstructionCameraMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.ConstructionCameraMinFields.CreatedBy(childComplexity), true

	case "ConstructionCameraMinFields.deleted_at":
		if e.complexity.ConstructionCameraMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.ConstructionCameraMinFields.DeletedAt(childComplexity), true

	case "ConstructionCameraMinFields.deleted_by":
		if e.complexity.ConstructionCameraMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.ConstructionCameraMinFields.DeletedBy(childComplexity), true

	case "ConstructionCameraMinFields.device_id":
		if e.complexity.ConstructionCameraMinFields.DeviceID == nil {
			break
		}

		return e.complexity.ConstructionCameraMinFields.DeviceID(childComplexity), true

	case "ConstructionCameraMinFields.device_name":
		if e.complexity.ConstructionCameraMinFields.DeviceName == nil {
			break
		}

		return e.complexity.ConstructionCameraMinFields.DeviceName(childComplexity), true

	case "ConstructionCameraMinFields.id":
		if e.complexity.ConstructionCameraMinFields.ID == nil {
			break
		}

		return e.complexity.ConstructionCameraMinFields.ID(childComplexity), true

	case "ConstructionCameraMinFields.ip_address":
		if e.complexity.ConstructionCameraMinFields.IPAddress == nil {
			break
		}

		return e.complexity.ConstructionCameraMinFields.IPAddress(childComplexity), true

	case "ConstructionCameraMinFields.is_deleted":
		if e.complexity.ConstructionCameraMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.ConstructionCameraMinFields.IsDeleted(childComplexity), true

	case "ConstructionCameraMinFields.port":
		if e.complexity.ConstructionCameraMinFields.Port == nil {
			break
		}

		return e.complexity.ConstructionCameraMinFields.Port(childComplexity), true

	case "ConstructionCameraMinFields.registration_time":
		if e.complexity.ConstructionCameraMinFields.RegistrationTime == nil {
			break
		}

		return e.complexity.ConstructionCameraMinFields.RegistrationTime(childComplexity), true

	case "ConstructionCameraMinFields.sim_number":
		if e.complexity.ConstructionCameraMinFields.SimNumber == nil {
			break
		}

		return e.complexity.ConstructionCameraMinFields.SimNumber(childComplexity), true

	case "ConstructionCameraMinFields.updated_at":
		if e.complexity.ConstructionCameraMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.ConstructionCameraMinFields.UpdatedAt(childComplexity), true

	case "ConstructionCameraMinFields.updated_by":
		if e.complexity.ConstructionCameraMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.ConstructionCameraMinFields.UpdatedBy(childComplexity), true

	case "ConstructionCameraMutationResponse.affected_rows":
		if e.complexity.ConstructionCameraMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.ConstructionCameraMutationResponse.AffectedRows(childComplexity), true

	case "ConstructionCameraMutationResponse.returning":
		if e.complexity.ConstructionCameraMutationResponse.Returning == nil {
			break
		}

		return e.complexity.ConstructionCameraMutationResponse.Returning(childComplexity), true

	case "ConstructionCameraStddevFields.id":
		if e.complexity.ConstructionCameraStddevFields.ID == nil {
			break
		}

		return e.complexity.ConstructionCameraStddevFields.ID(childComplexity), true

	case "ConstructionCameraStddevPopFields.id":
		if e.complexity.ConstructionCameraStddevPopFields.ID == nil {
			break
		}

		return e.complexity.ConstructionCameraStddevPopFields.ID(childComplexity), true

	case "ConstructionCameraStddevSampFields.id":
		if e.complexity.ConstructionCameraStddevSampFields.ID == nil {
			break
		}

		return e.complexity.ConstructionCameraStddevSampFields.ID(childComplexity), true

	case "ConstructionCameraSumFields.id":
		if e.complexity.ConstructionCameraSumFields.ID == nil {
			break
		}

		return e.complexity.ConstructionCameraSumFields.ID(childComplexity), true

	case "ConstructionCameraVarPopFields.id":
		if e.complexity.ConstructionCameraVarPopFields.ID == nil {
			break
		}

		return e.complexity.ConstructionCameraVarPopFields.ID(childComplexity), true

	case "ConstructionCameraVarSampFields.id":
		if e.complexity.ConstructionCameraVarSampFields.ID == nil {
			break
		}

		return e.complexity.ConstructionCameraVarSampFields.ID(childComplexity), true

	case "ConstructionCameraVarianceFields.id":
		if e.complexity.ConstructionCameraVarianceFields.ID == nil {
			break
		}

		return e.complexity.ConstructionCameraVarianceFields.ID(childComplexity), true

	case "ConstructionInfo.address":
		if e.complexity.ConstructionInfo.Address == nil {
			break
		}

		return e.complexity.ConstructionInfo.Address(childComplexity), true

	case "ConstructionInfo.area_id":
		if e.complexity.ConstructionInfo.AreaID == nil {
			break
		}

		return e.complexity.ConstructionInfo.AreaID(childComplexity), true

	case "ConstructionInfo.build_agency":
		if e.complexity.ConstructionInfo.BuildAgency == nil {
			break
		}

		return e.complexity.ConstructionInfo.BuildAgency(childComplexity), true

	case "ConstructionInfo.construction_agency":
		if e.complexity.ConstructionInfo.ConstructionAgency == nil {
			break
		}

		return e.complexity.ConstructionInfo.ConstructionAgency(childComplexity), true

	case "ConstructionInfo.construction_info_id":
		if e.complexity.ConstructionInfo.ConstructionInfoID == nil {
			break
		}

		return e.complexity.ConstructionInfo.ConstructionInfoID(childComplexity), true

	case "ConstructionInfo.construction_type":
		if e.complexity.ConstructionInfo.ConstructionType == nil {
			break
		}

		return e.complexity.ConstructionInfo.ConstructionType(childComplexity), true

	case "ConstructionInfo.contact_person":
		if e.complexity.ConstructionInfo.ContactPerson == nil {
			break
		}

		return e.complexity.ConstructionInfo.ContactPerson(childComplexity), true

	case "ConstructionInfo.contact_phone":
		if e.complexity.ConstructionInfo.ContactPhone == nil {
			break
		}

		return e.complexity.ConstructionInfo.ContactPhone(childComplexity), true

	case "ConstructionInfo.contract_completion_date":
		if e.complexity.ConstructionInfo.ContractCompletionDate == nil {
			break
		}

		return e.complexity.ConstructionInfo.ContractCompletionDate(childComplexity), true

	case "ConstructionInfo.contract_signing_time":
		if e.complexity.ConstructionInfo.ContractSigningTime == nil {
			break
		}

		return e.complexity.ConstructionInfo.ContractSigningTime(childComplexity), true

	case "ConstructionInfo.contract_start_date":
		if e.complexity.ConstructionInfo.ContractStartDate == nil {
			break
		}

		return e.complexity.ConstructionInfo.ContractStartDate(childComplexity), true

	case "ConstructionInfo.coordinate":
		if e.complexity.ConstructionInfo.Coordinate == nil {
			break
		}

		return e.complexity.ConstructionInfo.Coordinate(childComplexity), true

	case "ConstructionInfo.created_at":
		if e.complexity.ConstructionInfo.CreatedAt == nil {
			break
		}

		return e.complexity.ConstructionInfo.CreatedAt(childComplexity), true

	case "ConstructionInfo.created_by":
		if e.complexity.ConstructionInfo.CreatedBy == nil {
			break
		}

		return e.complexity.ConstructionInfo.CreatedBy(childComplexity), true

	case "ConstructionInfo.deactivation_reason":
		if e.complexity.ConstructionInfo.DeactivationReason == nil {
			break
		}

		return e.complexity.ConstructionInfo.DeactivationReason(childComplexity), true

	case "ConstructionInfo.deleted_at":
		if e.complexity.ConstructionInfo.DeletedAt == nil {
			break
		}

		return e.complexity.ConstructionInfo.DeletedAt(childComplexity), true

	case "ConstructionInfo.deleted_by":
		if e.complexity.ConstructionInfo.DeletedBy == nil {
			break
		}

		return e.complexity.ConstructionInfo.DeletedBy(childComplexity), true

	case "ConstructionInfo.device_installation_agency":
		if e.complexity.ConstructionInfo.DeviceInstallationAgency == nil {
			break
		}

		return e.complexity.ConstructionInfo.DeviceInstallationAgency(childComplexity), true

	case "ConstructionInfo.device_installation_location":
		if e.complexity.ConstructionInfo.DeviceInstallationLocation == nil {
			break
		}

		return e.complexity.ConstructionInfo.DeviceInstallationLocation(childComplexity), true

	case "ConstructionInfo.finished":
		if e.complexity.ConstructionInfo.Finished == nil {
			break
		}

		return e.complexity.ConstructionInfo.Finished(childComplexity), true

	case "ConstructionInfo.id":
		if e.complexity.ConstructionInfo.ID == nil {
			break
		}

		return e.complexity.ConstructionInfo.ID(childComplexity), true

	case "ConstructionInfo.import_export_quantity":
		if e.complexity.ConstructionInfo.ImportExportQuantity == nil {
			break
		}

		return e.complexity.ConstructionInfo.ImportExportQuantity(childComplexity), true

	case "ConstructionInfo.installation_time":
		if e.complexity.ConstructionInfo.InstallationTime == nil {
			break
		}

		return e.complexity.ConstructionInfo.InstallationTime(childComplexity), true

	case "ConstructionInfo.is_city_directly":
		if e.complexity.ConstructionInfo.IsCityDirectly == nil {
			break
		}

		return e.complexity.ConstructionInfo.IsCityDirectly(childComplexity), true

	case "ConstructionInfo.is_deleted":
		if e.complexity.ConstructionInfo.IsDeleted == nil {
			break
		}

		return e.complexity.ConstructionInfo.IsDeleted(childComplexity), true

	case "ConstructionInfo.is_installation":
		if e.complexity.ConstructionInfo.IsInstallation == nil {
			break
		}

		return e.complexity.ConstructionInfo.IsInstallation(childComplexity), true

	case "ConstructionInfo.map_coordinate":
		if e.complexity.ConstructionInfo.MapCoordinate == nil {
			break
		}

		return e.complexity.ConstructionInfo.MapCoordinate(childComplexity), true

	case "ConstructionInfo.project_code":
		if e.complexity.ConstructionInfo.ProjectCode == nil {
			break
		}

		return e.complexity.ConstructionInfo.ProjectCode(childComplexity), true

	case "ConstructionInfo.project_manager":
		if e.complexity.ConstructionInfo.ProjectManager == nil {
			break
		}

		return e.complexity.ConstructionInfo.ProjectManager(childComplexity), true

	case "ConstructionInfo.project_name":
		if e.complexity.ConstructionInfo.ProjectName == nil {
			break
		}

		return e.complexity.ConstructionInfo.ProjectName(childComplexity), true

	case "ConstructionInfo.project_name_tag":
		if e.complexity.ConstructionInfo.ProjectNameTag == nil {
			break
		}

		return e.complexity.ConstructionInfo.ProjectNameTag(childComplexity), true

	case "ConstructionInfo.proof_valid_date":
		if e.complexity.ConstructionInfo.ProofValidDate == nil {
			break
		}

		return e.complexity.ConstructionInfo.ProofValidDate(childComplexity), true

	case "ConstructionInfo.proof_valid_date_until":
		if e.complexity.ConstructionInfo.ProofValidDateUntil == nil {
			break
		}

		return e.complexity.ConstructionInfo.ProofValidDateUntil(childComplexity), true

	case "ConstructionInfo.registration_time":
		if e.complexity.ConstructionInfo.RegistrationTime == nil {
			break
		}

		return e.complexity.ConstructionInfo.RegistrationTime(childComplexity), true

	case "ConstructionInfo.service_activation_date":
		if e.complexity.ConstructionInfo.ServiceActivationDate == nil {
			break
		}

		return e.complexity.ConstructionInfo.ServiceActivationDate(childComplexity), true

	case "ConstructionInfo.service_contract_number":
		if e.complexity.ConstructionInfo.ServiceContractNumber == nil {
			break
		}

		return e.complexity.ConstructionInfo.ServiceContractNumber(childComplexity), true

	case "ConstructionInfo.supervision_agency":
		if e.complexity.ConstructionInfo.SupervisionAgency == nil {
			break
		}

		return e.complexity.ConstructionInfo.SupervisionAgency(childComplexity), true

	case "ConstructionInfo.uninstalled_reason":
		if e.complexity.ConstructionInfo.UninstalledReason == nil {
			break
		}

		return e.complexity.ConstructionInfo.UninstalledReason(childComplexity), true

	case "ConstructionInfo.updated_at":
		if e.complexity.ConstructionInfo.UpdatedAt == nil {
			break
		}

		return e.complexity.ConstructionInfo.UpdatedAt(childComplexity), true

	case "ConstructionInfo.updated_by":
		if e.complexity.ConstructionInfo.UpdatedBy == nil {
			break
		}

		return e.complexity.ConstructionInfo.UpdatedBy(childComplexity), true

	case "ConstructionInfoAggregate.aggregate":
		if e.complexity.ConstructionInfoAggregate.Aggregate == nil {
			break
		}

		return e.complexity.ConstructionInfoAggregate.Aggregate(childComplexity), true

	case "ConstructionInfoAggregateFields.avg":
		if e.complexity.ConstructionInfoAggregateFields.Avg == nil {
			break
		}

		return e.complexity.ConstructionInfoAggregateFields.Avg(childComplexity), true

	case "ConstructionInfoAggregateFields.count":
		if e.complexity.ConstructionInfoAggregateFields.Count == nil {
			break
		}

		return e.complexity.ConstructionInfoAggregateFields.Count(childComplexity), true

	case "ConstructionInfoAggregateFields.max":
		if e.complexity.ConstructionInfoAggregateFields.Max == nil {
			break
		}

		return e.complexity.ConstructionInfoAggregateFields.Max(childComplexity), true

	case "ConstructionInfoAggregateFields.min":
		if e.complexity.ConstructionInfoAggregateFields.Min == nil {
			break
		}

		return e.complexity.ConstructionInfoAggregateFields.Min(childComplexity), true

	case "ConstructionInfoAggregateFields.stddev":
		if e.complexity.ConstructionInfoAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.ConstructionInfoAggregateFields.Stddev(childComplexity), true

	case "ConstructionInfoAggregateFields.stddev_pop":
		if e.complexity.ConstructionInfoAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.ConstructionInfoAggregateFields.StddevPop(childComplexity), true

	case "ConstructionInfoAggregateFields.stddev_samp":
		if e.complexity.ConstructionInfoAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.ConstructionInfoAggregateFields.StddevSamp(childComplexity), true

	case "ConstructionInfoAggregateFields.sum":
		if e.complexity.ConstructionInfoAggregateFields.Sum == nil {
			break
		}

		return e.complexity.ConstructionInfoAggregateFields.Sum(childComplexity), true

	case "ConstructionInfoAggregateFields.var_pop":
		if e.complexity.ConstructionInfoAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.ConstructionInfoAggregateFields.VarPop(childComplexity), true

	case "ConstructionInfoAggregateFields.var_samp":
		if e.complexity.ConstructionInfoAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.ConstructionInfoAggregateFields.VarSamp(childComplexity), true

	case "ConstructionInfoAggregateFields.variance":
		if e.complexity.ConstructionInfoAggregateFields.Variance == nil {
			break
		}

		return e.complexity.ConstructionInfoAggregateFields.Variance(childComplexity), true

	case "ConstructionInfoAvgFields.construction_type":
		if e.complexity.ConstructionInfoAvgFields.ConstructionType == nil {
			break
		}

		return e.complexity.ConstructionInfoAvgFields.ConstructionType(childComplexity), true

	case "ConstructionInfoAvgFields.finished":
		if e.complexity.ConstructionInfoAvgFields.Finished == nil {
			break
		}

		return e.complexity.ConstructionInfoAvgFields.Finished(childComplexity), true

	case "ConstructionInfoAvgFields.id":
		if e.complexity.ConstructionInfoAvgFields.ID == nil {
			break
		}

		return e.complexity.ConstructionInfoAvgFields.ID(childComplexity), true

	case "ConstructionInfoMaxFields.address":
		if e.complexity.ConstructionInfoMaxFields.Address == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.Address(childComplexity), true

	case "ConstructionInfoMaxFields.area_id":
		if e.complexity.ConstructionInfoMaxFields.AreaID == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.AreaID(childComplexity), true

	case "ConstructionInfoMaxFields.build_agency":
		if e.complexity.ConstructionInfoMaxFields.BuildAgency == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.BuildAgency(childComplexity), true

	case "ConstructionInfoMaxFields.construction_agency":
		if e.complexity.ConstructionInfoMaxFields.ConstructionAgency == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.ConstructionAgency(childComplexity), true

	case "ConstructionInfoMaxFields.construction_info_id":
		if e.complexity.ConstructionInfoMaxFields.ConstructionInfoID == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.ConstructionInfoID(childComplexity), true

	case "ConstructionInfoMaxFields.construction_type":
		if e.complexity.ConstructionInfoMaxFields.ConstructionType == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.ConstructionType(childComplexity), true

	case "ConstructionInfoMaxFields.contact_person":
		if e.complexity.ConstructionInfoMaxFields.ContactPerson == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.ContactPerson(childComplexity), true

	case "ConstructionInfoMaxFields.contact_phone":
		if e.complexity.ConstructionInfoMaxFields.ContactPhone == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.ContactPhone(childComplexity), true

	case "ConstructionInfoMaxFields.contract_completion_date":
		if e.complexity.ConstructionInfoMaxFields.ContractCompletionDate == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.ContractCompletionDate(childComplexity), true

	case "ConstructionInfoMaxFields.contract_signing_time":
		if e.complexity.ConstructionInfoMaxFields.ContractSigningTime == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.ContractSigningTime(childComplexity), true

	case "ConstructionInfoMaxFields.contract_start_date":
		if e.complexity.ConstructionInfoMaxFields.ContractStartDate == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.ContractStartDate(childComplexity), true

	case "ConstructionInfoMaxFields.coordinate":
		if e.complexity.ConstructionInfoMaxFields.Coordinate == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.Coordinate(childComplexity), true

	case "ConstructionInfoMaxFields.created_at":
		if e.complexity.ConstructionInfoMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.CreatedAt(childComplexity), true

	case "ConstructionInfoMaxFields.created_by":
		if e.complexity.ConstructionInfoMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.CreatedBy(childComplexity), true

	case "ConstructionInfoMaxFields.deactivation_reason":
		if e.complexity.ConstructionInfoMaxFields.DeactivationReason == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.DeactivationReason(childComplexity), true

	case "ConstructionInfoMaxFields.deleted_at":
		if e.complexity.ConstructionInfoMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.DeletedAt(childComplexity), true

	case "ConstructionInfoMaxFields.deleted_by":
		if e.complexity.ConstructionInfoMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.DeletedBy(childComplexity), true

	case "ConstructionInfoMaxFields.device_installation_agency":
		if e.complexity.ConstructionInfoMaxFields.DeviceInstallationAgency == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.DeviceInstallationAgency(childComplexity), true

	case "ConstructionInfoMaxFields.device_installation_location":
		if e.complexity.ConstructionInfoMaxFields.DeviceInstallationLocation == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.DeviceInstallationLocation(childComplexity), true

	case "ConstructionInfoMaxFields.finished":
		if e.complexity.ConstructionInfoMaxFields.Finished == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.Finished(childComplexity), true

	case "ConstructionInfoMaxFields.id":
		if e.complexity.ConstructionInfoMaxFields.ID == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.ID(childComplexity), true

	case "ConstructionInfoMaxFields.import_export_quantity":
		if e.complexity.ConstructionInfoMaxFields.ImportExportQuantity == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.ImportExportQuantity(childComplexity), true

	case "ConstructionInfoMaxFields.installation_time":
		if e.complexity.ConstructionInfoMaxFields.InstallationTime == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.InstallationTime(childComplexity), true

	case "ConstructionInfoMaxFields.is_city_directly":
		if e.complexity.ConstructionInfoMaxFields.IsCityDirectly == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.IsCityDirectly(childComplexity), true

	case "ConstructionInfoMaxFields.is_deleted":
		if e.complexity.ConstructionInfoMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.IsDeleted(childComplexity), true

	case "ConstructionInfoMaxFields.is_installation":
		if e.complexity.ConstructionInfoMaxFields.IsInstallation == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.IsInstallation(childComplexity), true

	case "ConstructionInfoMaxFields.map_coordinate":
		if e.complexity.ConstructionInfoMaxFields.MapCoordinate == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.MapCoordinate(childComplexity), true

	case "ConstructionInfoMaxFields.project_code":
		if e.complexity.ConstructionInfoMaxFields.ProjectCode == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.ProjectCode(childComplexity), true

	case "ConstructionInfoMaxFields.project_manager":
		if e.complexity.ConstructionInfoMaxFields.ProjectManager == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.ProjectManager(childComplexity), true

	case "ConstructionInfoMaxFields.project_name":
		if e.complexity.ConstructionInfoMaxFields.ProjectName == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.ProjectName(childComplexity), true

	case "ConstructionInfoMaxFields.project_name_tag":
		if e.complexity.ConstructionInfoMaxFields.ProjectNameTag == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.ProjectNameTag(childComplexity), true

	case "ConstructionInfoMaxFields.proof_valid_date":
		if e.complexity.ConstructionInfoMaxFields.ProofValidDate == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.ProofValidDate(childComplexity), true

	case "ConstructionInfoMaxFields.proof_valid_date_until":
		if e.complexity.ConstructionInfoMaxFields.ProofValidDateUntil == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.ProofValidDateUntil(childComplexity), true

	case "ConstructionInfoMaxFields.registration_time":
		if e.complexity.ConstructionInfoMaxFields.RegistrationTime == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.RegistrationTime(childComplexity), true

	case "ConstructionInfoMaxFields.service_activation_date":
		if e.complexity.ConstructionInfoMaxFields.ServiceActivationDate == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.ServiceActivationDate(childComplexity), true

	case "ConstructionInfoMaxFields.service_contract_number":
		if e.complexity.ConstructionInfoMaxFields.ServiceContractNumber == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.ServiceContractNumber(childComplexity), true

	case "ConstructionInfoMaxFields.supervision_agency":
		if e.complexity.ConstructionInfoMaxFields.SupervisionAgency == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.SupervisionAgency(childComplexity), true

	case "ConstructionInfoMaxFields.uninstalled_reason":
		if e.complexity.ConstructionInfoMaxFields.UninstalledReason == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.UninstalledReason(childComplexity), true

	case "ConstructionInfoMaxFields.updated_at":
		if e.complexity.ConstructionInfoMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.UpdatedAt(childComplexity), true

	case "ConstructionInfoMaxFields.updated_by":
		if e.complexity.ConstructionInfoMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.ConstructionInfoMaxFields.UpdatedBy(childComplexity), true

	case "ConstructionInfoMinFields.address":
		if e.complexity.ConstructionInfoMinFields.Address == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.Address(childComplexity), true

	case "ConstructionInfoMinFields.area_id":
		if e.complexity.ConstructionInfoMinFields.AreaID == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.AreaID(childComplexity), true

	case "ConstructionInfoMinFields.build_agency":
		if e.complexity.ConstructionInfoMinFields.BuildAgency == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.BuildAgency(childComplexity), true

	case "ConstructionInfoMinFields.construction_agency":
		if e.complexity.ConstructionInfoMinFields.ConstructionAgency == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.ConstructionAgency(childComplexity), true

	case "ConstructionInfoMinFields.construction_info_id":
		if e.complexity.ConstructionInfoMinFields.ConstructionInfoID == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.ConstructionInfoID(childComplexity), true

	case "ConstructionInfoMinFields.construction_type":
		if e.complexity.ConstructionInfoMinFields.ConstructionType == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.ConstructionType(childComplexity), true

	case "ConstructionInfoMinFields.contact_person":
		if e.complexity.ConstructionInfoMinFields.ContactPerson == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.ContactPerson(childComplexity), true

	case "ConstructionInfoMinFields.contact_phone":
		if e.complexity.ConstructionInfoMinFields.ContactPhone == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.ContactPhone(childComplexity), true

	case "ConstructionInfoMinFields.contract_completion_date":
		if e.complexity.ConstructionInfoMinFields.ContractCompletionDate == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.ContractCompletionDate(childComplexity), true

	case "ConstructionInfoMinFields.contract_signing_time":
		if e.complexity.ConstructionInfoMinFields.ContractSigningTime == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.ContractSigningTime(childComplexity), true

	case "ConstructionInfoMinFields.contract_start_date":
		if e.complexity.ConstructionInfoMinFields.ContractStartDate == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.ContractStartDate(childComplexity), true

	case "ConstructionInfoMinFields.coordinate":
		if e.complexity.ConstructionInfoMinFields.Coordinate == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.Coordinate(childComplexity), true

	case "ConstructionInfoMinFields.created_at":
		if e.complexity.ConstructionInfoMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.CreatedAt(childComplexity), true

	case "ConstructionInfoMinFields.created_by":
		if e.complexity.ConstructionInfoMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.CreatedBy(childComplexity), true

	case "ConstructionInfoMinFields.deactivation_reason":
		if e.complexity.ConstructionInfoMinFields.DeactivationReason == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.DeactivationReason(childComplexity), true

	case "ConstructionInfoMinFields.deleted_at":
		if e.complexity.ConstructionInfoMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.DeletedAt(childComplexity), true

	case "ConstructionInfoMinFields.deleted_by":
		if e.complexity.ConstructionInfoMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.DeletedBy(childComplexity), true

	case "ConstructionInfoMinFields.device_installation_agency":
		if e.complexity.ConstructionInfoMinFields.DeviceInstallationAgency == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.DeviceInstallationAgency(childComplexity), true

	case "ConstructionInfoMinFields.device_installation_location":
		if e.complexity.ConstructionInfoMinFields.DeviceInstallationLocation == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.DeviceInstallationLocation(childComplexity), true

	case "ConstructionInfoMinFields.finished":
		if e.complexity.ConstructionInfoMinFields.Finished == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.Finished(childComplexity), true

	case "ConstructionInfoMinFields.id":
		if e.complexity.ConstructionInfoMinFields.ID == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.ID(childComplexity), true

	case "ConstructionInfoMinFields.import_export_quantity":
		if e.complexity.ConstructionInfoMinFields.ImportExportQuantity == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.ImportExportQuantity(childComplexity), true

	case "ConstructionInfoMinFields.installation_time":
		if e.complexity.ConstructionInfoMinFields.InstallationTime == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.InstallationTime(childComplexity), true

	case "ConstructionInfoMinFields.is_city_directly":
		if e.complexity.ConstructionInfoMinFields.IsCityDirectly == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.IsCityDirectly(childComplexity), true

	case "ConstructionInfoMinFields.is_deleted":
		if e.complexity.ConstructionInfoMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.IsDeleted(childComplexity), true

	case "ConstructionInfoMinFields.is_installation":
		if e.complexity.ConstructionInfoMinFields.IsInstallation == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.IsInstallation(childComplexity), true

	case "ConstructionInfoMinFields.map_coordinate":
		if e.complexity.ConstructionInfoMinFields.MapCoordinate == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.MapCoordinate(childComplexity), true

	case "ConstructionInfoMinFields.project_code":
		if e.complexity.ConstructionInfoMinFields.ProjectCode == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.ProjectCode(childComplexity), true

	case "ConstructionInfoMinFields.project_manager":
		if e.complexity.ConstructionInfoMinFields.ProjectManager == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.ProjectManager(childComplexity), true

	case "ConstructionInfoMinFields.project_name":
		if e.complexity.ConstructionInfoMinFields.ProjectName == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.ProjectName(childComplexity), true

	case "ConstructionInfoMinFields.project_name_tag":
		if e.complexity.ConstructionInfoMinFields.ProjectNameTag == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.ProjectNameTag(childComplexity), true

	case "ConstructionInfoMinFields.proof_valid_date":
		if e.complexity.ConstructionInfoMinFields.ProofValidDate == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.ProofValidDate(childComplexity), true

	case "ConstructionInfoMinFields.proof_valid_date_until":
		if e.complexity.ConstructionInfoMinFields.ProofValidDateUntil == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.ProofValidDateUntil(childComplexity), true

	case "ConstructionInfoMinFields.registration_time":
		if e.complexity.ConstructionInfoMinFields.RegistrationTime == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.RegistrationTime(childComplexity), true

	case "ConstructionInfoMinFields.service_activation_date":
		if e.complexity.ConstructionInfoMinFields.ServiceActivationDate == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.ServiceActivationDate(childComplexity), true

	case "ConstructionInfoMinFields.service_contract_number":
		if e.complexity.ConstructionInfoMinFields.ServiceContractNumber == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.ServiceContractNumber(childComplexity), true

	case "ConstructionInfoMinFields.supervision_agency":
		if e.complexity.ConstructionInfoMinFields.SupervisionAgency == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.SupervisionAgency(childComplexity), true

	case "ConstructionInfoMinFields.uninstalled_reason":
		if e.complexity.ConstructionInfoMinFields.UninstalledReason == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.UninstalledReason(childComplexity), true

	case "ConstructionInfoMinFields.updated_at":
		if e.complexity.ConstructionInfoMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.UpdatedAt(childComplexity), true

	case "ConstructionInfoMinFields.updated_by":
		if e.complexity.ConstructionInfoMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.ConstructionInfoMinFields.UpdatedBy(childComplexity), true

	case "ConstructionInfoMutationResponse.affected_rows":
		if e.complexity.ConstructionInfoMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.ConstructionInfoMutationResponse.AffectedRows(childComplexity), true

	case "ConstructionInfoMutationResponse.returning":
		if e.complexity.ConstructionInfoMutationResponse.Returning == nil {
			break
		}

		return e.complexity.ConstructionInfoMutationResponse.Returning(childComplexity), true

	case "ConstructionInfoStddevFields.construction_type":
		if e.complexity.ConstructionInfoStddevFields.ConstructionType == nil {
			break
		}

		return e.complexity.ConstructionInfoStddevFields.ConstructionType(childComplexity), true

	case "ConstructionInfoStddevFields.finished":
		if e.complexity.ConstructionInfoStddevFields.Finished == nil {
			break
		}

		return e.complexity.ConstructionInfoStddevFields.Finished(childComplexity), true

	case "ConstructionInfoStddevFields.id":
		if e.complexity.ConstructionInfoStddevFields.ID == nil {
			break
		}

		return e.complexity.ConstructionInfoStddevFields.ID(childComplexity), true

	case "ConstructionInfoStddevPopFields.construction_type":
		if e.complexity.ConstructionInfoStddevPopFields.ConstructionType == nil {
			break
		}

		return e.complexity.ConstructionInfoStddevPopFields.ConstructionType(childComplexity), true

	case "ConstructionInfoStddevPopFields.finished":
		if e.complexity.ConstructionInfoStddevPopFields.Finished == nil {
			break
		}

		return e.complexity.ConstructionInfoStddevPopFields.Finished(childComplexity), true

	case "ConstructionInfoStddevPopFields.id":
		if e.complexity.ConstructionInfoStddevPopFields.ID == nil {
			break
		}

		return e.complexity.ConstructionInfoStddevPopFields.ID(childComplexity), true

	case "ConstructionInfoStddevSampFields.construction_type":
		if e.complexity.ConstructionInfoStddevSampFields.ConstructionType == nil {
			break
		}

		return e.complexity.ConstructionInfoStddevSampFields.ConstructionType(childComplexity), true

	case "ConstructionInfoStddevSampFields.finished":
		if e.complexity.ConstructionInfoStddevSampFields.Finished == nil {
			break
		}

		return e.complexity.ConstructionInfoStddevSampFields.Finished(childComplexity), true

	case "ConstructionInfoStddevSampFields.id":
		if e.complexity.ConstructionInfoStddevSampFields.ID == nil {
			break
		}

		return e.complexity.ConstructionInfoStddevSampFields.ID(childComplexity), true

	case "ConstructionInfoSumFields.construction_type":
		if e.complexity.ConstructionInfoSumFields.ConstructionType == nil {
			break
		}

		return e.complexity.ConstructionInfoSumFields.ConstructionType(childComplexity), true

	case "ConstructionInfoSumFields.finished":
		if e.complexity.ConstructionInfoSumFields.Finished == nil {
			break
		}

		return e.complexity.ConstructionInfoSumFields.Finished(childComplexity), true

	case "ConstructionInfoSumFields.id":
		if e.complexity.ConstructionInfoSumFields.ID == nil {
			break
		}

		return e.complexity.ConstructionInfoSumFields.ID(childComplexity), true

	case "ConstructionInfoVarPopFields.construction_type":
		if e.complexity.ConstructionInfoVarPopFields.ConstructionType == nil {
			break
		}

		return e.complexity.ConstructionInfoVarPopFields.ConstructionType(childComplexity), true

	case "ConstructionInfoVarPopFields.finished":
		if e.complexity.ConstructionInfoVarPopFields.Finished == nil {
			break
		}

		return e.complexity.ConstructionInfoVarPopFields.Finished(childComplexity), true

	case "ConstructionInfoVarPopFields.id":
		if e.complexity.ConstructionInfoVarPopFields.ID == nil {
			break
		}

		return e.complexity.ConstructionInfoVarPopFields.ID(childComplexity), true

	case "ConstructionInfoVarSampFields.construction_type":
		if e.complexity.ConstructionInfoVarSampFields.ConstructionType == nil {
			break
		}

		return e.complexity.ConstructionInfoVarSampFields.ConstructionType(childComplexity), true

	case "ConstructionInfoVarSampFields.finished":
		if e.complexity.ConstructionInfoVarSampFields.Finished == nil {
			break
		}

		return e.complexity.ConstructionInfoVarSampFields.Finished(childComplexity), true

	case "ConstructionInfoVarSampFields.id":
		if e.complexity.ConstructionInfoVarSampFields.ID == nil {
			break
		}

		return e.complexity.ConstructionInfoVarSampFields.ID(childComplexity), true

	case "ConstructionInfoVarianceFields.construction_type":
		if e.complexity.ConstructionInfoVarianceFields.ConstructionType == nil {
			break
		}

		return e.complexity.ConstructionInfoVarianceFields.ConstructionType(childComplexity), true

	case "ConstructionInfoVarianceFields.finished":
		if e.complexity.ConstructionInfoVarianceFields.Finished == nil {
			break
		}

		return e.complexity.ConstructionInfoVarianceFields.Finished(childComplexity), true

	case "ConstructionInfoVarianceFields.id":
		if e.complexity.ConstructionInfoVarianceFields.ID == nil {
			break
		}

		return e.complexity.ConstructionInfoVarianceFields.ID(childComplexity), true

	case "ConstructionUploadPic.construction_info_id":
		if e.complexity.ConstructionUploadPic.ConstructionInfoID == nil {
			break
		}

		return e.complexity.ConstructionUploadPic.ConstructionInfoID(childComplexity), true

	case "ConstructionUploadPic.construction_upload_pic_id":
		if e.complexity.ConstructionUploadPic.ConstructionUploadPicID == nil {
			break
		}

		return e.complexity.ConstructionUploadPic.ConstructionUploadPicID(childComplexity), true

	case "ConstructionUploadPic.created_at":
		if e.complexity.ConstructionUploadPic.CreatedAt == nil {
			break
		}

		return e.complexity.ConstructionUploadPic.CreatedAt(childComplexity), true

	case "ConstructionUploadPic.created_by":
		if e.complexity.ConstructionUploadPic.CreatedBy == nil {
			break
		}

		return e.complexity.ConstructionUploadPic.CreatedBy(childComplexity), true

	case "ConstructionUploadPic.deleted_at":
		if e.complexity.ConstructionUploadPic.DeletedAt == nil {
			break
		}

		return e.complexity.ConstructionUploadPic.DeletedAt(childComplexity), true

	case "ConstructionUploadPic.deleted_by":
		if e.complexity.ConstructionUploadPic.DeletedBy == nil {
			break
		}

		return e.complexity.ConstructionUploadPic.DeletedBy(childComplexity), true

	case "ConstructionUploadPic.id":
		if e.complexity.ConstructionUploadPic.ID == nil {
			break
		}

		return e.complexity.ConstructionUploadPic.ID(childComplexity), true

	case "ConstructionUploadPic.is_deleted":
		if e.complexity.ConstructionUploadPic.IsDeleted == nil {
			break
		}

		return e.complexity.ConstructionUploadPic.IsDeleted(childComplexity), true

	case "ConstructionUploadPic.picture_url":
		if e.complexity.ConstructionUploadPic.PictureURL == nil {
			break
		}

		return e.complexity.ConstructionUploadPic.PictureURL(childComplexity), true

	case "ConstructionUploadPic.updated_at":
		if e.complexity.ConstructionUploadPic.UpdatedAt == nil {
			break
		}

		return e.complexity.ConstructionUploadPic.UpdatedAt(childComplexity), true

	case "ConstructionUploadPic.updated_by":
		if e.complexity.ConstructionUploadPic.UpdatedBy == nil {
			break
		}

		return e.complexity.ConstructionUploadPic.UpdatedBy(childComplexity), true

	case "ConstructionUploadPicAggregate.aggregate":
		if e.complexity.ConstructionUploadPicAggregate.Aggregate == nil {
			break
		}

		return e.complexity.ConstructionUploadPicAggregate.Aggregate(childComplexity), true

	case "ConstructionUploadPicAggregateFields.avg":
		if e.complexity.ConstructionUploadPicAggregateFields.Avg == nil {
			break
		}

		return e.complexity.ConstructionUploadPicAggregateFields.Avg(childComplexity), true

	case "ConstructionUploadPicAggregateFields.count":
		if e.complexity.ConstructionUploadPicAggregateFields.Count == nil {
			break
		}

		return e.complexity.ConstructionUploadPicAggregateFields.Count(childComplexity), true

	case "ConstructionUploadPicAggregateFields.max":
		if e.complexity.ConstructionUploadPicAggregateFields.Max == nil {
			break
		}

		return e.complexity.ConstructionUploadPicAggregateFields.Max(childComplexity), true

	case "ConstructionUploadPicAggregateFields.min":
		if e.complexity.ConstructionUploadPicAggregateFields.Min == nil {
			break
		}

		return e.complexity.ConstructionUploadPicAggregateFields.Min(childComplexity), true

	case "ConstructionUploadPicAggregateFields.stddev":
		if e.complexity.ConstructionUploadPicAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.ConstructionUploadPicAggregateFields.Stddev(childComplexity), true

	case "ConstructionUploadPicAggregateFields.stddev_pop":
		if e.complexity.ConstructionUploadPicAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.ConstructionUploadPicAggregateFields.StddevPop(childComplexity), true

	case "ConstructionUploadPicAggregateFields.stddev_samp":
		if e.complexity.ConstructionUploadPicAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.ConstructionUploadPicAggregateFields.StddevSamp(childComplexity), true

	case "ConstructionUploadPicAggregateFields.sum":
		if e.complexity.ConstructionUploadPicAggregateFields.Sum == nil {
			break
		}

		return e.complexity.ConstructionUploadPicAggregateFields.Sum(childComplexity), true

	case "ConstructionUploadPicAggregateFields.var_pop":
		if e.complexity.ConstructionUploadPicAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.ConstructionUploadPicAggregateFields.VarPop(childComplexity), true

	case "ConstructionUploadPicAggregateFields.var_samp":
		if e.complexity.ConstructionUploadPicAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.ConstructionUploadPicAggregateFields.VarSamp(childComplexity), true

	case "ConstructionUploadPicAggregateFields.variance":
		if e.complexity.ConstructionUploadPicAggregateFields.Variance == nil {
			break
		}

		return e.complexity.ConstructionUploadPicAggregateFields.Variance(childComplexity), true

	case "ConstructionUploadPicAvgFields.id":
		if e.complexity.ConstructionUploadPicAvgFields.ID == nil {
			break
		}

		return e.complexity.ConstructionUploadPicAvgFields.ID(childComplexity), true

	case "ConstructionUploadPicMaxFields.construction_info_id":
		if e.complexity.ConstructionUploadPicMaxFields.ConstructionInfoID == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMaxFields.ConstructionInfoID(childComplexity), true

	case "ConstructionUploadPicMaxFields.construction_upload_pic_id":
		if e.complexity.ConstructionUploadPicMaxFields.ConstructionUploadPicID == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMaxFields.ConstructionUploadPicID(childComplexity), true

	case "ConstructionUploadPicMaxFields.created_at":
		if e.complexity.ConstructionUploadPicMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMaxFields.CreatedAt(childComplexity), true

	case "ConstructionUploadPicMaxFields.created_by":
		if e.complexity.ConstructionUploadPicMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMaxFields.CreatedBy(childComplexity), true

	case "ConstructionUploadPicMaxFields.deleted_at":
		if e.complexity.ConstructionUploadPicMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMaxFields.DeletedAt(childComplexity), true

	case "ConstructionUploadPicMaxFields.deleted_by":
		if e.complexity.ConstructionUploadPicMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMaxFields.DeletedBy(childComplexity), true

	case "ConstructionUploadPicMaxFields.id":
		if e.complexity.ConstructionUploadPicMaxFields.ID == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMaxFields.ID(childComplexity), true

	case "ConstructionUploadPicMaxFields.is_deleted":
		if e.complexity.ConstructionUploadPicMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMaxFields.IsDeleted(childComplexity), true

	case "ConstructionUploadPicMaxFields.picture_url":
		if e.complexity.ConstructionUploadPicMaxFields.PictureURL == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMaxFields.PictureURL(childComplexity), true

	case "ConstructionUploadPicMaxFields.updated_at":
		if e.complexity.ConstructionUploadPicMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMaxFields.UpdatedAt(childComplexity), true

	case "ConstructionUploadPicMaxFields.updated_by":
		if e.complexity.ConstructionUploadPicMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMaxFields.UpdatedBy(childComplexity), true

	case "ConstructionUploadPicMinFields.construction_info_id":
		if e.complexity.ConstructionUploadPicMinFields.ConstructionInfoID == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMinFields.ConstructionInfoID(childComplexity), true

	case "ConstructionUploadPicMinFields.construction_upload_pic_id":
		if e.complexity.ConstructionUploadPicMinFields.ConstructionUploadPicID == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMinFields.ConstructionUploadPicID(childComplexity), true

	case "ConstructionUploadPicMinFields.created_at":
		if e.complexity.ConstructionUploadPicMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMinFields.CreatedAt(childComplexity), true

	case "ConstructionUploadPicMinFields.created_by":
		if e.complexity.ConstructionUploadPicMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMinFields.CreatedBy(childComplexity), true

	case "ConstructionUploadPicMinFields.deleted_at":
		if e.complexity.ConstructionUploadPicMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMinFields.DeletedAt(childComplexity), true

	case "ConstructionUploadPicMinFields.deleted_by":
		if e.complexity.ConstructionUploadPicMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMinFields.DeletedBy(childComplexity), true

	case "ConstructionUploadPicMinFields.id":
		if e.complexity.ConstructionUploadPicMinFields.ID == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMinFields.ID(childComplexity), true

	case "ConstructionUploadPicMinFields.is_deleted":
		if e.complexity.ConstructionUploadPicMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMinFields.IsDeleted(childComplexity), true

	case "ConstructionUploadPicMinFields.picture_url":
		if e.complexity.ConstructionUploadPicMinFields.PictureURL == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMinFields.PictureURL(childComplexity), true

	case "ConstructionUploadPicMinFields.updated_at":
		if e.complexity.ConstructionUploadPicMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMinFields.UpdatedAt(childComplexity), true

	case "ConstructionUploadPicMinFields.updated_by":
		if e.complexity.ConstructionUploadPicMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMinFields.UpdatedBy(childComplexity), true

	case "ConstructionUploadPicMutationResponse.affected_rows":
		if e.complexity.ConstructionUploadPicMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMutationResponse.AffectedRows(childComplexity), true

	case "ConstructionUploadPicMutationResponse.returning":
		if e.complexity.ConstructionUploadPicMutationResponse.Returning == nil {
			break
		}

		return e.complexity.ConstructionUploadPicMutationResponse.Returning(childComplexity), true

	case "ConstructionUploadPicStddevFields.id":
		if e.complexity.ConstructionUploadPicStddevFields.ID == nil {
			break
		}

		return e.complexity.ConstructionUploadPicStddevFields.ID(childComplexity), true

	case "ConstructionUploadPicStddevPopFields.id":
		if e.complexity.ConstructionUploadPicStddevPopFields.ID == nil {
			break
		}

		return e.complexity.ConstructionUploadPicStddevPopFields.ID(childComplexity), true

	case "ConstructionUploadPicStddevSampFields.id":
		if e.complexity.ConstructionUploadPicStddevSampFields.ID == nil {
			break
		}

		return e.complexity.ConstructionUploadPicStddevSampFields.ID(childComplexity), true

	case "ConstructionUploadPicSumFields.id":
		if e.complexity.ConstructionUploadPicSumFields.ID == nil {
			break
		}

		return e.complexity.ConstructionUploadPicSumFields.ID(childComplexity), true

	case "ConstructionUploadPicVarPopFields.id":
		if e.complexity.ConstructionUploadPicVarPopFields.ID == nil {
			break
		}

		return e.complexity.ConstructionUploadPicVarPopFields.ID(childComplexity), true

	case "ConstructionUploadPicVarSampFields.id":
		if e.complexity.ConstructionUploadPicVarSampFields.ID == nil {
			break
		}

		return e.complexity.ConstructionUploadPicVarSampFields.ID(childComplexity), true

	case "ConstructionUploadPicVarianceFields.id":
		if e.complexity.ConstructionUploadPicVarianceFields.ID == nil {
			break
		}

		return e.complexity.ConstructionUploadPicVarianceFields.ID(childComplexity), true

	case "Mutation.delete_construction_camera":
		if e.complexity.Mutation.DeleteConstructionCamera == nil {
			break
		}

		args, err := ec.field_Mutation_delete_construction_camera_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteConstructionCamera(childComplexity, args["where"].(model.ConstructionCameraBoolExp)), true

	case "Mutation.delete_construction_camera_by_pk":
		if e.complexity.Mutation.DeleteConstructionCameraByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_construction_camera_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteConstructionCameraByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_construction_camera_by_union_pk":
		if e.complexity.Mutation.DeleteConstructionCameraByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_construction_camera_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteConstructionCameraByUnionPk(childComplexity, args["construction_camera_id"].(string)), true

	case "Mutation.delete_construction_info":
		if e.complexity.Mutation.DeleteConstructionInfo == nil {
			break
		}

		args, err := ec.field_Mutation_delete_construction_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteConstructionInfo(childComplexity, args["where"].(model.ConstructionInfoBoolExp)), true

	case "Mutation.delete_construction_info_by_pk":
		if e.complexity.Mutation.DeleteConstructionInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_construction_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteConstructionInfoByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_construction_info_by_union_pk":
		if e.complexity.Mutation.DeleteConstructionInfoByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_construction_info_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteConstructionInfoByUnionPk(childComplexity, args["construction_info_id"].(string)), true

	case "Mutation.delete_construction_upload_pic":
		if e.complexity.Mutation.DeleteConstructionUploadPic == nil {
			break
		}

		args, err := ec.field_Mutation_delete_construction_upload_pic_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteConstructionUploadPic(childComplexity, args["where"].(model.ConstructionUploadPicBoolExp)), true

	case "Mutation.delete_construction_upload_pic_by_pk":
		if e.complexity.Mutation.DeleteConstructionUploadPicByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_construction_upload_pic_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteConstructionUploadPicByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_construction_upload_pic_by_union_pk":
		if e.complexity.Mutation.DeleteConstructionUploadPicByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_construction_upload_pic_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteConstructionUploadPicByUnionPk(childComplexity, args["construction_upload_pic_id"].(string)), true

	case "Mutation.delete_offline_registration_record":
		if e.complexity.Mutation.DeleteOfflineRegistrationRecord == nil {
			break
		}

		args, err := ec.field_Mutation_delete_offline_registration_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOfflineRegistrationRecord(childComplexity, args["where"].(model.OfflineRegistrationRecordBoolExp)), true

	case "Mutation.delete_offline_registration_record_by_pk":
		if e.complexity.Mutation.DeleteOfflineRegistrationRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_offline_registration_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOfflineRegistrationRecordByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_offline_registration_record_by_union_pk":
		if e.complexity.Mutation.DeleteOfflineRegistrationRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_offline_registration_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOfflineRegistrationRecordByUnionPk(childComplexity, args["offline_registration_record_id"].(string)), true

	case "Mutation.delete_snapshot_system_passing_alarm":
		if e.complexity.Mutation.DeleteSnapshotSystemPassingAlarm == nil {
			break
		}

		args, err := ec.field_Mutation_delete_snapshot_system_passing_alarm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSnapshotSystemPassingAlarm(childComplexity, args["where"].(model.SnapshotSystemPassingAlarmBoolExp)), true

	case "Mutation.delete_snapshot_system_passing_alarm_by_pk":
		if e.complexity.Mutation.DeleteSnapshotSystemPassingAlarmByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_snapshot_system_passing_alarm_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSnapshotSystemPassingAlarmByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_snapshot_system_passing_alarm_by_union_pk":
		if e.complexity.Mutation.DeleteSnapshotSystemPassingAlarmByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_snapshot_system_passing_alarm_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSnapshotSystemPassingAlarmByUnionPk(childComplexity, args["snapshot_system_passing_alarm_id"].(string)), true

	case "Mutation.delete_vehicle_passing_record":
		if e.complexity.Mutation.DeleteVehiclePassingRecord == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_passing_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehiclePassingRecord(childComplexity, args["where"].(model.VehiclePassingRecordBoolExp)), true

	case "Mutation.delete_vehicle_passing_record_by_pk":
		if e.complexity.Mutation.DeleteVehiclePassingRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_passing_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehiclePassingRecordByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_passing_record_by_union_pk":
		if e.complexity.Mutation.DeleteVehiclePassingRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_passing_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehiclePassingRecordByUnionPk(childComplexity, args["vehicle_passing_record_id"].(string)), true

	case "Mutation.insert_construction_camera":
		if e.complexity.Mutation.InsertConstructionCamera == nil {
			break
		}

		args, err := ec.field_Mutation_insert_construction_camera_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertConstructionCamera(childComplexity, args["objects"].([]*model.ConstructionCameraInsertInput)), true

	case "Mutation.insert_construction_camera_one":
		if e.complexity.Mutation.InsertConstructionCameraOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_construction_camera_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertConstructionCameraOne(childComplexity, args["objects"].(model.ConstructionCameraInsertInput)), true

	case "Mutation.insert_construction_info":
		if e.complexity.Mutation.InsertConstructionInfo == nil {
			break
		}

		args, err := ec.field_Mutation_insert_construction_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertConstructionInfo(childComplexity, args["objects"].([]*model.ConstructionInfoInsertInput)), true

	case "Mutation.insert_construction_info_one":
		if e.complexity.Mutation.InsertConstructionInfoOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_construction_info_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertConstructionInfoOne(childComplexity, args["objects"].(model.ConstructionInfoInsertInput)), true

	case "Mutation.insert_construction_upload_pic":
		if e.complexity.Mutation.InsertConstructionUploadPic == nil {
			break
		}

		args, err := ec.field_Mutation_insert_construction_upload_pic_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertConstructionUploadPic(childComplexity, args["objects"].([]*model.ConstructionUploadPicInsertInput)), true

	case "Mutation.insert_construction_upload_pic_one":
		if e.complexity.Mutation.InsertConstructionUploadPicOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_construction_upload_pic_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertConstructionUploadPicOne(childComplexity, args["objects"].(model.ConstructionUploadPicInsertInput)), true

	case "Mutation.insert_offline_registration_record":
		if e.complexity.Mutation.InsertOfflineRegistrationRecord == nil {
			break
		}

		args, err := ec.field_Mutation_insert_offline_registration_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertOfflineRegistrationRecord(childComplexity, args["objects"].([]*model.OfflineRegistrationRecordInsertInput)), true

	case "Mutation.insert_offline_registration_record_one":
		if e.complexity.Mutation.InsertOfflineRegistrationRecordOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_offline_registration_record_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertOfflineRegistrationRecordOne(childComplexity, args["objects"].(model.OfflineRegistrationRecordInsertInput)), true

	case "Mutation.insert_snapshot_system_passing_alarm":
		if e.complexity.Mutation.InsertSnapshotSystemPassingAlarm == nil {
			break
		}

		args, err := ec.field_Mutation_insert_snapshot_system_passing_alarm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertSnapshotSystemPassingAlarm(childComplexity, args["objects"].([]*model.SnapshotSystemPassingAlarmInsertInput)), true

	case "Mutation.insert_snapshot_system_passing_alarm_one":
		if e.complexity.Mutation.InsertSnapshotSystemPassingAlarmOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_snapshot_system_passing_alarm_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertSnapshotSystemPassingAlarmOne(childComplexity, args["objects"].(model.SnapshotSystemPassingAlarmInsertInput)), true

	case "Mutation.insert_vehicle_passing_record":
		if e.complexity.Mutation.InsertVehiclePassingRecord == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_passing_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehiclePassingRecord(childComplexity, args["objects"].([]*model.VehiclePassingRecordInsertInput)), true

	case "Mutation.insert_vehicle_passing_record_one":
		if e.complexity.Mutation.InsertVehiclePassingRecordOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_passing_record_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehiclePassingRecordOne(childComplexity, args["objects"].(model.VehiclePassingRecordInsertInput)), true

	case "Mutation.update_construction_camera":
		if e.complexity.Mutation.UpdateConstructionCamera == nil {
			break
		}

		args, err := ec.field_Mutation_update_construction_camera_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateConstructionCamera(childComplexity, args["_inc"].(*model.ConstructionCameraIncInput), args["_set"].(*model.ConstructionCameraSetInput), args["where"].(model.ConstructionCameraBoolExp)), true

	case "Mutation.update_construction_camera_by_pk":
		if e.complexity.Mutation.UpdateConstructionCameraByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_construction_camera_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateConstructionCameraByPk(childComplexity, args["_inc"].(*model.ConstructionCameraIncInput), args["_set"].(*model.ConstructionCameraSetInput), args["id"].(int64)), true

	case "Mutation.update_construction_camera_by_union_pk":
		if e.complexity.Mutation.UpdateConstructionCameraByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_construction_camera_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateConstructionCameraByUnionPk(childComplexity, args["_inc"].(*model.ConstructionCameraIncInput), args["_set"].(*model.ConstructionCameraSetInput), args["construction_camera_id"].(string)), true

	case "Mutation.update_construction_info":
		if e.complexity.Mutation.UpdateConstructionInfo == nil {
			break
		}

		args, err := ec.field_Mutation_update_construction_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateConstructionInfo(childComplexity, args["_inc"].(*model.ConstructionInfoIncInput), args["_set"].(*model.ConstructionInfoSetInput), args["where"].(model.ConstructionInfoBoolExp)), true

	case "Mutation.update_construction_info_by_pk":
		if e.complexity.Mutation.UpdateConstructionInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_construction_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateConstructionInfoByPk(childComplexity, args["_inc"].(*model.ConstructionInfoIncInput), args["_set"].(*model.ConstructionInfoSetInput), args["id"].(int64)), true

	case "Mutation.update_construction_info_by_union_pk":
		if e.complexity.Mutation.UpdateConstructionInfoByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_construction_info_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateConstructionInfoByUnionPk(childComplexity, args["_inc"].(*model.ConstructionInfoIncInput), args["_set"].(*model.ConstructionInfoSetInput), args["construction_info_id"].(string)), true

	case "Mutation.update_construction_upload_pic":
		if e.complexity.Mutation.UpdateConstructionUploadPic == nil {
			break
		}

		args, err := ec.field_Mutation_update_construction_upload_pic_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateConstructionUploadPic(childComplexity, args["_inc"].(*model.ConstructionUploadPicIncInput), args["_set"].(*model.ConstructionUploadPicSetInput), args["where"].(model.ConstructionUploadPicBoolExp)), true

	case "Mutation.update_construction_upload_pic_by_pk":
		if e.complexity.Mutation.UpdateConstructionUploadPicByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_construction_upload_pic_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateConstructionUploadPicByPk(childComplexity, args["_inc"].(*model.ConstructionUploadPicIncInput), args["_set"].(*model.ConstructionUploadPicSetInput), args["id"].(int64)), true

	case "Mutation.update_construction_upload_pic_by_union_pk":
		if e.complexity.Mutation.UpdateConstructionUploadPicByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_construction_upload_pic_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateConstructionUploadPicByUnionPk(childComplexity, args["_inc"].(*model.ConstructionUploadPicIncInput), args["_set"].(*model.ConstructionUploadPicSetInput), args["construction_upload_pic_id"].(string)), true

	case "Mutation.update_offline_registration_record":
		if e.complexity.Mutation.UpdateOfflineRegistrationRecord == nil {
			break
		}

		args, err := ec.field_Mutation_update_offline_registration_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOfflineRegistrationRecord(childComplexity, args["_inc"].(*model.OfflineRegistrationRecordIncInput), args["_set"].(*model.OfflineRegistrationRecordSetInput), args["where"].(model.OfflineRegistrationRecordBoolExp)), true

	case "Mutation.update_offline_registration_record_by_pk":
		if e.complexity.Mutation.UpdateOfflineRegistrationRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_offline_registration_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOfflineRegistrationRecordByPk(childComplexity, args["_inc"].(*model.OfflineRegistrationRecordIncInput), args["_set"].(*model.OfflineRegistrationRecordSetInput), args["id"].(int64)), true

	case "Mutation.update_offline_registration_record_by_union_pk":
		if e.complexity.Mutation.UpdateOfflineRegistrationRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_offline_registration_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOfflineRegistrationRecordByUnionPk(childComplexity, args["_inc"].(*model.OfflineRegistrationRecordIncInput), args["_set"].(*model.OfflineRegistrationRecordSetInput), args["offline_registration_record_id"].(string)), true

	case "Mutation.update_snapshot_system_passing_alarm":
		if e.complexity.Mutation.UpdateSnapshotSystemPassingAlarm == nil {
			break
		}

		args, err := ec.field_Mutation_update_snapshot_system_passing_alarm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSnapshotSystemPassingAlarm(childComplexity, args["_inc"].(*model.SnapshotSystemPassingAlarmIncInput), args["_set"].(*model.SnapshotSystemPassingAlarmSetInput), args["where"].(model.SnapshotSystemPassingAlarmBoolExp)), true

	case "Mutation.update_snapshot_system_passing_alarm_by_pk":
		if e.complexity.Mutation.UpdateSnapshotSystemPassingAlarmByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_snapshot_system_passing_alarm_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSnapshotSystemPassingAlarmByPk(childComplexity, args["_inc"].(*model.SnapshotSystemPassingAlarmIncInput), args["_set"].(*model.SnapshotSystemPassingAlarmSetInput), args["id"].(int64)), true

	case "Mutation.update_snapshot_system_passing_alarm_by_union_pk":
		if e.complexity.Mutation.UpdateSnapshotSystemPassingAlarmByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_snapshot_system_passing_alarm_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSnapshotSystemPassingAlarmByUnionPk(childComplexity, args["_inc"].(*model.SnapshotSystemPassingAlarmIncInput), args["_set"].(*model.SnapshotSystemPassingAlarmSetInput), args["snapshot_system_passing_alarm_id"].(string)), true

	case "Mutation.update_vehicle_passing_record":
		if e.complexity.Mutation.UpdateVehiclePassingRecord == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_passing_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehiclePassingRecord(childComplexity, args["_inc"].(*model.VehiclePassingRecordIncInput), args["_set"].(*model.VehiclePassingRecordSetInput), args["where"].(model.VehiclePassingRecordBoolExp)), true

	case "Mutation.update_vehicle_passing_record_by_pk":
		if e.complexity.Mutation.UpdateVehiclePassingRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_passing_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehiclePassingRecordByPk(childComplexity, args["_inc"].(*model.VehiclePassingRecordIncInput), args["_set"].(*model.VehiclePassingRecordSetInput), args["id"].(int64)), true

	case "Mutation.update_vehicle_passing_record_by_union_pk":
		if e.complexity.Mutation.UpdateVehiclePassingRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_passing_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehiclePassingRecordByUnionPk(childComplexity, args["_inc"].(*model.VehiclePassingRecordIncInput), args["_set"].(*model.VehiclePassingRecordSetInput), args["vehicle_passing_record_id"].(string)), true

	case "OfflineRegistrationRecord.created_at":
		if e.complexity.OfflineRegistrationRecord.CreatedAt == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecord.CreatedAt(childComplexity), true

	case "OfflineRegistrationRecord.created_by":
		if e.complexity.OfflineRegistrationRecord.CreatedBy == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecord.CreatedBy(childComplexity), true

	case "OfflineRegistrationRecord.deleted_at":
		if e.complexity.OfflineRegistrationRecord.DeletedAt == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecord.DeletedAt(childComplexity), true

	case "OfflineRegistrationRecord.deleted_by":
		if e.complexity.OfflineRegistrationRecord.DeletedBy == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecord.DeletedBy(childComplexity), true

	case "OfflineRegistrationRecord.id":
		if e.complexity.OfflineRegistrationRecord.ID == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecord.ID(childComplexity), true

	case "OfflineRegistrationRecord.is_deleted":
		if e.complexity.OfflineRegistrationRecord.IsDeleted == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecord.IsDeleted(childComplexity), true

	case "OfflineRegistrationRecord.offline_registration_record_id":
		if e.complexity.OfflineRegistrationRecord.OfflineRegistrationRecordID == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecord.OfflineRegistrationRecordID(childComplexity), true

	case "OfflineRegistrationRecord.outage_registration_id":
		if e.complexity.OfflineRegistrationRecord.OutageRegistrationID == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecord.OutageRegistrationID(childComplexity), true

	case "OfflineRegistrationRecord.registrant":
		if e.complexity.OfflineRegistrationRecord.Registrant == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecord.Registrant(childComplexity), true

	case "OfflineRegistrationRecord.registration_content":
		if e.complexity.OfflineRegistrationRecord.RegistrationContent == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecord.RegistrationContent(childComplexity), true

	case "OfflineRegistrationRecord.registration_time":
		if e.complexity.OfflineRegistrationRecord.RegistrationTime == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecord.RegistrationTime(childComplexity), true

	case "OfflineRegistrationRecord.updated_at":
		if e.complexity.OfflineRegistrationRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecord.UpdatedAt(childComplexity), true

	case "OfflineRegistrationRecord.updated_by":
		if e.complexity.OfflineRegistrationRecord.UpdatedBy == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecord.UpdatedBy(childComplexity), true

	case "OfflineRegistrationRecordAggregate.aggregate":
		if e.complexity.OfflineRegistrationRecordAggregate.Aggregate == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordAggregate.Aggregate(childComplexity), true

	case "OfflineRegistrationRecordAggregateFields.avg":
		if e.complexity.OfflineRegistrationRecordAggregateFields.Avg == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordAggregateFields.Avg(childComplexity), true

	case "OfflineRegistrationRecordAggregateFields.count":
		if e.complexity.OfflineRegistrationRecordAggregateFields.Count == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordAggregateFields.Count(childComplexity), true

	case "OfflineRegistrationRecordAggregateFields.max":
		if e.complexity.OfflineRegistrationRecordAggregateFields.Max == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordAggregateFields.Max(childComplexity), true

	case "OfflineRegistrationRecordAggregateFields.min":
		if e.complexity.OfflineRegistrationRecordAggregateFields.Min == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordAggregateFields.Min(childComplexity), true

	case "OfflineRegistrationRecordAggregateFields.stddev":
		if e.complexity.OfflineRegistrationRecordAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordAggregateFields.Stddev(childComplexity), true

	case "OfflineRegistrationRecordAggregateFields.stddev_pop":
		if e.complexity.OfflineRegistrationRecordAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordAggregateFields.StddevPop(childComplexity), true

	case "OfflineRegistrationRecordAggregateFields.stddev_samp":
		if e.complexity.OfflineRegistrationRecordAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordAggregateFields.StddevSamp(childComplexity), true

	case "OfflineRegistrationRecordAggregateFields.sum":
		if e.complexity.OfflineRegistrationRecordAggregateFields.Sum == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordAggregateFields.Sum(childComplexity), true

	case "OfflineRegistrationRecordAggregateFields.var_pop":
		if e.complexity.OfflineRegistrationRecordAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordAggregateFields.VarPop(childComplexity), true

	case "OfflineRegistrationRecordAggregateFields.var_samp":
		if e.complexity.OfflineRegistrationRecordAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordAggregateFields.VarSamp(childComplexity), true

	case "OfflineRegistrationRecordAggregateFields.variance":
		if e.complexity.OfflineRegistrationRecordAggregateFields.Variance == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordAggregateFields.Variance(childComplexity), true

	case "OfflineRegistrationRecordAvgFields.id":
		if e.complexity.OfflineRegistrationRecordAvgFields.ID == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordAvgFields.ID(childComplexity), true

	case "OfflineRegistrationRecordMaxFields.created_at":
		if e.complexity.OfflineRegistrationRecordMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMaxFields.CreatedAt(childComplexity), true

	case "OfflineRegistrationRecordMaxFields.created_by":
		if e.complexity.OfflineRegistrationRecordMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMaxFields.CreatedBy(childComplexity), true

	case "OfflineRegistrationRecordMaxFields.deleted_at":
		if e.complexity.OfflineRegistrationRecordMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMaxFields.DeletedAt(childComplexity), true

	case "OfflineRegistrationRecordMaxFields.deleted_by":
		if e.complexity.OfflineRegistrationRecordMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMaxFields.DeletedBy(childComplexity), true

	case "OfflineRegistrationRecordMaxFields.id":
		if e.complexity.OfflineRegistrationRecordMaxFields.ID == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMaxFields.ID(childComplexity), true

	case "OfflineRegistrationRecordMaxFields.is_deleted":
		if e.complexity.OfflineRegistrationRecordMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMaxFields.IsDeleted(childComplexity), true

	case "OfflineRegistrationRecordMaxFields.offline_registration_record_id":
		if e.complexity.OfflineRegistrationRecordMaxFields.OfflineRegistrationRecordID == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMaxFields.OfflineRegistrationRecordID(childComplexity), true

	case "OfflineRegistrationRecordMaxFields.outage_registration_id":
		if e.complexity.OfflineRegistrationRecordMaxFields.OutageRegistrationID == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMaxFields.OutageRegistrationID(childComplexity), true

	case "OfflineRegistrationRecordMaxFields.registrant":
		if e.complexity.OfflineRegistrationRecordMaxFields.Registrant == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMaxFields.Registrant(childComplexity), true

	case "OfflineRegistrationRecordMaxFields.registration_content":
		if e.complexity.OfflineRegistrationRecordMaxFields.RegistrationContent == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMaxFields.RegistrationContent(childComplexity), true

	case "OfflineRegistrationRecordMaxFields.registration_time":
		if e.complexity.OfflineRegistrationRecordMaxFields.RegistrationTime == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMaxFields.RegistrationTime(childComplexity), true

	case "OfflineRegistrationRecordMaxFields.updated_at":
		if e.complexity.OfflineRegistrationRecordMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMaxFields.UpdatedAt(childComplexity), true

	case "OfflineRegistrationRecordMaxFields.updated_by":
		if e.complexity.OfflineRegistrationRecordMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMaxFields.UpdatedBy(childComplexity), true

	case "OfflineRegistrationRecordMinFields.created_at":
		if e.complexity.OfflineRegistrationRecordMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMinFields.CreatedAt(childComplexity), true

	case "OfflineRegistrationRecordMinFields.created_by":
		if e.complexity.OfflineRegistrationRecordMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMinFields.CreatedBy(childComplexity), true

	case "OfflineRegistrationRecordMinFields.deleted_at":
		if e.complexity.OfflineRegistrationRecordMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMinFields.DeletedAt(childComplexity), true

	case "OfflineRegistrationRecordMinFields.deleted_by":
		if e.complexity.OfflineRegistrationRecordMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMinFields.DeletedBy(childComplexity), true

	case "OfflineRegistrationRecordMinFields.id":
		if e.complexity.OfflineRegistrationRecordMinFields.ID == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMinFields.ID(childComplexity), true

	case "OfflineRegistrationRecordMinFields.is_deleted":
		if e.complexity.OfflineRegistrationRecordMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMinFields.IsDeleted(childComplexity), true

	case "OfflineRegistrationRecordMinFields.offline_registration_record_id":
		if e.complexity.OfflineRegistrationRecordMinFields.OfflineRegistrationRecordID == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMinFields.OfflineRegistrationRecordID(childComplexity), true

	case "OfflineRegistrationRecordMinFields.outage_registration_id":
		if e.complexity.OfflineRegistrationRecordMinFields.OutageRegistrationID == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMinFields.OutageRegistrationID(childComplexity), true

	case "OfflineRegistrationRecordMinFields.registrant":
		if e.complexity.OfflineRegistrationRecordMinFields.Registrant == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMinFields.Registrant(childComplexity), true

	case "OfflineRegistrationRecordMinFields.registration_content":
		if e.complexity.OfflineRegistrationRecordMinFields.RegistrationContent == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMinFields.RegistrationContent(childComplexity), true

	case "OfflineRegistrationRecordMinFields.registration_time":
		if e.complexity.OfflineRegistrationRecordMinFields.RegistrationTime == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMinFields.RegistrationTime(childComplexity), true

	case "OfflineRegistrationRecordMinFields.updated_at":
		if e.complexity.OfflineRegistrationRecordMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMinFields.UpdatedAt(childComplexity), true

	case "OfflineRegistrationRecordMinFields.updated_by":
		if e.complexity.OfflineRegistrationRecordMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMinFields.UpdatedBy(childComplexity), true

	case "OfflineRegistrationRecordMutationResponse.affected_rows":
		if e.complexity.OfflineRegistrationRecordMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMutationResponse.AffectedRows(childComplexity), true

	case "OfflineRegistrationRecordMutationResponse.returning":
		if e.complexity.OfflineRegistrationRecordMutationResponse.Returning == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordMutationResponse.Returning(childComplexity), true

	case "OfflineRegistrationRecordStddevFields.id":
		if e.complexity.OfflineRegistrationRecordStddevFields.ID == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordStddevFields.ID(childComplexity), true

	case "OfflineRegistrationRecordStddevPopFields.id":
		if e.complexity.OfflineRegistrationRecordStddevPopFields.ID == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordStddevPopFields.ID(childComplexity), true

	case "OfflineRegistrationRecordStddevSampFields.id":
		if e.complexity.OfflineRegistrationRecordStddevSampFields.ID == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordStddevSampFields.ID(childComplexity), true

	case "OfflineRegistrationRecordSumFields.id":
		if e.complexity.OfflineRegistrationRecordSumFields.ID == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordSumFields.ID(childComplexity), true

	case "OfflineRegistrationRecordVarPopFields.id":
		if e.complexity.OfflineRegistrationRecordVarPopFields.ID == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordVarPopFields.ID(childComplexity), true

	case "OfflineRegistrationRecordVarSampFields.id":
		if e.complexity.OfflineRegistrationRecordVarSampFields.ID == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordVarSampFields.ID(childComplexity), true

	case "OfflineRegistrationRecordVarianceFields.id":
		if e.complexity.OfflineRegistrationRecordVarianceFields.ID == nil {
			break
		}

		return e.complexity.OfflineRegistrationRecordVarianceFields.ID(childComplexity), true

	case "Query.construction_camera":
		if e.complexity.Query.ConstructionCamera == nil {
			break
		}

		args, err := ec.field_Query_construction_camera_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConstructionCamera(childComplexity, args["distinct_on"].([]model.ConstructionCameraSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ConstructionCameraOrderBy), args["where"].(*model.ConstructionCameraBoolExp)), true

	case "Query.construction_camera_aggregate":
		if e.complexity.Query.ConstructionCameraAggregate == nil {
			break
		}

		args, err := ec.field_Query_construction_camera_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConstructionCameraAggregate(childComplexity, args["distinct_on"].([]model.ConstructionCameraSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ConstructionCameraOrderBy), args["where"].(*model.ConstructionCameraBoolExp)), true

	case "Query.construction_camera_by_pk":
		if e.complexity.Query.ConstructionCameraByPk == nil {
			break
		}

		args, err := ec.field_Query_construction_camera_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConstructionCameraByPk(childComplexity, args["id"].(int64)), true

	case "Query.construction_camera_by_union_pk":
		if e.complexity.Query.ConstructionCameraByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_construction_camera_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConstructionCameraByUnionPk(childComplexity, args["construction_camera_id"].(string)), true

	case "Query.construction_info":
		if e.complexity.Query.ConstructionInfo == nil {
			break
		}

		args, err := ec.field_Query_construction_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConstructionInfo(childComplexity, args["distinct_on"].([]model.ConstructionInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ConstructionInfoOrderBy), args["where"].(*model.ConstructionInfoBoolExp)), true

	case "Query.construction_info_aggregate":
		if e.complexity.Query.ConstructionInfoAggregate == nil {
			break
		}

		args, err := ec.field_Query_construction_info_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConstructionInfoAggregate(childComplexity, args["distinct_on"].([]model.ConstructionInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ConstructionInfoOrderBy), args["where"].(*model.ConstructionInfoBoolExp)), true

	case "Query.construction_info_by_pk":
		if e.complexity.Query.ConstructionInfoByPk == nil {
			break
		}

		args, err := ec.field_Query_construction_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConstructionInfoByPk(childComplexity, args["id"].(int64)), true

	case "Query.construction_info_by_union_pk":
		if e.complexity.Query.ConstructionInfoByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_construction_info_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConstructionInfoByUnionPk(childComplexity, args["construction_info_id"].(string)), true

	case "Query.construction_upload_pic":
		if e.complexity.Query.ConstructionUploadPic == nil {
			break
		}

		args, err := ec.field_Query_construction_upload_pic_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConstructionUploadPic(childComplexity, args["distinct_on"].([]model.ConstructionUploadPicSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ConstructionUploadPicOrderBy), args["where"].(*model.ConstructionUploadPicBoolExp)), true

	case "Query.construction_upload_pic_aggregate":
		if e.complexity.Query.ConstructionUploadPicAggregate == nil {
			break
		}

		args, err := ec.field_Query_construction_upload_pic_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConstructionUploadPicAggregate(childComplexity, args["distinct_on"].([]model.ConstructionUploadPicSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ConstructionUploadPicOrderBy), args["where"].(*model.ConstructionUploadPicBoolExp)), true

	case "Query.construction_upload_pic_by_pk":
		if e.complexity.Query.ConstructionUploadPicByPk == nil {
			break
		}

		args, err := ec.field_Query_construction_upload_pic_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConstructionUploadPicByPk(childComplexity, args["id"].(int64)), true

	case "Query.construction_upload_pic_by_union_pk":
		if e.complexity.Query.ConstructionUploadPicByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_construction_upload_pic_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConstructionUploadPicByUnionPk(childComplexity, args["construction_upload_pic_id"].(string)), true

	case "Query.offline_registration_record":
		if e.complexity.Query.OfflineRegistrationRecord == nil {
			break
		}

		args, err := ec.field_Query_offline_registration_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OfflineRegistrationRecord(childComplexity, args["distinct_on"].([]model.OfflineRegistrationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OfflineRegistrationRecordOrderBy), args["where"].(*model.OfflineRegistrationRecordBoolExp)), true

	case "Query.offline_registration_record_aggregate":
		if e.complexity.Query.OfflineRegistrationRecordAggregate == nil {
			break
		}

		args, err := ec.field_Query_offline_registration_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OfflineRegistrationRecordAggregate(childComplexity, args["distinct_on"].([]model.OfflineRegistrationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OfflineRegistrationRecordOrderBy), args["where"].(*model.OfflineRegistrationRecordBoolExp)), true

	case "Query.offline_registration_record_by_pk":
		if e.complexity.Query.OfflineRegistrationRecordByPk == nil {
			break
		}

		args, err := ec.field_Query_offline_registration_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OfflineRegistrationRecordByPk(childComplexity, args["id"].(int64)), true

	case "Query.offline_registration_record_by_union_pk":
		if e.complexity.Query.OfflineRegistrationRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_offline_registration_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OfflineRegistrationRecordByUnionPk(childComplexity, args["offline_registration_record_id"].(string)), true

	case "Query.snapshot_system_passing_alarm":
		if e.complexity.Query.SnapshotSystemPassingAlarm == nil {
			break
		}

		args, err := ec.field_Query_snapshot_system_passing_alarm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SnapshotSystemPassingAlarm(childComplexity, args["distinct_on"].([]model.SnapshotSystemPassingAlarmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SnapshotSystemPassingAlarmOrderBy), args["where"].(*model.SnapshotSystemPassingAlarmBoolExp)), true

	case "Query.snapshot_system_passing_alarm_aggregate":
		if e.complexity.Query.SnapshotSystemPassingAlarmAggregate == nil {
			break
		}

		args, err := ec.field_Query_snapshot_system_passing_alarm_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SnapshotSystemPassingAlarmAggregate(childComplexity, args["distinct_on"].([]model.SnapshotSystemPassingAlarmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SnapshotSystemPassingAlarmOrderBy), args["where"].(*model.SnapshotSystemPassingAlarmBoolExp)), true

	case "Query.snapshot_system_passing_alarm_by_pk":
		if e.complexity.Query.SnapshotSystemPassingAlarmByPk == nil {
			break
		}

		args, err := ec.field_Query_snapshot_system_passing_alarm_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SnapshotSystemPassingAlarmByPk(childComplexity, args["id"].(int64)), true

	case "Query.snapshot_system_passing_alarm_by_union_pk":
		if e.complexity.Query.SnapshotSystemPassingAlarmByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_snapshot_system_passing_alarm_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SnapshotSystemPassingAlarmByUnionPk(childComplexity, args["snapshot_system_passing_alarm_id"].(string)), true

	case "Query.vehicle_passing_record":
		if e.complexity.Query.VehiclePassingRecord == nil {
			break
		}

		args, err := ec.field_Query_vehicle_passing_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehiclePassingRecord(childComplexity, args["distinct_on"].([]model.VehiclePassingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehiclePassingRecordOrderBy), args["where"].(*model.VehiclePassingRecordBoolExp)), true

	case "Query.vehicle_passing_record_aggregate":
		if e.complexity.Query.VehiclePassingRecordAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_passing_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehiclePassingRecordAggregate(childComplexity, args["distinct_on"].([]model.VehiclePassingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehiclePassingRecordOrderBy), args["where"].(*model.VehiclePassingRecordBoolExp)), true

	case "Query.vehicle_passing_record_by_pk":
		if e.complexity.Query.VehiclePassingRecordByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_passing_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehiclePassingRecordByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_passing_record_by_union_pk":
		if e.complexity.Query.VehiclePassingRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_passing_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehiclePassingRecordByUnionPk(childComplexity, args["vehicle_passing_record_id"].(string)), true

	case "SnapshotSystemPassingAlarm.alarm_type":
		if e.complexity.SnapshotSystemPassingAlarm.AlarmType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.AlarmType(childComplexity), true

	case "SnapshotSystemPassingAlarm.camera_id":
		if e.complexity.SnapshotSystemPassingAlarm.CameraID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.CameraID(childComplexity), true

	case "SnapshotSystemPassingAlarm.created_at":
		if e.complexity.SnapshotSystemPassingAlarm.CreatedAt == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.CreatedAt(childComplexity), true

	case "SnapshotSystemPassingAlarm.created_by":
		if e.complexity.SnapshotSystemPassingAlarm.CreatedBy == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.CreatedBy(childComplexity), true

	case "SnapshotSystemPassingAlarm.deleted_at":
		if e.complexity.SnapshotSystemPassingAlarm.DeletedAt == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.DeletedAt(childComplexity), true

	case "SnapshotSystemPassingAlarm.deleted_by":
		if e.complexity.SnapshotSystemPassingAlarm.DeletedBy == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.DeletedBy(childComplexity), true

	case "SnapshotSystemPassingAlarm.id":
		if e.complexity.SnapshotSystemPassingAlarm.ID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.ID(childComplexity), true

	case "SnapshotSystemPassingAlarm.is_online":
		if e.complexity.SnapshotSystemPassingAlarm.IsOnline == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.IsOnline(childComplexity), true

	case "SnapshotSystemPassingAlarm.is_supervision":
		if e.complexity.SnapshotSystemPassingAlarm.IsSupervision == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.IsSupervision(childComplexity), true

	case "SnapshotSystemPassingAlarm.license_plate_number":
		if e.complexity.SnapshotSystemPassingAlarm.LicensePlateNumber == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.LicensePlateNumber(childComplexity), true

	case "SnapshotSystemPassingAlarm.passing_id":
		if e.complexity.SnapshotSystemPassingAlarm.PassingID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.PassingID(childComplexity), true

	case "SnapshotSystemPassingAlarm.registration_time":
		if e.complexity.SnapshotSystemPassingAlarm.RegistrationTime == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.RegistrationTime(childComplexity), true

	case "SnapshotSystemPassingAlarm.remarks":
		if e.complexity.SnapshotSystemPassingAlarm.Remarks == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.Remarks(childComplexity), true

	case "SnapshotSystemPassingAlarm.review_status":
		if e.complexity.SnapshotSystemPassingAlarm.ReviewStatus == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.ReviewStatus(childComplexity), true

	case "SnapshotSystemPassingAlarm.snapshot_system_passing_alarm_id":
		if e.complexity.SnapshotSystemPassingAlarm.SnapshotSystemPassingAlarmID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.SnapshotSystemPassingAlarmID(childComplexity), true

	case "SnapshotSystemPassingAlarm.supervision_time":
		if e.complexity.SnapshotSystemPassingAlarm.SupervisionTime == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.SupervisionTime(childComplexity), true

	case "SnapshotSystemPassingAlarm.updated_at":
		if e.complexity.SnapshotSystemPassingAlarm.UpdatedAt == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.UpdatedAt(childComplexity), true

	case "SnapshotSystemPassingAlarm.updated_by":
		if e.complexity.SnapshotSystemPassingAlarm.UpdatedBy == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.UpdatedBy(childComplexity), true

	case "SnapshotSystemPassingAlarm.vehicle_id":
		if e.complexity.SnapshotSystemPassingAlarm.VehicleID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.VehicleID(childComplexity), true

	case "SnapshotSystemPassingAlarm.vehicle_type":
		if e.complexity.SnapshotSystemPassingAlarm.VehicleType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarm.VehicleType(childComplexity), true

	case "SnapshotSystemPassingAlarmAggregate.aggregate":
		if e.complexity.SnapshotSystemPassingAlarmAggregate.Aggregate == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmAggregate.Aggregate(childComplexity), true

	case "SnapshotSystemPassingAlarmAggregateFields.avg":
		if e.complexity.SnapshotSystemPassingAlarmAggregateFields.Avg == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmAggregateFields.Avg(childComplexity), true

	case "SnapshotSystemPassingAlarmAggregateFields.count":
		if e.complexity.SnapshotSystemPassingAlarmAggregateFields.Count == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmAggregateFields.Count(childComplexity), true

	case "SnapshotSystemPassingAlarmAggregateFields.max":
		if e.complexity.SnapshotSystemPassingAlarmAggregateFields.Max == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmAggregateFields.Max(childComplexity), true

	case "SnapshotSystemPassingAlarmAggregateFields.min":
		if e.complexity.SnapshotSystemPassingAlarmAggregateFields.Min == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmAggregateFields.Min(childComplexity), true

	case "SnapshotSystemPassingAlarmAggregateFields.stddev":
		if e.complexity.SnapshotSystemPassingAlarmAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmAggregateFields.Stddev(childComplexity), true

	case "SnapshotSystemPassingAlarmAggregateFields.stddev_pop":
		if e.complexity.SnapshotSystemPassingAlarmAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmAggregateFields.StddevPop(childComplexity), true

	case "SnapshotSystemPassingAlarmAggregateFields.stddev_samp":
		if e.complexity.SnapshotSystemPassingAlarmAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmAggregateFields.StddevSamp(childComplexity), true

	case "SnapshotSystemPassingAlarmAggregateFields.sum":
		if e.complexity.SnapshotSystemPassingAlarmAggregateFields.Sum == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmAggregateFields.Sum(childComplexity), true

	case "SnapshotSystemPassingAlarmAggregateFields.var_pop":
		if e.complexity.SnapshotSystemPassingAlarmAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmAggregateFields.VarPop(childComplexity), true

	case "SnapshotSystemPassingAlarmAggregateFields.var_samp":
		if e.complexity.SnapshotSystemPassingAlarmAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmAggregateFields.VarSamp(childComplexity), true

	case "SnapshotSystemPassingAlarmAggregateFields.variance":
		if e.complexity.SnapshotSystemPassingAlarmAggregateFields.Variance == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmAggregateFields.Variance(childComplexity), true

	case "SnapshotSystemPassingAlarmAvgFields.alarm_type":
		if e.complexity.SnapshotSystemPassingAlarmAvgFields.AlarmType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmAvgFields.AlarmType(childComplexity), true

	case "SnapshotSystemPassingAlarmAvgFields.id":
		if e.complexity.SnapshotSystemPassingAlarmAvgFields.ID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmAvgFields.ID(childComplexity), true

	case "SnapshotSystemPassingAlarmAvgFields.vehicle_type":
		if e.complexity.SnapshotSystemPassingAlarmAvgFields.VehicleType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmAvgFields.VehicleType(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.alarm_type":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.AlarmType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.AlarmType(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.camera_id":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.CameraID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.CameraID(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.created_at":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.CreatedAt(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.created_by":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.CreatedBy(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.deleted_at":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.DeletedAt(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.deleted_by":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.DeletedBy(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.id":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.ID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.ID(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.is_online":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.IsOnline == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.IsOnline(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.is_supervision":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.IsSupervision == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.IsSupervision(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.license_plate_number":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.LicensePlateNumber(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.passing_id":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.PassingID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.PassingID(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.registration_time":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.RegistrationTime == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.RegistrationTime(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.remarks":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.Remarks == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.Remarks(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.review_status":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.ReviewStatus == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.ReviewStatus(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.snapshot_system_passing_alarm_id":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.SnapshotSystemPassingAlarmID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.SnapshotSystemPassingAlarmID(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.supervision_time":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.SupervisionTime == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.SupervisionTime(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.updated_at":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.UpdatedAt(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.updated_by":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.UpdatedBy(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.vehicle_id":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.VehicleID(childComplexity), true

	case "SnapshotSystemPassingAlarmMaxFields.vehicle_type":
		if e.complexity.SnapshotSystemPassingAlarmMaxFields.VehicleType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMaxFields.VehicleType(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.alarm_type":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.AlarmType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.AlarmType(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.camera_id":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.CameraID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.CameraID(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.created_at":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.CreatedAt(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.created_by":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.CreatedBy(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.deleted_at":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.DeletedAt(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.deleted_by":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.DeletedBy(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.id":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.ID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.ID(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.is_online":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.IsOnline == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.IsOnline(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.is_supervision":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.IsSupervision == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.IsSupervision(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.license_plate_number":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.LicensePlateNumber(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.passing_id":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.PassingID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.PassingID(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.registration_time":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.RegistrationTime == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.RegistrationTime(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.remarks":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.Remarks == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.Remarks(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.review_status":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.ReviewStatus == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.ReviewStatus(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.snapshot_system_passing_alarm_id":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.SnapshotSystemPassingAlarmID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.SnapshotSystemPassingAlarmID(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.supervision_time":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.SupervisionTime == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.SupervisionTime(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.updated_at":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.UpdatedAt(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.updated_by":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.UpdatedBy(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.vehicle_id":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.VehicleID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.VehicleID(childComplexity), true

	case "SnapshotSystemPassingAlarmMinFields.vehicle_type":
		if e.complexity.SnapshotSystemPassingAlarmMinFields.VehicleType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMinFields.VehicleType(childComplexity), true

	case "SnapshotSystemPassingAlarmMutationResponse.affected_rows":
		if e.complexity.SnapshotSystemPassingAlarmMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMutationResponse.AffectedRows(childComplexity), true

	case "SnapshotSystemPassingAlarmMutationResponse.returning":
		if e.complexity.SnapshotSystemPassingAlarmMutationResponse.Returning == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmMutationResponse.Returning(childComplexity), true

	case "SnapshotSystemPassingAlarmStddevFields.alarm_type":
		if e.complexity.SnapshotSystemPassingAlarmStddevFields.AlarmType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmStddevFields.AlarmType(childComplexity), true

	case "SnapshotSystemPassingAlarmStddevFields.id":
		if e.complexity.SnapshotSystemPassingAlarmStddevFields.ID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmStddevFields.ID(childComplexity), true

	case "SnapshotSystemPassingAlarmStddevFields.vehicle_type":
		if e.complexity.SnapshotSystemPassingAlarmStddevFields.VehicleType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmStddevFields.VehicleType(childComplexity), true

	case "SnapshotSystemPassingAlarmStddevPopFields.alarm_type":
		if e.complexity.SnapshotSystemPassingAlarmStddevPopFields.AlarmType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmStddevPopFields.AlarmType(childComplexity), true

	case "SnapshotSystemPassingAlarmStddevPopFields.id":
		if e.complexity.SnapshotSystemPassingAlarmStddevPopFields.ID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmStddevPopFields.ID(childComplexity), true

	case "SnapshotSystemPassingAlarmStddevPopFields.vehicle_type":
		if e.complexity.SnapshotSystemPassingAlarmStddevPopFields.VehicleType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmStddevPopFields.VehicleType(childComplexity), true

	case "SnapshotSystemPassingAlarmStddevSampFields.alarm_type":
		if e.complexity.SnapshotSystemPassingAlarmStddevSampFields.AlarmType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmStddevSampFields.AlarmType(childComplexity), true

	case "SnapshotSystemPassingAlarmStddevSampFields.id":
		if e.complexity.SnapshotSystemPassingAlarmStddevSampFields.ID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmStddevSampFields.ID(childComplexity), true

	case "SnapshotSystemPassingAlarmStddevSampFields.vehicle_type":
		if e.complexity.SnapshotSystemPassingAlarmStddevSampFields.VehicleType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmStddevSampFields.VehicleType(childComplexity), true

	case "SnapshotSystemPassingAlarmSumFields.alarm_type":
		if e.complexity.SnapshotSystemPassingAlarmSumFields.AlarmType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmSumFields.AlarmType(childComplexity), true

	case "SnapshotSystemPassingAlarmSumFields.id":
		if e.complexity.SnapshotSystemPassingAlarmSumFields.ID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmSumFields.ID(childComplexity), true

	case "SnapshotSystemPassingAlarmSumFields.vehicle_type":
		if e.complexity.SnapshotSystemPassingAlarmSumFields.VehicleType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmSumFields.VehicleType(childComplexity), true

	case "SnapshotSystemPassingAlarmVarPopFields.alarm_type":
		if e.complexity.SnapshotSystemPassingAlarmVarPopFields.AlarmType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmVarPopFields.AlarmType(childComplexity), true

	case "SnapshotSystemPassingAlarmVarPopFields.id":
		if e.complexity.SnapshotSystemPassingAlarmVarPopFields.ID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmVarPopFields.ID(childComplexity), true

	case "SnapshotSystemPassingAlarmVarPopFields.vehicle_type":
		if e.complexity.SnapshotSystemPassingAlarmVarPopFields.VehicleType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmVarPopFields.VehicleType(childComplexity), true

	case "SnapshotSystemPassingAlarmVarSampFields.alarm_type":
		if e.complexity.SnapshotSystemPassingAlarmVarSampFields.AlarmType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmVarSampFields.AlarmType(childComplexity), true

	case "SnapshotSystemPassingAlarmVarSampFields.id":
		if e.complexity.SnapshotSystemPassingAlarmVarSampFields.ID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmVarSampFields.ID(childComplexity), true

	case "SnapshotSystemPassingAlarmVarSampFields.vehicle_type":
		if e.complexity.SnapshotSystemPassingAlarmVarSampFields.VehicleType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmVarSampFields.VehicleType(childComplexity), true

	case "SnapshotSystemPassingAlarmVarianceFields.alarm_type":
		if e.complexity.SnapshotSystemPassingAlarmVarianceFields.AlarmType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmVarianceFields.AlarmType(childComplexity), true

	case "SnapshotSystemPassingAlarmVarianceFields.id":
		if e.complexity.SnapshotSystemPassingAlarmVarianceFields.ID == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmVarianceFields.ID(childComplexity), true

	case "SnapshotSystemPassingAlarmVarianceFields.vehicle_type":
		if e.complexity.SnapshotSystemPassingAlarmVarianceFields.VehicleType == nil {
			break
		}

		return e.complexity.SnapshotSystemPassingAlarmVarianceFields.VehicleType(childComplexity), true

	case "VehiclePassingRecord.camera_id":
		if e.complexity.VehiclePassingRecord.CameraID == nil {
			break
		}

		return e.complexity.VehiclePassingRecord.CameraID(childComplexity), true

	case "VehiclePassingRecord.created_at":
		if e.complexity.VehiclePassingRecord.CreatedAt == nil {
			break
		}

		return e.complexity.VehiclePassingRecord.CreatedAt(childComplexity), true

	case "VehiclePassingRecord.created_by":
		if e.complexity.VehiclePassingRecord.CreatedBy == nil {
			break
		}

		return e.complexity.VehiclePassingRecord.CreatedBy(childComplexity), true

	case "VehiclePassingRecord.deleted_at":
		if e.complexity.VehiclePassingRecord.DeletedAt == nil {
			break
		}

		return e.complexity.VehiclePassingRecord.DeletedAt(childComplexity), true

	case "VehiclePassingRecord.deleted_by":
		if e.complexity.VehiclePassingRecord.DeletedBy == nil {
			break
		}

		return e.complexity.VehiclePassingRecord.DeletedBy(childComplexity), true

	case "VehiclePassingRecord.id":
		if e.complexity.VehiclePassingRecord.ID == nil {
			break
		}

		return e.complexity.VehiclePassingRecord.ID(childComplexity), true

	case "VehiclePassingRecord.is_online":
		if e.complexity.VehiclePassingRecord.IsOnline == nil {
			break
		}

		return e.complexity.VehiclePassingRecord.IsOnline(childComplexity), true

	case "VehiclePassingRecord.license_plate_number":
		if e.complexity.VehiclePassingRecord.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehiclePassingRecord.LicensePlateNumber(childComplexity), true

	case "VehiclePassingRecord.pass_type":
		if e.complexity.VehiclePassingRecord.PassType == nil {
			break
		}

		return e.complexity.VehiclePassingRecord.PassType(childComplexity), true

	case "VehiclePassingRecord.passing_time":
		if e.complexity.VehiclePassingRecord.PassingTime == nil {
			break
		}

		return e.complexity.VehiclePassingRecord.PassingTime(childComplexity), true

	case "VehiclePassingRecord.picture_url":
		if e.complexity.VehiclePassingRecord.PictureURL == nil {
			break
		}

		return e.complexity.VehiclePassingRecord.PictureURL(childComplexity), true

	case "VehiclePassingRecord.registration_time":
		if e.complexity.VehiclePassingRecord.RegistrationTime == nil {
			break
		}

		return e.complexity.VehiclePassingRecord.RegistrationTime(childComplexity), true

	case "VehiclePassingRecord.review_status":
		if e.complexity.VehiclePassingRecord.ReviewStatus == nil {
			break
		}

		return e.complexity.VehiclePassingRecord.ReviewStatus(childComplexity), true

	case "VehiclePassingRecord.updated_at":
		if e.complexity.VehiclePassingRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.VehiclePassingRecord.UpdatedAt(childComplexity), true

	case "VehiclePassingRecord.updated_by":
		if e.complexity.VehiclePassingRecord.UpdatedBy == nil {
			break
		}

		return e.complexity.VehiclePassingRecord.UpdatedBy(childComplexity), true

	case "VehiclePassingRecord.vehicle_id":
		if e.complexity.VehiclePassingRecord.VehicleID == nil {
			break
		}

		return e.complexity.VehiclePassingRecord.VehicleID(childComplexity), true

	case "VehiclePassingRecord.vehicle_passing_record_id":
		if e.complexity.VehiclePassingRecord.VehiclePassingRecordID == nil {
			break
		}

		return e.complexity.VehiclePassingRecord.VehiclePassingRecordID(childComplexity), true

	case "VehiclePassingRecord.vehicle_type":
		if e.complexity.VehiclePassingRecord.VehicleType == nil {
			break
		}

		return e.complexity.VehiclePassingRecord.VehicleType(childComplexity), true

	case "VehiclePassingRecordAggregate.aggregate":
		if e.complexity.VehiclePassingRecordAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehiclePassingRecordAggregate.Aggregate(childComplexity), true

	case "VehiclePassingRecordAggregateFields.avg":
		if e.complexity.VehiclePassingRecordAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehiclePassingRecordAggregateFields.Avg(childComplexity), true

	case "VehiclePassingRecordAggregateFields.count":
		if e.complexity.VehiclePassingRecordAggregateFields.Count == nil {
			break
		}

		return e.complexity.VehiclePassingRecordAggregateFields.Count(childComplexity), true

	case "VehiclePassingRecordAggregateFields.max":
		if e.complexity.VehiclePassingRecordAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehiclePassingRecordAggregateFields.Max(childComplexity), true

	case "VehiclePassingRecordAggregateFields.min":
		if e.complexity.VehiclePassingRecordAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehiclePassingRecordAggregateFields.Min(childComplexity), true

	case "VehiclePassingRecordAggregateFields.stddev":
		if e.complexity.VehiclePassingRecordAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehiclePassingRecordAggregateFields.Stddev(childComplexity), true

	case "VehiclePassingRecordAggregateFields.stddev_pop":
		if e.complexity.VehiclePassingRecordAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehiclePassingRecordAggregateFields.StddevPop(childComplexity), true

	case "VehiclePassingRecordAggregateFields.stddev_samp":
		if e.complexity.VehiclePassingRecordAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehiclePassingRecordAggregateFields.StddevSamp(childComplexity), true

	case "VehiclePassingRecordAggregateFields.sum":
		if e.complexity.VehiclePassingRecordAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehiclePassingRecordAggregateFields.Sum(childComplexity), true

	case "VehiclePassingRecordAggregateFields.var_pop":
		if e.complexity.VehiclePassingRecordAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehiclePassingRecordAggregateFields.VarPop(childComplexity), true

	case "VehiclePassingRecordAggregateFields.var_samp":
		if e.complexity.VehiclePassingRecordAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehiclePassingRecordAggregateFields.VarSamp(childComplexity), true

	case "VehiclePassingRecordAggregateFields.variance":
		if e.complexity.VehiclePassingRecordAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehiclePassingRecordAggregateFields.Variance(childComplexity), true

	case "VehiclePassingRecordAvgFields.id":
		if e.complexity.VehiclePassingRecordAvgFields.ID == nil {
			break
		}

		return e.complexity.VehiclePassingRecordAvgFields.ID(childComplexity), true

	case "VehiclePassingRecordMaxFields.camera_id":
		if e.complexity.VehiclePassingRecordMaxFields.CameraID == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMaxFields.CameraID(childComplexity), true

	case "VehiclePassingRecordMaxFields.created_at":
		if e.complexity.VehiclePassingRecordMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMaxFields.CreatedAt(childComplexity), true

	case "VehiclePassingRecordMaxFields.created_by":
		if e.complexity.VehiclePassingRecordMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMaxFields.CreatedBy(childComplexity), true

	case "VehiclePassingRecordMaxFields.deleted_at":
		if e.complexity.VehiclePassingRecordMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMaxFields.DeletedAt(childComplexity), true

	case "VehiclePassingRecordMaxFields.deleted_by":
		if e.complexity.VehiclePassingRecordMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMaxFields.DeletedBy(childComplexity), true

	case "VehiclePassingRecordMaxFields.id":
		if e.complexity.VehiclePassingRecordMaxFields.ID == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMaxFields.ID(childComplexity), true

	case "VehiclePassingRecordMaxFields.is_online":
		if e.complexity.VehiclePassingRecordMaxFields.IsOnline == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMaxFields.IsOnline(childComplexity), true

	case "VehiclePassingRecordMaxFields.license_plate_number":
		if e.complexity.VehiclePassingRecordMaxFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMaxFields.LicensePlateNumber(childComplexity), true

	case "VehiclePassingRecordMaxFields.pass_type":
		if e.complexity.VehiclePassingRecordMaxFields.PassType == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMaxFields.PassType(childComplexity), true

	case "VehiclePassingRecordMaxFields.passing_time":
		if e.complexity.VehiclePassingRecordMaxFields.PassingTime == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMaxFields.PassingTime(childComplexity), true

	case "VehiclePassingRecordMaxFields.picture_url":
		if e.complexity.VehiclePassingRecordMaxFields.PictureURL == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMaxFields.PictureURL(childComplexity), true

	case "VehiclePassingRecordMaxFields.registration_time":
		if e.complexity.VehiclePassingRecordMaxFields.RegistrationTime == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMaxFields.RegistrationTime(childComplexity), true

	case "VehiclePassingRecordMaxFields.review_status":
		if e.complexity.VehiclePassingRecordMaxFields.ReviewStatus == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMaxFields.ReviewStatus(childComplexity), true

	case "VehiclePassingRecordMaxFields.updated_at":
		if e.complexity.VehiclePassingRecordMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMaxFields.UpdatedAt(childComplexity), true

	case "VehiclePassingRecordMaxFields.updated_by":
		if e.complexity.VehiclePassingRecordMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMaxFields.UpdatedBy(childComplexity), true

	case "VehiclePassingRecordMaxFields.vehicle_id":
		if e.complexity.VehiclePassingRecordMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMaxFields.VehicleID(childComplexity), true

	case "VehiclePassingRecordMaxFields.vehicle_passing_record_id":
		if e.complexity.VehiclePassingRecordMaxFields.VehiclePassingRecordID == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMaxFields.VehiclePassingRecordID(childComplexity), true

	case "VehiclePassingRecordMaxFields.vehicle_type":
		if e.complexity.VehiclePassingRecordMaxFields.VehicleType == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMaxFields.VehicleType(childComplexity), true

	case "VehiclePassingRecordMinFields.camera_id":
		if e.complexity.VehiclePassingRecordMinFields.CameraID == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMinFields.CameraID(childComplexity), true

	case "VehiclePassingRecordMinFields.created_at":
		if e.complexity.VehiclePassingRecordMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMinFields.CreatedAt(childComplexity), true

	case "VehiclePassingRecordMinFields.created_by":
		if e.complexity.VehiclePassingRecordMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMinFields.CreatedBy(childComplexity), true

	case "VehiclePassingRecordMinFields.deleted_at":
		if e.complexity.VehiclePassingRecordMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMinFields.DeletedAt(childComplexity), true

	case "VehiclePassingRecordMinFields.deleted_by":
		if e.complexity.VehiclePassingRecordMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMinFields.DeletedBy(childComplexity), true

	case "VehiclePassingRecordMinFields.id":
		if e.complexity.VehiclePassingRecordMinFields.ID == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMinFields.ID(childComplexity), true

	case "VehiclePassingRecordMinFields.is_online":
		if e.complexity.VehiclePassingRecordMinFields.IsOnline == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMinFields.IsOnline(childComplexity), true

	case "VehiclePassingRecordMinFields.license_plate_number":
		if e.complexity.VehiclePassingRecordMinFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMinFields.LicensePlateNumber(childComplexity), true

	case "VehiclePassingRecordMinFields.pass_type":
		if e.complexity.VehiclePassingRecordMinFields.PassType == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMinFields.PassType(childComplexity), true

	case "VehiclePassingRecordMinFields.passing_time":
		if e.complexity.VehiclePassingRecordMinFields.PassingTime == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMinFields.PassingTime(childComplexity), true

	case "VehiclePassingRecordMinFields.picture_url":
		if e.complexity.VehiclePassingRecordMinFields.PictureURL == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMinFields.PictureURL(childComplexity), true

	case "VehiclePassingRecordMinFields.registration_time":
		if e.complexity.VehiclePassingRecordMinFields.RegistrationTime == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMinFields.RegistrationTime(childComplexity), true

	case "VehiclePassingRecordMinFields.review_status":
		if e.complexity.VehiclePassingRecordMinFields.ReviewStatus == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMinFields.ReviewStatus(childComplexity), true

	case "VehiclePassingRecordMinFields.updated_at":
		if e.complexity.VehiclePassingRecordMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMinFields.UpdatedAt(childComplexity), true

	case "VehiclePassingRecordMinFields.updated_by":
		if e.complexity.VehiclePassingRecordMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMinFields.UpdatedBy(childComplexity), true

	case "VehiclePassingRecordMinFields.vehicle_id":
		if e.complexity.VehiclePassingRecordMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMinFields.VehicleID(childComplexity), true

	case "VehiclePassingRecordMinFields.vehicle_passing_record_id":
		if e.complexity.VehiclePassingRecordMinFields.VehiclePassingRecordID == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMinFields.VehiclePassingRecordID(childComplexity), true

	case "VehiclePassingRecordMinFields.vehicle_type":
		if e.complexity.VehiclePassingRecordMinFields.VehicleType == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMinFields.VehicleType(childComplexity), true

	case "VehiclePassingRecordMutationResponse.affected_rows":
		if e.complexity.VehiclePassingRecordMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMutationResponse.AffectedRows(childComplexity), true

	case "VehiclePassingRecordMutationResponse.returning":
		if e.complexity.VehiclePassingRecordMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehiclePassingRecordMutationResponse.Returning(childComplexity), true

	case "VehiclePassingRecordStddevFields.id":
		if e.complexity.VehiclePassingRecordStddevFields.ID == nil {
			break
		}

		return e.complexity.VehiclePassingRecordStddevFields.ID(childComplexity), true

	case "VehiclePassingRecordStddevPopFields.id":
		if e.complexity.VehiclePassingRecordStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehiclePassingRecordStddevPopFields.ID(childComplexity), true

	case "VehiclePassingRecordStddevSampFields.id":
		if e.complexity.VehiclePassingRecordStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehiclePassingRecordStddevSampFields.ID(childComplexity), true

	case "VehiclePassingRecordSumFields.id":
		if e.complexity.VehiclePassingRecordSumFields.ID == nil {
			break
		}

		return e.complexity.VehiclePassingRecordSumFields.ID(childComplexity), true

	case "VehiclePassingRecordVarPopFields.id":
		if e.complexity.VehiclePassingRecordVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehiclePassingRecordVarPopFields.ID(childComplexity), true

	case "VehiclePassingRecordVarSampFields.id":
		if e.complexity.VehiclePassingRecordVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehiclePassingRecordVarSampFields.ID(childComplexity), true

	case "VehiclePassingRecordVarianceFields.id":
		if e.complexity.VehiclePassingRecordVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehiclePassingRecordVarianceFields.ID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/common.graphqls", Input: `
"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
	_eq: Jsonb
	_gt: Jsonb
	_gte: Jsonb
	_in: [Jsonb!]
	_is_null: Boolean
	_lt: Jsonb
	_lte: Jsonb
	_neq: Jsonb
	_nin: [Jsonb!]
}
"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
	_eq: Bigint
	_gt: Bigint
	_gte: Bigint
	_in: [Bigint!]
	_is_null: Boolean
	_lt: Bigint
	_lte: Bigint
	_neq: Bigint
	_nin: [Bigint!]
}
"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
	_eq: Boolean
	_gt: Boolean
	_gte: Boolean
	_in: [Boolean!]
	_is_null: Boolean
	_lt: Boolean
	_lte: Boolean
	_neq: Boolean
	_nin: [Boolean!]
}
"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
	_eq: Int
	_gt: Int
	_gte: Int
	_in: [Int!]
	_is_null: Boolean
	_lt: Int
	_lte: Int
	_neq: Int
	_nin: [Int!]
}
"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input FloatComparisonExp{
	_eq: Float
	_gt: Float
	_gte: Float
	_in: [Float!]
	_is_null: Boolean
	_lt: Float
	_lte: Float
	_neq: Float
	_nin: [Float!]
}
"""
column ordering options
"""
enum OrderBy {
	"""
	in the ascending order, nulls last
	"""
	asc
	"""
	in the ascending order, nulls first
	"""
	asc_nulls_first
	"""
	in the ascending order, nulls last
	"""
	asc_nulls_last
	"""
	in the descending order, nulls first
	"""
	desc
	"""
	in the descending order, nulls first
	"""
	desc_nulls_first
	"""
	in the descending order, nulls last
	"""
	desc_nulls_last
}
"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
	_eq: String
	_gt: String
	_gte: String
	_ilike: String
	_in: [String!]
	_is_null: Boolean
	_like: String
	_lt: String
	_lte: String
	_neq: String
	_nilike: String
	_nin: [String!]
	_nlike: String
	_nsimilar: String
	_similar: String
}
"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
	_eq: Timestamptz
	_gt: Timestamptz
	_gte: Timestamptz
	_in: [Timestamptz!]
	_is_null: Boolean
	_lt: Timestamptz
	_lte: Timestamptz
	_neq: Timestamptz
	_nin: [Timestamptz!]
}
"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input NumericComparisonExp {
	_eq: Numeric
	_gt: Numeric
	_gte: Numeric
	_in: [Numeric!]
	_is_null: Boolean
	_lt: Numeric
	_lte: Numeric
	_neq: Numeric
	_nin: [Numeric!]
}
"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input PointComparisonExp {
	_eq: Point
	_gt: Point
	_gte: Point
	_in: [Point!]
	_is_null: Boolean
	_lt: Point
	_lte: Point
	_neq: Point
	_nin: [Point!]
}
scalar Jsonb
scalar Bigint
scalar Timestamptz
scalar Point
scalar Numeric

`, BuiltIn: false},
	{Name: "graph/graphqls/construction_camera.graphqls", Input: `"""
工地摄像头表
"""
type ConstructionCamera {
	"""
	 按指定方法生成                                  ( 主键                                                   )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                               )
	"""
	construction_camera_id: String!
	"""
	 设备名称                                        
	"""
	device_name: String
	"""
	 IP地址                                          
	"""
	ip_address: String
	"""
	 端口                                            
	"""
	port: String
	"""
	 设备编号                                        
	"""
	device_id: String
	"""
	 关联工地                                        ( construction_info 工地信息表的construction_info_id )
	"""
	construction_info_id: String
	"""
	 卡号                                            
	"""
	sim_number: String
	"""
	 登记时间                                        
	"""
	registration_time: Timestamptz
	"""
	 是否删除                                        
	"""
	is_deleted: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id                             )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id                             )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id                             )
	"""
	deleted_by: String
}
"""
aggregated selection of "construction_camera"
"""
type ConstructionCameraAggregate {
	aggregate: ConstructionCameraAggregateFields
}
"""
aggregate fields of "construction_camera"
"""
type ConstructionCameraAggregateFields {
	avg: ConstructionCameraAvgFields
	count: Int
	max: ConstructionCameraMaxFields
	min: ConstructionCameraMinFields
	stddev: ConstructionCameraStddevFields
	stddev_pop: ConstructionCameraStddevPopFields
	stddev_samp: ConstructionCameraStddevSampFields
	sum: ConstructionCameraSumFields
	var_pop: ConstructionCameraVarPopFields
	var_samp: ConstructionCameraVarSampFields
	variance: ConstructionCameraVarianceFields
}
"""
aggregate avg on columns of table "construction_camera"
"""
type ConstructionCameraAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "construction_camera"
"""
type ConstructionCameraMaxFields {
	id: Bigint
	construction_camera_id: String
	device_name: String
	ip_address: String
	port: String
	device_id: String
	construction_info_id: String
	sim_number: String
	registration_time: Timestamptz
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "construction_camera"
"""
type ConstructionCameraMinFields {
	id: Bigint
	construction_camera_id: String
	device_name: String
	ip_address: String
	port: String
	device_id: String
	construction_info_id: String
	sim_number: String
	registration_time: Timestamptz
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "construction_camera"
"""
type ConstructionCameraStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "construction_camera"
"""
type ConstructionCameraStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "construction_camera"
"""
type ConstructionCameraStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "construction_camera"
"""
type ConstructionCameraSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "construction_camera"
"""
type ConstructionCameraVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "construction_camera"
"""
type ConstructionCameraVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "construction_camera"
"""
type ConstructionCameraVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "construction_camera"
"""
type ConstructionCameraMutationResponse {
	affected_rows: Int!
	returning: [ConstructionCamera!]!
}
"""
ordering options when selecting data from "construction_camera"
"""
input ConstructionCameraOrderBy {
	id: OrderBy
	construction_camera_id: OrderBy
	device_name: OrderBy
	ip_address: OrderBy
	port: OrderBy
	device_id: OrderBy
	construction_info_id: OrderBy
	sim_number: OrderBy
	registration_time: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'construction_camera'.
"""
input ConstructionCameraBoolExp {
	_and: [ConstructionCameraBoolExp]
	_not: ConstructionCameraBoolExp
	_or: [ConstructionCameraBoolExp]
	id: BigintComparisonExp
	construction_camera_id: StringComparisonExp
	device_name: StringComparisonExp
	ip_address: StringComparisonExp
	port: StringComparisonExp
	device_id: StringComparisonExp
	construction_info_id: StringComparisonExp
	sim_number: StringComparisonExp
	registration_time: TimestamptzComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "construction_camera"
"""
input ConstructionCameraInsertInput {
	construction_camera_id: String!
	device_name: String
	ip_address: String
	port: String
	device_id: String
	construction_info_id: String
	sim_number: String
	registration_time: Timestamptz
	is_deleted: Boolean
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "construction_camera"
"""
input ConstructionCameraIncInput {
	id: Bigint
}
"""
input type for updating data in table "construction_camera"
"""
input ConstructionCameraSetInput {
	id: Bigint
	construction_camera_id: String
	device_name: String
	ip_address: String
	port: String
	device_id: String
	construction_info_id: String
	sim_number: String
	registration_time: Timestamptz
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum ConstructionCameraSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                                                   )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                               )
	"""
	construction_camera_id
	"""
	 设备名称                                        
	"""
	device_name
	"""
	 IP地址                                          
	"""
	ip_address
	"""
	 端口                                            
	"""
	port
	"""
	 设备编号                                        
	"""
	device_id
	"""
	 关联工地                                        ( construction_info 工地信息表的construction_info_id )
	"""
	construction_info_id
	"""
	 卡号                                            
	"""
	sim_number
	"""
	 登记时间                                        
	"""
	registration_time
	"""
	 是否删除                                        
	"""
	is_deleted
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id                             )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id                             )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id                             )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	construction_camera(distinct_on: [ConstructionCameraSelectColumn!], limit: Int, offset: Int, order_by: [ConstructionCameraOrderBy!], where: ConstructionCameraBoolExp): [ConstructionCamera!]!
	"""
	聚合查询
	"""
	construction_camera_aggregate(distinct_on: [ConstructionCameraSelectColumn!], limit: Int, offset: Int, order_by: [ConstructionCameraOrderBy!], where: ConstructionCameraBoolExp): ConstructionCameraAggregate!
	"""
	主键查询
	"""
	construction_camera_by_pk(id: Bigint!): ConstructionCamera!
	"""
	联合主键查询
	"""
	construction_camera_by_union_pk(construction_camera_id: String!): ConstructionCamera!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_construction_camera(where: ConstructionCameraBoolExp!): ConstructionCameraMutationResponse
	"""
	根据主键删除记录
	"""
	delete_construction_camera_by_pk(id: Bigint!): ConstructionCamera
	"""
	插入
	"""
	insert_construction_camera(objects: [ConstructionCameraInsertInput!]!): ConstructionCameraMutationResponse
	"""
	插入一条记录
	"""
	insert_construction_camera_one(objects: ConstructionCameraInsertInput!): ConstructionCamera
	"""
	更新
	"""
	update_construction_camera(_inc: ConstructionCameraIncInput, _set: ConstructionCameraSetInput, where: ConstructionCameraBoolExp!): ConstructionCameraMutationResponse
	"""
	根据主键更新
	"""
	update_construction_camera_by_pk(_inc: ConstructionCameraIncInput, _set: ConstructionCameraSetInput, id: Bigint!): ConstructionCamera
	"""
	根据联合主键更新
	"""
	update_construction_camera_by_union_pk(_inc: ConstructionCameraIncInput, _set: ConstructionCameraSetInput, construction_camera_id: String!): ConstructionCamera
	"""
	根据联合主键删除记录
	"""
	delete_construction_camera_by_union_pk(construction_camera_id: String!): ConstructionCamera
}
`, BuiltIn: false},
	{Name: "graph/graphqls/construction_info.graphqls", Input: `"""
工地信息表
"""
type ConstructionInfo {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	construction_info_id: String!
	"""
	 项目名称                                        
	"""
	project_name: String
	"""
	 工程项目代码                                    
	"""
	project_code: String
	"""
	 合同开工日期                                    
	"""
	contract_start_date: Timestamptz
	"""
	 合同竣工日期                                    
	"""
	contract_completion_date: Timestamptz
	"""
	 建设单位                                        
	"""
	build_agency: String
	"""
	 项目负责人                                      
	"""
	project_manager: String
	"""
	 地区                                            
	"""
	area_id: String
	"""
	 地址                                            
	"""
	address: String
	"""
	 地图经纬度                                      
	"""
	map_coordinate: Point
	"""
	 施工单位                                        ( 与建设单位的区别？         )
	"""
	construction_agency: String
	"""
	 监理单位                                        
	"""
	supervision_agency: String
	"""
	 设备安装单位                                    
	"""
	device_installation_agency: String
	"""
	 设备安装地点                                    
	"""
	device_installation_location: String
	"""
	 服务合同编号                                    
	"""
	service_contract_number: String
	"""
	 合同签署时间                                    
	"""
	contract_signing_time: Timestamptz
	"""
	 服务启用日期                                    
	"""
	service_activation_date: Timestamptz
	"""
	 证明有效期                                      
	"""
	proof_valid_date: Timestamptz
	"""
	 经纬度                                          
	"""
	coordinate: Point
	"""
	 安装时间                                        
	"""
	installation_time: Timestamptz
	"""
	 项目名称标签                                    
	"""
	project_name_tag: String
	"""
	 进出口数量                                      
	"""
	import_export_quantity: String
	"""
	 停用原因                                        
	"""
	deactivation_reason: String
	"""
	 未安装原因                                      
	"""
	uninstalled_reason: String
	"""
	 证明起始有效期                                  
	"""
	proof_valid_date_until: Timestamptz
	"""
	 类型（1.工地 2.矿山）                           
	"""
	construction_type: Int
	"""
	 联系人                                          
	"""
	contact_person: String
	"""
	 联系电话                                        
	"""
	contact_phone: String
	"""
	 是否完工（0.未完工 1.已完工 2.已停用）          
	"""
	finished: Int
	"""
	 是否市直属                                      
	"""
	is_city_directly: String
	"""
	 是否安装（0.未申请 1.已安装 2.已申请未安装）    
	"""
	is_installation: String
	"""
	 是否删除                                        
	"""
	is_deleted: Boolean
	"""
	 登记时间                                        
	"""
	registration_time: Timestamptz
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "construction_info"
"""
type ConstructionInfoAggregate {
	aggregate: ConstructionInfoAggregateFields
}
"""
aggregate fields of "construction_info"
"""
type ConstructionInfoAggregateFields {
	avg: ConstructionInfoAvgFields
	count: Int
	max: ConstructionInfoMaxFields
	min: ConstructionInfoMinFields
	stddev: ConstructionInfoStddevFields
	stddev_pop: ConstructionInfoStddevPopFields
	stddev_samp: ConstructionInfoStddevSampFields
	sum: ConstructionInfoSumFields
	var_pop: ConstructionInfoVarPopFields
	var_samp: ConstructionInfoVarSampFields
	variance: ConstructionInfoVarianceFields
}
"""
aggregate avg on columns of table "construction_info"
"""
type ConstructionInfoAvgFields {
	id: Bigint
	construction_type: Int
	finished: Int
}
"""
aggregate max on columns of table "construction_info"
"""
type ConstructionInfoMaxFields {
	id: Bigint
	construction_info_id: String
	project_name: String
	project_code: String
	contract_start_date: Timestamptz
	contract_completion_date: Timestamptz
	build_agency: String
	project_manager: String
	area_id: String
	address: String
	map_coordinate: Point
	construction_agency: String
	supervision_agency: String
	device_installation_agency: String
	device_installation_location: String
	service_contract_number: String
	contract_signing_time: Timestamptz
	service_activation_date: Timestamptz
	proof_valid_date: Timestamptz
	coordinate: Point
	installation_time: Timestamptz
	project_name_tag: String
	import_export_quantity: String
	deactivation_reason: String
	uninstalled_reason: String
	proof_valid_date_until: Timestamptz
	construction_type: Int
	contact_person: String
	contact_phone: String
	finished: Int
	is_city_directly: String
	is_installation: String
	is_deleted: Boolean
	registration_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "construction_info"
"""
type ConstructionInfoMinFields {
	id: Bigint
	construction_info_id: String
	project_name: String
	project_code: String
	contract_start_date: Timestamptz
	contract_completion_date: Timestamptz
	build_agency: String
	project_manager: String
	area_id: String
	address: String
	map_coordinate: Point
	construction_agency: String
	supervision_agency: String
	device_installation_agency: String
	device_installation_location: String
	service_contract_number: String
	contract_signing_time: Timestamptz
	service_activation_date: Timestamptz
	proof_valid_date: Timestamptz
	coordinate: Point
	installation_time: Timestamptz
	project_name_tag: String
	import_export_quantity: String
	deactivation_reason: String
	uninstalled_reason: String
	proof_valid_date_until: Timestamptz
	construction_type: Int
	contact_person: String
	contact_phone: String
	finished: Int
	is_city_directly: String
	is_installation: String
	is_deleted: Boolean
	registration_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "construction_info"
"""
type ConstructionInfoStddevFields {
	id: Bigint
	construction_type: Int
	finished: Int
}
"""
aggregate stddev_pop on columns of table "construction_info"
"""
type ConstructionInfoStddevPopFields {
	id: Bigint
	construction_type: Int
	finished: Int
}
"""
aggregate stddev_samp on columns of table "construction_info"
"""
type ConstructionInfoStddevSampFields {
	id: Bigint
	construction_type: Int
	finished: Int
}
"""
aggregate sum on columns of table "construction_info"
"""
type ConstructionInfoSumFields {
	id: Bigint
	construction_type: Int
	finished: Int
}
"""
aggregate var_pop on columns of table "construction_info"
"""
type ConstructionInfoVarPopFields {
	id: Bigint
	construction_type: Int
	finished: Int
}
"""
aggregate var_samp on columns of table "construction_info"
"""
type ConstructionInfoVarSampFields {
	id: Bigint
	construction_type: Int
	finished: Int
}
"""
aggregate variance on columns of table "construction_info"
"""
type ConstructionInfoVarianceFields {
	id: Bigint
	construction_type: Int
	finished: Int
}
"""
response of any mutation on the table "construction_info"
"""
type ConstructionInfoMutationResponse {
	affected_rows: Int!
	returning: [ConstructionInfo!]!
}
"""
ordering options when selecting data from "construction_info"
"""
input ConstructionInfoOrderBy {
	id: OrderBy
	construction_info_id: OrderBy
	project_name: OrderBy
	project_code: OrderBy
	contract_start_date: OrderBy
	contract_completion_date: OrderBy
	build_agency: OrderBy
	project_manager: OrderBy
	area_id: OrderBy
	address: OrderBy
	map_coordinate: OrderBy
	construction_agency: OrderBy
	supervision_agency: OrderBy
	device_installation_agency: OrderBy
	device_installation_location: OrderBy
	service_contract_number: OrderBy
	contract_signing_time: OrderBy
	service_activation_date: OrderBy
	proof_valid_date: OrderBy
	coordinate: OrderBy
	installation_time: OrderBy
	project_name_tag: OrderBy
	import_export_quantity: OrderBy
	deactivation_reason: OrderBy
	uninstalled_reason: OrderBy
	proof_valid_date_until: OrderBy
	construction_type: OrderBy
	contact_person: OrderBy
	contact_phone: OrderBy
	finished: OrderBy
	is_city_directly: OrderBy
	is_installation: OrderBy
	is_deleted: OrderBy
	registration_time: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'construction_info'.
"""
input ConstructionInfoBoolExp {
	_and: [ConstructionInfoBoolExp]
	_not: ConstructionInfoBoolExp
	_or: [ConstructionInfoBoolExp]
	id: BigintComparisonExp
	construction_info_id: StringComparisonExp
	project_name: StringComparisonExp
	project_code: StringComparisonExp
	contract_start_date: TimestamptzComparisonExp
	contract_completion_date: TimestamptzComparisonExp
	build_agency: StringComparisonExp
	project_manager: StringComparisonExp
	area_id: StringComparisonExp
	address: StringComparisonExp
	map_coordinate: PointComparisonExp
	construction_agency: StringComparisonExp
	supervision_agency: StringComparisonExp
	device_installation_agency: StringComparisonExp
	device_installation_location: StringComparisonExp
	service_contract_number: StringComparisonExp
	contract_signing_time: TimestamptzComparisonExp
	service_activation_date: TimestamptzComparisonExp
	proof_valid_date: TimestamptzComparisonExp
	coordinate: PointComparisonExp
	installation_time: TimestamptzComparisonExp
	project_name_tag: StringComparisonExp
	import_export_quantity: StringComparisonExp
	deactivation_reason: StringComparisonExp
	uninstalled_reason: StringComparisonExp
	proof_valid_date_until: TimestamptzComparisonExp
	construction_type: IntComparisonExp
	contact_person: StringComparisonExp
	contact_phone: StringComparisonExp
	finished: IntComparisonExp
	is_city_directly: StringComparisonExp
	is_installation: StringComparisonExp
	is_deleted: BooleanComparisonExp
	registration_time: TimestamptzComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "construction_info"
"""
input ConstructionInfoInsertInput {
	construction_info_id: String!
	project_name: String
	project_code: String
	contract_start_date: Timestamptz
	contract_completion_date: Timestamptz
	build_agency: String
	project_manager: String
	area_id: String
	address: String
	map_coordinate: Point
	construction_agency: String
	supervision_agency: String
	device_installation_agency: String
	device_installation_location: String
	service_contract_number: String
	contract_signing_time: Timestamptz
	service_activation_date: Timestamptz
	proof_valid_date: Timestamptz
	coordinate: Point
	installation_time: Timestamptz
	project_name_tag: String
	import_export_quantity: String
	deactivation_reason: String
	uninstalled_reason: String
	proof_valid_date_until: Timestamptz
	construction_type: Int
	contact_person: String
	contact_phone: String
	finished: Int
	is_city_directly: String
	is_installation: String
	is_deleted: Boolean
	registration_time: Timestamptz
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "construction_info"
"""
input ConstructionInfoIncInput {
	id: Bigint
	construction_type: Int
	finished: Int
}
"""
input type for updating data in table "construction_info"
"""
input ConstructionInfoSetInput {
	id: Bigint
	construction_info_id: String
	project_name: String
	project_code: String
	contract_start_date: Timestamptz
	contract_completion_date: Timestamptz
	build_agency: String
	project_manager: String
	area_id: String
	address: String
	map_coordinate: Point
	construction_agency: String
	supervision_agency: String
	device_installation_agency: String
	device_installation_location: String
	service_contract_number: String
	contract_signing_time: Timestamptz
	service_activation_date: Timestamptz
	proof_valid_date: Timestamptz
	coordinate: Point
	installation_time: Timestamptz
	project_name_tag: String
	import_export_quantity: String
	deactivation_reason: String
	uninstalled_reason: String
	proof_valid_date_until: Timestamptz
	construction_type: Int
	contact_person: String
	contact_phone: String
	finished: Int
	is_city_directly: String
	is_installation: String
	is_deleted: Boolean
	registration_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum ConstructionInfoSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	construction_info_id
	"""
	 项目名称                                        
	"""
	project_name
	"""
	 工程项目代码                                    
	"""
	project_code
	"""
	 合同开工日期                                    
	"""
	contract_start_date
	"""
	 合同竣工日期                                    
	"""
	contract_completion_date
	"""
	 建设单位                                        
	"""
	build_agency
	"""
	 项目负责人                                      
	"""
	project_manager
	"""
	 地区                                            
	"""
	area_id
	"""
	 地址                                            
	"""
	address
	"""
	 地图经纬度                                      
	"""
	map_coordinate
	"""
	 施工单位                                        ( 与建设单位的区别？         )
	"""
	construction_agency
	"""
	 监理单位                                        
	"""
	supervision_agency
	"""
	 设备安装单位                                    
	"""
	device_installation_agency
	"""
	 设备安装地点                                    
	"""
	device_installation_location
	"""
	 服务合同编号                                    
	"""
	service_contract_number
	"""
	 合同签署时间                                    
	"""
	contract_signing_time
	"""
	 服务启用日期                                    
	"""
	service_activation_date
	"""
	 证明有效期                                      
	"""
	proof_valid_date
	"""
	 经纬度                                          
	"""
	coordinate
	"""
	 安装时间                                        
	"""
	installation_time
	"""
	 项目名称标签                                    
	"""
	project_name_tag
	"""
	 进出口数量                                      
	"""
	import_export_quantity
	"""
	 停用原因                                        
	"""
	deactivation_reason
	"""
	 未安装原因                                      
	"""
	uninstalled_reason
	"""
	 证明起始有效期                                  
	"""
	proof_valid_date_until
	"""
	 类型（1.工地 2.矿山）                           
	"""
	construction_type
	"""
	 联系人                                          
	"""
	contact_person
	"""
	 联系电话                                        
	"""
	contact_phone
	"""
	 是否完工（0.未完工 1.已完工 2.已停用）          
	"""
	finished
	"""
	 是否市直属                                      
	"""
	is_city_directly
	"""
	 是否安装（0.未申请 1.已安装 2.已申请未安装）    
	"""
	is_installation
	"""
	 是否删除                                        
	"""
	is_deleted
	"""
	 登记时间                                        
	"""
	registration_time
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	construction_info(distinct_on: [ConstructionInfoSelectColumn!], limit: Int, offset: Int, order_by: [ConstructionInfoOrderBy!], where: ConstructionInfoBoolExp): [ConstructionInfo!]!
	"""
	聚合查询
	"""
	construction_info_aggregate(distinct_on: [ConstructionInfoSelectColumn!], limit: Int, offset: Int, order_by: [ConstructionInfoOrderBy!], where: ConstructionInfoBoolExp): ConstructionInfoAggregate!
	"""
	主键查询
	"""
	construction_info_by_pk(id: Bigint!): ConstructionInfo!
	"""
	联合主键查询
	"""
	construction_info_by_union_pk(construction_info_id: String!): ConstructionInfo!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_construction_info(where: ConstructionInfoBoolExp!): ConstructionInfoMutationResponse
	"""
	根据主键删除记录
	"""
	delete_construction_info_by_pk(id: Bigint!): ConstructionInfo
	"""
	插入
	"""
	insert_construction_info(objects: [ConstructionInfoInsertInput!]!): ConstructionInfoMutationResponse
	"""
	插入一条记录
	"""
	insert_construction_info_one(objects: ConstructionInfoInsertInput!): ConstructionInfo
	"""
	更新
	"""
	update_construction_info(_inc: ConstructionInfoIncInput, _set: ConstructionInfoSetInput, where: ConstructionInfoBoolExp!): ConstructionInfoMutationResponse
	"""
	根据主键更新
	"""
	update_construction_info_by_pk(_inc: ConstructionInfoIncInput, _set: ConstructionInfoSetInput, id: Bigint!): ConstructionInfo
	"""
	根据联合主键更新
	"""
	update_construction_info_by_union_pk(_inc: ConstructionInfoIncInput, _set: ConstructionInfoSetInput, construction_info_id: String!): ConstructionInfo
	"""
	根据联合主键删除记录
	"""
	delete_construction_info_by_union_pk(construction_info_id: String!): ConstructionInfo
}
`, BuiltIn: false},
	{Name: "graph/graphqls/construction_upload_pic.graphqls", Input: `"""
工地上传图片表
"""
type ConstructionUploadPic {
	"""
	 按指定方法生成                                  ( 主键                                                   )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                               )
	"""
	construction_upload_pic_id: String!
	"""
	 工地ID                                          ( construction_info 工地信息表的construction_info_id )
	"""
	construction_info_id: String
	"""
	 图片                                            
	"""
	picture_url: String
	"""
	 是否删除                                        
	"""
	is_deleted: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id                             )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id                             )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id                             )
	"""
	deleted_by: String
}
"""
aggregated selection of "construction_upload_pic"
"""
type ConstructionUploadPicAggregate {
	aggregate: ConstructionUploadPicAggregateFields
}
"""
aggregate fields of "construction_upload_pic"
"""
type ConstructionUploadPicAggregateFields {
	avg: ConstructionUploadPicAvgFields
	count: Int
	max: ConstructionUploadPicMaxFields
	min: ConstructionUploadPicMinFields
	stddev: ConstructionUploadPicStddevFields
	stddev_pop: ConstructionUploadPicStddevPopFields
	stddev_samp: ConstructionUploadPicStddevSampFields
	sum: ConstructionUploadPicSumFields
	var_pop: ConstructionUploadPicVarPopFields
	var_samp: ConstructionUploadPicVarSampFields
	variance: ConstructionUploadPicVarianceFields
}
"""
aggregate avg on columns of table "construction_upload_pic"
"""
type ConstructionUploadPicAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "construction_upload_pic"
"""
type ConstructionUploadPicMaxFields {
	id: Bigint
	construction_upload_pic_id: String
	construction_info_id: String
	picture_url: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "construction_upload_pic"
"""
type ConstructionUploadPicMinFields {
	id: Bigint
	construction_upload_pic_id: String
	construction_info_id: String
	picture_url: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "construction_upload_pic"
"""
type ConstructionUploadPicStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "construction_upload_pic"
"""
type ConstructionUploadPicStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "construction_upload_pic"
"""
type ConstructionUploadPicStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "construction_upload_pic"
"""
type ConstructionUploadPicSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "construction_upload_pic"
"""
type ConstructionUploadPicVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "construction_upload_pic"
"""
type ConstructionUploadPicVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "construction_upload_pic"
"""
type ConstructionUploadPicVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "construction_upload_pic"
"""
type ConstructionUploadPicMutationResponse {
	affected_rows: Int!
	returning: [ConstructionUploadPic!]!
}
"""
ordering options when selecting data from "construction_upload_pic"
"""
input ConstructionUploadPicOrderBy {
	id: OrderBy
	construction_upload_pic_id: OrderBy
	construction_info_id: OrderBy
	picture_url: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'construction_upload_pic'.
"""
input ConstructionUploadPicBoolExp {
	_and: [ConstructionUploadPicBoolExp]
	_not: ConstructionUploadPicBoolExp
	_or: [ConstructionUploadPicBoolExp]
	id: BigintComparisonExp
	construction_upload_pic_id: StringComparisonExp
	construction_info_id: StringComparisonExp
	picture_url: StringComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "construction_upload_pic"
"""
input ConstructionUploadPicInsertInput {
	construction_upload_pic_id: String!
	construction_info_id: String
	picture_url: String
	is_deleted: Boolean
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "construction_upload_pic"
"""
input ConstructionUploadPicIncInput {
	id: Bigint
}
"""
input type for updating data in table "construction_upload_pic"
"""
input ConstructionUploadPicSetInput {
	id: Bigint
	construction_upload_pic_id: String
	construction_info_id: String
	picture_url: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum ConstructionUploadPicSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                                                   )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                               )
	"""
	construction_upload_pic_id
	"""
	 工地ID                                          ( construction_info 工地信息表的construction_info_id )
	"""
	construction_info_id
	"""
	 图片                                            
	"""
	picture_url
	"""
	 是否删除                                        
	"""
	is_deleted
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id                             )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id                             )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id                             )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	construction_upload_pic(distinct_on: [ConstructionUploadPicSelectColumn!], limit: Int, offset: Int, order_by: [ConstructionUploadPicOrderBy!], where: ConstructionUploadPicBoolExp): [ConstructionUploadPic!]!
	"""
	聚合查询
	"""
	construction_upload_pic_aggregate(distinct_on: [ConstructionUploadPicSelectColumn!], limit: Int, offset: Int, order_by: [ConstructionUploadPicOrderBy!], where: ConstructionUploadPicBoolExp): ConstructionUploadPicAggregate!
	"""
	主键查询
	"""
	construction_upload_pic_by_pk(id: Bigint!): ConstructionUploadPic!
	"""
	联合主键查询
	"""
	construction_upload_pic_by_union_pk(construction_upload_pic_id: String!): ConstructionUploadPic!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_construction_upload_pic(where: ConstructionUploadPicBoolExp!): ConstructionUploadPicMutationResponse
	"""
	根据主键删除记录
	"""
	delete_construction_upload_pic_by_pk(id: Bigint!): ConstructionUploadPic
	"""
	插入
	"""
	insert_construction_upload_pic(objects: [ConstructionUploadPicInsertInput!]!): ConstructionUploadPicMutationResponse
	"""
	插入一条记录
	"""
	insert_construction_upload_pic_one(objects: ConstructionUploadPicInsertInput!): ConstructionUploadPic
	"""
	更新
	"""
	update_construction_upload_pic(_inc: ConstructionUploadPicIncInput, _set: ConstructionUploadPicSetInput, where: ConstructionUploadPicBoolExp!): ConstructionUploadPicMutationResponse
	"""
	根据主键更新
	"""
	update_construction_upload_pic_by_pk(_inc: ConstructionUploadPicIncInput, _set: ConstructionUploadPicSetInput, id: Bigint!): ConstructionUploadPic
	"""
	根据联合主键更新
	"""
	update_construction_upload_pic_by_union_pk(_inc: ConstructionUploadPicIncInput, _set: ConstructionUploadPicSetInput, construction_upload_pic_id: String!): ConstructionUploadPic
	"""
	根据联合主键删除记录
	"""
	delete_construction_upload_pic_by_union_pk(construction_upload_pic_id: String!): ConstructionUploadPic
}
`, BuiltIn: false},
	{Name: "graph/graphqls/offline_registration_record.graphqls", Input: `"""
不在线登记记录表
"""
type OfflineRegistrationRecord {
	"""
	 按指定方法生成                                  ( 主键                                                       )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                   )
	"""
	offline_registration_record_id: String!
	"""
	 停运登记表的ID                                  ( outage_registration 停运登记表的outage_registration_id )
	"""
	outage_registration_id: String
	"""
	 登记内容                                        
	"""
	registration_content: String
	"""
	 登记时间                                        
	"""
	registration_time: Timestamptz
	"""
	 登记人                                          
	"""
	registrant: String
	"""
	 是否删除                                        
	"""
	is_deleted: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id                                 )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id                                 )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id                                 )
	"""
	deleted_by: String
}
"""
aggregated selection of "offline_registration_record"
"""
type OfflineRegistrationRecordAggregate {
	aggregate: OfflineRegistrationRecordAggregateFields
}
"""
aggregate fields of "offline_registration_record"
"""
type OfflineRegistrationRecordAggregateFields {
	avg: OfflineRegistrationRecordAvgFields
	count: Int
	max: OfflineRegistrationRecordMaxFields
	min: OfflineRegistrationRecordMinFields
	stddev: OfflineRegistrationRecordStddevFields
	stddev_pop: OfflineRegistrationRecordStddevPopFields
	stddev_samp: OfflineRegistrationRecordStddevSampFields
	sum: OfflineRegistrationRecordSumFields
	var_pop: OfflineRegistrationRecordVarPopFields
	var_samp: OfflineRegistrationRecordVarSampFields
	variance: OfflineRegistrationRecordVarianceFields
}
"""
aggregate avg on columns of table "offline_registration_record"
"""
type OfflineRegistrationRecordAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "offline_registration_record"
"""
type OfflineRegistrationRecordMaxFields {
	id: Bigint
	offline_registration_record_id: String
	outage_registration_id: String
	registration_content: String
	registration_time: Timestamptz
	registrant: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "offline_registration_record"
"""
type OfflineRegistrationRecordMinFields {
	id: Bigint
	offline_registration_record_id: String
	outage_registration_id: String
	registration_content: String
	registration_time: Timestamptz
	registrant: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "offline_registration_record"
"""
type OfflineRegistrationRecordStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "offline_registration_record"
"""
type OfflineRegistrationRecordStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "offline_registration_record"
"""
type OfflineRegistrationRecordStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "offline_registration_record"
"""
type OfflineRegistrationRecordSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "offline_registration_record"
"""
type OfflineRegistrationRecordVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "offline_registration_record"
"""
type OfflineRegistrationRecordVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "offline_registration_record"
"""
type OfflineRegistrationRecordVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "offline_registration_record"
"""
type OfflineRegistrationRecordMutationResponse {
	affected_rows: Int!
	returning: [OfflineRegistrationRecord!]!
}
"""
ordering options when selecting data from "offline_registration_record"
"""
input OfflineRegistrationRecordOrderBy {
	id: OrderBy
	offline_registration_record_id: OrderBy
	outage_registration_id: OrderBy
	registration_content: OrderBy
	registration_time: OrderBy
	registrant: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'offline_registration_record'.
"""
input OfflineRegistrationRecordBoolExp {
	_and: [OfflineRegistrationRecordBoolExp]
	_not: OfflineRegistrationRecordBoolExp
	_or: [OfflineRegistrationRecordBoolExp]
	id: BigintComparisonExp
	offline_registration_record_id: StringComparisonExp
	outage_registration_id: StringComparisonExp
	registration_content: StringComparisonExp
	registration_time: TimestamptzComparisonExp
	registrant: StringComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "offline_registration_record"
"""
input OfflineRegistrationRecordInsertInput {
	offline_registration_record_id: String!
	outage_registration_id: String
	registration_content: String
	registration_time: Timestamptz
	registrant: String
	is_deleted: Boolean
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "offline_registration_record"
"""
input OfflineRegistrationRecordIncInput {
	id: Bigint
}
"""
input type for updating data in table "offline_registration_record"
"""
input OfflineRegistrationRecordSetInput {
	id: Bigint
	offline_registration_record_id: String
	outage_registration_id: String
	registration_content: String
	registration_time: Timestamptz
	registrant: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum OfflineRegistrationRecordSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                                                       )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                   )
	"""
	offline_registration_record_id
	"""
	 停运登记表的ID                                  ( outage_registration 停运登记表的outage_registration_id )
	"""
	outage_registration_id
	"""
	 登记内容                                        
	"""
	registration_content
	"""
	 登记时间                                        
	"""
	registration_time
	"""
	 登记人                                          
	"""
	registrant
	"""
	 是否删除                                        
	"""
	is_deleted
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id                                 )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id                                 )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id                                 )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	offline_registration_record(distinct_on: [OfflineRegistrationRecordSelectColumn!], limit: Int, offset: Int, order_by: [OfflineRegistrationRecordOrderBy!], where: OfflineRegistrationRecordBoolExp): [OfflineRegistrationRecord!]!
	"""
	聚合查询
	"""
	offline_registration_record_aggregate(distinct_on: [OfflineRegistrationRecordSelectColumn!], limit: Int, offset: Int, order_by: [OfflineRegistrationRecordOrderBy!], where: OfflineRegistrationRecordBoolExp): OfflineRegistrationRecordAggregate!
	"""
	主键查询
	"""
	offline_registration_record_by_pk(id: Bigint!): OfflineRegistrationRecord!
	"""
	联合主键查询
	"""
	offline_registration_record_by_union_pk(offline_registration_record_id: String!): OfflineRegistrationRecord!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_offline_registration_record(where: OfflineRegistrationRecordBoolExp!): OfflineRegistrationRecordMutationResponse
	"""
	根据主键删除记录
	"""
	delete_offline_registration_record_by_pk(id: Bigint!): OfflineRegistrationRecord
	"""
	插入
	"""
	insert_offline_registration_record(objects: [OfflineRegistrationRecordInsertInput!]!): OfflineRegistrationRecordMutationResponse
	"""
	插入一条记录
	"""
	insert_offline_registration_record_one(objects: OfflineRegistrationRecordInsertInput!): OfflineRegistrationRecord
	"""
	更新
	"""
	update_offline_registration_record(_inc: OfflineRegistrationRecordIncInput, _set: OfflineRegistrationRecordSetInput, where: OfflineRegistrationRecordBoolExp!): OfflineRegistrationRecordMutationResponse
	"""
	根据主键更新
	"""
	update_offline_registration_record_by_pk(_inc: OfflineRegistrationRecordIncInput, _set: OfflineRegistrationRecordSetInput, id: Bigint!): OfflineRegistrationRecord
	"""
	根据联合主键更新
	"""
	update_offline_registration_record_by_union_pk(_inc: OfflineRegistrationRecordIncInput, _set: OfflineRegistrationRecordSetInput, offline_registration_record_id: String!): OfflineRegistrationRecord
	"""
	根据联合主键删除记录
	"""
	delete_offline_registration_record_by_union_pk(offline_registration_record_id: String!): OfflineRegistrationRecord
}
`, BuiltIn: false},
	{Name: "graph/graphqls/snapshot_system_passing_alarm.graphqls", Input: `"""
抓拍系统过车报警表
"""
type SnapshotSystemPassingAlarm {
	"""
	 按指定方法生成                                             ( 主键                                                         )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用            ( 联合主键                                                     )
	"""
	snapshot_system_passing_alarm_id: String!
	"""
	 过车记录ID                                                 ( vehicle_passing_record 过车记录表的vehicle_passing_record_id )
	"""
	passing_id: String
	"""
	 vehicle_info 车辆信息表 的vehicle_id                   
	"""
	vehicle_id: String!
	"""
	 车牌号                                                     
	"""
	license_plate_number: String
	"""
	 登记时间                                                   
	"""
	registration_time: Timestamptz
	"""
	 监管时间                                                   
	"""
	supervision_time: Timestamptz
	"""
	 备注                                                       
	"""
	remarks: String
	"""
	 摄像头ID                                                   ( construction_camera 工地摄像头表的construction_camera_id )
	"""
	camera_id: String
	"""
	 报警类型（1.未纳入管控平台 2.未报备工程 3.未纳入管控平台） 
	"""
	alarm_type: Int
	"""
	 审核状态                                                   
	"""
	review_status: String
	"""
	 车辆类型                                                   ( 车辆类型字典                                             )
	"""
	vehicle_type: Int
	"""
	 是否在线                                                   
	"""
	is_online: Boolean
	"""
	 是否监管                                                   
	"""
	is_supervision: Boolean
	"""
	 创建时间                                                   
	"""
	created_at: Timestamptz!
	"""
	 创建人                                                     ( system_user表的user_id                                   )
	"""
	created_by: String!
	"""
	 修改时间                                                   
	"""
	updated_at: Timestamptz
	"""
	 修改人                                                     ( system_user表的user_id                                   )
	"""
	updated_by: String
	"""
	 删除时间                                                   
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                                     ( system_user表的user_id                                   )
	"""
	deleted_by: String
}
"""
aggregated selection of "snapshot_system_passing_alarm"
"""
type SnapshotSystemPassingAlarmAggregate {
	aggregate: SnapshotSystemPassingAlarmAggregateFields
}
"""
aggregate fields of "snapshot_system_passing_alarm"
"""
type SnapshotSystemPassingAlarmAggregateFields {
	avg: SnapshotSystemPassingAlarmAvgFields
	count: Int
	max: SnapshotSystemPassingAlarmMaxFields
	min: SnapshotSystemPassingAlarmMinFields
	stddev: SnapshotSystemPassingAlarmStddevFields
	stddev_pop: SnapshotSystemPassingAlarmStddevPopFields
	stddev_samp: SnapshotSystemPassingAlarmStddevSampFields
	sum: SnapshotSystemPassingAlarmSumFields
	var_pop: SnapshotSystemPassingAlarmVarPopFields
	var_samp: SnapshotSystemPassingAlarmVarSampFields
	variance: SnapshotSystemPassingAlarmVarianceFields
}
"""
aggregate avg on columns of table "snapshot_system_passing_alarm"
"""
type SnapshotSystemPassingAlarmAvgFields {
	id: Bigint
	alarm_type: Int
	vehicle_type: Int
}
"""
aggregate max on columns of table "snapshot_system_passing_alarm"
"""
type SnapshotSystemPassingAlarmMaxFields {
	id: Bigint
	snapshot_system_passing_alarm_id: String
	passing_id: String
	vehicle_id: String
	license_plate_number: String
	registration_time: Timestamptz
	supervision_time: Timestamptz
	remarks: String
	camera_id: String
	alarm_type: Int
	review_status: String
	vehicle_type: Int
	is_online: Boolean
	is_supervision: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "snapshot_system_passing_alarm"
"""
type SnapshotSystemPassingAlarmMinFields {
	id: Bigint
	snapshot_system_passing_alarm_id: String
	passing_id: String
	vehicle_id: String
	license_plate_number: String
	registration_time: Timestamptz
	supervision_time: Timestamptz
	remarks: String
	camera_id: String
	alarm_type: Int
	review_status: String
	vehicle_type: Int
	is_online: Boolean
	is_supervision: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "snapshot_system_passing_alarm"
"""
type SnapshotSystemPassingAlarmStddevFields {
	id: Bigint
	alarm_type: Int
	vehicle_type: Int
}
"""
aggregate stddev_pop on columns of table "snapshot_system_passing_alarm"
"""
type SnapshotSystemPassingAlarmStddevPopFields {
	id: Bigint
	alarm_type: Int
	vehicle_type: Int
}
"""
aggregate stddev_samp on columns of table "snapshot_system_passing_alarm"
"""
type SnapshotSystemPassingAlarmStddevSampFields {
	id: Bigint
	alarm_type: Int
	vehicle_type: Int
}
"""
aggregate sum on columns of table "snapshot_system_passing_alarm"
"""
type SnapshotSystemPassingAlarmSumFields {
	id: Bigint
	alarm_type: Int
	vehicle_type: Int
}
"""
aggregate var_pop on columns of table "snapshot_system_passing_alarm"
"""
type SnapshotSystemPassingAlarmVarPopFields {
	id: Bigint
	alarm_type: Int
	vehicle_type: Int
}
"""
aggregate var_samp on columns of table "snapshot_system_passing_alarm"
"""
type SnapshotSystemPassingAlarmVarSampFields {
	id: Bigint
	alarm_type: Int
	vehicle_type: Int
}
"""
aggregate variance on columns of table "snapshot_system_passing_alarm"
"""
type SnapshotSystemPassingAlarmVarianceFields {
	id: Bigint
	alarm_type: Int
	vehicle_type: Int
}
"""
response of any mutation on the table "snapshot_system_passing_alarm"
"""
type SnapshotSystemPassingAlarmMutationResponse {
	affected_rows: Int!
	returning: [SnapshotSystemPassingAlarm!]!
}
"""
ordering options when selecting data from "snapshot_system_passing_alarm"
"""
input SnapshotSystemPassingAlarmOrderBy {
	id: OrderBy
	snapshot_system_passing_alarm_id: OrderBy
	passing_id: OrderBy
	vehicle_id: OrderBy
	license_plate_number: OrderBy
	registration_time: OrderBy
	supervision_time: OrderBy
	remarks: OrderBy
	camera_id: OrderBy
	alarm_type: OrderBy
	review_status: OrderBy
	vehicle_type: OrderBy
	is_online: OrderBy
	is_supervision: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'snapshot_system_passing_alarm'.
"""
input SnapshotSystemPassingAlarmBoolExp {
	_and: [SnapshotSystemPassingAlarmBoolExp]
	_not: SnapshotSystemPassingAlarmBoolExp
	_or: [SnapshotSystemPassingAlarmBoolExp]
	id: BigintComparisonExp
	snapshot_system_passing_alarm_id: StringComparisonExp
	passing_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	license_plate_number: StringComparisonExp
	registration_time: TimestamptzComparisonExp
	supervision_time: TimestamptzComparisonExp
	remarks: StringComparisonExp
	camera_id: StringComparisonExp
	alarm_type: IntComparisonExp
	review_status: StringComparisonExp
	vehicle_type: IntComparisonExp
	is_online: BooleanComparisonExp
	is_supervision: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "snapshot_system_passing_alarm"
"""
input SnapshotSystemPassingAlarmInsertInput {
	snapshot_system_passing_alarm_id: String!
	passing_id: String
	vehicle_id: String!
	license_plate_number: String
	registration_time: Timestamptz
	supervision_time: Timestamptz
	remarks: String
	camera_id: String
	alarm_type: Int
	review_status: String
	vehicle_type: Int
	is_online: Boolean
	is_supervision: Boolean
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "snapshot_system_passing_alarm"
"""
input SnapshotSystemPassingAlarmIncInput {
	id: Bigint
	alarm_type: Int
	vehicle_type: Int
}
"""
input type for updating data in table "snapshot_system_passing_alarm"
"""
input SnapshotSystemPassingAlarmSetInput {
	id: Bigint
	snapshot_system_passing_alarm_id: String
	passing_id: String
	vehicle_id: String
	license_plate_number: String
	registration_time: Timestamptz
	supervision_time: Timestamptz
	remarks: String
	camera_id: String
	alarm_type: Int
	review_status: String
	vehicle_type: Int
	is_online: Boolean
	is_supervision: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum SnapshotSystemPassingAlarmSelectColumn {
	"""
	 按指定方法生成                                             ( 主键                                                         )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用            ( 联合主键                                                     )
	"""
	snapshot_system_passing_alarm_id
	"""
	 过车记录ID                                                 ( vehicle_passing_record 过车记录表的vehicle_passing_record_id )
	"""
	passing_id
	"""
	 vehicle_info 车辆信息表 的vehicle_id                   
	"""
	vehicle_id
	"""
	 车牌号                                                     
	"""
	license_plate_number
	"""
	 登记时间                                                   
	"""
	registration_time
	"""
	 监管时间                                                   
	"""
	supervision_time
	"""
	 备注                                                       
	"""
	remarks
	"""
	 摄像头ID                                                   ( construction_camera 工地摄像头表的construction_camera_id )
	"""
	camera_id
	"""
	 报警类型（1.未纳入管控平台 2.未报备工程 3.未纳入管控平台） 
	"""
	alarm_type
	"""
	 审核状态                                                   
	"""
	review_status
	"""
	 车辆类型                                                   ( 车辆类型字典                                             )
	"""
	vehicle_type
	"""
	 是否在线                                                   
	"""
	is_online
	"""
	 是否监管                                                   
	"""
	is_supervision
	"""
	 创建时间                                                   
	"""
	created_at
	"""
	 创建人                                                     ( system_user表的user_id                                   )
	"""
	created_by
	"""
	 修改时间                                                   
	"""
	updated_at
	"""
	 修改人                                                     ( system_user表的user_id                                   )
	"""
	updated_by
	"""
	 删除时间                                                   
	"""
	deleted_at
	"""
	 删除人                                                     ( system_user表的user_id                                   )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	snapshot_system_passing_alarm(distinct_on: [SnapshotSystemPassingAlarmSelectColumn!], limit: Int, offset: Int, order_by: [SnapshotSystemPassingAlarmOrderBy!], where: SnapshotSystemPassingAlarmBoolExp): [SnapshotSystemPassingAlarm!]!
	"""
	聚合查询
	"""
	snapshot_system_passing_alarm_aggregate(distinct_on: [SnapshotSystemPassingAlarmSelectColumn!], limit: Int, offset: Int, order_by: [SnapshotSystemPassingAlarmOrderBy!], where: SnapshotSystemPassingAlarmBoolExp): SnapshotSystemPassingAlarmAggregate!
	"""
	主键查询
	"""
	snapshot_system_passing_alarm_by_pk(id: Bigint!): SnapshotSystemPassingAlarm!
	"""
	联合主键查询
	"""
	snapshot_system_passing_alarm_by_union_pk(snapshot_system_passing_alarm_id: String!): SnapshotSystemPassingAlarm!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_snapshot_system_passing_alarm(where: SnapshotSystemPassingAlarmBoolExp!): SnapshotSystemPassingAlarmMutationResponse
	"""
	根据主键删除记录
	"""
	delete_snapshot_system_passing_alarm_by_pk(id: Bigint!): SnapshotSystemPassingAlarm
	"""
	插入
	"""
	insert_snapshot_system_passing_alarm(objects: [SnapshotSystemPassingAlarmInsertInput!]!): SnapshotSystemPassingAlarmMutationResponse
	"""
	插入一条记录
	"""
	insert_snapshot_system_passing_alarm_one(objects: SnapshotSystemPassingAlarmInsertInput!): SnapshotSystemPassingAlarm
	"""
	更新
	"""
	update_snapshot_system_passing_alarm(_inc: SnapshotSystemPassingAlarmIncInput, _set: SnapshotSystemPassingAlarmSetInput, where: SnapshotSystemPassingAlarmBoolExp!): SnapshotSystemPassingAlarmMutationResponse
	"""
	根据主键更新
	"""
	update_snapshot_system_passing_alarm_by_pk(_inc: SnapshotSystemPassingAlarmIncInput, _set: SnapshotSystemPassingAlarmSetInput, id: Bigint!): SnapshotSystemPassingAlarm
	"""
	根据联合主键更新
	"""
	update_snapshot_system_passing_alarm_by_union_pk(_inc: SnapshotSystemPassingAlarmIncInput, _set: SnapshotSystemPassingAlarmSetInput, snapshot_system_passing_alarm_id: String!): SnapshotSystemPassingAlarm
	"""
	根据联合主键删除记录
	"""
	delete_snapshot_system_passing_alarm_by_union_pk(snapshot_system_passing_alarm_id: String!): SnapshotSystemPassingAlarm
}
`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_passing_record.graphqls", Input: `"""
过车记录表
"""
type VehiclePassingRecord {
	"""
	 按指定方法生成                                  ( 主键                                                         )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                     )
	"""
	vehicle_passing_record_id: String!
	"""
	 vehicle_info 车辆信息表 的vehicle_id        
	"""
	vehicle_id: String!
	"""
	 车牌号                                          
	"""
	license_plate_number: String
	"""
	 过车时间                                        
	"""
	passing_time: Timestamptz
	"""
	 登记时间                                        
	"""
	registration_time: Timestamptz
	"""
	 摄像头ID                                        ( construction_camera 工地摄像头表的construction_camera_id )
	"""
	camera_id: String
	"""
	 过车类型                                        
	"""
	pass_type: String
	"""
	 图片地址                                        
	"""
	picture_url: String
	"""
	 审核状态                                        
	"""
	review_status: String
	"""
	 车辆类型                                        
	"""
	vehicle_type: String
	"""
	 是否在线                                        
	"""
	is_online: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id                                   )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id                                   )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id                                   )
	"""
	deleted_by: String
}
"""
aggregated selection of "vehicle_passing_record"
"""
type VehiclePassingRecordAggregate {
	aggregate: VehiclePassingRecordAggregateFields
}
"""
aggregate fields of "vehicle_passing_record"
"""
type VehiclePassingRecordAggregateFields {
	avg: VehiclePassingRecordAvgFields
	count: Int
	max: VehiclePassingRecordMaxFields
	min: VehiclePassingRecordMinFields
	stddev: VehiclePassingRecordStddevFields
	stddev_pop: VehiclePassingRecordStddevPopFields
	stddev_samp: VehiclePassingRecordStddevSampFields
	sum: VehiclePassingRecordSumFields
	var_pop: VehiclePassingRecordVarPopFields
	var_samp: VehiclePassingRecordVarSampFields
	variance: VehiclePassingRecordVarianceFields
}
"""
aggregate avg on columns of table "vehicle_passing_record"
"""
type VehiclePassingRecordAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "vehicle_passing_record"
"""
type VehiclePassingRecordMaxFields {
	id: Bigint
	vehicle_passing_record_id: String
	vehicle_id: String
	license_plate_number: String
	passing_time: Timestamptz
	registration_time: Timestamptz
	camera_id: String
	pass_type: String
	picture_url: String
	review_status: String
	vehicle_type: String
	is_online: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "vehicle_passing_record"
"""
type VehiclePassingRecordMinFields {
	id: Bigint
	vehicle_passing_record_id: String
	vehicle_id: String
	license_plate_number: String
	passing_time: Timestamptz
	registration_time: Timestamptz
	camera_id: String
	pass_type: String
	picture_url: String
	review_status: String
	vehicle_type: String
	is_online: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "vehicle_passing_record"
"""
type VehiclePassingRecordStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "vehicle_passing_record"
"""
type VehiclePassingRecordStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "vehicle_passing_record"
"""
type VehiclePassingRecordStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "vehicle_passing_record"
"""
type VehiclePassingRecordSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "vehicle_passing_record"
"""
type VehiclePassingRecordVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "vehicle_passing_record"
"""
type VehiclePassingRecordVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "vehicle_passing_record"
"""
type VehiclePassingRecordVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "vehicle_passing_record"
"""
type VehiclePassingRecordMutationResponse {
	affected_rows: Int!
	returning: [VehiclePassingRecord!]!
}
"""
ordering options when selecting data from "vehicle_passing_record"
"""
input VehiclePassingRecordOrderBy {
	id: OrderBy
	vehicle_passing_record_id: OrderBy
	vehicle_id: OrderBy
	license_plate_number: OrderBy
	passing_time: OrderBy
	registration_time: OrderBy
	camera_id: OrderBy
	pass_type: OrderBy
	picture_url: OrderBy
	review_status: OrderBy
	vehicle_type: OrderBy
	is_online: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_passing_record'.
"""
input VehiclePassingRecordBoolExp {
	_and: [VehiclePassingRecordBoolExp]
	_not: VehiclePassingRecordBoolExp
	_or: [VehiclePassingRecordBoolExp]
	id: BigintComparisonExp
	vehicle_passing_record_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	license_plate_number: StringComparisonExp
	passing_time: TimestamptzComparisonExp
	registration_time: TimestamptzComparisonExp
	camera_id: StringComparisonExp
	pass_type: StringComparisonExp
	picture_url: StringComparisonExp
	review_status: StringComparisonExp
	vehicle_type: StringComparisonExp
	is_online: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "vehicle_passing_record"
"""
input VehiclePassingRecordInsertInput {
	vehicle_passing_record_id: String!
	vehicle_id: String!
	license_plate_number: String
	passing_time: Timestamptz
	registration_time: Timestamptz
	camera_id: String
	pass_type: String
	picture_url: String
	review_status: String
	vehicle_type: String
	is_online: Boolean
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "vehicle_passing_record"
"""
input VehiclePassingRecordIncInput {
	id: Bigint
}
"""
input type for updating data in table "vehicle_passing_record"
"""
input VehiclePassingRecordSetInput {
	id: Bigint
	vehicle_passing_record_id: String
	vehicle_id: String
	license_plate_number: String
	passing_time: Timestamptz
	registration_time: Timestamptz
	camera_id: String
	pass_type: String
	picture_url: String
	review_status: String
	vehicle_type: String
	is_online: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum VehiclePassingRecordSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                                                         )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                     )
	"""
	vehicle_passing_record_id
	"""
	 vehicle_info 车辆信息表 的vehicle_id        
	"""
	vehicle_id
	"""
	 车牌号                                          
	"""
	license_plate_number
	"""
	 过车时间                                        
	"""
	passing_time
	"""
	 登记时间                                        
	"""
	registration_time
	"""
	 摄像头ID                                        ( construction_camera 工地摄像头表的construction_camera_id )
	"""
	camera_id
	"""
	 过车类型                                        
	"""
	pass_type
	"""
	 图片地址                                        
	"""
	picture_url
	"""
	 审核状态                                        
	"""
	review_status
	"""
	 车辆类型                                        
	"""
	vehicle_type
	"""
	 是否在线                                        
	"""
	is_online
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id                                   )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id                                   )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id                                   )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	vehicle_passing_record(distinct_on: [VehiclePassingRecordSelectColumn!], limit: Int, offset: Int, order_by: [VehiclePassingRecordOrderBy!], where: VehiclePassingRecordBoolExp): [VehiclePassingRecord!]!
	"""
	聚合查询
	"""
	vehicle_passing_record_aggregate(distinct_on: [VehiclePassingRecordSelectColumn!], limit: Int, offset: Int, order_by: [VehiclePassingRecordOrderBy!], where: VehiclePassingRecordBoolExp): VehiclePassingRecordAggregate!
	"""
	主键查询
	"""
	vehicle_passing_record_by_pk(id: Bigint!): VehiclePassingRecord!
	"""
	联合主键查询
	"""
	vehicle_passing_record_by_union_pk(vehicle_passing_record_id: String!): VehiclePassingRecord!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_vehicle_passing_record(where: VehiclePassingRecordBoolExp!): VehiclePassingRecordMutationResponse
	"""
	根据主键删除记录
	"""
	delete_vehicle_passing_record_by_pk(id: Bigint!): VehiclePassingRecord
	"""
	插入
	"""
	insert_vehicle_passing_record(objects: [VehiclePassingRecordInsertInput!]!): VehiclePassingRecordMutationResponse
	"""
	插入一条记录
	"""
	insert_vehicle_passing_record_one(objects: VehiclePassingRecordInsertInput!): VehiclePassingRecord
	"""
	更新
	"""
	update_vehicle_passing_record(_inc: VehiclePassingRecordIncInput, _set: VehiclePassingRecordSetInput, where: VehiclePassingRecordBoolExp!): VehiclePassingRecordMutationResponse
	"""
	根据主键更新
	"""
	update_vehicle_passing_record_by_pk(_inc: VehiclePassingRecordIncInput, _set: VehiclePassingRecordSetInput, id: Bigint!): VehiclePassingRecord
	"""
	根据联合主键更新
	"""
	update_vehicle_passing_record_by_union_pk(_inc: VehiclePassingRecordIncInput, _set: VehiclePassingRecordSetInput, vehicle_passing_record_id: String!): VehiclePassingRecord
	"""
	根据联合主键删除记录
	"""
	delete_vehicle_passing_record_by_union_pk(vehicle_passing_record_id: String!): VehiclePassingRecord
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_construction_camera_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ConstructionCameraBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNConstructionCameraBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_construction_camera_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_construction_camera_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["construction_camera_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_camera_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["construction_camera_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_construction_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ConstructionInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNConstructionInfoBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_construction_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_construction_info_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["construction_info_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_info_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["construction_info_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_construction_upload_pic_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ConstructionUploadPicBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNConstructionUploadPicBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_construction_upload_pic_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_construction_upload_pic_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["construction_upload_pic_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_upload_pic_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["construction_upload_pic_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_offline_registration_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OfflineRegistrationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNOfflineRegistrationRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_offline_registration_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_offline_registration_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["offline_registration_record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_registration_record_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offline_registration_record_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_snapshot_system_passing_alarm_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SnapshotSystemPassingAlarmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNSnapshotSystemPassingAlarmBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_snapshot_system_passing_alarm_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_snapshot_system_passing_alarm_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["snapshot_system_passing_alarm_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("snapshot_system_passing_alarm_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["snapshot_system_passing_alarm_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_passing_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehiclePassingRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVehiclePassingRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_passing_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_passing_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["vehicle_passing_record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_passing_record_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_passing_record_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_construction_camera_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.ConstructionCameraInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNConstructionCameraInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_construction_camera_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ConstructionCameraInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNConstructionCameraInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_construction_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.ConstructionInfoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNConstructionInfoInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_construction_info_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ConstructionInfoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNConstructionInfoInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_construction_upload_pic_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.ConstructionUploadPicInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNConstructionUploadPicInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_construction_upload_pic_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ConstructionUploadPicInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNConstructionUploadPicInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_offline_registration_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.OfflineRegistrationRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNOfflineRegistrationRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_offline_registration_record_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OfflineRegistrationRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNOfflineRegistrationRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_snapshot_system_passing_alarm_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.SnapshotSystemPassingAlarmInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNSnapshotSystemPassingAlarmInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_snapshot_system_passing_alarm_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SnapshotSystemPassingAlarmInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNSnapshotSystemPassingAlarmInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_passing_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehiclePassingRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehiclePassingRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_passing_record_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehiclePassingRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehiclePassingRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_update_construction_camera_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ConstructionCameraIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOConstructionCameraIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ConstructionCameraSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOConstructionCameraSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.ConstructionCameraBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNConstructionCameraBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_construction_camera_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ConstructionCameraIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOConstructionCameraIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ConstructionCameraSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOConstructionCameraSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_construction_camera_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ConstructionCameraIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOConstructionCameraIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ConstructionCameraSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOConstructionCameraSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["construction_camera_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_camera_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["construction_camera_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_construction_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ConstructionInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOConstructionInfoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ConstructionInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOConstructionInfoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.ConstructionInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNConstructionInfoBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_construction_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ConstructionInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOConstructionInfoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ConstructionInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOConstructionInfoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_construction_info_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ConstructionInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOConstructionInfoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ConstructionInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOConstructionInfoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["construction_info_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_info_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["construction_info_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_construction_upload_pic_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ConstructionUploadPicIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOConstructionUploadPicIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ConstructionUploadPicSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOConstructionUploadPicSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.ConstructionUploadPicBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNConstructionUploadPicBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_construction_upload_pic_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ConstructionUploadPicIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOConstructionUploadPicIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ConstructionUploadPicSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOConstructionUploadPicSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_construction_upload_pic_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ConstructionUploadPicIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOConstructionUploadPicIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ConstructionUploadPicSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOConstructionUploadPicSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["construction_upload_pic_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_upload_pic_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["construction_upload_pic_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_offline_registration_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.OfflineRegistrationRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOOfflineRegistrationRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.OfflineRegistrationRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOOfflineRegistrationRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.OfflineRegistrationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNOfflineRegistrationRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_offline_registration_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.OfflineRegistrationRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOOfflineRegistrationRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.OfflineRegistrationRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOOfflineRegistrationRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_offline_registration_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.OfflineRegistrationRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOOfflineRegistrationRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.OfflineRegistrationRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOOfflineRegistrationRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["offline_registration_record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_registration_record_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offline_registration_record_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_snapshot_system_passing_alarm_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SnapshotSystemPassingAlarmIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOSnapshotSystemPassingAlarmIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SnapshotSystemPassingAlarmSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOSnapshotSystemPassingAlarmSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.SnapshotSystemPassingAlarmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNSnapshotSystemPassingAlarmBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_snapshot_system_passing_alarm_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SnapshotSystemPassingAlarmIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOSnapshotSystemPassingAlarmIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SnapshotSystemPassingAlarmSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOSnapshotSystemPassingAlarmSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_snapshot_system_passing_alarm_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SnapshotSystemPassingAlarmIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOSnapshotSystemPassingAlarmIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SnapshotSystemPassingAlarmSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOSnapshotSystemPassingAlarmSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["snapshot_system_passing_alarm_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("snapshot_system_passing_alarm_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["snapshot_system_passing_alarm_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_passing_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehiclePassingRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehiclePassingRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehiclePassingRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehiclePassingRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehiclePassingRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVehiclePassingRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_passing_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehiclePassingRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehiclePassingRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehiclePassingRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehiclePassingRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_passing_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehiclePassingRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehiclePassingRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehiclePassingRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehiclePassingRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["vehicle_passing_record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_passing_record_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_passing_record_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_construction_camera_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ConstructionCameraSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOConstructionCameraSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.ConstructionCameraOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOConstructionCameraOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.ConstructionCameraBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOConstructionCameraBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_construction_camera_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ConstructionCameraSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOConstructionCameraSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.ConstructionCameraOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOConstructionCameraOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.ConstructionCameraBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOConstructionCameraBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_construction_camera_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_construction_camera_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["construction_camera_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_camera_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["construction_camera_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_construction_info_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ConstructionInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOConstructionInfoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.ConstructionInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOConstructionInfoOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.ConstructionInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOConstructionInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_construction_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ConstructionInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOConstructionInfoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.ConstructionInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOConstructionInfoOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.ConstructionInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOConstructionInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_construction_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_construction_info_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["construction_info_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_info_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["construction_info_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_construction_upload_pic_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ConstructionUploadPicSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOConstructionUploadPicSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.ConstructionUploadPicOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOConstructionUploadPicOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.ConstructionUploadPicBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOConstructionUploadPicBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_construction_upload_pic_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ConstructionUploadPicSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOConstructionUploadPicSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.ConstructionUploadPicOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOConstructionUploadPicOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.ConstructionUploadPicBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOConstructionUploadPicBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_construction_upload_pic_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_construction_upload_pic_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["construction_upload_pic_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_upload_pic_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["construction_upload_pic_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_offline_registration_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.OfflineRegistrationRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOOfflineRegistrationRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.OfflineRegistrationRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOOfflineRegistrationRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.OfflineRegistrationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOOfflineRegistrationRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_offline_registration_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.OfflineRegistrationRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOOfflineRegistrationRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.OfflineRegistrationRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOOfflineRegistrationRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.OfflineRegistrationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOOfflineRegistrationRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_offline_registration_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_offline_registration_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["offline_registration_record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_registration_record_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offline_registration_record_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_snapshot_system_passing_alarm_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SnapshotSystemPassingAlarmSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOSnapshotSystemPassingAlarmSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.SnapshotSystemPassingAlarmOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOSnapshotSystemPassingAlarmOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.SnapshotSystemPassingAlarmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOSnapshotSystemPassingAlarmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_snapshot_system_passing_alarm_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SnapshotSystemPassingAlarmSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOSnapshotSystemPassingAlarmSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.SnapshotSystemPassingAlarmOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOSnapshotSystemPassingAlarmOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.SnapshotSystemPassingAlarmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOSnapshotSystemPassingAlarmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_snapshot_system_passing_alarm_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_snapshot_system_passing_alarm_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["snapshot_system_passing_alarm_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("snapshot_system_passing_alarm_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["snapshot_system_passing_alarm_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_passing_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehiclePassingRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehiclePassingRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehiclePassingRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehiclePassingRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehiclePassingRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehiclePassingRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_passing_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehiclePassingRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehiclePassingRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehiclePassingRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehiclePassingRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehiclePassingRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehiclePassingRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_passing_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_passing_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["vehicle_passing_record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_passing_record_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_passing_record_id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ConstructionCamera_id(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionCamera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCamera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCamera_construction_camera_id(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionCamera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCamera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionCameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCamera_device_name(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionCamera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCamera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCamera_ip_address(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionCamera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCamera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCamera_port(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionCamera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCamera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCamera_device_id(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionCamera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCamera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCamera_construction_info_id(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionCamera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCamera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionInfoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCamera_sim_number(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionCamera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCamera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCamera_registration_time(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionCamera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCamera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCamera_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionCamera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCamera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCamera_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionCamera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCamera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCamera_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionCamera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCamera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCamera_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionCamera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCamera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCamera_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionCamera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCamera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCamera_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionCamera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCamera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCamera_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionCamera) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCamera",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionCameraAggregateFields)
	fc.Result = res
	return ec.marshalOConstructionCameraAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionCameraAvgFields)
	fc.Result = res
	return ec.marshalOConstructionCameraAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionCameraMaxFields)
	fc.Result = res
	return ec.marshalOConstructionCameraMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionCameraMinFields)
	fc.Result = res
	return ec.marshalOConstructionCameraMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionCameraStddevFields)
	fc.Result = res
	return ec.marshalOConstructionCameraStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionCameraStddevPopFields)
	fc.Result = res
	return ec.marshalOConstructionCameraStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionCameraStddevSampFields)
	fc.Result = res
	return ec.marshalOConstructionCameraStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionCameraSumFields)
	fc.Result = res
	return ec.marshalOConstructionCameraSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionCameraVarPopFields)
	fc.Result = res
	return ec.marshalOConstructionCameraVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionCameraVarSampFields)
	fc.Result = res
	return ec.marshalOConstructionCameraVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionCameraVarianceFields)
	fc.Result = res
	return ec.marshalOConstructionCameraVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMaxFields_construction_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionCameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMaxFields_device_name(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMaxFields_ip_address(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMaxFields_port(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMaxFields_device_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMaxFields_construction_info_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionInfoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMaxFields_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMaxFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMinFields_construction_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionCameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMinFields_device_name(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMinFields_ip_address(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMinFields_port(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMinFields_device_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMinFields_construction_info_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionInfoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMinFields_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMinFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.ConstructionCamera)
	fc.Result = res
	return ec.marshalNConstructionCamera2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionCameraᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionCameraVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionCameraVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionCameraVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_id(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_construction_info_id(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionInfoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_project_name(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_project_code(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_contract_start_date(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_contract_completion_date(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractCompletionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_build_agency(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_project_manager(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectManager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_area_id(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_address(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_map_coordinate(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MapCoordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_construction_agency(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_supervision_agency(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_device_installation_agency(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceInstallationAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_device_installation_location(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceInstallationLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_service_contract_number(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceContractNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_contract_signing_time(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractSigningTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_service_activation_date(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceActivationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_proof_valid_date(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProofValidDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_coordinate(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_installation_time(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstallationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_project_name_tag(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectNameTag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_import_export_quantity(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImportExportQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_deactivation_reason(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeactivationReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_uninstalled_reason(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninstalledReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_proof_valid_date_until(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProofValidDateUntil, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_construction_type(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_contact_person(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_contact_phone(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_finished(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_is_city_directly(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCityDirectly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_is_installation(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInstallation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_registration_time(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfo_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionInfoAggregateFields)
	fc.Result = res
	return ec.marshalOConstructionInfoAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionInfoAvgFields)
	fc.Result = res
	return ec.marshalOConstructionInfoAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionInfoMaxFields)
	fc.Result = res
	return ec.marshalOConstructionInfoMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionInfoMinFields)
	fc.Result = res
	return ec.marshalOConstructionInfoMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionInfoStddevFields)
	fc.Result = res
	return ec.marshalOConstructionInfoStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionInfoStddevPopFields)
	fc.Result = res
	return ec.marshalOConstructionInfoStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionInfoStddevSampFields)
	fc.Result = res
	return ec.marshalOConstructionInfoStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionInfoSumFields)
	fc.Result = res
	return ec.marshalOConstructionInfoSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionInfoVarPopFields)
	fc.Result = res
	return ec.marshalOConstructionInfoVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionInfoVarSampFields)
	fc.Result = res
	return ec.marshalOConstructionInfoVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionInfoVarianceFields)
	fc.Result = res
	return ec.marshalOConstructionInfoVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoAvgFields_construction_type(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoAvgFields_finished(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_construction_info_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionInfoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_project_name(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_project_code(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_contract_start_date(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_contract_completion_date(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractCompletionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_build_agency(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_project_manager(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectManager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_address(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_map_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MapCoordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_construction_agency(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_supervision_agency(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_device_installation_agency(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceInstallationAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_device_installation_location(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceInstallationLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_service_contract_number(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceContractNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_contract_signing_time(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractSigningTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_service_activation_date(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceActivationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_proof_valid_date(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProofValidDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_installation_time(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstallationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_project_name_tag(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectNameTag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_import_export_quantity(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImportExportQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_deactivation_reason(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeactivationReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_uninstalled_reason(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninstalledReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_proof_valid_date_until(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProofValidDateUntil, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_construction_type(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_contact_person(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_contact_phone(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_finished(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_is_city_directly(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCityDirectly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_is_installation(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInstallation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_construction_info_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionInfoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_project_name(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_project_code(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_contract_start_date(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_contract_completion_date(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractCompletionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_build_agency(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_project_manager(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectManager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_address(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_map_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MapCoordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_construction_agency(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_supervision_agency(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_device_installation_agency(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceInstallationAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_device_installation_location(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceInstallationLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_service_contract_number(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceContractNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_contract_signing_time(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractSigningTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_service_activation_date(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceActivationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_proof_valid_date(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProofValidDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_installation_time(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstallationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_project_name_tag(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectNameTag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_import_export_quantity(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImportExportQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_deactivation_reason(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeactivationReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_uninstalled_reason(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninstalledReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_proof_valid_date_until(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProofValidDateUntil, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_construction_type(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_contact_person(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_contact_phone(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_finished(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_is_city_directly(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCityDirectly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_is_installation(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInstallation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.ConstructionInfo)
	fc.Result = res
	return ec.marshalNConstructionInfo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoStddevFields_construction_type(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoStddevFields_finished(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoStddevPopFields_construction_type(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoStddevPopFields_finished(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoStddevSampFields_construction_type(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoStddevSampFields_finished(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoSumFields_construction_type(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoSumFields_finished(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoVarPopFields_construction_type(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoVarPopFields_finished(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoVarSampFields_construction_type(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoVarSampFields_finished(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoVarianceFields_construction_type(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionInfoVarianceFields_finished(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionInfoVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPic_id(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionUploadPic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPic_construction_upload_pic_id(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionUploadPic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionUploadPicID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPic_construction_info_id(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionUploadPic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionInfoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPic_picture_url(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionUploadPic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPic_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionUploadPic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPic_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionUploadPic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPic_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionUploadPic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPic_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionUploadPic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPic_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionUploadPic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPic_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionUploadPic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPic_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.ConstructionUploadPic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionUploadPicAggregateFields)
	fc.Result = res
	return ec.marshalOConstructionUploadPicAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionUploadPicAvgFields)
	fc.Result = res
	return ec.marshalOConstructionUploadPicAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionUploadPicMaxFields)
	fc.Result = res
	return ec.marshalOConstructionUploadPicMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionUploadPicMinFields)
	fc.Result = res
	return ec.marshalOConstructionUploadPicMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionUploadPicStddevFields)
	fc.Result = res
	return ec.marshalOConstructionUploadPicStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionUploadPicStddevPopFields)
	fc.Result = res
	return ec.marshalOConstructionUploadPicStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionUploadPicStddevSampFields)
	fc.Result = res
	return ec.marshalOConstructionUploadPicStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionUploadPicSumFields)
	fc.Result = res
	return ec.marshalOConstructionUploadPicSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionUploadPicVarPopFields)
	fc.Result = res
	return ec.marshalOConstructionUploadPicVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionUploadPicVarSampFields)
	fc.Result = res
	return ec.marshalOConstructionUploadPicVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionUploadPicVarianceFields)
	fc.Result = res
	return ec.marshalOConstructionUploadPicVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMaxFields_construction_upload_pic_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionUploadPicID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMaxFields_construction_info_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionInfoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMaxFields_picture_url(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMinFields_construction_upload_pic_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionUploadPicID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMinFields_construction_info_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionInfoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMinFields_picture_url(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.ConstructionUploadPic)
	fc.Result = res
	return ec.marshalNConstructionUploadPic2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionUploadPicᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConstructionUploadPicVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ConstructionUploadPicVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConstructionUploadPicVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_construction_camera(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_construction_camera_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteConstructionCamera(rctx, args["where"].(model.ConstructionCameraBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionCameraMutationResponse)
	fc.Result = res
	return ec.marshalOConstructionCameraMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_construction_camera_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_construction_camera_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteConstructionCameraByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionCamera)
	fc.Result = res
	return ec.marshalOConstructionCamera2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionCamera(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_construction_camera(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_construction_camera_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertConstructionCamera(rctx, args["objects"].([]*model.ConstructionCameraInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionCameraMutationResponse)
	fc.Result = res
	return ec.marshalOConstructionCameraMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_construction_camera_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_construction_camera_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertConstructionCameraOne(rctx, args["objects"].(model.ConstructionCameraInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionCamera)
	fc.Result = res
	return ec.marshalOConstructionCamera2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionCamera(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_construction_camera(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_construction_camera_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateConstructionCamera(rctx, args["_inc"].(*model.ConstructionCameraIncInput), args["_set"].(*model.ConstructionCameraSetInput), args["where"].(model.ConstructionCameraBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionCameraMutationResponse)
	fc.Result = res
	return ec.marshalOConstructionCameraMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_construction_camera_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_construction_camera_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateConstructionCameraByPk(rctx, args["_inc"].(*model.ConstructionCameraIncInput), args["_set"].(*model.ConstructionCameraSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionCamera)
	fc.Result = res
	return ec.marshalOConstructionCamera2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionCamera(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_construction_camera_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_construction_camera_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateConstructionCameraByUnionPk(rctx, args["_inc"].(*model.ConstructionCameraIncInput), args["_set"].(*model.ConstructionCameraSetInput), args["construction_camera_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionCamera)
	fc.Result = res
	return ec.marshalOConstructionCamera2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionCamera(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_construction_camera_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_construction_camera_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteConstructionCameraByUnionPk(rctx, args["construction_camera_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionCamera)
	fc.Result = res
	return ec.marshalOConstructionCamera2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionCamera(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_construction_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_construction_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteConstructionInfo(rctx, args["where"].(model.ConstructionInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionInfoMutationResponse)
	fc.Result = res
	return ec.marshalOConstructionInfoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_construction_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_construction_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteConstructionInfoByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionInfo)
	fc.Result = res
	return ec.marshalOConstructionInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_construction_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_construction_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertConstructionInfo(rctx, args["objects"].([]*model.ConstructionInfoInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionInfoMutationResponse)
	fc.Result = res
	return ec.marshalOConstructionInfoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_construction_info_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_construction_info_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertConstructionInfoOne(rctx, args["objects"].(model.ConstructionInfoInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionInfo)
	fc.Result = res
	return ec.marshalOConstructionInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_construction_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_construction_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateConstructionInfo(rctx, args["_inc"].(*model.ConstructionInfoIncInput), args["_set"].(*model.ConstructionInfoSetInput), args["where"].(model.ConstructionInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionInfoMutationResponse)
	fc.Result = res
	return ec.marshalOConstructionInfoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_construction_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_construction_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateConstructionInfoByPk(rctx, args["_inc"].(*model.ConstructionInfoIncInput), args["_set"].(*model.ConstructionInfoSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionInfo)
	fc.Result = res
	return ec.marshalOConstructionInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_construction_info_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_construction_info_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateConstructionInfoByUnionPk(rctx, args["_inc"].(*model.ConstructionInfoIncInput), args["_set"].(*model.ConstructionInfoSetInput), args["construction_info_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionInfo)
	fc.Result = res
	return ec.marshalOConstructionInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_construction_info_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_construction_info_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteConstructionInfoByUnionPk(rctx, args["construction_info_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionInfo)
	fc.Result = res
	return ec.marshalOConstructionInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_construction_upload_pic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_construction_upload_pic_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteConstructionUploadPic(rctx, args["where"].(model.ConstructionUploadPicBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionUploadPicMutationResponse)
	fc.Result = res
	return ec.marshalOConstructionUploadPicMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_construction_upload_pic_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_construction_upload_pic_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteConstructionUploadPicByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionUploadPic)
	fc.Result = res
	return ec.marshalOConstructionUploadPic2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionUploadPic(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_construction_upload_pic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_construction_upload_pic_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertConstructionUploadPic(rctx, args["objects"].([]*model.ConstructionUploadPicInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionUploadPicMutationResponse)
	fc.Result = res
	return ec.marshalOConstructionUploadPicMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_construction_upload_pic_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_construction_upload_pic_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertConstructionUploadPicOne(rctx, args["objects"].(model.ConstructionUploadPicInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionUploadPic)
	fc.Result = res
	return ec.marshalOConstructionUploadPic2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionUploadPic(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_construction_upload_pic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_construction_upload_pic_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateConstructionUploadPic(rctx, args["_inc"].(*model.ConstructionUploadPicIncInput), args["_set"].(*model.ConstructionUploadPicSetInput), args["where"].(model.ConstructionUploadPicBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionUploadPicMutationResponse)
	fc.Result = res
	return ec.marshalOConstructionUploadPicMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_construction_upload_pic_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_construction_upload_pic_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateConstructionUploadPicByPk(rctx, args["_inc"].(*model.ConstructionUploadPicIncInput), args["_set"].(*model.ConstructionUploadPicSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionUploadPic)
	fc.Result = res
	return ec.marshalOConstructionUploadPic2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionUploadPic(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_construction_upload_pic_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_construction_upload_pic_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateConstructionUploadPicByUnionPk(rctx, args["_inc"].(*model.ConstructionUploadPicIncInput), args["_set"].(*model.ConstructionUploadPicSetInput), args["construction_upload_pic_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionUploadPic)
	fc.Result = res
	return ec.marshalOConstructionUploadPic2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionUploadPic(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_construction_upload_pic_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_construction_upload_pic_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteConstructionUploadPicByUnionPk(rctx, args["construction_upload_pic_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionUploadPic)
	fc.Result = res
	return ec.marshalOConstructionUploadPic2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionUploadPic(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_offline_registration_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_offline_registration_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOfflineRegistrationRecord(rctx, args["where"].(model.OfflineRegistrationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineRegistrationRecordMutationResponse)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_offline_registration_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_offline_registration_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOfflineRegistrationRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.OfflineRegistrationRecord)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐOfflineRegistrationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_offline_registration_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_offline_registration_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertOfflineRegistrationRecord(rctx, args["objects"].([]*model.OfflineRegistrationRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineRegistrationRecordMutationResponse)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_offline_registration_record_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_offline_registration_record_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertOfflineRegistrationRecordOne(rctx, args["objects"].(model.OfflineRegistrationRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.OfflineRegistrationRecord)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐOfflineRegistrationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_offline_registration_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_offline_registration_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOfflineRegistrationRecord(rctx, args["_inc"].(*model.OfflineRegistrationRecordIncInput), args["_set"].(*model.OfflineRegistrationRecordSetInput), args["where"].(model.OfflineRegistrationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineRegistrationRecordMutationResponse)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_offline_registration_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_offline_registration_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOfflineRegistrationRecordByPk(rctx, args["_inc"].(*model.OfflineRegistrationRecordIncInput), args["_set"].(*model.OfflineRegistrationRecordSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.OfflineRegistrationRecord)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐOfflineRegistrationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_offline_registration_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_offline_registration_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOfflineRegistrationRecordByUnionPk(rctx, args["_inc"].(*model.OfflineRegistrationRecordIncInput), args["_set"].(*model.OfflineRegistrationRecordSetInput), args["offline_registration_record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.OfflineRegistrationRecord)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐOfflineRegistrationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_offline_registration_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_offline_registration_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOfflineRegistrationRecordByUnionPk(rctx, args["offline_registration_record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.OfflineRegistrationRecord)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐOfflineRegistrationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_snapshot_system_passing_alarm(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_snapshot_system_passing_alarm_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSnapshotSystemPassingAlarm(rctx, args["where"].(model.SnapshotSystemPassingAlarmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SnapshotSystemPassingAlarmMutationResponse)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarmMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_snapshot_system_passing_alarm_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_snapshot_system_passing_alarm_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSnapshotSystemPassingAlarmByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SnapshotSystemPassingAlarm)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐSnapshotSystemPassingAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_snapshot_system_passing_alarm(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_snapshot_system_passing_alarm_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertSnapshotSystemPassingAlarm(rctx, args["objects"].([]*model.SnapshotSystemPassingAlarmInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SnapshotSystemPassingAlarmMutationResponse)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarmMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_snapshot_system_passing_alarm_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_snapshot_system_passing_alarm_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertSnapshotSystemPassingAlarmOne(rctx, args["objects"].(model.SnapshotSystemPassingAlarmInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SnapshotSystemPassingAlarm)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐSnapshotSystemPassingAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_snapshot_system_passing_alarm(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_snapshot_system_passing_alarm_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSnapshotSystemPassingAlarm(rctx, args["_inc"].(*model.SnapshotSystemPassingAlarmIncInput), args["_set"].(*model.SnapshotSystemPassingAlarmSetInput), args["where"].(model.SnapshotSystemPassingAlarmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SnapshotSystemPassingAlarmMutationResponse)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarmMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_snapshot_system_passing_alarm_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_snapshot_system_passing_alarm_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSnapshotSystemPassingAlarmByPk(rctx, args["_inc"].(*model.SnapshotSystemPassingAlarmIncInput), args["_set"].(*model.SnapshotSystemPassingAlarmSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SnapshotSystemPassingAlarm)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐSnapshotSystemPassingAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_snapshot_system_passing_alarm_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_snapshot_system_passing_alarm_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSnapshotSystemPassingAlarmByUnionPk(rctx, args["_inc"].(*model.SnapshotSystemPassingAlarmIncInput), args["_set"].(*model.SnapshotSystemPassingAlarmSetInput), args["snapshot_system_passing_alarm_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SnapshotSystemPassingAlarm)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐSnapshotSystemPassingAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_snapshot_system_passing_alarm_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_snapshot_system_passing_alarm_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSnapshotSystemPassingAlarmByUnionPk(rctx, args["snapshot_system_passing_alarm_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SnapshotSystemPassingAlarm)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐSnapshotSystemPassingAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_passing_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_passing_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehiclePassingRecord(rctx, args["where"].(model.VehiclePassingRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehiclePassingRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVehiclePassingRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_passing_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_passing_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehiclePassingRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehiclePassingRecord)
	fc.Result = res
	return ec.marshalOVehiclePassingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐVehiclePassingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_passing_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_passing_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehiclePassingRecord(rctx, args["objects"].([]*model.VehiclePassingRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehiclePassingRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVehiclePassingRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_passing_record_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_passing_record_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehiclePassingRecordOne(rctx, args["objects"].(model.VehiclePassingRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehiclePassingRecord)
	fc.Result = res
	return ec.marshalOVehiclePassingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐVehiclePassingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_passing_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_passing_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehiclePassingRecord(rctx, args["_inc"].(*model.VehiclePassingRecordIncInput), args["_set"].(*model.VehiclePassingRecordSetInput), args["where"].(model.VehiclePassingRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehiclePassingRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVehiclePassingRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_passing_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_passing_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehiclePassingRecordByPk(rctx, args["_inc"].(*model.VehiclePassingRecordIncInput), args["_set"].(*model.VehiclePassingRecordSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehiclePassingRecord)
	fc.Result = res
	return ec.marshalOVehiclePassingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐVehiclePassingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_passing_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_passing_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehiclePassingRecordByUnionPk(rctx, args["_inc"].(*model.VehiclePassingRecordIncInput), args["_set"].(*model.VehiclePassingRecordSetInput), args["vehicle_passing_record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehiclePassingRecord)
	fc.Result = res
	return ec.marshalOVehiclePassingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐVehiclePassingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_passing_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_passing_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehiclePassingRecordByUnionPk(rctx, args["vehicle_passing_record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehiclePassingRecord)
	fc.Result = res
	return ec.marshalOVehiclePassingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐVehiclePassingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecord_id(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineRegistrationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecord_offline_registration_record_id(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineRegistrationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfflineRegistrationRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecord_outage_registration_id(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineRegistrationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutageRegistrationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecord_registration_content(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineRegistrationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecord_registration_time(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineRegistrationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecord_registrant(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineRegistrationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Registrant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecord_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineRegistrationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecord_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineRegistrationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecord_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineRegistrationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecord_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineRegistrationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecord_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineRegistrationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecord_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineRegistrationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecord_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineRegistrationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineRegistrationRecordAggregateFields)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineRegistrationRecordAvgFields)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineRegistrationRecordMaxFields)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineRegistrationRecordMinFields)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineRegistrationRecordStddevFields)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineRegistrationRecordStddevPopFields)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineRegistrationRecordStddevSampFields)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineRegistrationRecordSumFields)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineRegistrationRecordVarPopFields)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineRegistrationRecordVarSampFields)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineRegistrationRecordVarianceFields)
	fc.Result = res
	return ec.marshalOOfflineRegistrationRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMaxFields_offline_registration_record_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfflineRegistrationRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMaxFields_outage_registration_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutageRegistrationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMaxFields_registration_content(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMaxFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMaxFields_registrant(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Registrant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMinFields_offline_registration_record_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfflineRegistrationRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMinFields_outage_registration_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutageRegistrationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMinFields_registration_content(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMinFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMinFields_registrant(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Registrant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.OfflineRegistrationRecord)
	fc.Result = res
	return ec.marshalNOfflineRegistrationRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐOfflineRegistrationRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineRegistrationRecordVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineRegistrationRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineRegistrationRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_construction_camera(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_construction_camera_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConstructionCamera(rctx, args["distinct_on"].([]model.ConstructionCameraSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ConstructionCameraOrderBy), args["where"].(*model.ConstructionCameraBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.ConstructionCamera)
	fc.Result = res
	return ec.marshalNConstructionCamera2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionCameraᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_construction_camera_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_construction_camera_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConstructionCameraAggregate(rctx, args["distinct_on"].([]model.ConstructionCameraSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ConstructionCameraOrderBy), args["where"].(*model.ConstructionCameraBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionCameraAggregate)
	fc.Result = res
	return ec.marshalNConstructionCameraAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_construction_camera_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_construction_camera_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConstructionCameraByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionCamera)
	fc.Result = res
	return ec.marshalNConstructionCamera2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionCamera(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_construction_camera_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_construction_camera_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConstructionCameraByUnionPk(rctx, args["construction_camera_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionCamera)
	fc.Result = res
	return ec.marshalNConstructionCamera2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionCamera(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_construction_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_construction_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConstructionInfo(rctx, args["distinct_on"].([]model.ConstructionInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ConstructionInfoOrderBy), args["where"].(*model.ConstructionInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.ConstructionInfo)
	fc.Result = res
	return ec.marshalNConstructionInfo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_construction_info_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_construction_info_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConstructionInfoAggregate(rctx, args["distinct_on"].([]model.ConstructionInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ConstructionInfoOrderBy), args["where"].(*model.ConstructionInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionInfoAggregate)
	fc.Result = res
	return ec.marshalNConstructionInfoAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_construction_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_construction_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConstructionInfoByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionInfo)
	fc.Result = res
	return ec.marshalNConstructionInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_construction_info_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_construction_info_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConstructionInfoByUnionPk(rctx, args["construction_info_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionInfo)
	fc.Result = res
	return ec.marshalNConstructionInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_construction_upload_pic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_construction_upload_pic_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConstructionUploadPic(rctx, args["distinct_on"].([]model.ConstructionUploadPicSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ConstructionUploadPicOrderBy), args["where"].(*model.ConstructionUploadPicBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.ConstructionUploadPic)
	fc.Result = res
	return ec.marshalNConstructionUploadPic2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionUploadPicᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_construction_upload_pic_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_construction_upload_pic_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConstructionUploadPicAggregate(rctx, args["distinct_on"].([]model.ConstructionUploadPicSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ConstructionUploadPicOrderBy), args["where"].(*model.ConstructionUploadPicBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConstructionUploadPicAggregate)
	fc.Result = res
	return ec.marshalNConstructionUploadPicAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_construction_upload_pic_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_construction_upload_pic_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConstructionUploadPicByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionUploadPic)
	fc.Result = res
	return ec.marshalNConstructionUploadPic2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionUploadPic(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_construction_upload_pic_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_construction_upload_pic_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConstructionUploadPicByUnionPk(rctx, args["construction_upload_pic_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.ConstructionUploadPic)
	fc.Result = res
	return ec.marshalNConstructionUploadPic2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionUploadPic(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_offline_registration_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_offline_registration_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OfflineRegistrationRecord(rctx, args["distinct_on"].([]model.OfflineRegistrationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OfflineRegistrationRecordOrderBy), args["where"].(*model.OfflineRegistrationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.OfflineRegistrationRecord)
	fc.Result = res
	return ec.marshalNOfflineRegistrationRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐOfflineRegistrationRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_offline_registration_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_offline_registration_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OfflineRegistrationRecordAggregate(rctx, args["distinct_on"].([]model.OfflineRegistrationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OfflineRegistrationRecordOrderBy), args["where"].(*model.OfflineRegistrationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OfflineRegistrationRecordAggregate)
	fc.Result = res
	return ec.marshalNOfflineRegistrationRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_offline_registration_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_offline_registration_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OfflineRegistrationRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.OfflineRegistrationRecord)
	fc.Result = res
	return ec.marshalNOfflineRegistrationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐOfflineRegistrationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_offline_registration_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_offline_registration_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OfflineRegistrationRecordByUnionPk(rctx, args["offline_registration_record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.OfflineRegistrationRecord)
	fc.Result = res
	return ec.marshalNOfflineRegistrationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐOfflineRegistrationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_snapshot_system_passing_alarm(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_snapshot_system_passing_alarm_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SnapshotSystemPassingAlarm(rctx, args["distinct_on"].([]model.SnapshotSystemPassingAlarmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SnapshotSystemPassingAlarmOrderBy), args["where"].(*model.SnapshotSystemPassingAlarmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SnapshotSystemPassingAlarm)
	fc.Result = res
	return ec.marshalNSnapshotSystemPassingAlarm2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐSnapshotSystemPassingAlarmᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_snapshot_system_passing_alarm_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_snapshot_system_passing_alarm_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SnapshotSystemPassingAlarmAggregate(rctx, args["distinct_on"].([]model.SnapshotSystemPassingAlarmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SnapshotSystemPassingAlarmOrderBy), args["where"].(*model.SnapshotSystemPassingAlarmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SnapshotSystemPassingAlarmAggregate)
	fc.Result = res
	return ec.marshalNSnapshotSystemPassingAlarmAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_snapshot_system_passing_alarm_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_snapshot_system_passing_alarm_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SnapshotSystemPassingAlarmByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.SnapshotSystemPassingAlarm)
	fc.Result = res
	return ec.marshalNSnapshotSystemPassingAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐSnapshotSystemPassingAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_snapshot_system_passing_alarm_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_snapshot_system_passing_alarm_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SnapshotSystemPassingAlarmByUnionPk(rctx, args["snapshot_system_passing_alarm_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.SnapshotSystemPassingAlarm)
	fc.Result = res
	return ec.marshalNSnapshotSystemPassingAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐSnapshotSystemPassingAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_passing_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_passing_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehiclePassingRecord(rctx, args["distinct_on"].([]model.VehiclePassingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehiclePassingRecordOrderBy), args["where"].(*model.VehiclePassingRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehiclePassingRecord)
	fc.Result = res
	return ec.marshalNVehiclePassingRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐVehiclePassingRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_passing_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_passing_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehiclePassingRecordAggregate(rctx, args["distinct_on"].([]model.VehiclePassingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehiclePassingRecordOrderBy), args["where"].(*model.VehiclePassingRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehiclePassingRecordAggregate)
	fc.Result = res
	return ec.marshalNVehiclePassingRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_passing_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_passing_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehiclePassingRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VehiclePassingRecord)
	fc.Result = res
	return ec.marshalNVehiclePassingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐVehiclePassingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_passing_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_passing_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehiclePassingRecordByUnionPk(rctx, args["vehicle_passing_record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VehiclePassingRecord)
	fc.Result = res
	return ec.marshalNVehiclePassingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐVehiclePassingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_id(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_snapshot_system_passing_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SnapshotSystemPassingAlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_passing_id(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_registration_time(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_supervision_time(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_camera_id(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_review_status(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_is_online(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_is_supervision(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSupervision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarm_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.SnapshotSystemPassingAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SnapshotSystemPassingAlarmAggregateFields)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarmAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SnapshotSystemPassingAlarmAvgFields)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarmAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SnapshotSystemPassingAlarmMaxFields)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarmMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SnapshotSystemPassingAlarmMinFields)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarmMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SnapshotSystemPassingAlarmStddevFields)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarmStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SnapshotSystemPassingAlarmStddevPopFields)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarmStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SnapshotSystemPassingAlarmStddevSampFields)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarmStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SnapshotSystemPassingAlarmSumFields)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarmSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SnapshotSystemPassingAlarmVarPopFields)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarmVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SnapshotSystemPassingAlarmVarSampFields)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarmVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SnapshotSystemPassingAlarmVarianceFields)
	fc.Result = res
	return ec.marshalOSnapshotSystemPassingAlarmVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmAvgFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmAvgFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_snapshot_system_passing_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SnapshotSystemPassingAlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_passing_id(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_supervision_time(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_review_status(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_is_online(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_is_supervision(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSupervision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_snapshot_system_passing_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SnapshotSystemPassingAlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_passing_id(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_supervision_time(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_review_status(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_is_online(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_is_supervision(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSupervision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SnapshotSystemPassingAlarm)
	fc.Result = res
	return ec.marshalNSnapshotSystemPassingAlarm2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐSnapshotSystemPassingAlarmᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmStddevFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmStddevFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmStddevPopFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmStddevPopFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmStddevSampFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmStddevSampFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmSumFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmSumFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmVarPopFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmVarPopFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmVarSampFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmVarSampFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmVarianceFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SnapshotSystemPassingAlarmVarianceFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.SnapshotSystemPassingAlarmVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SnapshotSystemPassingAlarmVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecord_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehiclePassingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecord_vehicle_passing_record_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehiclePassingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePassingRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecord_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehiclePassingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecord_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model1.VehiclePassingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecord_passing_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehiclePassingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecord_registration_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehiclePassingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecord_camera_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehiclePassingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecord_pass_type(ctx context.Context, field graphql.CollectedField, obj *model1.VehiclePassingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecord_picture_url(ctx context.Context, field graphql.CollectedField, obj *model1.VehiclePassingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecord_review_status(ctx context.Context, field graphql.CollectedField, obj *model1.VehiclePassingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecord_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model1.VehiclePassingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecord_is_online(ctx context.Context, field graphql.CollectedField, obj *model1.VehiclePassingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecord_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehiclePassingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecord_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehiclePassingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecord_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehiclePassingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecord_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehiclePassingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecord_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehiclePassingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecord_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehiclePassingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehiclePassingRecordAggregateFields)
	fc.Result = res
	return ec.marshalOVehiclePassingRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehiclePassingRecordAvgFields)
	fc.Result = res
	return ec.marshalOVehiclePassingRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehiclePassingRecordMaxFields)
	fc.Result = res
	return ec.marshalOVehiclePassingRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehiclePassingRecordMinFields)
	fc.Result = res
	return ec.marshalOVehiclePassingRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehiclePassingRecordStddevFields)
	fc.Result = res
	return ec.marshalOVehiclePassingRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehiclePassingRecordStddevPopFields)
	fc.Result = res
	return ec.marshalOVehiclePassingRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehiclePassingRecordStddevSampFields)
	fc.Result = res
	return ec.marshalOVehiclePassingRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehiclePassingRecordSumFields)
	fc.Result = res
	return ec.marshalOVehiclePassingRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehiclePassingRecordVarPopFields)
	fc.Result = res
	return ec.marshalOVehiclePassingRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehiclePassingRecordVarSampFields)
	fc.Result = res
	return ec.marshalOVehiclePassingRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehiclePassingRecordVarianceFields)
	fc.Result = res
	return ec.marshalOVehiclePassingRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMaxFields_vehicle_passing_record_id(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePassingRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMaxFields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMaxFields_passing_time(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMaxFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMaxFields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMaxFields_pass_type(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMaxFields_picture_url(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMaxFields_review_status(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMaxFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMaxFields_is_online(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMinFields_vehicle_passing_record_id(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePassingRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMinFields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMinFields_passing_time(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMinFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMinFields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMinFields_pass_type(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMinFields_picture_url(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMinFields_review_status(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMinFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMinFields_is_online(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehiclePassingRecord)
	fc.Result = res
	return ec.marshalNVehiclePassingRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐVehiclePassingRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehiclePassingRecordVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehiclePassingRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehiclePassingRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBigintComparisonExp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBooleanComparisonExp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConstructionCameraBoolExp(ctx context.Context, obj interface{}) (model.ConstructionCameraBoolExp, error) {
	var it model.ConstructionCameraBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOConstructionCameraBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOConstructionCameraBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOConstructionCameraBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_camera_id"))
			it.ConstructionCameraID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "device_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device_name"))
			it.DeviceName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "port":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("port"))
			it.Port, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "device_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device_id"))
			it.DeviceID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_info_id"))
			it.ConstructionInfoID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConstructionCameraIncInput(ctx context.Context, obj interface{}) (model.ConstructionCameraIncInput, error) {
	var it model.ConstructionCameraIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConstructionCameraInsertInput(ctx context.Context, obj interface{}) (model.ConstructionCameraInsertInput, error) {
	var it model.ConstructionCameraInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "construction_camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_camera_id"))
			it.ConstructionCameraID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "device_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device_name"))
			it.DeviceName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "port":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("port"))
			it.Port, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "device_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device_id"))
			it.DeviceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_info_id"))
			it.ConstructionInfoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConstructionCameraOrderBy(ctx context.Context, obj interface{}) (model.ConstructionCameraOrderBy, error) {
	var it model.ConstructionCameraOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_camera_id"))
			it.ConstructionCameraID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "device_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device_name"))
			it.DeviceName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "port":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("port"))
			it.Port, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "device_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device_id"))
			it.DeviceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_info_id"))
			it.ConstructionInfoID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConstructionCameraSetInput(ctx context.Context, obj interface{}) (model.ConstructionCameraSetInput, error) {
	var it model.ConstructionCameraSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_camera_id"))
			it.ConstructionCameraID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "device_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device_name"))
			it.DeviceName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "port":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("port"))
			it.Port, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "device_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device_id"))
			it.DeviceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_info_id"))
			it.ConstructionInfoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConstructionInfoBoolExp(ctx context.Context, obj interface{}) (model.ConstructionInfoBoolExp, error) {
	var it model.ConstructionInfoBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOConstructionInfoBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOConstructionInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOConstructionInfoBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_info_id"))
			it.ConstructionInfoID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_name"))
			it.ProjectName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_code"))
			it.ProjectCode, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_start_date"))
			it.ContractStartDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_completion_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_completion_date"))
			it.ContractCompletionDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "build_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("build_agency"))
			it.BuildAgency, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_manager"))
			it.ProjectManager, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "map_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("map_coordinate"))
			it.MapCoordinate, err = ec.unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_agency"))
			it.ConstructionAgency, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_agency"))
			it.SupervisionAgency, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "device_installation_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device_installation_agency"))
			it.DeviceInstallationAgency, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "device_installation_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device_installation_location"))
			it.DeviceInstallationLocation, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_contract_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_contract_number"))
			it.ServiceContractNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_signing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_signing_time"))
			it.ContractSigningTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_activation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_activation_date"))
			it.ServiceActivationDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "proof_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proof_valid_date"))
			it.ProofValidDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "installation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installation_time"))
			it.InstallationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_name_tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_name_tag"))
			it.ProjectNameTag, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "import_export_quantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("import_export_quantity"))
			it.ImportExportQuantity, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deactivation_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deactivation_reason"))
			it.DeactivationReason, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "uninstalled_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uninstalled_reason"))
			it.UninstalledReason, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "proof_valid_date_until":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proof_valid_date_until"))
			it.ProofValidDateUntil, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_type"))
			it.ConstructionType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_person"))
			it.ContactPerson, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_phone"))
			it.ContactPhone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "finished":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finished"))
			it.Finished, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_city_directly":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_city_directly"))
			it.IsCityDirectly, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_installation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_installation"))
			it.IsInstallation, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConstructionInfoIncInput(ctx context.Context, obj interface{}) (model.ConstructionInfoIncInput, error) {
	var it model.ConstructionInfoIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_type"))
			it.ConstructionType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "finished":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finished"))
			it.Finished, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConstructionInfoInsertInput(ctx context.Context, obj interface{}) (model.ConstructionInfoInsertInput, error) {
	var it model.ConstructionInfoInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "construction_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_info_id"))
			it.ConstructionInfoID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_name"))
			it.ProjectName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_code"))
			it.ProjectCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_start_date"))
			it.ContractStartDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_completion_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_completion_date"))
			it.ContractCompletionDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "build_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("build_agency"))
			it.BuildAgency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_manager"))
			it.ProjectManager, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "map_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("map_coordinate"))
			it.MapCoordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_agency"))
			it.ConstructionAgency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_agency"))
			it.SupervisionAgency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "device_installation_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device_installation_agency"))
			it.DeviceInstallationAgency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "device_installation_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device_installation_location"))
			it.DeviceInstallationLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_contract_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_contract_number"))
			it.ServiceContractNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_signing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_signing_time"))
			it.ContractSigningTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_activation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_activation_date"))
			it.ServiceActivationDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "proof_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proof_valid_date"))
			it.ProofValidDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "installation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installation_time"))
			it.InstallationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_name_tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_name_tag"))
			it.ProjectNameTag, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "import_export_quantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("import_export_quantity"))
			it.ImportExportQuantity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deactivation_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deactivation_reason"))
			it.DeactivationReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "uninstalled_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uninstalled_reason"))
			it.UninstalledReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "proof_valid_date_until":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proof_valid_date_until"))
			it.ProofValidDateUntil, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_type"))
			it.ConstructionType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_person"))
			it.ContactPerson, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_phone"))
			it.ContactPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "finished":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finished"))
			it.Finished, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_city_directly":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_city_directly"))
			it.IsCityDirectly, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_installation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_installation"))
			it.IsInstallation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConstructionInfoOrderBy(ctx context.Context, obj interface{}) (model.ConstructionInfoOrderBy, error) {
	var it model.ConstructionInfoOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_info_id"))
			it.ConstructionInfoID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_name"))
			it.ProjectName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_code"))
			it.ProjectCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_start_date"))
			it.ContractStartDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_completion_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_completion_date"))
			it.ContractCompletionDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "build_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("build_agency"))
			it.BuildAgency, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_manager"))
			it.ProjectManager, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "map_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("map_coordinate"))
			it.MapCoordinate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_agency"))
			it.ConstructionAgency, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_agency"))
			it.SupervisionAgency, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "device_installation_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device_installation_agency"))
			it.DeviceInstallationAgency, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "device_installation_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device_installation_location"))
			it.DeviceInstallationLocation, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_contract_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_contract_number"))
			it.ServiceContractNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_signing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_signing_time"))
			it.ContractSigningTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_activation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_activation_date"))
			it.ServiceActivationDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "proof_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proof_valid_date"))
			it.ProofValidDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "installation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installation_time"))
			it.InstallationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_name_tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_name_tag"))
			it.ProjectNameTag, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "import_export_quantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("import_export_quantity"))
			it.ImportExportQuantity, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deactivation_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deactivation_reason"))
			it.DeactivationReason, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "uninstalled_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uninstalled_reason"))
			it.UninstalledReason, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "proof_valid_date_until":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proof_valid_date_until"))
			it.ProofValidDateUntil, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_type"))
			it.ConstructionType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_person"))
			it.ContactPerson, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_phone"))
			it.ContactPhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "finished":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finished"))
			it.Finished, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_city_directly":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_city_directly"))
			it.IsCityDirectly, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_installation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_installation"))
			it.IsInstallation, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConstructionInfoSetInput(ctx context.Context, obj interface{}) (model.ConstructionInfoSetInput, error) {
	var it model.ConstructionInfoSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_info_id"))
			it.ConstructionInfoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_name"))
			it.ProjectName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_code"))
			it.ProjectCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_start_date"))
			it.ContractStartDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_completion_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_completion_date"))
			it.ContractCompletionDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "build_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("build_agency"))
			it.BuildAgency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_manager"))
			it.ProjectManager, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "map_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("map_coordinate"))
			it.MapCoordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_agency"))
			it.ConstructionAgency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_agency"))
			it.SupervisionAgency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "device_installation_agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device_installation_agency"))
			it.DeviceInstallationAgency, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "device_installation_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device_installation_location"))
			it.DeviceInstallationLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_contract_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_contract_number"))
			it.ServiceContractNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_signing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_signing_time"))
			it.ContractSigningTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_activation_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_activation_date"))
			it.ServiceActivationDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "proof_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proof_valid_date"))
			it.ProofValidDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "installation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installation_time"))
			it.InstallationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "project_name_tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("project_name_tag"))
			it.ProjectNameTag, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "import_export_quantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("import_export_quantity"))
			it.ImportExportQuantity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deactivation_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deactivation_reason"))
			it.DeactivationReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "uninstalled_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uninstalled_reason"))
			it.UninstalledReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "proof_valid_date_until":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proof_valid_date_until"))
			it.ProofValidDateUntil, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_type"))
			it.ConstructionType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_person"))
			it.ContactPerson, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_phone"))
			it.ContactPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "finished":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finished"))
			it.Finished, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_city_directly":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_city_directly"))
			it.IsCityDirectly, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_installation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_installation"))
			it.IsInstallation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConstructionUploadPicBoolExp(ctx context.Context, obj interface{}) (model.ConstructionUploadPicBoolExp, error) {
	var it model.ConstructionUploadPicBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOConstructionUploadPicBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOConstructionUploadPicBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOConstructionUploadPicBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_upload_pic_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_upload_pic_id"))
			it.ConstructionUploadPicID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_info_id"))
			it.ConstructionInfoID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_url"))
			it.PictureURL, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConstructionUploadPicIncInput(ctx context.Context, obj interface{}) (model.ConstructionUploadPicIncInput, error) {
	var it model.ConstructionUploadPicIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConstructionUploadPicInsertInput(ctx context.Context, obj interface{}) (model.ConstructionUploadPicInsertInput, error) {
	var it model.ConstructionUploadPicInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "construction_upload_pic_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_upload_pic_id"))
			it.ConstructionUploadPicID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_info_id"))
			it.ConstructionInfoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_url"))
			it.PictureURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConstructionUploadPicOrderBy(ctx context.Context, obj interface{}) (model.ConstructionUploadPicOrderBy, error) {
	var it model.ConstructionUploadPicOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_upload_pic_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_upload_pic_id"))
			it.ConstructionUploadPicID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_info_id"))
			it.ConstructionInfoID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_url"))
			it.PictureURL, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConstructionUploadPicSetInput(ctx context.Context, obj interface{}) (model.ConstructionUploadPicSetInput, error) {
	var it model.ConstructionUploadPicSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_upload_pic_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_upload_pic_id"))
			it.ConstructionUploadPicID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_info_id"))
			it.ConstructionInfoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_url"))
			it.PictureURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatComparisonExp(ctx context.Context, obj interface{}) (model2.FloatComparisonExp, error) {
	var it model2.FloatComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntComparisonExp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJsonbComparisonExp(ctx context.Context, obj interface{}) (model2.JsonbComparisonExp, error) {
	var it model2.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNumericComparisonExp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOfflineRegistrationRecordBoolExp(ctx context.Context, obj interface{}) (model.OfflineRegistrationRecordBoolExp, error) {
	var it model.OfflineRegistrationRecordBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOOfflineRegistrationRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOOfflineRegistrationRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOOfflineRegistrationRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "offline_registration_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_registration_record_id"))
			it.OfflineRegistrationRecordID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "outage_registration_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outage_registration_id"))
			it.OutageRegistrationID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_content"))
			it.RegistrationContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registrant":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrant"))
			it.Registrant, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOfflineRegistrationRecordIncInput(ctx context.Context, obj interface{}) (model.OfflineRegistrationRecordIncInput, error) {
	var it model.OfflineRegistrationRecordIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOfflineRegistrationRecordInsertInput(ctx context.Context, obj interface{}) (model.OfflineRegistrationRecordInsertInput, error) {
	var it model.OfflineRegistrationRecordInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "offline_registration_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_registration_record_id"))
			it.OfflineRegistrationRecordID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "outage_registration_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outage_registration_id"))
			it.OutageRegistrationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_content"))
			it.RegistrationContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registrant":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrant"))
			it.Registrant, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOfflineRegistrationRecordOrderBy(ctx context.Context, obj interface{}) (model.OfflineRegistrationRecordOrderBy, error) {
	var it model.OfflineRegistrationRecordOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "offline_registration_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_registration_record_id"))
			it.OfflineRegistrationRecordID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "outage_registration_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outage_registration_id"))
			it.OutageRegistrationID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_content"))
			it.RegistrationContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registrant":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrant"))
			it.Registrant, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOfflineRegistrationRecordSetInput(ctx context.Context, obj interface{}) (model.OfflineRegistrationRecordSetInput, error) {
	var it model.OfflineRegistrationRecordSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "offline_registration_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_registration_record_id"))
			it.OfflineRegistrationRecordID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "outage_registration_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outage_registration_id"))
			it.OutageRegistrationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_content"))
			it.RegistrationContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registrant":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrant"))
			it.Registrant, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPointComparisonExp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSnapshotSystemPassingAlarmBoolExp(ctx context.Context, obj interface{}) (model.SnapshotSystemPassingAlarmBoolExp, error) {
	var it model.SnapshotSystemPassingAlarmBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOSnapshotSystemPassingAlarmBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOSnapshotSystemPassingAlarmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOSnapshotSystemPassingAlarmBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "snapshot_system_passing_alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("snapshot_system_passing_alarm_id"))
			it.SnapshotSystemPassingAlarmID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "passing_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passing_id"))
			it.PassingID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_time"))
			it.SupervisionTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervision":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervision"))
			it.IsSupervision, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSnapshotSystemPassingAlarmIncInput(ctx context.Context, obj interface{}) (model.SnapshotSystemPassingAlarmIncInput, error) {
	var it model.SnapshotSystemPassingAlarmIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSnapshotSystemPassingAlarmInsertInput(ctx context.Context, obj interface{}) (model.SnapshotSystemPassingAlarmInsertInput, error) {
	var it model.SnapshotSystemPassingAlarmInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "snapshot_system_passing_alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("snapshot_system_passing_alarm_id"))
			it.SnapshotSystemPassingAlarmID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "passing_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passing_id"))
			it.PassingID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_time"))
			it.SupervisionTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervision":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervision"))
			it.IsSupervision, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSnapshotSystemPassingAlarmOrderBy(ctx context.Context, obj interface{}) (model.SnapshotSystemPassingAlarmOrderBy, error) {
	var it model.SnapshotSystemPassingAlarmOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "snapshot_system_passing_alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("snapshot_system_passing_alarm_id"))
			it.SnapshotSystemPassingAlarmID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "passing_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passing_id"))
			it.PassingID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_time"))
			it.SupervisionTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervision":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervision"))
			it.IsSupervision, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSnapshotSystemPassingAlarmSetInput(ctx context.Context, obj interface{}) (model.SnapshotSystemPassingAlarmSetInput, error) {
	var it model.SnapshotSystemPassingAlarmSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "snapshot_system_passing_alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("snapshot_system_passing_alarm_id"))
			it.SnapshotSystemPassingAlarmID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passing_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passing_id"))
			it.PassingID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_time"))
			it.SupervisionTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervision":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervision"))
			it.IsSupervision, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringComparisonExp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimestamptzComparisonExp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehiclePassingRecordBoolExp(ctx context.Context, obj interface{}) (model.VehiclePassingRecordBoolExp, error) {
	var it model.VehiclePassingRecordBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVehiclePassingRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVehiclePassingRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVehiclePassingRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_passing_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_passing_record_id"))
			it.VehiclePassingRecordID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "passing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passing_time"))
			it.PassingTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "pass_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pass_type"))
			it.PassType, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_url"))
			it.PictureURL, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehiclePassingRecordIncInput(ctx context.Context, obj interface{}) (model.VehiclePassingRecordIncInput, error) {
	var it model.VehiclePassingRecordIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehiclePassingRecordInsertInput(ctx context.Context, obj interface{}) (model.VehiclePassingRecordInsertInput, error) {
	var it model.VehiclePassingRecordInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "vehicle_passing_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_passing_record_id"))
			it.VehiclePassingRecordID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passing_time"))
			it.PassingTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pass_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pass_type"))
			it.PassType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_url"))
			it.PictureURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehiclePassingRecordOrderBy(ctx context.Context, obj interface{}) (model.VehiclePassingRecordOrderBy, error) {
	var it model.VehiclePassingRecordOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_passing_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_passing_record_id"))
			it.VehiclePassingRecordID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "passing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passing_time"))
			it.PassingTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pass_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pass_type"))
			it.PassType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_url"))
			it.PictureURL, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehiclePassingRecordSetInput(ctx context.Context, obj interface{}) (model.VehiclePassingRecordSetInput, error) {
	var it model.VehiclePassingRecordSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_passing_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_passing_record_id"))
			it.VehiclePassingRecordID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passing_time"))
			it.PassingTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pass_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pass_type"))
			it.PassType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_url"))
			it.PictureURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var constructionCameraImplementors = []string{"ConstructionCamera"}

func (ec *executionContext) _ConstructionCamera(ctx context.Context, sel ast.SelectionSet, obj *model1.ConstructionCamera) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionCameraImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionCamera")
		case "id":
			out.Values[i] = ec._ConstructionCamera_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "construction_camera_id":
			out.Values[i] = ec._ConstructionCamera_construction_camera_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "device_name":
			out.Values[i] = ec._ConstructionCamera_device_name(ctx, field, obj)
		case "ip_address":
			out.Values[i] = ec._ConstructionCamera_ip_address(ctx, field, obj)
		case "port":
			out.Values[i] = ec._ConstructionCamera_port(ctx, field, obj)
		case "device_id":
			out.Values[i] = ec._ConstructionCamera_device_id(ctx, field, obj)
		case "construction_info_id":
			out.Values[i] = ec._ConstructionCamera_construction_info_id(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._ConstructionCamera_sim_number(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._ConstructionCamera_registration_time(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._ConstructionCamera_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._ConstructionCamera_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._ConstructionCamera_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._ConstructionCamera_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._ConstructionCamera_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._ConstructionCamera_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._ConstructionCamera_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionCameraAggregateImplementors = []string{"ConstructionCameraAggregate"}

func (ec *executionContext) _ConstructionCameraAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionCameraAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionCameraAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionCameraAggregate")
		case "aggregate":
			out.Values[i] = ec._ConstructionCameraAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionCameraAggregateFieldsImplementors = []string{"ConstructionCameraAggregateFields"}

func (ec *executionContext) _ConstructionCameraAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionCameraAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionCameraAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionCameraAggregateFields")
		case "avg":
			out.Values[i] = ec._ConstructionCameraAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._ConstructionCameraAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._ConstructionCameraAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._ConstructionCameraAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._ConstructionCameraAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._ConstructionCameraAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._ConstructionCameraAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._ConstructionCameraAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._ConstructionCameraAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._ConstructionCameraAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._ConstructionCameraAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionCameraAvgFieldsImplementors = []string{"ConstructionCameraAvgFields"}

func (ec *executionContext) _ConstructionCameraAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionCameraAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionCameraAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionCameraAvgFields")
		case "id":
			out.Values[i] = ec._ConstructionCameraAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionCameraMaxFieldsImplementors = []string{"ConstructionCameraMaxFields"}

func (ec *executionContext) _ConstructionCameraMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionCameraMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionCameraMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionCameraMaxFields")
		case "id":
			out.Values[i] = ec._ConstructionCameraMaxFields_id(ctx, field, obj)
		case "construction_camera_id":
			out.Values[i] = ec._ConstructionCameraMaxFields_construction_camera_id(ctx, field, obj)
		case "device_name":
			out.Values[i] = ec._ConstructionCameraMaxFields_device_name(ctx, field, obj)
		case "ip_address":
			out.Values[i] = ec._ConstructionCameraMaxFields_ip_address(ctx, field, obj)
		case "port":
			out.Values[i] = ec._ConstructionCameraMaxFields_port(ctx, field, obj)
		case "device_id":
			out.Values[i] = ec._ConstructionCameraMaxFields_device_id(ctx, field, obj)
		case "construction_info_id":
			out.Values[i] = ec._ConstructionCameraMaxFields_construction_info_id(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._ConstructionCameraMaxFields_sim_number(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._ConstructionCameraMaxFields_registration_time(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._ConstructionCameraMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._ConstructionCameraMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._ConstructionCameraMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._ConstructionCameraMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._ConstructionCameraMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._ConstructionCameraMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._ConstructionCameraMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionCameraMinFieldsImplementors = []string{"ConstructionCameraMinFields"}

func (ec *executionContext) _ConstructionCameraMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionCameraMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionCameraMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionCameraMinFields")
		case "id":
			out.Values[i] = ec._ConstructionCameraMinFields_id(ctx, field, obj)
		case "construction_camera_id":
			out.Values[i] = ec._ConstructionCameraMinFields_construction_camera_id(ctx, field, obj)
		case "device_name":
			out.Values[i] = ec._ConstructionCameraMinFields_device_name(ctx, field, obj)
		case "ip_address":
			out.Values[i] = ec._ConstructionCameraMinFields_ip_address(ctx, field, obj)
		case "port":
			out.Values[i] = ec._ConstructionCameraMinFields_port(ctx, field, obj)
		case "device_id":
			out.Values[i] = ec._ConstructionCameraMinFields_device_id(ctx, field, obj)
		case "construction_info_id":
			out.Values[i] = ec._ConstructionCameraMinFields_construction_info_id(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._ConstructionCameraMinFields_sim_number(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._ConstructionCameraMinFields_registration_time(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._ConstructionCameraMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._ConstructionCameraMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._ConstructionCameraMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._ConstructionCameraMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._ConstructionCameraMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._ConstructionCameraMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._ConstructionCameraMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionCameraMutationResponseImplementors = []string{"ConstructionCameraMutationResponse"}

func (ec *executionContext) _ConstructionCameraMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionCameraMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionCameraMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionCameraMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._ConstructionCameraMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._ConstructionCameraMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionCameraStddevFieldsImplementors = []string{"ConstructionCameraStddevFields"}

func (ec *executionContext) _ConstructionCameraStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionCameraStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionCameraStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionCameraStddevFields")
		case "id":
			out.Values[i] = ec._ConstructionCameraStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionCameraStddevPopFieldsImplementors = []string{"ConstructionCameraStddevPopFields"}

func (ec *executionContext) _ConstructionCameraStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionCameraStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionCameraStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionCameraStddevPopFields")
		case "id":
			out.Values[i] = ec._ConstructionCameraStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionCameraStddevSampFieldsImplementors = []string{"ConstructionCameraStddevSampFields"}

func (ec *executionContext) _ConstructionCameraStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionCameraStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionCameraStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionCameraStddevSampFields")
		case "id":
			out.Values[i] = ec._ConstructionCameraStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionCameraSumFieldsImplementors = []string{"ConstructionCameraSumFields"}

func (ec *executionContext) _ConstructionCameraSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionCameraSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionCameraSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionCameraSumFields")
		case "id":
			out.Values[i] = ec._ConstructionCameraSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionCameraVarPopFieldsImplementors = []string{"ConstructionCameraVarPopFields"}

func (ec *executionContext) _ConstructionCameraVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionCameraVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionCameraVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionCameraVarPopFields")
		case "id":
			out.Values[i] = ec._ConstructionCameraVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionCameraVarSampFieldsImplementors = []string{"ConstructionCameraVarSampFields"}

func (ec *executionContext) _ConstructionCameraVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionCameraVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionCameraVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionCameraVarSampFields")
		case "id":
			out.Values[i] = ec._ConstructionCameraVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionCameraVarianceFieldsImplementors = []string{"ConstructionCameraVarianceFields"}

func (ec *executionContext) _ConstructionCameraVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionCameraVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionCameraVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionCameraVarianceFields")
		case "id":
			out.Values[i] = ec._ConstructionCameraVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionInfoImplementors = []string{"ConstructionInfo"}

func (ec *executionContext) _ConstructionInfo(ctx context.Context, sel ast.SelectionSet, obj *model1.ConstructionInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionInfo")
		case "id":
			out.Values[i] = ec._ConstructionInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "construction_info_id":
			out.Values[i] = ec._ConstructionInfo_construction_info_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "project_name":
			out.Values[i] = ec._ConstructionInfo_project_name(ctx, field, obj)
		case "project_code":
			out.Values[i] = ec._ConstructionInfo_project_code(ctx, field, obj)
		case "contract_start_date":
			out.Values[i] = ec._ConstructionInfo_contract_start_date(ctx, field, obj)
		case "contract_completion_date":
			out.Values[i] = ec._ConstructionInfo_contract_completion_date(ctx, field, obj)
		case "build_agency":
			out.Values[i] = ec._ConstructionInfo_build_agency(ctx, field, obj)
		case "project_manager":
			out.Values[i] = ec._ConstructionInfo_project_manager(ctx, field, obj)
		case "area_id":
			out.Values[i] = ec._ConstructionInfo_area_id(ctx, field, obj)
		case "address":
			out.Values[i] = ec._ConstructionInfo_address(ctx, field, obj)
		case "map_coordinate":
			out.Values[i] = ec._ConstructionInfo_map_coordinate(ctx, field, obj)
		case "construction_agency":
			out.Values[i] = ec._ConstructionInfo_construction_agency(ctx, field, obj)
		case "supervision_agency":
			out.Values[i] = ec._ConstructionInfo_supervision_agency(ctx, field, obj)
		case "device_installation_agency":
			out.Values[i] = ec._ConstructionInfo_device_installation_agency(ctx, field, obj)
		case "device_installation_location":
			out.Values[i] = ec._ConstructionInfo_device_installation_location(ctx, field, obj)
		case "service_contract_number":
			out.Values[i] = ec._ConstructionInfo_service_contract_number(ctx, field, obj)
		case "contract_signing_time":
			out.Values[i] = ec._ConstructionInfo_contract_signing_time(ctx, field, obj)
		case "service_activation_date":
			out.Values[i] = ec._ConstructionInfo_service_activation_date(ctx, field, obj)
		case "proof_valid_date":
			out.Values[i] = ec._ConstructionInfo_proof_valid_date(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._ConstructionInfo_coordinate(ctx, field, obj)
		case "installation_time":
			out.Values[i] = ec._ConstructionInfo_installation_time(ctx, field, obj)
		case "project_name_tag":
			out.Values[i] = ec._ConstructionInfo_project_name_tag(ctx, field, obj)
		case "import_export_quantity":
			out.Values[i] = ec._ConstructionInfo_import_export_quantity(ctx, field, obj)
		case "deactivation_reason":
			out.Values[i] = ec._ConstructionInfo_deactivation_reason(ctx, field, obj)
		case "uninstalled_reason":
			out.Values[i] = ec._ConstructionInfo_uninstalled_reason(ctx, field, obj)
		case "proof_valid_date_until":
			out.Values[i] = ec._ConstructionInfo_proof_valid_date_until(ctx, field, obj)
		case "construction_type":
			out.Values[i] = ec._ConstructionInfo_construction_type(ctx, field, obj)
		case "contact_person":
			out.Values[i] = ec._ConstructionInfo_contact_person(ctx, field, obj)
		case "contact_phone":
			out.Values[i] = ec._ConstructionInfo_contact_phone(ctx, field, obj)
		case "finished":
			out.Values[i] = ec._ConstructionInfo_finished(ctx, field, obj)
		case "is_city_directly":
			out.Values[i] = ec._ConstructionInfo_is_city_directly(ctx, field, obj)
		case "is_installation":
			out.Values[i] = ec._ConstructionInfo_is_installation(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._ConstructionInfo_is_deleted(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._ConstructionInfo_registration_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._ConstructionInfo_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._ConstructionInfo_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._ConstructionInfo_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._ConstructionInfo_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._ConstructionInfo_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._ConstructionInfo_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionInfoAggregateImplementors = []string{"ConstructionInfoAggregate"}

func (ec *executionContext) _ConstructionInfoAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionInfoAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionInfoAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionInfoAggregate")
		case "aggregate":
			out.Values[i] = ec._ConstructionInfoAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionInfoAggregateFieldsImplementors = []string{"ConstructionInfoAggregateFields"}

func (ec *executionContext) _ConstructionInfoAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionInfoAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionInfoAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionInfoAggregateFields")
		case "avg":
			out.Values[i] = ec._ConstructionInfoAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._ConstructionInfoAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._ConstructionInfoAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._ConstructionInfoAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._ConstructionInfoAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._ConstructionInfoAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._ConstructionInfoAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._ConstructionInfoAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._ConstructionInfoAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._ConstructionInfoAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._ConstructionInfoAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionInfoAvgFieldsImplementors = []string{"ConstructionInfoAvgFields"}

func (ec *executionContext) _ConstructionInfoAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionInfoAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionInfoAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionInfoAvgFields")
		case "id":
			out.Values[i] = ec._ConstructionInfoAvgFields_id(ctx, field, obj)
		case "construction_type":
			out.Values[i] = ec._ConstructionInfoAvgFields_construction_type(ctx, field, obj)
		case "finished":
			out.Values[i] = ec._ConstructionInfoAvgFields_finished(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionInfoMaxFieldsImplementors = []string{"ConstructionInfoMaxFields"}

func (ec *executionContext) _ConstructionInfoMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionInfoMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionInfoMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionInfoMaxFields")
		case "id":
			out.Values[i] = ec._ConstructionInfoMaxFields_id(ctx, field, obj)
		case "construction_info_id":
			out.Values[i] = ec._ConstructionInfoMaxFields_construction_info_id(ctx, field, obj)
		case "project_name":
			out.Values[i] = ec._ConstructionInfoMaxFields_project_name(ctx, field, obj)
		case "project_code":
			out.Values[i] = ec._ConstructionInfoMaxFields_project_code(ctx, field, obj)
		case "contract_start_date":
			out.Values[i] = ec._ConstructionInfoMaxFields_contract_start_date(ctx, field, obj)
		case "contract_completion_date":
			out.Values[i] = ec._ConstructionInfoMaxFields_contract_completion_date(ctx, field, obj)
		case "build_agency":
			out.Values[i] = ec._ConstructionInfoMaxFields_build_agency(ctx, field, obj)
		case "project_manager":
			out.Values[i] = ec._ConstructionInfoMaxFields_project_manager(ctx, field, obj)
		case "area_id":
			out.Values[i] = ec._ConstructionInfoMaxFields_area_id(ctx, field, obj)
		case "address":
			out.Values[i] = ec._ConstructionInfoMaxFields_address(ctx, field, obj)
		case "map_coordinate":
			out.Values[i] = ec._ConstructionInfoMaxFields_map_coordinate(ctx, field, obj)
		case "construction_agency":
			out.Values[i] = ec._ConstructionInfoMaxFields_construction_agency(ctx, field, obj)
		case "supervision_agency":
			out.Values[i] = ec._ConstructionInfoMaxFields_supervision_agency(ctx, field, obj)
		case "device_installation_agency":
			out.Values[i] = ec._ConstructionInfoMaxFields_device_installation_agency(ctx, field, obj)
		case "device_installation_location":
			out.Values[i] = ec._ConstructionInfoMaxFields_device_installation_location(ctx, field, obj)
		case "service_contract_number":
			out.Values[i] = ec._ConstructionInfoMaxFields_service_contract_number(ctx, field, obj)
		case "contract_signing_time":
			out.Values[i] = ec._ConstructionInfoMaxFields_contract_signing_time(ctx, field, obj)
		case "service_activation_date":
			out.Values[i] = ec._ConstructionInfoMaxFields_service_activation_date(ctx, field, obj)
		case "proof_valid_date":
			out.Values[i] = ec._ConstructionInfoMaxFields_proof_valid_date(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._ConstructionInfoMaxFields_coordinate(ctx, field, obj)
		case "installation_time":
			out.Values[i] = ec._ConstructionInfoMaxFields_installation_time(ctx, field, obj)
		case "project_name_tag":
			out.Values[i] = ec._ConstructionInfoMaxFields_project_name_tag(ctx, field, obj)
		case "import_export_quantity":
			out.Values[i] = ec._ConstructionInfoMaxFields_import_export_quantity(ctx, field, obj)
		case "deactivation_reason":
			out.Values[i] = ec._ConstructionInfoMaxFields_deactivation_reason(ctx, field, obj)
		case "uninstalled_reason":
			out.Values[i] = ec._ConstructionInfoMaxFields_uninstalled_reason(ctx, field, obj)
		case "proof_valid_date_until":
			out.Values[i] = ec._ConstructionInfoMaxFields_proof_valid_date_until(ctx, field, obj)
		case "construction_type":
			out.Values[i] = ec._ConstructionInfoMaxFields_construction_type(ctx, field, obj)
		case "contact_person":
			out.Values[i] = ec._ConstructionInfoMaxFields_contact_person(ctx, field, obj)
		case "contact_phone":
			out.Values[i] = ec._ConstructionInfoMaxFields_contact_phone(ctx, field, obj)
		case "finished":
			out.Values[i] = ec._ConstructionInfoMaxFields_finished(ctx, field, obj)
		case "is_city_directly":
			out.Values[i] = ec._ConstructionInfoMaxFields_is_city_directly(ctx, field, obj)
		case "is_installation":
			out.Values[i] = ec._ConstructionInfoMaxFields_is_installation(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._ConstructionInfoMaxFields_is_deleted(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._ConstructionInfoMaxFields_registration_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._ConstructionInfoMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._ConstructionInfoMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._ConstructionInfoMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._ConstructionInfoMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._ConstructionInfoMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._ConstructionInfoMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionInfoMinFieldsImplementors = []string{"ConstructionInfoMinFields"}

func (ec *executionContext) _ConstructionInfoMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionInfoMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionInfoMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionInfoMinFields")
		case "id":
			out.Values[i] = ec._ConstructionInfoMinFields_id(ctx, field, obj)
		case "construction_info_id":
			out.Values[i] = ec._ConstructionInfoMinFields_construction_info_id(ctx, field, obj)
		case "project_name":
			out.Values[i] = ec._ConstructionInfoMinFields_project_name(ctx, field, obj)
		case "project_code":
			out.Values[i] = ec._ConstructionInfoMinFields_project_code(ctx, field, obj)
		case "contract_start_date":
			out.Values[i] = ec._ConstructionInfoMinFields_contract_start_date(ctx, field, obj)
		case "contract_completion_date":
			out.Values[i] = ec._ConstructionInfoMinFields_contract_completion_date(ctx, field, obj)
		case "build_agency":
			out.Values[i] = ec._ConstructionInfoMinFields_build_agency(ctx, field, obj)
		case "project_manager":
			out.Values[i] = ec._ConstructionInfoMinFields_project_manager(ctx, field, obj)
		case "area_id":
			out.Values[i] = ec._ConstructionInfoMinFields_area_id(ctx, field, obj)
		case "address":
			out.Values[i] = ec._ConstructionInfoMinFields_address(ctx, field, obj)
		case "map_coordinate":
			out.Values[i] = ec._ConstructionInfoMinFields_map_coordinate(ctx, field, obj)
		case "construction_agency":
			out.Values[i] = ec._ConstructionInfoMinFields_construction_agency(ctx, field, obj)
		case "supervision_agency":
			out.Values[i] = ec._ConstructionInfoMinFields_supervision_agency(ctx, field, obj)
		case "device_installation_agency":
			out.Values[i] = ec._ConstructionInfoMinFields_device_installation_agency(ctx, field, obj)
		case "device_installation_location":
			out.Values[i] = ec._ConstructionInfoMinFields_device_installation_location(ctx, field, obj)
		case "service_contract_number":
			out.Values[i] = ec._ConstructionInfoMinFields_service_contract_number(ctx, field, obj)
		case "contract_signing_time":
			out.Values[i] = ec._ConstructionInfoMinFields_contract_signing_time(ctx, field, obj)
		case "service_activation_date":
			out.Values[i] = ec._ConstructionInfoMinFields_service_activation_date(ctx, field, obj)
		case "proof_valid_date":
			out.Values[i] = ec._ConstructionInfoMinFields_proof_valid_date(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._ConstructionInfoMinFields_coordinate(ctx, field, obj)
		case "installation_time":
			out.Values[i] = ec._ConstructionInfoMinFields_installation_time(ctx, field, obj)
		case "project_name_tag":
			out.Values[i] = ec._ConstructionInfoMinFields_project_name_tag(ctx, field, obj)
		case "import_export_quantity":
			out.Values[i] = ec._ConstructionInfoMinFields_import_export_quantity(ctx, field, obj)
		case "deactivation_reason":
			out.Values[i] = ec._ConstructionInfoMinFields_deactivation_reason(ctx, field, obj)
		case "uninstalled_reason":
			out.Values[i] = ec._ConstructionInfoMinFields_uninstalled_reason(ctx, field, obj)
		case "proof_valid_date_until":
			out.Values[i] = ec._ConstructionInfoMinFields_proof_valid_date_until(ctx, field, obj)
		case "construction_type":
			out.Values[i] = ec._ConstructionInfoMinFields_construction_type(ctx, field, obj)
		case "contact_person":
			out.Values[i] = ec._ConstructionInfoMinFields_contact_person(ctx, field, obj)
		case "contact_phone":
			out.Values[i] = ec._ConstructionInfoMinFields_contact_phone(ctx, field, obj)
		case "finished":
			out.Values[i] = ec._ConstructionInfoMinFields_finished(ctx, field, obj)
		case "is_city_directly":
			out.Values[i] = ec._ConstructionInfoMinFields_is_city_directly(ctx, field, obj)
		case "is_installation":
			out.Values[i] = ec._ConstructionInfoMinFields_is_installation(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._ConstructionInfoMinFields_is_deleted(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._ConstructionInfoMinFields_registration_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._ConstructionInfoMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._ConstructionInfoMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._ConstructionInfoMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._ConstructionInfoMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._ConstructionInfoMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._ConstructionInfoMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionInfoMutationResponseImplementors = []string{"ConstructionInfoMutationResponse"}

func (ec *executionContext) _ConstructionInfoMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionInfoMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionInfoMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionInfoMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._ConstructionInfoMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._ConstructionInfoMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionInfoStddevFieldsImplementors = []string{"ConstructionInfoStddevFields"}

func (ec *executionContext) _ConstructionInfoStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionInfoStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionInfoStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionInfoStddevFields")
		case "id":
			out.Values[i] = ec._ConstructionInfoStddevFields_id(ctx, field, obj)
		case "construction_type":
			out.Values[i] = ec._ConstructionInfoStddevFields_construction_type(ctx, field, obj)
		case "finished":
			out.Values[i] = ec._ConstructionInfoStddevFields_finished(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionInfoStddevPopFieldsImplementors = []string{"ConstructionInfoStddevPopFields"}

func (ec *executionContext) _ConstructionInfoStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionInfoStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionInfoStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionInfoStddevPopFields")
		case "id":
			out.Values[i] = ec._ConstructionInfoStddevPopFields_id(ctx, field, obj)
		case "construction_type":
			out.Values[i] = ec._ConstructionInfoStddevPopFields_construction_type(ctx, field, obj)
		case "finished":
			out.Values[i] = ec._ConstructionInfoStddevPopFields_finished(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionInfoStddevSampFieldsImplementors = []string{"ConstructionInfoStddevSampFields"}

func (ec *executionContext) _ConstructionInfoStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionInfoStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionInfoStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionInfoStddevSampFields")
		case "id":
			out.Values[i] = ec._ConstructionInfoStddevSampFields_id(ctx, field, obj)
		case "construction_type":
			out.Values[i] = ec._ConstructionInfoStddevSampFields_construction_type(ctx, field, obj)
		case "finished":
			out.Values[i] = ec._ConstructionInfoStddevSampFields_finished(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionInfoSumFieldsImplementors = []string{"ConstructionInfoSumFields"}

func (ec *executionContext) _ConstructionInfoSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionInfoSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionInfoSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionInfoSumFields")
		case "id":
			out.Values[i] = ec._ConstructionInfoSumFields_id(ctx, field, obj)
		case "construction_type":
			out.Values[i] = ec._ConstructionInfoSumFields_construction_type(ctx, field, obj)
		case "finished":
			out.Values[i] = ec._ConstructionInfoSumFields_finished(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionInfoVarPopFieldsImplementors = []string{"ConstructionInfoVarPopFields"}

func (ec *executionContext) _ConstructionInfoVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionInfoVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionInfoVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionInfoVarPopFields")
		case "id":
			out.Values[i] = ec._ConstructionInfoVarPopFields_id(ctx, field, obj)
		case "construction_type":
			out.Values[i] = ec._ConstructionInfoVarPopFields_construction_type(ctx, field, obj)
		case "finished":
			out.Values[i] = ec._ConstructionInfoVarPopFields_finished(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionInfoVarSampFieldsImplementors = []string{"ConstructionInfoVarSampFields"}

func (ec *executionContext) _ConstructionInfoVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionInfoVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionInfoVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionInfoVarSampFields")
		case "id":
			out.Values[i] = ec._ConstructionInfoVarSampFields_id(ctx, field, obj)
		case "construction_type":
			out.Values[i] = ec._ConstructionInfoVarSampFields_construction_type(ctx, field, obj)
		case "finished":
			out.Values[i] = ec._ConstructionInfoVarSampFields_finished(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionInfoVarianceFieldsImplementors = []string{"ConstructionInfoVarianceFields"}

func (ec *executionContext) _ConstructionInfoVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionInfoVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionInfoVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionInfoVarianceFields")
		case "id":
			out.Values[i] = ec._ConstructionInfoVarianceFields_id(ctx, field, obj)
		case "construction_type":
			out.Values[i] = ec._ConstructionInfoVarianceFields_construction_type(ctx, field, obj)
		case "finished":
			out.Values[i] = ec._ConstructionInfoVarianceFields_finished(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionUploadPicImplementors = []string{"ConstructionUploadPic"}

func (ec *executionContext) _ConstructionUploadPic(ctx context.Context, sel ast.SelectionSet, obj *model1.ConstructionUploadPic) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionUploadPicImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionUploadPic")
		case "id":
			out.Values[i] = ec._ConstructionUploadPic_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "construction_upload_pic_id":
			out.Values[i] = ec._ConstructionUploadPic_construction_upload_pic_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "construction_info_id":
			out.Values[i] = ec._ConstructionUploadPic_construction_info_id(ctx, field, obj)
		case "picture_url":
			out.Values[i] = ec._ConstructionUploadPic_picture_url(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._ConstructionUploadPic_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._ConstructionUploadPic_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._ConstructionUploadPic_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._ConstructionUploadPic_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._ConstructionUploadPic_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._ConstructionUploadPic_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._ConstructionUploadPic_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionUploadPicAggregateImplementors = []string{"ConstructionUploadPicAggregate"}

func (ec *executionContext) _ConstructionUploadPicAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionUploadPicAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionUploadPicAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionUploadPicAggregate")
		case "aggregate":
			out.Values[i] = ec._ConstructionUploadPicAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionUploadPicAggregateFieldsImplementors = []string{"ConstructionUploadPicAggregateFields"}

func (ec *executionContext) _ConstructionUploadPicAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionUploadPicAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionUploadPicAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionUploadPicAggregateFields")
		case "avg":
			out.Values[i] = ec._ConstructionUploadPicAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._ConstructionUploadPicAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._ConstructionUploadPicAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._ConstructionUploadPicAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._ConstructionUploadPicAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._ConstructionUploadPicAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._ConstructionUploadPicAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._ConstructionUploadPicAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._ConstructionUploadPicAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._ConstructionUploadPicAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._ConstructionUploadPicAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionUploadPicAvgFieldsImplementors = []string{"ConstructionUploadPicAvgFields"}

func (ec *executionContext) _ConstructionUploadPicAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionUploadPicAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionUploadPicAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionUploadPicAvgFields")
		case "id":
			out.Values[i] = ec._ConstructionUploadPicAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionUploadPicMaxFieldsImplementors = []string{"ConstructionUploadPicMaxFields"}

func (ec *executionContext) _ConstructionUploadPicMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionUploadPicMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionUploadPicMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionUploadPicMaxFields")
		case "id":
			out.Values[i] = ec._ConstructionUploadPicMaxFields_id(ctx, field, obj)
		case "construction_upload_pic_id":
			out.Values[i] = ec._ConstructionUploadPicMaxFields_construction_upload_pic_id(ctx, field, obj)
		case "construction_info_id":
			out.Values[i] = ec._ConstructionUploadPicMaxFields_construction_info_id(ctx, field, obj)
		case "picture_url":
			out.Values[i] = ec._ConstructionUploadPicMaxFields_picture_url(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._ConstructionUploadPicMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._ConstructionUploadPicMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._ConstructionUploadPicMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._ConstructionUploadPicMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._ConstructionUploadPicMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._ConstructionUploadPicMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._ConstructionUploadPicMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionUploadPicMinFieldsImplementors = []string{"ConstructionUploadPicMinFields"}

func (ec *executionContext) _ConstructionUploadPicMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionUploadPicMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionUploadPicMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionUploadPicMinFields")
		case "id":
			out.Values[i] = ec._ConstructionUploadPicMinFields_id(ctx, field, obj)
		case "construction_upload_pic_id":
			out.Values[i] = ec._ConstructionUploadPicMinFields_construction_upload_pic_id(ctx, field, obj)
		case "construction_info_id":
			out.Values[i] = ec._ConstructionUploadPicMinFields_construction_info_id(ctx, field, obj)
		case "picture_url":
			out.Values[i] = ec._ConstructionUploadPicMinFields_picture_url(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._ConstructionUploadPicMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._ConstructionUploadPicMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._ConstructionUploadPicMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._ConstructionUploadPicMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._ConstructionUploadPicMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._ConstructionUploadPicMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._ConstructionUploadPicMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionUploadPicMutationResponseImplementors = []string{"ConstructionUploadPicMutationResponse"}

func (ec *executionContext) _ConstructionUploadPicMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionUploadPicMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionUploadPicMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionUploadPicMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._ConstructionUploadPicMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._ConstructionUploadPicMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionUploadPicStddevFieldsImplementors = []string{"ConstructionUploadPicStddevFields"}

func (ec *executionContext) _ConstructionUploadPicStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionUploadPicStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionUploadPicStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionUploadPicStddevFields")
		case "id":
			out.Values[i] = ec._ConstructionUploadPicStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionUploadPicStddevPopFieldsImplementors = []string{"ConstructionUploadPicStddevPopFields"}

func (ec *executionContext) _ConstructionUploadPicStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionUploadPicStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionUploadPicStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionUploadPicStddevPopFields")
		case "id":
			out.Values[i] = ec._ConstructionUploadPicStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionUploadPicStddevSampFieldsImplementors = []string{"ConstructionUploadPicStddevSampFields"}

func (ec *executionContext) _ConstructionUploadPicStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionUploadPicStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionUploadPicStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionUploadPicStddevSampFields")
		case "id":
			out.Values[i] = ec._ConstructionUploadPicStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionUploadPicSumFieldsImplementors = []string{"ConstructionUploadPicSumFields"}

func (ec *executionContext) _ConstructionUploadPicSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionUploadPicSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionUploadPicSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionUploadPicSumFields")
		case "id":
			out.Values[i] = ec._ConstructionUploadPicSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionUploadPicVarPopFieldsImplementors = []string{"ConstructionUploadPicVarPopFields"}

func (ec *executionContext) _ConstructionUploadPicVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionUploadPicVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionUploadPicVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionUploadPicVarPopFields")
		case "id":
			out.Values[i] = ec._ConstructionUploadPicVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionUploadPicVarSampFieldsImplementors = []string{"ConstructionUploadPicVarSampFields"}

func (ec *executionContext) _ConstructionUploadPicVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionUploadPicVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionUploadPicVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionUploadPicVarSampFields")
		case "id":
			out.Values[i] = ec._ConstructionUploadPicVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constructionUploadPicVarianceFieldsImplementors = []string{"ConstructionUploadPicVarianceFields"}

func (ec *executionContext) _ConstructionUploadPicVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.ConstructionUploadPicVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constructionUploadPicVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstructionUploadPicVarianceFields")
		case "id":
			out.Values[i] = ec._ConstructionUploadPicVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_construction_camera":
			out.Values[i] = ec._Mutation_delete_construction_camera(ctx, field)
		case "delete_construction_camera_by_pk":
			out.Values[i] = ec._Mutation_delete_construction_camera_by_pk(ctx, field)
		case "insert_construction_camera":
			out.Values[i] = ec._Mutation_insert_construction_camera(ctx, field)
		case "insert_construction_camera_one":
			out.Values[i] = ec._Mutation_insert_construction_camera_one(ctx, field)
		case "update_construction_camera":
			out.Values[i] = ec._Mutation_update_construction_camera(ctx, field)
		case "update_construction_camera_by_pk":
			out.Values[i] = ec._Mutation_update_construction_camera_by_pk(ctx, field)
		case "update_construction_camera_by_union_pk":
			out.Values[i] = ec._Mutation_update_construction_camera_by_union_pk(ctx, field)
		case "delete_construction_camera_by_union_pk":
			out.Values[i] = ec._Mutation_delete_construction_camera_by_union_pk(ctx, field)
		case "delete_construction_info":
			out.Values[i] = ec._Mutation_delete_construction_info(ctx, field)
		case "delete_construction_info_by_pk":
			out.Values[i] = ec._Mutation_delete_construction_info_by_pk(ctx, field)
		case "insert_construction_info":
			out.Values[i] = ec._Mutation_insert_construction_info(ctx, field)
		case "insert_construction_info_one":
			out.Values[i] = ec._Mutation_insert_construction_info_one(ctx, field)
		case "update_construction_info":
			out.Values[i] = ec._Mutation_update_construction_info(ctx, field)
		case "update_construction_info_by_pk":
			out.Values[i] = ec._Mutation_update_construction_info_by_pk(ctx, field)
		case "update_construction_info_by_union_pk":
			out.Values[i] = ec._Mutation_update_construction_info_by_union_pk(ctx, field)
		case "delete_construction_info_by_union_pk":
			out.Values[i] = ec._Mutation_delete_construction_info_by_union_pk(ctx, field)
		case "delete_construction_upload_pic":
			out.Values[i] = ec._Mutation_delete_construction_upload_pic(ctx, field)
		case "delete_construction_upload_pic_by_pk":
			out.Values[i] = ec._Mutation_delete_construction_upload_pic_by_pk(ctx, field)
		case "insert_construction_upload_pic":
			out.Values[i] = ec._Mutation_insert_construction_upload_pic(ctx, field)
		case "insert_construction_upload_pic_one":
			out.Values[i] = ec._Mutation_insert_construction_upload_pic_one(ctx, field)
		case "update_construction_upload_pic":
			out.Values[i] = ec._Mutation_update_construction_upload_pic(ctx, field)
		case "update_construction_upload_pic_by_pk":
			out.Values[i] = ec._Mutation_update_construction_upload_pic_by_pk(ctx, field)
		case "update_construction_upload_pic_by_union_pk":
			out.Values[i] = ec._Mutation_update_construction_upload_pic_by_union_pk(ctx, field)
		case "delete_construction_upload_pic_by_union_pk":
			out.Values[i] = ec._Mutation_delete_construction_upload_pic_by_union_pk(ctx, field)
		case "delete_offline_registration_record":
			out.Values[i] = ec._Mutation_delete_offline_registration_record(ctx, field)
		case "delete_offline_registration_record_by_pk":
			out.Values[i] = ec._Mutation_delete_offline_registration_record_by_pk(ctx, field)
		case "insert_offline_registration_record":
			out.Values[i] = ec._Mutation_insert_offline_registration_record(ctx, field)
		case "insert_offline_registration_record_one":
			out.Values[i] = ec._Mutation_insert_offline_registration_record_one(ctx, field)
		case "update_offline_registration_record":
			out.Values[i] = ec._Mutation_update_offline_registration_record(ctx, field)
		case "update_offline_registration_record_by_pk":
			out.Values[i] = ec._Mutation_update_offline_registration_record_by_pk(ctx, field)
		case "update_offline_registration_record_by_union_pk":
			out.Values[i] = ec._Mutation_update_offline_registration_record_by_union_pk(ctx, field)
		case "delete_offline_registration_record_by_union_pk":
			out.Values[i] = ec._Mutation_delete_offline_registration_record_by_union_pk(ctx, field)
		case "delete_snapshot_system_passing_alarm":
			out.Values[i] = ec._Mutation_delete_snapshot_system_passing_alarm(ctx, field)
		case "delete_snapshot_system_passing_alarm_by_pk":
			out.Values[i] = ec._Mutation_delete_snapshot_system_passing_alarm_by_pk(ctx, field)
		case "insert_snapshot_system_passing_alarm":
			out.Values[i] = ec._Mutation_insert_snapshot_system_passing_alarm(ctx, field)
		case "insert_snapshot_system_passing_alarm_one":
			out.Values[i] = ec._Mutation_insert_snapshot_system_passing_alarm_one(ctx, field)
		case "update_snapshot_system_passing_alarm":
			out.Values[i] = ec._Mutation_update_snapshot_system_passing_alarm(ctx, field)
		case "update_snapshot_system_passing_alarm_by_pk":
			out.Values[i] = ec._Mutation_update_snapshot_system_passing_alarm_by_pk(ctx, field)
		case "update_snapshot_system_passing_alarm_by_union_pk":
			out.Values[i] = ec._Mutation_update_snapshot_system_passing_alarm_by_union_pk(ctx, field)
		case "delete_snapshot_system_passing_alarm_by_union_pk":
			out.Values[i] = ec._Mutation_delete_snapshot_system_passing_alarm_by_union_pk(ctx, field)
		case "delete_vehicle_passing_record":
			out.Values[i] = ec._Mutation_delete_vehicle_passing_record(ctx, field)
		case "delete_vehicle_passing_record_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_passing_record_by_pk(ctx, field)
		case "insert_vehicle_passing_record":
			out.Values[i] = ec._Mutation_insert_vehicle_passing_record(ctx, field)
		case "insert_vehicle_passing_record_one":
			out.Values[i] = ec._Mutation_insert_vehicle_passing_record_one(ctx, field)
		case "update_vehicle_passing_record":
			out.Values[i] = ec._Mutation_update_vehicle_passing_record(ctx, field)
		case "update_vehicle_passing_record_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_passing_record_by_pk(ctx, field)
		case "update_vehicle_passing_record_by_union_pk":
			out.Values[i] = ec._Mutation_update_vehicle_passing_record_by_union_pk(ctx, field)
		case "delete_vehicle_passing_record_by_union_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_passing_record_by_union_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineRegistrationRecordImplementors = []string{"OfflineRegistrationRecord"}

func (ec *executionContext) _OfflineRegistrationRecord(ctx context.Context, sel ast.SelectionSet, obj *model1.OfflineRegistrationRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineRegistrationRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineRegistrationRecord")
		case "id":
			out.Values[i] = ec._OfflineRegistrationRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "offline_registration_record_id":
			out.Values[i] = ec._OfflineRegistrationRecord_offline_registration_record_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "outage_registration_id":
			out.Values[i] = ec._OfflineRegistrationRecord_outage_registration_id(ctx, field, obj)
		case "registration_content":
			out.Values[i] = ec._OfflineRegistrationRecord_registration_content(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._OfflineRegistrationRecord_registration_time(ctx, field, obj)
		case "registrant":
			out.Values[i] = ec._OfflineRegistrationRecord_registrant(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._OfflineRegistrationRecord_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._OfflineRegistrationRecord_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._OfflineRegistrationRecord_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._OfflineRegistrationRecord_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._OfflineRegistrationRecord_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._OfflineRegistrationRecord_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._OfflineRegistrationRecord_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineRegistrationRecordAggregateImplementors = []string{"OfflineRegistrationRecordAggregate"}

func (ec *executionContext) _OfflineRegistrationRecordAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineRegistrationRecordAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineRegistrationRecordAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineRegistrationRecordAggregate")
		case "aggregate":
			out.Values[i] = ec._OfflineRegistrationRecordAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineRegistrationRecordAggregateFieldsImplementors = []string{"OfflineRegistrationRecordAggregateFields"}

func (ec *executionContext) _OfflineRegistrationRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineRegistrationRecordAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineRegistrationRecordAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineRegistrationRecordAggregateFields")
		case "avg":
			out.Values[i] = ec._OfflineRegistrationRecordAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._OfflineRegistrationRecordAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._OfflineRegistrationRecordAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._OfflineRegistrationRecordAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._OfflineRegistrationRecordAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._OfflineRegistrationRecordAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._OfflineRegistrationRecordAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._OfflineRegistrationRecordAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._OfflineRegistrationRecordAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._OfflineRegistrationRecordAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._OfflineRegistrationRecordAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineRegistrationRecordAvgFieldsImplementors = []string{"OfflineRegistrationRecordAvgFields"}

func (ec *executionContext) _OfflineRegistrationRecordAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineRegistrationRecordAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineRegistrationRecordAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineRegistrationRecordAvgFields")
		case "id":
			out.Values[i] = ec._OfflineRegistrationRecordAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineRegistrationRecordMaxFieldsImplementors = []string{"OfflineRegistrationRecordMaxFields"}

func (ec *executionContext) _OfflineRegistrationRecordMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineRegistrationRecordMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineRegistrationRecordMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineRegistrationRecordMaxFields")
		case "id":
			out.Values[i] = ec._OfflineRegistrationRecordMaxFields_id(ctx, field, obj)
		case "offline_registration_record_id":
			out.Values[i] = ec._OfflineRegistrationRecordMaxFields_offline_registration_record_id(ctx, field, obj)
		case "outage_registration_id":
			out.Values[i] = ec._OfflineRegistrationRecordMaxFields_outage_registration_id(ctx, field, obj)
		case "registration_content":
			out.Values[i] = ec._OfflineRegistrationRecordMaxFields_registration_content(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._OfflineRegistrationRecordMaxFields_registration_time(ctx, field, obj)
		case "registrant":
			out.Values[i] = ec._OfflineRegistrationRecordMaxFields_registrant(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._OfflineRegistrationRecordMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._OfflineRegistrationRecordMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._OfflineRegistrationRecordMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._OfflineRegistrationRecordMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._OfflineRegistrationRecordMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._OfflineRegistrationRecordMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._OfflineRegistrationRecordMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineRegistrationRecordMinFieldsImplementors = []string{"OfflineRegistrationRecordMinFields"}

func (ec *executionContext) _OfflineRegistrationRecordMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineRegistrationRecordMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineRegistrationRecordMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineRegistrationRecordMinFields")
		case "id":
			out.Values[i] = ec._OfflineRegistrationRecordMinFields_id(ctx, field, obj)
		case "offline_registration_record_id":
			out.Values[i] = ec._OfflineRegistrationRecordMinFields_offline_registration_record_id(ctx, field, obj)
		case "outage_registration_id":
			out.Values[i] = ec._OfflineRegistrationRecordMinFields_outage_registration_id(ctx, field, obj)
		case "registration_content":
			out.Values[i] = ec._OfflineRegistrationRecordMinFields_registration_content(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._OfflineRegistrationRecordMinFields_registration_time(ctx, field, obj)
		case "registrant":
			out.Values[i] = ec._OfflineRegistrationRecordMinFields_registrant(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._OfflineRegistrationRecordMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._OfflineRegistrationRecordMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._OfflineRegistrationRecordMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._OfflineRegistrationRecordMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._OfflineRegistrationRecordMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._OfflineRegistrationRecordMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._OfflineRegistrationRecordMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineRegistrationRecordMutationResponseImplementors = []string{"OfflineRegistrationRecordMutationResponse"}

func (ec *executionContext) _OfflineRegistrationRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineRegistrationRecordMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineRegistrationRecordMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineRegistrationRecordMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._OfflineRegistrationRecordMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._OfflineRegistrationRecordMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineRegistrationRecordStddevFieldsImplementors = []string{"OfflineRegistrationRecordStddevFields"}

func (ec *executionContext) _OfflineRegistrationRecordStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineRegistrationRecordStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineRegistrationRecordStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineRegistrationRecordStddevFields")
		case "id":
			out.Values[i] = ec._OfflineRegistrationRecordStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineRegistrationRecordStddevPopFieldsImplementors = []string{"OfflineRegistrationRecordStddevPopFields"}

func (ec *executionContext) _OfflineRegistrationRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineRegistrationRecordStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineRegistrationRecordStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineRegistrationRecordStddevPopFields")
		case "id":
			out.Values[i] = ec._OfflineRegistrationRecordStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineRegistrationRecordStddevSampFieldsImplementors = []string{"OfflineRegistrationRecordStddevSampFields"}

func (ec *executionContext) _OfflineRegistrationRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineRegistrationRecordStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineRegistrationRecordStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineRegistrationRecordStddevSampFields")
		case "id":
			out.Values[i] = ec._OfflineRegistrationRecordStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineRegistrationRecordSumFieldsImplementors = []string{"OfflineRegistrationRecordSumFields"}

func (ec *executionContext) _OfflineRegistrationRecordSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineRegistrationRecordSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineRegistrationRecordSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineRegistrationRecordSumFields")
		case "id":
			out.Values[i] = ec._OfflineRegistrationRecordSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineRegistrationRecordVarPopFieldsImplementors = []string{"OfflineRegistrationRecordVarPopFields"}

func (ec *executionContext) _OfflineRegistrationRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineRegistrationRecordVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineRegistrationRecordVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineRegistrationRecordVarPopFields")
		case "id":
			out.Values[i] = ec._OfflineRegistrationRecordVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineRegistrationRecordVarSampFieldsImplementors = []string{"OfflineRegistrationRecordVarSampFields"}

func (ec *executionContext) _OfflineRegistrationRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineRegistrationRecordVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineRegistrationRecordVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineRegistrationRecordVarSampFields")
		case "id":
			out.Values[i] = ec._OfflineRegistrationRecordVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineRegistrationRecordVarianceFieldsImplementors = []string{"OfflineRegistrationRecordVarianceFields"}

func (ec *executionContext) _OfflineRegistrationRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineRegistrationRecordVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineRegistrationRecordVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineRegistrationRecordVarianceFields")
		case "id":
			out.Values[i] = ec._OfflineRegistrationRecordVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "construction_camera":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_construction_camera(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "construction_camera_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_construction_camera_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "construction_camera_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_construction_camera_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "construction_camera_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_construction_camera_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "construction_info":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_construction_info(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "construction_info_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_construction_info_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "construction_info_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_construction_info_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "construction_info_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_construction_info_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "construction_upload_pic":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_construction_upload_pic(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "construction_upload_pic_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_construction_upload_pic_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "construction_upload_pic_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_construction_upload_pic_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "construction_upload_pic_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_construction_upload_pic_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "offline_registration_record":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_offline_registration_record(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "offline_registration_record_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_offline_registration_record_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "offline_registration_record_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_offline_registration_record_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "offline_registration_record_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_offline_registration_record_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "snapshot_system_passing_alarm":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_snapshot_system_passing_alarm(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "snapshot_system_passing_alarm_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_snapshot_system_passing_alarm_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "snapshot_system_passing_alarm_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_snapshot_system_passing_alarm_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "snapshot_system_passing_alarm_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_snapshot_system_passing_alarm_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_passing_record":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_passing_record(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_passing_record_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_passing_record_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_passing_record_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_passing_record_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_passing_record_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_passing_record_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var snapshotSystemPassingAlarmImplementors = []string{"SnapshotSystemPassingAlarm"}

func (ec *executionContext) _SnapshotSystemPassingAlarm(ctx context.Context, sel ast.SelectionSet, obj *model1.SnapshotSystemPassingAlarm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, snapshotSystemPassingAlarmImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SnapshotSystemPassingAlarm")
		case "id":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "snapshot_system_passing_alarm_id":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_snapshot_system_passing_alarm_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "passing_id":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_passing_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "license_plate_number":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_license_plate_number(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_registration_time(ctx, field, obj)
		case "supervision_time":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_supervision_time(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_remarks(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_camera_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_alarm_type(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_review_status(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_vehicle_type(ctx, field, obj)
		case "is_online":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_is_online(ctx, field, obj)
		case "is_supervision":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_is_supervision(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._SnapshotSystemPassingAlarm_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var snapshotSystemPassingAlarmAggregateImplementors = []string{"SnapshotSystemPassingAlarmAggregate"}

func (ec *executionContext) _SnapshotSystemPassingAlarmAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.SnapshotSystemPassingAlarmAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, snapshotSystemPassingAlarmAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SnapshotSystemPassingAlarmAggregate")
		case "aggregate":
			out.Values[i] = ec._SnapshotSystemPassingAlarmAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var snapshotSystemPassingAlarmAggregateFieldsImplementors = []string{"SnapshotSystemPassingAlarmAggregateFields"}

func (ec *executionContext) _SnapshotSystemPassingAlarmAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.SnapshotSystemPassingAlarmAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, snapshotSystemPassingAlarmAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SnapshotSystemPassingAlarmAggregateFields")
		case "avg":
			out.Values[i] = ec._SnapshotSystemPassingAlarmAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._SnapshotSystemPassingAlarmAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._SnapshotSystemPassingAlarmAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._SnapshotSystemPassingAlarmAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._SnapshotSystemPassingAlarmAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._SnapshotSystemPassingAlarmAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._SnapshotSystemPassingAlarmAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._SnapshotSystemPassingAlarmAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._SnapshotSystemPassingAlarmAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._SnapshotSystemPassingAlarmAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._SnapshotSystemPassingAlarmAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var snapshotSystemPassingAlarmAvgFieldsImplementors = []string{"SnapshotSystemPassingAlarmAvgFields"}

func (ec *executionContext) _SnapshotSystemPassingAlarmAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.SnapshotSystemPassingAlarmAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, snapshotSystemPassingAlarmAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SnapshotSystemPassingAlarmAvgFields")
		case "id":
			out.Values[i] = ec._SnapshotSystemPassingAlarmAvgFields_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmAvgFields_alarm_type(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmAvgFields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var snapshotSystemPassingAlarmMaxFieldsImplementors = []string{"SnapshotSystemPassingAlarmMaxFields"}

func (ec *executionContext) _SnapshotSystemPassingAlarmMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.SnapshotSystemPassingAlarmMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, snapshotSystemPassingAlarmMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SnapshotSystemPassingAlarmMaxFields")
		case "id":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_id(ctx, field, obj)
		case "snapshot_system_passing_alarm_id":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_snapshot_system_passing_alarm_id(ctx, field, obj)
		case "passing_id":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_passing_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_vehicle_id(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_license_plate_number(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_registration_time(ctx, field, obj)
		case "supervision_time":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_supervision_time(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_remarks(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_camera_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_alarm_type(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_review_status(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_vehicle_type(ctx, field, obj)
		case "is_online":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_is_online(ctx, field, obj)
		case "is_supervision":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_is_supervision(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var snapshotSystemPassingAlarmMinFieldsImplementors = []string{"SnapshotSystemPassingAlarmMinFields"}

func (ec *executionContext) _SnapshotSystemPassingAlarmMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.SnapshotSystemPassingAlarmMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, snapshotSystemPassingAlarmMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SnapshotSystemPassingAlarmMinFields")
		case "id":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_id(ctx, field, obj)
		case "snapshot_system_passing_alarm_id":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_snapshot_system_passing_alarm_id(ctx, field, obj)
		case "passing_id":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_passing_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_vehicle_id(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_license_plate_number(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_registration_time(ctx, field, obj)
		case "supervision_time":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_supervision_time(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_remarks(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_camera_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_alarm_type(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_review_status(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_vehicle_type(ctx, field, obj)
		case "is_online":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_is_online(ctx, field, obj)
		case "is_supervision":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_is_supervision(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var snapshotSystemPassingAlarmMutationResponseImplementors = []string{"SnapshotSystemPassingAlarmMutationResponse"}

func (ec *executionContext) _SnapshotSystemPassingAlarmMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.SnapshotSystemPassingAlarmMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, snapshotSystemPassingAlarmMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SnapshotSystemPassingAlarmMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._SnapshotSystemPassingAlarmMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var snapshotSystemPassingAlarmStddevFieldsImplementors = []string{"SnapshotSystemPassingAlarmStddevFields"}

func (ec *executionContext) _SnapshotSystemPassingAlarmStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.SnapshotSystemPassingAlarmStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, snapshotSystemPassingAlarmStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SnapshotSystemPassingAlarmStddevFields")
		case "id":
			out.Values[i] = ec._SnapshotSystemPassingAlarmStddevFields_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmStddevFields_alarm_type(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmStddevFields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var snapshotSystemPassingAlarmStddevPopFieldsImplementors = []string{"SnapshotSystemPassingAlarmStddevPopFields"}

func (ec *executionContext) _SnapshotSystemPassingAlarmStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.SnapshotSystemPassingAlarmStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, snapshotSystemPassingAlarmStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SnapshotSystemPassingAlarmStddevPopFields")
		case "id":
			out.Values[i] = ec._SnapshotSystemPassingAlarmStddevPopFields_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmStddevPopFields_alarm_type(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmStddevPopFields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var snapshotSystemPassingAlarmStddevSampFieldsImplementors = []string{"SnapshotSystemPassingAlarmStddevSampFields"}

func (ec *executionContext) _SnapshotSystemPassingAlarmStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.SnapshotSystemPassingAlarmStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, snapshotSystemPassingAlarmStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SnapshotSystemPassingAlarmStddevSampFields")
		case "id":
			out.Values[i] = ec._SnapshotSystemPassingAlarmStddevSampFields_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmStddevSampFields_alarm_type(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmStddevSampFields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var snapshotSystemPassingAlarmSumFieldsImplementors = []string{"SnapshotSystemPassingAlarmSumFields"}

func (ec *executionContext) _SnapshotSystemPassingAlarmSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.SnapshotSystemPassingAlarmSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, snapshotSystemPassingAlarmSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SnapshotSystemPassingAlarmSumFields")
		case "id":
			out.Values[i] = ec._SnapshotSystemPassingAlarmSumFields_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmSumFields_alarm_type(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmSumFields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var snapshotSystemPassingAlarmVarPopFieldsImplementors = []string{"SnapshotSystemPassingAlarmVarPopFields"}

func (ec *executionContext) _SnapshotSystemPassingAlarmVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.SnapshotSystemPassingAlarmVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, snapshotSystemPassingAlarmVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SnapshotSystemPassingAlarmVarPopFields")
		case "id":
			out.Values[i] = ec._SnapshotSystemPassingAlarmVarPopFields_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmVarPopFields_alarm_type(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmVarPopFields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var snapshotSystemPassingAlarmVarSampFieldsImplementors = []string{"SnapshotSystemPassingAlarmVarSampFields"}

func (ec *executionContext) _SnapshotSystemPassingAlarmVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.SnapshotSystemPassingAlarmVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, snapshotSystemPassingAlarmVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SnapshotSystemPassingAlarmVarSampFields")
		case "id":
			out.Values[i] = ec._SnapshotSystemPassingAlarmVarSampFields_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmVarSampFields_alarm_type(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmVarSampFields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var snapshotSystemPassingAlarmVarianceFieldsImplementors = []string{"SnapshotSystemPassingAlarmVarianceFields"}

func (ec *executionContext) _SnapshotSystemPassingAlarmVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.SnapshotSystemPassingAlarmVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, snapshotSystemPassingAlarmVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SnapshotSystemPassingAlarmVarianceFields")
		case "id":
			out.Values[i] = ec._SnapshotSystemPassingAlarmVarianceFields_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmVarianceFields_alarm_type(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._SnapshotSystemPassingAlarmVarianceFields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehiclePassingRecordImplementors = []string{"VehiclePassingRecord"}

func (ec *executionContext) _VehiclePassingRecord(ctx context.Context, sel ast.SelectionSet, obj *model1.VehiclePassingRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehiclePassingRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehiclePassingRecord")
		case "id":
			out.Values[i] = ec._VehiclePassingRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_passing_record_id":
			out.Values[i] = ec._VehiclePassingRecord_vehicle_passing_record_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._VehiclePassingRecord_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "license_plate_number":
			out.Values[i] = ec._VehiclePassingRecord_license_plate_number(ctx, field, obj)
		case "passing_time":
			out.Values[i] = ec._VehiclePassingRecord_passing_time(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._VehiclePassingRecord_registration_time(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._VehiclePassingRecord_camera_id(ctx, field, obj)
		case "pass_type":
			out.Values[i] = ec._VehiclePassingRecord_pass_type(ctx, field, obj)
		case "picture_url":
			out.Values[i] = ec._VehiclePassingRecord_picture_url(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._VehiclePassingRecord_review_status(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._VehiclePassingRecord_vehicle_type(ctx, field, obj)
		case "is_online":
			out.Values[i] = ec._VehiclePassingRecord_is_online(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehiclePassingRecord_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._VehiclePassingRecord_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._VehiclePassingRecord_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehiclePassingRecord_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehiclePassingRecord_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehiclePassingRecord_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehiclePassingRecordAggregateImplementors = []string{"VehiclePassingRecordAggregate"}

func (ec *executionContext) _VehiclePassingRecordAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehiclePassingRecordAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehiclePassingRecordAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehiclePassingRecordAggregate")
		case "aggregate":
			out.Values[i] = ec._VehiclePassingRecordAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehiclePassingRecordAggregateFieldsImplementors = []string{"VehiclePassingRecordAggregateFields"}

func (ec *executionContext) _VehiclePassingRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehiclePassingRecordAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehiclePassingRecordAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehiclePassingRecordAggregateFields")
		case "avg":
			out.Values[i] = ec._VehiclePassingRecordAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VehiclePassingRecordAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VehiclePassingRecordAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VehiclePassingRecordAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VehiclePassingRecordAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VehiclePassingRecordAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VehiclePassingRecordAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VehiclePassingRecordAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VehiclePassingRecordAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VehiclePassingRecordAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VehiclePassingRecordAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehiclePassingRecordAvgFieldsImplementors = []string{"VehiclePassingRecordAvgFields"}

func (ec *executionContext) _VehiclePassingRecordAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehiclePassingRecordAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehiclePassingRecordAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehiclePassingRecordAvgFields")
		case "id":
			out.Values[i] = ec._VehiclePassingRecordAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehiclePassingRecordMaxFieldsImplementors = []string{"VehiclePassingRecordMaxFields"}

func (ec *executionContext) _VehiclePassingRecordMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehiclePassingRecordMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehiclePassingRecordMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehiclePassingRecordMaxFields")
		case "id":
			out.Values[i] = ec._VehiclePassingRecordMaxFields_id(ctx, field, obj)
		case "vehicle_passing_record_id":
			out.Values[i] = ec._VehiclePassingRecordMaxFields_vehicle_passing_record_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehiclePassingRecordMaxFields_vehicle_id(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._VehiclePassingRecordMaxFields_license_plate_number(ctx, field, obj)
		case "passing_time":
			out.Values[i] = ec._VehiclePassingRecordMaxFields_passing_time(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._VehiclePassingRecordMaxFields_registration_time(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._VehiclePassingRecordMaxFields_camera_id(ctx, field, obj)
		case "pass_type":
			out.Values[i] = ec._VehiclePassingRecordMaxFields_pass_type(ctx, field, obj)
		case "picture_url":
			out.Values[i] = ec._VehiclePassingRecordMaxFields_picture_url(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._VehiclePassingRecordMaxFields_review_status(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._VehiclePassingRecordMaxFields_vehicle_type(ctx, field, obj)
		case "is_online":
			out.Values[i] = ec._VehiclePassingRecordMaxFields_is_online(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehiclePassingRecordMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehiclePassingRecordMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehiclePassingRecordMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehiclePassingRecordMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehiclePassingRecordMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehiclePassingRecordMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehiclePassingRecordMinFieldsImplementors = []string{"VehiclePassingRecordMinFields"}

func (ec *executionContext) _VehiclePassingRecordMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehiclePassingRecordMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehiclePassingRecordMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehiclePassingRecordMinFields")
		case "id":
			out.Values[i] = ec._VehiclePassingRecordMinFields_id(ctx, field, obj)
		case "vehicle_passing_record_id":
			out.Values[i] = ec._VehiclePassingRecordMinFields_vehicle_passing_record_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehiclePassingRecordMinFields_vehicle_id(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._VehiclePassingRecordMinFields_license_plate_number(ctx, field, obj)
		case "passing_time":
			out.Values[i] = ec._VehiclePassingRecordMinFields_passing_time(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._VehiclePassingRecordMinFields_registration_time(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._VehiclePassingRecordMinFields_camera_id(ctx, field, obj)
		case "pass_type":
			out.Values[i] = ec._VehiclePassingRecordMinFields_pass_type(ctx, field, obj)
		case "picture_url":
			out.Values[i] = ec._VehiclePassingRecordMinFields_picture_url(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._VehiclePassingRecordMinFields_review_status(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._VehiclePassingRecordMinFields_vehicle_type(ctx, field, obj)
		case "is_online":
			out.Values[i] = ec._VehiclePassingRecordMinFields_is_online(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehiclePassingRecordMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehiclePassingRecordMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehiclePassingRecordMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehiclePassingRecordMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehiclePassingRecordMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehiclePassingRecordMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehiclePassingRecordMutationResponseImplementors = []string{"VehiclePassingRecordMutationResponse"}

func (ec *executionContext) _VehiclePassingRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VehiclePassingRecordMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehiclePassingRecordMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehiclePassingRecordMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VehiclePassingRecordMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VehiclePassingRecordMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehiclePassingRecordStddevFieldsImplementors = []string{"VehiclePassingRecordStddevFields"}

func (ec *executionContext) _VehiclePassingRecordStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehiclePassingRecordStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehiclePassingRecordStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehiclePassingRecordStddevFields")
		case "id":
			out.Values[i] = ec._VehiclePassingRecordStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehiclePassingRecordStddevPopFieldsImplementors = []string{"VehiclePassingRecordStddevPopFields"}

func (ec *executionContext) _VehiclePassingRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehiclePassingRecordStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehiclePassingRecordStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehiclePassingRecordStddevPopFields")
		case "id":
			out.Values[i] = ec._VehiclePassingRecordStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehiclePassingRecordStddevSampFieldsImplementors = []string{"VehiclePassingRecordStddevSampFields"}

func (ec *executionContext) _VehiclePassingRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehiclePassingRecordStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehiclePassingRecordStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehiclePassingRecordStddevSampFields")
		case "id":
			out.Values[i] = ec._VehiclePassingRecordStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehiclePassingRecordSumFieldsImplementors = []string{"VehiclePassingRecordSumFields"}

func (ec *executionContext) _VehiclePassingRecordSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehiclePassingRecordSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehiclePassingRecordSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehiclePassingRecordSumFields")
		case "id":
			out.Values[i] = ec._VehiclePassingRecordSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehiclePassingRecordVarPopFieldsImplementors = []string{"VehiclePassingRecordVarPopFields"}

func (ec *executionContext) _VehiclePassingRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehiclePassingRecordVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehiclePassingRecordVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehiclePassingRecordVarPopFields")
		case "id":
			out.Values[i] = ec._VehiclePassingRecordVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehiclePassingRecordVarSampFieldsImplementors = []string{"VehiclePassingRecordVarSampFields"}

func (ec *executionContext) _VehiclePassingRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehiclePassingRecordVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehiclePassingRecordVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehiclePassingRecordVarSampFields")
		case "id":
			out.Values[i] = ec._VehiclePassingRecordVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehiclePassingRecordVarianceFieldsImplementors = []string{"VehiclePassingRecordVarianceFields"}

func (ec *executionContext) _VehiclePassingRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehiclePassingRecordVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehiclePassingRecordVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehiclePassingRecordVarianceFields")
		case "id":
			out.Values[i] = ec._VehiclePassingRecordVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNConstructionCamera2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionCamera(ctx context.Context, sel ast.SelectionSet, v model1.ConstructionCamera) graphql.Marshaler {
	return ec._ConstructionCamera(ctx, sel, &v)
}

func (ec *executionContext) marshalNConstructionCamera2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionCameraᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.ConstructionCamera) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConstructionCamera2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionCamera(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNConstructionCamera2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionCamera(ctx context.Context, sel ast.SelectionSet, v *model1.ConstructionCamera) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConstructionCamera(ctx, sel, v)
}

func (ec *executionContext) marshalNConstructionCameraAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraAggregate(ctx context.Context, sel ast.SelectionSet, v model.ConstructionCameraAggregate) graphql.Marshaler {
	return ec._ConstructionCameraAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNConstructionCameraAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraAggregate(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionCameraAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConstructionCameraAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConstructionCameraBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraBoolExp(ctx context.Context, v interface{}) (model.ConstructionCameraBoolExp, error) {
	res, err := ec.unmarshalInputConstructionCameraBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConstructionCameraInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraInsertInput(ctx context.Context, v interface{}) (model.ConstructionCameraInsertInput, error) {
	res, err := ec.unmarshalInputConstructionCameraInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConstructionCameraInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.ConstructionCameraInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ConstructionCameraInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConstructionCameraInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNConstructionCameraInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraInsertInput(ctx context.Context, v interface{}) (*model.ConstructionCameraInsertInput, error) {
	res, err := ec.unmarshalInputConstructionCameraInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConstructionCameraOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraOrderBy(ctx context.Context, v interface{}) (*model.ConstructionCameraOrderBy, error) {
	res, err := ec.unmarshalInputConstructionCameraOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConstructionCameraSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraSelectColumn(ctx context.Context, v interface{}) (model.ConstructionCameraSelectColumn, error) {
	var res model.ConstructionCameraSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConstructionCameraSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.ConstructionCameraSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNConstructionInfo2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionInfo(ctx context.Context, sel ast.SelectionSet, v model1.ConstructionInfo) graphql.Marshaler {
	return ec._ConstructionInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNConstructionInfo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.ConstructionInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConstructionInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNConstructionInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionInfo(ctx context.Context, sel ast.SelectionSet, v *model1.ConstructionInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConstructionInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNConstructionInfoAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoAggregate(ctx context.Context, sel ast.SelectionSet, v model.ConstructionInfoAggregate) graphql.Marshaler {
	return ec._ConstructionInfoAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNConstructionInfoAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoAggregate(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionInfoAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConstructionInfoAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConstructionInfoBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoBoolExp(ctx context.Context, v interface{}) (model.ConstructionInfoBoolExp, error) {
	res, err := ec.unmarshalInputConstructionInfoBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConstructionInfoInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoInsertInput(ctx context.Context, v interface{}) (model.ConstructionInfoInsertInput, error) {
	res, err := ec.unmarshalInputConstructionInfoInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConstructionInfoInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.ConstructionInfoInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ConstructionInfoInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConstructionInfoInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNConstructionInfoInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoInsertInput(ctx context.Context, v interface{}) (*model.ConstructionInfoInsertInput, error) {
	res, err := ec.unmarshalInputConstructionInfoInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConstructionInfoOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoOrderBy(ctx context.Context, v interface{}) (*model.ConstructionInfoOrderBy, error) {
	res, err := ec.unmarshalInputConstructionInfoOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConstructionInfoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoSelectColumn(ctx context.Context, v interface{}) (model.ConstructionInfoSelectColumn, error) {
	var res model.ConstructionInfoSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConstructionInfoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.ConstructionInfoSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNConstructionUploadPic2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionUploadPic(ctx context.Context, sel ast.SelectionSet, v model1.ConstructionUploadPic) graphql.Marshaler {
	return ec._ConstructionUploadPic(ctx, sel, &v)
}

func (ec *executionContext) marshalNConstructionUploadPic2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionUploadPicᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.ConstructionUploadPic) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConstructionUploadPic2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionUploadPic(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNConstructionUploadPic2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionUploadPic(ctx context.Context, sel ast.SelectionSet, v *model1.ConstructionUploadPic) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConstructionUploadPic(ctx, sel, v)
}

func (ec *executionContext) marshalNConstructionUploadPicAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicAggregate(ctx context.Context, sel ast.SelectionSet, v model.ConstructionUploadPicAggregate) graphql.Marshaler {
	return ec._ConstructionUploadPicAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNConstructionUploadPicAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicAggregate(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionUploadPicAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConstructionUploadPicAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConstructionUploadPicBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicBoolExp(ctx context.Context, v interface{}) (model.ConstructionUploadPicBoolExp, error) {
	res, err := ec.unmarshalInputConstructionUploadPicBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConstructionUploadPicInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicInsertInput(ctx context.Context, v interface{}) (model.ConstructionUploadPicInsertInput, error) {
	res, err := ec.unmarshalInputConstructionUploadPicInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConstructionUploadPicInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.ConstructionUploadPicInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ConstructionUploadPicInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConstructionUploadPicInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNConstructionUploadPicInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicInsertInput(ctx context.Context, v interface{}) (*model.ConstructionUploadPicInsertInput, error) {
	res, err := ec.unmarshalInputConstructionUploadPicInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConstructionUploadPicOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicOrderBy(ctx context.Context, v interface{}) (*model.ConstructionUploadPicOrderBy, error) {
	res, err := ec.unmarshalInputConstructionUploadPicOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConstructionUploadPicSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicSelectColumn(ctx context.Context, v interface{}) (model.ConstructionUploadPicSelectColumn, error) {
	var res model.ConstructionUploadPicSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConstructionUploadPicSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.ConstructionUploadPicSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNNumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNOfflineRegistrationRecord2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐOfflineRegistrationRecord(ctx context.Context, sel ast.SelectionSet, v model1.OfflineRegistrationRecord) graphql.Marshaler {
	return ec._OfflineRegistrationRecord(ctx, sel, &v)
}

func (ec *executionContext) marshalNOfflineRegistrationRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐOfflineRegistrationRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.OfflineRegistrationRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOfflineRegistrationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐOfflineRegistrationRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNOfflineRegistrationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐOfflineRegistrationRecord(ctx context.Context, sel ast.SelectionSet, v *model1.OfflineRegistrationRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OfflineRegistrationRecord(ctx, sel, v)
}

func (ec *executionContext) marshalNOfflineRegistrationRecordAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordAggregate(ctx context.Context, sel ast.SelectionSet, v model.OfflineRegistrationRecordAggregate) graphql.Marshaler {
	return ec._OfflineRegistrationRecordAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNOfflineRegistrationRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordAggregate(ctx context.Context, sel ast.SelectionSet, v *model.OfflineRegistrationRecordAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OfflineRegistrationRecordAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOfflineRegistrationRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordBoolExp(ctx context.Context, v interface{}) (model.OfflineRegistrationRecordBoolExp, error) {
	res, err := ec.unmarshalInputOfflineRegistrationRecordBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOfflineRegistrationRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordInsertInput(ctx context.Context, v interface{}) (model.OfflineRegistrationRecordInsertInput, error) {
	res, err := ec.unmarshalInputOfflineRegistrationRecordInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOfflineRegistrationRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.OfflineRegistrationRecordInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.OfflineRegistrationRecordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOfflineRegistrationRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNOfflineRegistrationRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordInsertInput(ctx context.Context, v interface{}) (*model.OfflineRegistrationRecordInsertInput, error) {
	res, err := ec.unmarshalInputOfflineRegistrationRecordInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOfflineRegistrationRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordOrderBy(ctx context.Context, v interface{}) (*model.OfflineRegistrationRecordOrderBy, error) {
	res, err := ec.unmarshalInputOfflineRegistrationRecordOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOfflineRegistrationRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordSelectColumn(ctx context.Context, v interface{}) (model.OfflineRegistrationRecordSelectColumn, error) {
	var res model.OfflineRegistrationRecordSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOfflineRegistrationRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.OfflineRegistrationRecordSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNSnapshotSystemPassingAlarm2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐSnapshotSystemPassingAlarm(ctx context.Context, sel ast.SelectionSet, v model1.SnapshotSystemPassingAlarm) graphql.Marshaler {
	return ec._SnapshotSystemPassingAlarm(ctx, sel, &v)
}

func (ec *executionContext) marshalNSnapshotSystemPassingAlarm2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐSnapshotSystemPassingAlarmᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.SnapshotSystemPassingAlarm) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSnapshotSystemPassingAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐSnapshotSystemPassingAlarm(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSnapshotSystemPassingAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐSnapshotSystemPassingAlarm(ctx context.Context, sel ast.SelectionSet, v *model1.SnapshotSystemPassingAlarm) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SnapshotSystemPassingAlarm(ctx, sel, v)
}

func (ec *executionContext) marshalNSnapshotSystemPassingAlarmAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmAggregate(ctx context.Context, sel ast.SelectionSet, v model.SnapshotSystemPassingAlarmAggregate) graphql.Marshaler {
	return ec._SnapshotSystemPassingAlarmAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNSnapshotSystemPassingAlarmAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmAggregate(ctx context.Context, sel ast.SelectionSet, v *model.SnapshotSystemPassingAlarmAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SnapshotSystemPassingAlarmAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSnapshotSystemPassingAlarmBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmBoolExp(ctx context.Context, v interface{}) (model.SnapshotSystemPassingAlarmBoolExp, error) {
	res, err := ec.unmarshalInputSnapshotSystemPassingAlarmBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSnapshotSystemPassingAlarmInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmInsertInput(ctx context.Context, v interface{}) (model.SnapshotSystemPassingAlarmInsertInput, error) {
	res, err := ec.unmarshalInputSnapshotSystemPassingAlarmInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSnapshotSystemPassingAlarmInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.SnapshotSystemPassingAlarmInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SnapshotSystemPassingAlarmInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSnapshotSystemPassingAlarmInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNSnapshotSystemPassingAlarmInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmInsertInput(ctx context.Context, v interface{}) (*model.SnapshotSystemPassingAlarmInsertInput, error) {
	res, err := ec.unmarshalInputSnapshotSystemPassingAlarmInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSnapshotSystemPassingAlarmOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmOrderBy(ctx context.Context, v interface{}) (*model.SnapshotSystemPassingAlarmOrderBy, error) {
	res, err := ec.unmarshalInputSnapshotSystemPassingAlarmOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSnapshotSystemPassingAlarmSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmSelectColumn(ctx context.Context, v interface{}) (model.SnapshotSystemPassingAlarmSelectColumn, error) {
	var res model.SnapshotSystemPassingAlarmSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSnapshotSystemPassingAlarmSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.SnapshotSystemPassingAlarmSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNVehiclePassingRecord2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐVehiclePassingRecord(ctx context.Context, sel ast.SelectionSet, v model1.VehiclePassingRecord) graphql.Marshaler {
	return ec._VehiclePassingRecord(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehiclePassingRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐVehiclePassingRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VehiclePassingRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehiclePassingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐVehiclePassingRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehiclePassingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐVehiclePassingRecord(ctx context.Context, sel ast.SelectionSet, v *model1.VehiclePassingRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehiclePassingRecord(ctx, sel, v)
}

func (ec *executionContext) marshalNVehiclePassingRecordAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehiclePassingRecordAggregate) graphql.Marshaler {
	return ec._VehiclePassingRecordAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehiclePassingRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehiclePassingRecordAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehiclePassingRecordAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehiclePassingRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordBoolExp(ctx context.Context, v interface{}) (model.VehiclePassingRecordBoolExp, error) {
	res, err := ec.unmarshalInputVehiclePassingRecordBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehiclePassingRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordInsertInput(ctx context.Context, v interface{}) (model.VehiclePassingRecordInsertInput, error) {
	res, err := ec.unmarshalInputVehiclePassingRecordInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehiclePassingRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehiclePassingRecordInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehiclePassingRecordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehiclePassingRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVehiclePassingRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordInsertInput(ctx context.Context, v interface{}) (*model.VehiclePassingRecordInsertInput, error) {
	res, err := ec.unmarshalInputVehiclePassingRecordInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehiclePassingRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordOrderBy(ctx context.Context, v interface{}) (*model.VehiclePassingRecordOrderBy, error) {
	res, err := ec.unmarshalInputVehiclePassingRecordOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehiclePassingRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordSelectColumn(ctx context.Context, v interface{}) (model.VehiclePassingRecordSelectColumn, error) {
	var res model.VehiclePassingRecordSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehiclePassingRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehiclePassingRecordSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBigintComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBooleanComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConstructionCamera2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionCamera(ctx context.Context, sel ast.SelectionSet, v *model1.ConstructionCamera) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionCamera(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionCameraAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionCameraAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionCameraAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionCameraAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionCameraAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionCameraAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConstructionCameraBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraBoolExp(ctx context.Context, v interface{}) ([]*model.ConstructionCameraBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ConstructionCameraBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOConstructionCameraBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConstructionCameraBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraBoolExp(ctx context.Context, v interface{}) (*model.ConstructionCameraBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConstructionCameraBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConstructionCameraIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraIncInput(ctx context.Context, v interface{}) (*model.ConstructionCameraIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConstructionCameraIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConstructionCameraMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionCameraMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionCameraMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionCameraMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraMinFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionCameraMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionCameraMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionCameraMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionCameraMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionCameraMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConstructionCameraOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraOrderByᚄ(ctx context.Context, v interface{}) ([]*model.ConstructionCameraOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ConstructionCameraOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConstructionCameraOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConstructionCameraSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.ConstructionCameraSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.ConstructionCameraSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConstructionCameraSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConstructionCameraSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ConstructionCameraSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConstructionCameraSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOConstructionCameraSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraSetInput(ctx context.Context, v interface{}) (*model.ConstructionCameraSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConstructionCameraSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConstructionCameraStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionCameraStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionCameraStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionCameraStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionCameraStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionCameraStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionCameraStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionCameraStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionCameraStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionCameraSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraSumFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionCameraSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionCameraSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionCameraVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionCameraVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionCameraVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionCameraVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionCameraVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionCameraVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionCameraVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionCameraVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionCameraVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionCameraVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionInfo(ctx context.Context, sel ast.SelectionSet, v *model1.ConstructionInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionInfoAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionInfoAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionInfoAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionInfoAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionInfoAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionInfoAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConstructionInfoBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoBoolExp(ctx context.Context, v interface{}) ([]*model.ConstructionInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ConstructionInfoBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOConstructionInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConstructionInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoBoolExp(ctx context.Context, v interface{}) (*model.ConstructionInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConstructionInfoBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConstructionInfoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoIncInput(ctx context.Context, v interface{}) (*model.ConstructionInfoIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConstructionInfoIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConstructionInfoMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionInfoMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionInfoMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionInfoMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoMinFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionInfoMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionInfoMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionInfoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionInfoMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionInfoMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConstructionInfoOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoOrderByᚄ(ctx context.Context, v interface{}) ([]*model.ConstructionInfoOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ConstructionInfoOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConstructionInfoOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConstructionInfoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.ConstructionInfoSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.ConstructionInfoSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConstructionInfoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConstructionInfoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ConstructionInfoSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConstructionInfoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOConstructionInfoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoSetInput(ctx context.Context, v interface{}) (*model.ConstructionInfoSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConstructionInfoSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConstructionInfoStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionInfoStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionInfoStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionInfoStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionInfoStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionInfoStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionInfoStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionInfoStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionInfoStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionInfoSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoSumFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionInfoSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionInfoSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionInfoVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionInfoVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionInfoVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionInfoVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionInfoVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionInfoVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionInfoVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionInfoVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionInfoVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionInfoVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionUploadPic2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐConstructionUploadPic(ctx context.Context, sel ast.SelectionSet, v *model1.ConstructionUploadPic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionUploadPic(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionUploadPicAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionUploadPicAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionUploadPicAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionUploadPicAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionUploadPicAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionUploadPicAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConstructionUploadPicBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicBoolExp(ctx context.Context, v interface{}) ([]*model.ConstructionUploadPicBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ConstructionUploadPicBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOConstructionUploadPicBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConstructionUploadPicBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicBoolExp(ctx context.Context, v interface{}) (*model.ConstructionUploadPicBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConstructionUploadPicBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConstructionUploadPicIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicIncInput(ctx context.Context, v interface{}) (*model.ConstructionUploadPicIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConstructionUploadPicIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConstructionUploadPicMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionUploadPicMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionUploadPicMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionUploadPicMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicMinFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionUploadPicMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionUploadPicMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionUploadPicMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionUploadPicMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionUploadPicMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConstructionUploadPicOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicOrderByᚄ(ctx context.Context, v interface{}) ([]*model.ConstructionUploadPicOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ConstructionUploadPicOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConstructionUploadPicOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConstructionUploadPicSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.ConstructionUploadPicSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.ConstructionUploadPicSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConstructionUploadPicSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConstructionUploadPicSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ConstructionUploadPicSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConstructionUploadPicSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOConstructionUploadPicSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicSetInput(ctx context.Context, v interface{}) (*model.ConstructionUploadPicSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConstructionUploadPicSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConstructionUploadPicStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionUploadPicStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionUploadPicStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionUploadPicStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionUploadPicStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionUploadPicStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionUploadPicStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionUploadPicStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionUploadPicStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionUploadPicSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicSumFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionUploadPicSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionUploadPicSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionUploadPicVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionUploadPicVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionUploadPicVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionUploadPicVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionUploadPicVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionUploadPicVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOConstructionUploadPicVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐConstructionUploadPicVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.ConstructionUploadPicVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstructionUploadPicVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOJsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNJsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOJsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalONumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNNumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalONumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) marshalOOfflineRegistrationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐOfflineRegistrationRecord(ctx context.Context, sel ast.SelectionSet, v *model1.OfflineRegistrationRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineRegistrationRecord(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineRegistrationRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineRegistrationRecordAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineRegistrationRecordAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineRegistrationRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineRegistrationRecordAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineRegistrationRecordAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOfflineRegistrationRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordBoolExp(ctx context.Context, v interface{}) ([]*model.OfflineRegistrationRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.OfflineRegistrationRecordBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOOfflineRegistrationRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOfflineRegistrationRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordBoolExp(ctx context.Context, v interface{}) (*model.OfflineRegistrationRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOfflineRegistrationRecordBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOfflineRegistrationRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordIncInput(ctx context.Context, v interface{}) (*model.OfflineRegistrationRecordIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOfflineRegistrationRecordIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOfflineRegistrationRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineRegistrationRecordMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineRegistrationRecordMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineRegistrationRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordMinFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineRegistrationRecordMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineRegistrationRecordMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineRegistrationRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.OfflineRegistrationRecordMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineRegistrationRecordMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOfflineRegistrationRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordOrderByᚄ(ctx context.Context, v interface{}) ([]*model.OfflineRegistrationRecordOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.OfflineRegistrationRecordOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOfflineRegistrationRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOfflineRegistrationRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.OfflineRegistrationRecordSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.OfflineRegistrationRecordSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOfflineRegistrationRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOOfflineRegistrationRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OfflineRegistrationRecordSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOfflineRegistrationRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOOfflineRegistrationRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordSetInput(ctx context.Context, v interface{}) (*model.OfflineRegistrationRecordSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOfflineRegistrationRecordSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOfflineRegistrationRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineRegistrationRecordStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineRegistrationRecordStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineRegistrationRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineRegistrationRecordStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineRegistrationRecordStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineRegistrationRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineRegistrationRecordStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineRegistrationRecordStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineRegistrationRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordSumFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineRegistrationRecordSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineRegistrationRecordSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineRegistrationRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineRegistrationRecordVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineRegistrationRecordVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineRegistrationRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineRegistrationRecordVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineRegistrationRecordVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineRegistrationRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐOfflineRegistrationRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineRegistrationRecordVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineRegistrationRecordVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNPoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOPoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx context.Context, v interface{}) (*model2.PointComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPointComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSnapshotSystemPassingAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐSnapshotSystemPassingAlarm(ctx context.Context, sel ast.SelectionSet, v *model1.SnapshotSystemPassingAlarm) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SnapshotSystemPassingAlarm(ctx, sel, v)
}

func (ec *executionContext) marshalOSnapshotSystemPassingAlarmAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.SnapshotSystemPassingAlarmAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SnapshotSystemPassingAlarmAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSnapshotSystemPassingAlarmAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.SnapshotSystemPassingAlarmAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SnapshotSystemPassingAlarmAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSnapshotSystemPassingAlarmBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmBoolExp(ctx context.Context, v interface{}) ([]*model.SnapshotSystemPassingAlarmBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SnapshotSystemPassingAlarmBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSnapshotSystemPassingAlarmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSnapshotSystemPassingAlarmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmBoolExp(ctx context.Context, v interface{}) (*model.SnapshotSystemPassingAlarmBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSnapshotSystemPassingAlarmBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSnapshotSystemPassingAlarmIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmIncInput(ctx context.Context, v interface{}) (*model.SnapshotSystemPassingAlarmIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSnapshotSystemPassingAlarmIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSnapshotSystemPassingAlarmMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.SnapshotSystemPassingAlarmMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SnapshotSystemPassingAlarmMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSnapshotSystemPassingAlarmMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmMinFields(ctx context.Context, sel ast.SelectionSet, v *model.SnapshotSystemPassingAlarmMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SnapshotSystemPassingAlarmMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSnapshotSystemPassingAlarmMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.SnapshotSystemPassingAlarmMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SnapshotSystemPassingAlarmMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSnapshotSystemPassingAlarmOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmOrderByᚄ(ctx context.Context, v interface{}) ([]*model.SnapshotSystemPassingAlarmOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SnapshotSystemPassingAlarmOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSnapshotSystemPassingAlarmOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSnapshotSystemPassingAlarmSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.SnapshotSystemPassingAlarmSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.SnapshotSystemPassingAlarmSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSnapshotSystemPassingAlarmSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSnapshotSystemPassingAlarmSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SnapshotSystemPassingAlarmSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSnapshotSystemPassingAlarmSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOSnapshotSystemPassingAlarmSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmSetInput(ctx context.Context, v interface{}) (*model.SnapshotSystemPassingAlarmSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSnapshotSystemPassingAlarmSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSnapshotSystemPassingAlarmStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.SnapshotSystemPassingAlarmStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SnapshotSystemPassingAlarmStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSnapshotSystemPassingAlarmStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.SnapshotSystemPassingAlarmStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SnapshotSystemPassingAlarmStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSnapshotSystemPassingAlarmStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.SnapshotSystemPassingAlarmStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SnapshotSystemPassingAlarmStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSnapshotSystemPassingAlarmSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmSumFields(ctx context.Context, sel ast.SelectionSet, v *model.SnapshotSystemPassingAlarmSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SnapshotSystemPassingAlarmSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSnapshotSystemPassingAlarmVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.SnapshotSystemPassingAlarmVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SnapshotSystemPassingAlarmVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSnapshotSystemPassingAlarmVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.SnapshotSystemPassingAlarmVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SnapshotSystemPassingAlarmVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSnapshotSystemPassingAlarmVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐSnapshotSystemPassingAlarmVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.SnapshotSystemPassingAlarmVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SnapshotSystemPassingAlarmVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimestamptzComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehiclePassingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋmodelᚐVehiclePassingRecord(ctx context.Context, sel ast.SelectionSet, v *model1.VehiclePassingRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehiclePassingRecord(ctx, sel, v)
}

func (ec *executionContext) marshalOVehiclePassingRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehiclePassingRecordAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehiclePassingRecordAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehiclePassingRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehiclePassingRecordAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehiclePassingRecordAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehiclePassingRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordBoolExp(ctx context.Context, v interface{}) ([]*model.VehiclePassingRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehiclePassingRecordBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVehiclePassingRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehiclePassingRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordBoolExp(ctx context.Context, v interface{}) (*model.VehiclePassingRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehiclePassingRecordBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVehiclePassingRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordIncInput(ctx context.Context, v interface{}) (*model.VehiclePassingRecordIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehiclePassingRecordIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehiclePassingRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehiclePassingRecordMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehiclePassingRecordMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehiclePassingRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehiclePassingRecordMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehiclePassingRecordMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehiclePassingRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehiclePassingRecordMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehiclePassingRecordMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehiclePassingRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehiclePassingRecordOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehiclePassingRecordOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehiclePassingRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehiclePassingRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehiclePassingRecordSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehiclePassingRecordSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehiclePassingRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVehiclePassingRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehiclePassingRecordSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehiclePassingRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVehiclePassingRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordSetInput(ctx context.Context, v interface{}) (*model.VehiclePassingRecordSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehiclePassingRecordSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehiclePassingRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehiclePassingRecordStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehiclePassingRecordStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehiclePassingRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehiclePassingRecordStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehiclePassingRecordStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehiclePassingRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehiclePassingRecordStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehiclePassingRecordStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehiclePassingRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehiclePassingRecordSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehiclePassingRecordSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehiclePassingRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehiclePassingRecordVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehiclePassingRecordVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehiclePassingRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehiclePassingRecordVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehiclePassingRecordVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehiclePassingRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_snapshot_systemᚋgraphᚋmodelᚐVehiclePassingRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehiclePassingRecordVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehiclePassingRecordVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
