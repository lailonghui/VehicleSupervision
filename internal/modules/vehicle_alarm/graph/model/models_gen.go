// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// expression to compare columns of type _text. All fields are combined with logical 'AND'.
type TextComparisonExp struct {
	Eq     *string  `json:"_eq"`
	Gt     *string  `json:"_gt"`
	Gte    *string  `json:"_gte"`
	In     []string `json:"_in"`
	IsNull *bool    `json:"_is_null"`
	Lt     *string  `json:"_lt"`
	Lte    *string  `json:"_lte"`
	Neq    *string  `json:"_neq"`
	Nin    []string `json:"_nin"`
}

// aggregated selection of "alarm_processing_record"
type AlarmProcessingRecordAggregate struct {
	Aggregate *AlarmProcessingRecordAggregateFields `json:"aggregate"`
	Nodes     []*AlarmProcessingRecord              `json:"nodes"`
}

// aggregate fields of "alarm_processing_record"
type AlarmProcessingRecordAggregateFields struct {
	Avg        *AlarmProcessingRecordAvgFields        `json:"avg"`
	Count      *int                                   `json:"count"`
	Max        *AlarmProcessingRecordMaxFields        `json:"max"`
	Min        *AlarmProcessingRecordMinFields        `json:"min"`
	Stddev     *AlarmProcessingRecordStddevFields     `json:"stddev"`
	StddevPop  *AlarmProcessingRecordStddevPopFields  `json:"stddev_pop"`
	StddevSamp *AlarmProcessingRecordStddevSampFields `json:"stddev_samp"`
	Sum        *AlarmProcessingRecordSumFields        `json:"sum"`
	VarPop     *AlarmProcessingRecordVarPopFields     `json:"var_pop"`
	VarSamp    *AlarmProcessingRecordVarSampFields    `json:"var_samp"`
	Variance   *AlarmProcessingRecordVarianceFields   `json:"variance"`
}

// order by aggregate values of table "alarm_processing_record"
type AlarmProcessingRecordAggregateOrderBy struct {
	Avg        *AlarmProcessingRecordAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy                          `json:"count"`
	Max        *AlarmProcessingRecordMaxOrderBy        `json:"max"`
	Min        *AlarmProcessingRecordMinOrderBy        `json:"min"`
	Stddev     *AlarmProcessingRecordStddevOrderBy     `json:"stddev"`
	StddevPop  *AlarmProcessingRecordStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *AlarmProcessingRecordStddevSampOrderBy `json:"stddev_samp"`
	Sum        *AlarmProcessingRecordSumOrderBy        `json:"sum"`
	VarPop     *AlarmProcessingRecordVarPopOrderBy     `json:"var_pop"`
	VarSamp    *AlarmProcessingRecordVarSampOrderBy    `json:"var_samp"`
	Variance   *AlarmProcessingRecordVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "alarm_processing_record"
type AlarmProcessingRecordArrRelInsertInput struct {
	Data []*AlarmProcessingRecordInsertInput `json:"data"`
}

// aggregate avg on columns
type AlarmProcessingRecordAvgFields struct {
	ID             *float64 `json:"id"`
	ProcessingType *float64 `json:"processing_type"`
}

// order by avg() on columns of table "alarm_processing_record"
type AlarmProcessingRecordAvgOrderBy struct {
	ID             *model.OrderBy `json:"id"`
	ProcessingType *model.OrderBy `json:"processing_type"`
}

// Boolean expression to filter rows from the table "alarm_processing_record". All fields are combined with a logical 'AND'.
type AlarmProcessingRecordBoolExp struct {
	And                       []*AlarmProcessingRecordBoolExp `json:"_and"`
	Not                       *AlarmProcessingRecordBoolExp   `json:"_not"`
	Or                        []*AlarmProcessingRecordBoolExp `json:"_or"`
	AlarmDataID               *model.StringComparisonExp      `json:"alarm_data_id"`
	AlarmSupervisionPictureID *model.StringComparisonExp      `json:"alarm_supervision_picture_id"`
	AnnounceContent           *model.StringComparisonExp      `json:"announce_content"`
	AppPushContent            *model.StringComparisonExp      `json:"app_push_content"`
	CreatedAt                 *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy                 *model.StringComparisonExp      `json:"created_by"`
	DeletedAt                 *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy                 *model.StringComparisonExp      `json:"deleted_by"`
	DisposalMethod            *model.StringComparisonExp      `json:"disposal_method"`
	DisposalResult            *model.StringComparisonExp      `json:"disposal_result"`
	ID                        *model.BigintComparisonExp      `json:"id"`
	IsAnnounce                *model.BooleanComparisonExp     `json:"is_announce"`
	IsAppPush                 *model.BooleanComparisonExp     `json:"is_app_push"`
	IsDelete                  *model.BooleanComparisonExp     `json:"is_delete"`
	IsNotify                  *model.BooleanComparisonExp     `json:"is_notify"`
	IsSmsPush                 *model.BooleanComparisonExp     `json:"is_sms_push"`
	NotifyContent             *model.StringComparisonExp      `json:"notify_content"`
	OperationUser             *model.StringComparisonExp      `json:"operation_user"`
	ProcessingContent         *model.StringComparisonExp      `json:"processing_content"`
	ProcessingTime            *model.TimestamptzComparisonExp `json:"processing_time"`
	ProcessingType            *model.IntComparisonExp         `json:"processing_type"`
	UpdatedAt                 *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy                 *model.StringComparisonExp      `json:"updated_by"`
}

// input type for incrementing integer column in table "alarm_processing_record"
type AlarmProcessingRecordIncInput struct {
	ID             *int64 `json:"id"`
	ProcessingType *int   `json:"processing_type"`
}

// input type for inserting data into table "alarm_processing_record"
type AlarmProcessingRecordInsertInput struct {
	AlarmDataID               *string    `json:"alarm_data_id"`
	AlarmSupervisionPictureID *string    `json:"alarm_supervision_picture_id"`
	AnnounceContent           *string    `json:"announce_content"`
	AppPushContent            *string    `json:"app_push_content"`
	CreatedAt                 *time.Time `json:"created_at"`
	CreatedBy                 *string    `json:"created_by"`
	DeletedAt                 *time.Time `json:"deleted_at"`
	DeletedBy                 *string    `json:"deleted_by"`
	DisposalMethod            *string    `json:"disposal_method"`
	DisposalResult            *string    `json:"disposal_result"`
	ID                        *int64     `json:"id"`
	IsAnnounce                *bool      `json:"is_announce"`
	IsAppPush                 *bool      `json:"is_app_push"`
	IsDelete                  *bool      `json:"is_delete"`
	IsNotify                  *bool      `json:"is_notify"`
	IsSmsPush                 *bool      `json:"is_sms_push"`
	NotifyContent             *string    `json:"notify_content"`
	OperationUser             *string    `json:"operation_user"`
	ProcessingContent         *string    `json:"processing_content"`
	ProcessingTime            *time.Time `json:"processing_time"`
	ProcessingType            *int       `json:"processing_type"`
	UpdatedAt                 *time.Time `json:"updated_at"`
	UpdatedBy                 *string    `json:"updated_by"`
}

// aggregate max on columns
type AlarmProcessingRecordMaxFields struct {
	AlarmDataID               *string    `json:"alarm_data_id"`
	AlarmSupervisionPictureID *string    `json:"alarm_supervision_picture_id"`
	AnnounceContent           *string    `json:"announce_content"`
	AppPushContent            *string    `json:"app_push_content"`
	CreatedAt                 *time.Time `json:"created_at"`
	CreatedBy                 *string    `json:"created_by"`
	DeletedAt                 *time.Time `json:"deleted_at"`
	DeletedBy                 *string    `json:"deleted_by"`
	DisposalMethod            *string    `json:"disposal_method"`
	DisposalResult            *string    `json:"disposal_result"`
	ID                        *int64     `json:"id"`
	NotifyContent             *string    `json:"notify_content"`
	OperationUser             *string    `json:"operation_user"`
	ProcessingContent         *string    `json:"processing_content"`
	ProcessingTime            *time.Time `json:"processing_time"`
	ProcessingType            *int       `json:"processing_type"`
	UpdatedAt                 *time.Time `json:"updated_at"`
	UpdatedBy                 *string    `json:"updated_by"`
}

// order by max() on columns of table "alarm_processing_record"
type AlarmProcessingRecordMaxOrderBy struct {
	AlarmDataID               *model.OrderBy `json:"alarm_data_id"`
	AlarmSupervisionPictureID *model.OrderBy `json:"alarm_supervision_picture_id"`
	AnnounceContent           *model.OrderBy `json:"announce_content"`
	AppPushContent            *model.OrderBy `json:"app_push_content"`
	CreatedAt                 *model.OrderBy `json:"created_at"`
	CreatedBy                 *model.OrderBy `json:"created_by"`
	DeletedAt                 *model.OrderBy `json:"deleted_at"`
	DeletedBy                 *model.OrderBy `json:"deleted_by"`
	DisposalMethod            *model.OrderBy `json:"disposal_method"`
	DisposalResult            *model.OrderBy `json:"disposal_result"`
	ID                        *model.OrderBy `json:"id"`
	NotifyContent             *model.OrderBy `json:"notify_content"`
	OperationUser             *model.OrderBy `json:"operation_user"`
	ProcessingContent         *model.OrderBy `json:"processing_content"`
	ProcessingTime            *model.OrderBy `json:"processing_time"`
	ProcessingType            *model.OrderBy `json:"processing_type"`
	UpdatedAt                 *model.OrderBy `json:"updated_at"`
	UpdatedBy                 *model.OrderBy `json:"updated_by"`
}

// aggregate min on columns
type AlarmProcessingRecordMinFields struct {
	AlarmDataID               *string    `json:"alarm_data_id"`
	AlarmSupervisionPictureID *string    `json:"alarm_supervision_picture_id"`
	AnnounceContent           *string    `json:"announce_content"`
	AppPushContent            *string    `json:"app_push_content"`
	CreatedAt                 *time.Time `json:"created_at"`
	CreatedBy                 *string    `json:"created_by"`
	DeletedAt                 *time.Time `json:"deleted_at"`
	DeletedBy                 *string    `json:"deleted_by"`
	DisposalMethod            *string    `json:"disposal_method"`
	DisposalResult            *string    `json:"disposal_result"`
	ID                        *int64     `json:"id"`
	NotifyContent             *string    `json:"notify_content"`
	OperationUser             *string    `json:"operation_user"`
	ProcessingContent         *string    `json:"processing_content"`
	ProcessingTime            *time.Time `json:"processing_time"`
	ProcessingType            *int       `json:"processing_type"`
	UpdatedAt                 *time.Time `json:"updated_at"`
	UpdatedBy                 *string    `json:"updated_by"`
}

// order by min() on columns of table "alarm_processing_record"
type AlarmProcessingRecordMinOrderBy struct {
	AlarmDataID               *model.OrderBy `json:"alarm_data_id"`
	AlarmSupervisionPictureID *model.OrderBy `json:"alarm_supervision_picture_id"`
	AnnounceContent           *model.OrderBy `json:"announce_content"`
	AppPushContent            *model.OrderBy `json:"app_push_content"`
	CreatedAt                 *model.OrderBy `json:"created_at"`
	CreatedBy                 *model.OrderBy `json:"created_by"`
	DeletedAt                 *model.OrderBy `json:"deleted_at"`
	DeletedBy                 *model.OrderBy `json:"deleted_by"`
	DisposalMethod            *model.OrderBy `json:"disposal_method"`
	DisposalResult            *model.OrderBy `json:"disposal_result"`
	ID                        *model.OrderBy `json:"id"`
	NotifyContent             *model.OrderBy `json:"notify_content"`
	OperationUser             *model.OrderBy `json:"operation_user"`
	ProcessingContent         *model.OrderBy `json:"processing_content"`
	ProcessingTime            *model.OrderBy `json:"processing_time"`
	ProcessingType            *model.OrderBy `json:"processing_type"`
	UpdatedAt                 *model.OrderBy `json:"updated_at"`
	UpdatedBy                 *model.OrderBy `json:"updated_by"`
}

// response of any mutation on the table "alarm_processing_record"
type AlarmProcessingRecordMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*AlarmProcessingRecord `json:"returning"`
}

// input type for inserting object relation for remote table "alarm_processing_record"
type AlarmProcessingRecordObjRelInsertInput struct {
	Data *AlarmProcessingRecordInsertInput `json:"data"`
}

// ordering options when selecting data from "alarm_processing_record"
type AlarmProcessingRecordOrderBy struct {
	AlarmDataID               *model.OrderBy `json:"alarm_data_id"`
	AlarmSupervisionPictureID *model.OrderBy `json:"alarm_supervision_picture_id"`
	AnnounceContent           *model.OrderBy `json:"announce_content"`
	AppPushContent            *model.OrderBy `json:"app_push_content"`
	CreatedAt                 *model.OrderBy `json:"created_at"`
	CreatedBy                 *model.OrderBy `json:"created_by"`
	DeletedAt                 *model.OrderBy `json:"deleted_at"`
	DeletedBy                 *model.OrderBy `json:"deleted_by"`
	DisposalMethod            *model.OrderBy `json:"disposal_method"`
	DisposalResult            *model.OrderBy `json:"disposal_result"`
	ID                        *model.OrderBy `json:"id"`
	IsAnnounce                *model.OrderBy `json:"is_announce"`
	IsAppPush                 *model.OrderBy `json:"is_app_push"`
	IsDelete                  *model.OrderBy `json:"is_delete"`
	IsNotify                  *model.OrderBy `json:"is_notify"`
	IsSmsPush                 *model.OrderBy `json:"is_sms_push"`
	NotifyContent             *model.OrderBy `json:"notify_content"`
	OperationUser             *model.OrderBy `json:"operation_user"`
	ProcessingContent         *model.OrderBy `json:"processing_content"`
	ProcessingTime            *model.OrderBy `json:"processing_time"`
	ProcessingType            *model.OrderBy `json:"processing_type"`
	UpdatedAt                 *model.OrderBy `json:"updated_at"`
	UpdatedBy                 *model.OrderBy `json:"updated_by"`
}

// input type for updating data in table "alarm_processing_record"
type AlarmProcessingRecordSetInput struct {
	AlarmDataID               *string    `json:"alarm_data_id"`
	AlarmSupervisionPictureID *string    `json:"alarm_supervision_picture_id"`
	AnnounceContent           *string    `json:"announce_content"`
	AppPushContent            *string    `json:"app_push_content"`
	CreatedAt                 *time.Time `json:"created_at"`
	CreatedBy                 *string    `json:"created_by"`
	DeletedAt                 *time.Time `json:"deleted_at"`
	DeletedBy                 *string    `json:"deleted_by"`
	DisposalMethod            *string    `json:"disposal_method"`
	DisposalResult            *string    `json:"disposal_result"`
	ID                        *int64     `json:"id"`
	IsAnnounce                *bool      `json:"is_announce"`
	IsAppPush                 *bool      `json:"is_app_push"`
	IsDelete                  *bool      `json:"is_delete"`
	IsNotify                  *bool      `json:"is_notify"`
	IsSmsPush                 *bool      `json:"is_sms_push"`
	NotifyContent             *string    `json:"notify_content"`
	OperationUser             *string    `json:"operation_user"`
	ProcessingContent         *string    `json:"processing_content"`
	ProcessingTime            *time.Time `json:"processing_time"`
	ProcessingType            *int       `json:"processing_type"`
	UpdatedAt                 *time.Time `json:"updated_at"`
	UpdatedBy                 *string    `json:"updated_by"`
}

// aggregate stddev on columns
type AlarmProcessingRecordStddevFields struct {
	ID             *float64 `json:"id"`
	ProcessingType *float64 `json:"processing_type"`
}

// order by stddev() on columns of table "alarm_processing_record"
type AlarmProcessingRecordStddevOrderBy struct {
	ID             *model.OrderBy `json:"id"`
	ProcessingType *model.OrderBy `json:"processing_type"`
}

// aggregate stddev_pop on columns
type AlarmProcessingRecordStddevPopFields struct {
	ID             *float64 `json:"id"`
	ProcessingType *float64 `json:"processing_type"`
}

// order by stddev_pop() on columns of table "alarm_processing_record"
type AlarmProcessingRecordStddevPopOrderBy struct {
	ID             *model.OrderBy `json:"id"`
	ProcessingType *model.OrderBy `json:"processing_type"`
}

// aggregate stddev_samp on columns
type AlarmProcessingRecordStddevSampFields struct {
	ID             *float64 `json:"id"`
	ProcessingType *float64 `json:"processing_type"`
}

// order by stddev_samp() on columns of table "alarm_processing_record"
type AlarmProcessingRecordStddevSampOrderBy struct {
	ID             *model.OrderBy `json:"id"`
	ProcessingType *model.OrderBy `json:"processing_type"`
}

// aggregate sum on columns
type AlarmProcessingRecordSumFields struct {
	ID             *int64 `json:"id"`
	ProcessingType *int   `json:"processing_type"`
}

// order by sum() on columns of table "alarm_processing_record"
type AlarmProcessingRecordSumOrderBy struct {
	ID             *model.OrderBy `json:"id"`
	ProcessingType *model.OrderBy `json:"processing_type"`
}

// aggregate var_pop on columns
type AlarmProcessingRecordVarPopFields struct {
	ID             *float64 `json:"id"`
	ProcessingType *float64 `json:"processing_type"`
}

// order by var_pop() on columns of table "alarm_processing_record"
type AlarmProcessingRecordVarPopOrderBy struct {
	ID             *model.OrderBy `json:"id"`
	ProcessingType *model.OrderBy `json:"processing_type"`
}

// aggregate var_samp on columns
type AlarmProcessingRecordVarSampFields struct {
	ID             *float64 `json:"id"`
	ProcessingType *float64 `json:"processing_type"`
}

// order by var_samp() on columns of table "alarm_processing_record"
type AlarmProcessingRecordVarSampOrderBy struct {
	ID             *model.OrderBy `json:"id"`
	ProcessingType *model.OrderBy `json:"processing_type"`
}

// aggregate variance on columns
type AlarmProcessingRecordVarianceFields struct {
	ID             *float64 `json:"id"`
	ProcessingType *float64 `json:"processing_type"`
}

// order by variance() on columns of table "alarm_processing_record"
type AlarmProcessingRecordVarianceOrderBy struct {
	ID             *model.OrderBy `json:"id"`
	ProcessingType *model.OrderBy `json:"processing_type"`
}

// aggregated selection of "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadAggregate struct {
	Aggregate *AlarmSupervisionPictureUploadAggregateFields `json:"aggregate"`
	Nodes     []*AlarmSupervisionPictureUpload              `json:"nodes"`
}

// aggregate fields of "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadAggregateFields struct {
	Avg        *AlarmSupervisionPictureUploadAvgFields        `json:"avg"`
	Count      *int                                           `json:"count"`
	Max        *AlarmSupervisionPictureUploadMaxFields        `json:"max"`
	Min        *AlarmSupervisionPictureUploadMinFields        `json:"min"`
	Stddev     *AlarmSupervisionPictureUploadStddevFields     `json:"stddev"`
	StddevPop  *AlarmSupervisionPictureUploadStddevPopFields  `json:"stddev_pop"`
	StddevSamp *AlarmSupervisionPictureUploadStddevSampFields `json:"stddev_samp"`
	Sum        *AlarmSupervisionPictureUploadSumFields        `json:"sum"`
	VarPop     *AlarmSupervisionPictureUploadVarPopFields     `json:"var_pop"`
	VarSamp    *AlarmSupervisionPictureUploadVarSampFields    `json:"var_samp"`
	Variance   *AlarmSupervisionPictureUploadVarianceFields   `json:"variance"`
}

// order by aggregate values of table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadAggregateOrderBy struct {
	Avg        *AlarmSupervisionPictureUploadAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy                                  `json:"count"`
	Max        *AlarmSupervisionPictureUploadMaxOrderBy        `json:"max"`
	Min        *AlarmSupervisionPictureUploadMinOrderBy        `json:"min"`
	Stddev     *AlarmSupervisionPictureUploadStddevOrderBy     `json:"stddev"`
	StddevPop  *AlarmSupervisionPictureUploadStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *AlarmSupervisionPictureUploadStddevSampOrderBy `json:"stddev_samp"`
	Sum        *AlarmSupervisionPictureUploadSumOrderBy        `json:"sum"`
	VarPop     *AlarmSupervisionPictureUploadVarPopOrderBy     `json:"var_pop"`
	VarSamp    *AlarmSupervisionPictureUploadVarSampOrderBy    `json:"var_samp"`
	Variance   *AlarmSupervisionPictureUploadVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadArrRelInsertInput struct {
	Data       []*AlarmSupervisionPictureUploadInsertInput `json:"data"`
	OnConflict *AlarmSupervisionPictureUploadOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type AlarmSupervisionPictureUploadAvgFields struct {
	CameraID *float64 `json:"camera_id"`
	ID       *float64 `json:"id"`
}

// order by avg() on columns of table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadAvgOrderBy struct {
	CameraID *model.OrderBy `json:"camera_id"`
	ID       *model.OrderBy `json:"id"`
}

// Boolean expression to filter rows from the table
// "alarm_supervision_picture_upload". All fields are combined with a logical 'AND'.
type AlarmSupervisionPictureUploadBoolExp struct {
	Imei                      *model.StringComparisonExp              `json:"IMEI"`
	And                       []*AlarmSupervisionPictureUploadBoolExp `json:"_and"`
	Not                       *AlarmSupervisionPictureUploadBoolExp   `json:"_not"`
	Or                        []*AlarmSupervisionPictureUploadBoolExp `json:"_or"`
	AlarmSupervisionPictureID *model.StringComparisonExp              `json:"alarm_supervision_picture_id"`
	CameraID                  *model.IntComparisonExp                 `json:"camera_id"`
	DriverID                  *model.StringComparisonExp              `json:"driver_id"`
	EnterpriseID              *model.StringComparisonExp              `json:"enterprise_id"`
	ID                        *model.BigintComparisonExp              `json:"id"`
	MonitoringPicAddress      *model.StringComparisonExp              `json:"monitoring_pic_address"`
	MonitoringPicName         *model.StringComparisonExp              `json:"monitoring_pic_name"`
	MonitoringPicUploadTime   *model.TimestamptzComparisonExp         `json:"monitoring_pic_upload_time"`
	PhotoCondition            *model.StringComparisonExp              `json:"photo_condition"`
	SimNumber                 *model.StringComparisonExp              `json:"sim_number"`
	UpdateTime                *model.TimestamptzComparisonExp         `json:"update_time"`
	VehicleID                 *model.StringComparisonExp              `json:"vehicle_id"`
}

// input type for incrementing integer column in table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadIncInput struct {
	CameraID *int   `json:"camera_id"`
	ID       *int64 `json:"id"`
}

// input type for inserting data into table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadInsertInput struct {
	Imei                      *string    `json:"IMEI"`
	AlarmSupervisionPictureID *string    `json:"alarm_supervision_picture_id"`
	CameraID                  *int       `json:"camera_id"`
	DriverID                  *string    `json:"driver_id"`
	EnterpriseID              *string    `json:"enterprise_id"`
	ID                        *int64     `json:"id"`
	MonitoringPicAddress      *string    `json:"monitoring_pic_address"`
	MonitoringPicName         *string    `json:"monitoring_pic_name"`
	MonitoringPicUploadTime   *time.Time `json:"monitoring_pic_upload_time"`
	PhotoCondition            *string    `json:"photo_condition"`
	SimNumber                 *string    `json:"sim_number"`
	UpdateTime                *time.Time `json:"update_time"`
	VehicleID                 *string    `json:"vehicle_id"`
}

// aggregate max on columns
type AlarmSupervisionPictureUploadMaxFields struct {
	Imei                      *string    `json:"IMEI"`
	AlarmSupervisionPictureID *string    `json:"alarm_supervision_picture_id"`
	CameraID                  *int       `json:"camera_id"`
	DriverID                  *string    `json:"driver_id"`
	EnterpriseID              *string    `json:"enterprise_id"`
	ID                        *int64     `json:"id"`
	MonitoringPicAddress      *string    `json:"monitoring_pic_address"`
	MonitoringPicName         *string    `json:"monitoring_pic_name"`
	MonitoringPicUploadTime   *time.Time `json:"monitoring_pic_upload_time"`
	PhotoCondition            *string    `json:"photo_condition"`
	SimNumber                 *string    `json:"sim_number"`
	UpdateTime                *time.Time `json:"update_time"`
	VehicleID                 *string    `json:"vehicle_id"`
}

// order by max() on columns of table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadMaxOrderBy struct {
	Imei                      *model.OrderBy `json:"IMEI"`
	AlarmSupervisionPictureID *model.OrderBy `json:"alarm_supervision_picture_id"`
	CameraID                  *model.OrderBy `json:"camera_id"`
	DriverID                  *model.OrderBy `json:"driver_id"`
	EnterpriseID              *model.OrderBy `json:"enterprise_id"`
	ID                        *model.OrderBy `json:"id"`
	MonitoringPicAddress      *model.OrderBy `json:"monitoring_pic_address"`
	MonitoringPicName         *model.OrderBy `json:"monitoring_pic_name"`
	MonitoringPicUploadTime   *model.OrderBy `json:"monitoring_pic_upload_time"`
	PhotoCondition            *model.OrderBy `json:"photo_condition"`
	SimNumber                 *model.OrderBy `json:"sim_number"`
	UpdateTime                *model.OrderBy `json:"update_time"`
	VehicleID                 *model.OrderBy `json:"vehicle_id"`
}

// aggregate min on columns
type AlarmSupervisionPictureUploadMinFields struct {
	Imei                      *string    `json:"IMEI"`
	AlarmSupervisionPictureID *string    `json:"alarm_supervision_picture_id"`
	CameraID                  *int       `json:"camera_id"`
	DriverID                  *string    `json:"driver_id"`
	EnterpriseID              *string    `json:"enterprise_id"`
	ID                        *int64     `json:"id"`
	MonitoringPicAddress      *string    `json:"monitoring_pic_address"`
	MonitoringPicName         *string    `json:"monitoring_pic_name"`
	MonitoringPicUploadTime   *time.Time `json:"monitoring_pic_upload_time"`
	PhotoCondition            *string    `json:"photo_condition"`
	SimNumber                 *string    `json:"sim_number"`
	UpdateTime                *time.Time `json:"update_time"`
	VehicleID                 *string    `json:"vehicle_id"`
}

// order by min() on columns of table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadMinOrderBy struct {
	Imei                      *model.OrderBy `json:"IMEI"`
	AlarmSupervisionPictureID *model.OrderBy `json:"alarm_supervision_picture_id"`
	CameraID                  *model.OrderBy `json:"camera_id"`
	DriverID                  *model.OrderBy `json:"driver_id"`
	EnterpriseID              *model.OrderBy `json:"enterprise_id"`
	ID                        *model.OrderBy `json:"id"`
	MonitoringPicAddress      *model.OrderBy `json:"monitoring_pic_address"`
	MonitoringPicName         *model.OrderBy `json:"monitoring_pic_name"`
	MonitoringPicUploadTime   *model.OrderBy `json:"monitoring_pic_upload_time"`
	PhotoCondition            *model.OrderBy `json:"photo_condition"`
	SimNumber                 *model.OrderBy `json:"sim_number"`
	UpdateTime                *model.OrderBy `json:"update_time"`
	VehicleID                 *model.OrderBy `json:"vehicle_id"`
}

// response of any mutation on the table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*AlarmSupervisionPictureUpload `json:"returning"`
}

// input type for inserting object relation for remote table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadObjRelInsertInput struct {
	Data       *AlarmSupervisionPictureUploadInsertInput `json:"data"`
	OnConflict *AlarmSupervisionPictureUploadOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadOnConflict struct {
	Constraint    AlarmSupervisionPictureUploadConstraint     `json:"constraint"`
	UpdateColumns []AlarmSupervisionPictureUploadUpdateColumn `json:"update_columns"`
	Where         *AlarmSupervisionPictureUploadBoolExp       `json:"where"`
}

// ordering options when selecting data from "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadOrderBy struct {
	Imei                      *model.OrderBy `json:"IMEI"`
	AlarmSupervisionPictureID *model.OrderBy `json:"alarm_supervision_picture_id"`
	CameraID                  *model.OrderBy `json:"camera_id"`
	DriverID                  *model.OrderBy `json:"driver_id"`
	EnterpriseID              *model.OrderBy `json:"enterprise_id"`
	ID                        *model.OrderBy `json:"id"`
	MonitoringPicAddress      *model.OrderBy `json:"monitoring_pic_address"`
	MonitoringPicName         *model.OrderBy `json:"monitoring_pic_name"`
	MonitoringPicUploadTime   *model.OrderBy `json:"monitoring_pic_upload_time"`
	PhotoCondition            *model.OrderBy `json:"photo_condition"`
	SimNumber                 *model.OrderBy `json:"sim_number"`
	UpdateTime                *model.OrderBy `json:"update_time"`
	VehicleID                 *model.OrderBy `json:"vehicle_id"`
}

// primary key columns input for table: "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadPkColumnsInput struct {
	// 主键
	ID int64 `json:"id"`
}

// input type for updating data in table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadSetInput struct {
	Imei                      *string    `json:"IMEI"`
	AlarmSupervisionPictureID *string    `json:"alarm_supervision_picture_id"`
	CameraID                  *int       `json:"camera_id"`
	DriverID                  *string    `json:"driver_id"`
	EnterpriseID              *string    `json:"enterprise_id"`
	ID                        *int64     `json:"id"`
	MonitoringPicAddress      *string    `json:"monitoring_pic_address"`
	MonitoringPicName         *string    `json:"monitoring_pic_name"`
	MonitoringPicUploadTime   *time.Time `json:"monitoring_pic_upload_time"`
	PhotoCondition            *string    `json:"photo_condition"`
	SimNumber                 *string    `json:"sim_number"`
	UpdateTime                *time.Time `json:"update_time"`
	VehicleID                 *string    `json:"vehicle_id"`
}

// aggregate stddev on columns
type AlarmSupervisionPictureUploadStddevFields struct {
	CameraID *float64 `json:"camera_id"`
	ID       *float64 `json:"id"`
}

// order by stddev() on columns of table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadStddevOrderBy struct {
	CameraID *model.OrderBy `json:"camera_id"`
	ID       *model.OrderBy `json:"id"`
}

// aggregate stddev_pop on columns
type AlarmSupervisionPictureUploadStddevPopFields struct {
	CameraID *float64 `json:"camera_id"`
	ID       *float64 `json:"id"`
}

// order by stddev_pop() on columns of table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadStddevPopOrderBy struct {
	CameraID *model.OrderBy `json:"camera_id"`
	ID       *model.OrderBy `json:"id"`
}

// aggregate stddev_samp on columns
type AlarmSupervisionPictureUploadStddevSampFields struct {
	CameraID *float64 `json:"camera_id"`
	ID       *float64 `json:"id"`
}

// order by stddev_samp() on columns of table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadStddevSampOrderBy struct {
	CameraID *model.OrderBy `json:"camera_id"`
	ID       *model.OrderBy `json:"id"`
}

// aggregate sum on columns
type AlarmSupervisionPictureUploadSumFields struct {
	CameraID *int   `json:"camera_id"`
	ID       *int64 `json:"id"`
}

// order by sum() on columns of table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadSumOrderBy struct {
	CameraID *model.OrderBy `json:"camera_id"`
	ID       *model.OrderBy `json:"id"`
}

// aggregate var_pop on columns
type AlarmSupervisionPictureUploadVarPopFields struct {
	CameraID *float64 `json:"camera_id"`
	ID       *float64 `json:"id"`
}

// order by var_pop() on columns of table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadVarPopOrderBy struct {
	CameraID *model.OrderBy `json:"camera_id"`
	ID       *model.OrderBy `json:"id"`
}

// aggregate var_samp on columns
type AlarmSupervisionPictureUploadVarSampFields struct {
	CameraID *float64 `json:"camera_id"`
	ID       *float64 `json:"id"`
}

// order by var_samp() on columns of table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadVarSampOrderBy struct {
	CameraID *model.OrderBy `json:"camera_id"`
	ID       *model.OrderBy `json:"id"`
}

// aggregate variance on columns
type AlarmSupervisionPictureUploadVarianceFields struct {
	CameraID *float64 `json:"camera_id"`
	ID       *float64 `json:"id"`
}

// order by variance() on columns of table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadVarianceOrderBy struct {
	CameraID *model.OrderBy `json:"camera_id"`
	ID       *model.OrderBy `json:"id"`
}

// aggregated selection of "district_alarm_content_push"
type DistrictAlarmContentPushAggregate struct {
	Aggregate *DistrictAlarmContentPushAggregateFields `json:"aggregate"`
	Nodes     []*DistrictAlarmContentPush              `json:"nodes"`
}

// aggregate fields of "district_alarm_content_push"
type DistrictAlarmContentPushAggregateFields struct {
	Avg        *DistrictAlarmContentPushAvgFields        `json:"avg"`
	Count      *int                                      `json:"count"`
	Max        *DistrictAlarmContentPushMaxFields        `json:"max"`
	Min        *DistrictAlarmContentPushMinFields        `json:"min"`
	Stddev     *DistrictAlarmContentPushStddevFields     `json:"stddev"`
	StddevPop  *DistrictAlarmContentPushStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DistrictAlarmContentPushStddevSampFields `json:"stddev_samp"`
	Sum        *DistrictAlarmContentPushSumFields        `json:"sum"`
	VarPop     *DistrictAlarmContentPushVarPopFields     `json:"var_pop"`
	VarSamp    *DistrictAlarmContentPushVarSampFields    `json:"var_samp"`
	Variance   *DistrictAlarmContentPushVarianceFields   `json:"variance"`
}

// order by aggregate values of table "district_alarm_content_push"
type DistrictAlarmContentPushAggregateOrderBy struct {
	Avg        *DistrictAlarmContentPushAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy                             `json:"count"`
	Max        *DistrictAlarmContentPushMaxOrderBy        `json:"max"`
	Min        *DistrictAlarmContentPushMinOrderBy        `json:"min"`
	Stddev     *DistrictAlarmContentPushStddevOrderBy     `json:"stddev"`
	StddevPop  *DistrictAlarmContentPushStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *DistrictAlarmContentPushStddevSampOrderBy `json:"stddev_samp"`
	Sum        *DistrictAlarmContentPushSumOrderBy        `json:"sum"`
	VarPop     *DistrictAlarmContentPushVarPopOrderBy     `json:"var_pop"`
	VarSamp    *DistrictAlarmContentPushVarSampOrderBy    `json:"var_samp"`
	Variance   *DistrictAlarmContentPushVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "district_alarm_content_push"
type DistrictAlarmContentPushArrRelInsertInput struct {
	Data       []*DistrictAlarmContentPushInsertInput `json:"data"`
	OnConflict *DistrictAlarmContentPushOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type DistrictAlarmContentPushAvgFields struct {
	ID *float64 `json:"id"`
}

// order by avg() on columns of table "district_alarm_content_push"
type DistrictAlarmContentPushAvgOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

// Boolean expression to filter rows from the table "district_alarm_content_push".
// All fields are combined with a logical 'AND'.
type DistrictAlarmContentPushBoolExp struct {
	And          []*DistrictAlarmContentPushBoolExp `json:"_and"`
	Not          *DistrictAlarmContentPushBoolExp   `json:"_not"`
	Or           []*DistrictAlarmContentPushBoolExp `json:"_or"`
	AlarmContent *model.StringComparisonExp         `json:"alarm_content"`
	AlarmDataID  *model.StringComparisonExp         `json:"alarm_data_id"`
	AlarmType    *model.StringComparisonExp         `json:"alarm_type"`
	CityID       *model.StringComparisonExp         `json:"city_id"`
	CreatedAt    *model.TimestamptzComparisonExp    `json:"created_at"`
	CreatedBy    *model.StringComparisonExp         `json:"created_by"`
	DeletedAt    *model.TimestamptzComparisonExp    `json:"deleted_at"`
	DeletedBy    *model.StringComparisonExp         `json:"deleted_by"`
	DistrictID   *model.StringComparisonExp         `json:"district_id"`
	ID           *model.BigintComparisonExp         `json:"id"`
	IsDelete     *model.BooleanComparisonExp        `json:"is_delete"`
	ProvinceID   *model.StringComparisonExp         `json:"province_id"`
	UpdatedAt    *model.TimestamptzComparisonExp    `json:"updated_at"`
	UpdatedBy    *model.StringComparisonExp         `json:"updated_by"`
}

// input type for incrementing integer column in table "district_alarm_content_push"
type DistrictAlarmContentPushIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "district_alarm_content_push"
type DistrictAlarmContentPushInsertInput struct {
	AlarmContent *string    `json:"alarm_content"`
	AlarmDataID  *string    `json:"alarm_data_id"`
	AlarmType    *string    `json:"alarm_type"`
	CityID       *string    `json:"city_id"`
	CreatedAt    *time.Time `json:"created_at"`
	CreatedBy    *string    `json:"created_by"`
	DeletedAt    *time.Time `json:"deleted_at"`
	DeletedBy    *string    `json:"deleted_by"`
	DistrictID   *string    `json:"district_id"`
	ID           *int64     `json:"id"`
	IsDelete     *bool      `json:"is_delete"`
	ProvinceID   *string    `json:"province_id"`
	UpdatedAt    *time.Time `json:"updated_at"`
	UpdatedBy    *string    `json:"updated_by"`
}

// aggregate max on columns
type DistrictAlarmContentPushMaxFields struct {
	AlarmContent *string    `json:"alarm_content"`
	AlarmDataID  *string    `json:"alarm_data_id"`
	AlarmType    *string    `json:"alarm_type"`
	CityID       *string    `json:"city_id"`
	CreatedAt    *time.Time `json:"created_at"`
	CreatedBy    *string    `json:"created_by"`
	DeletedAt    *time.Time `json:"deleted_at"`
	DeletedBy    *string    `json:"deleted_by"`
	DistrictID   *string    `json:"district_id"`
	ID           *int64     `json:"id"`
	ProvinceID   *string    `json:"province_id"`
	UpdatedAt    *time.Time `json:"updated_at"`
	UpdatedBy    *string    `json:"updated_by"`
}

// order by max() on columns of table "district_alarm_content_push"
type DistrictAlarmContentPushMaxOrderBy struct {
	AlarmContent *model.OrderBy `json:"alarm_content"`
	AlarmDataID  *model.OrderBy `json:"alarm_data_id"`
	AlarmType    *model.OrderBy `json:"alarm_type"`
	CityID       *model.OrderBy `json:"city_id"`
	CreatedAt    *model.OrderBy `json:"created_at"`
	CreatedBy    *model.OrderBy `json:"created_by"`
	DeletedAt    *model.OrderBy `json:"deleted_at"`
	DeletedBy    *model.OrderBy `json:"deleted_by"`
	DistrictID   *model.OrderBy `json:"district_id"`
	ID           *model.OrderBy `json:"id"`
	ProvinceID   *model.OrderBy `json:"province_id"`
	UpdatedAt    *model.OrderBy `json:"updated_at"`
	UpdatedBy    *model.OrderBy `json:"updated_by"`
}

// aggregate min on columns
type DistrictAlarmContentPushMinFields struct {
	AlarmContent *string    `json:"alarm_content"`
	AlarmDataID  *string    `json:"alarm_data_id"`
	AlarmType    *string    `json:"alarm_type"`
	CityID       *string    `json:"city_id"`
	CreatedAt    *time.Time `json:"created_at"`
	CreatedBy    *string    `json:"created_by"`
	DeletedAt    *time.Time `json:"deleted_at"`
	DeletedBy    *string    `json:"deleted_by"`
	DistrictID   *string    `json:"district_id"`
	ID           *int64     `json:"id"`
	ProvinceID   *string    `json:"province_id"`
	UpdatedAt    *time.Time `json:"updated_at"`
	UpdatedBy    *string    `json:"updated_by"`
}

// order by min() on columns of table "district_alarm_content_push"
type DistrictAlarmContentPushMinOrderBy struct {
	AlarmContent *model.OrderBy `json:"alarm_content"`
	AlarmDataID  *model.OrderBy `json:"alarm_data_id"`
	AlarmType    *model.OrderBy `json:"alarm_type"`
	CityID       *model.OrderBy `json:"city_id"`
	CreatedAt    *model.OrderBy `json:"created_at"`
	CreatedBy    *model.OrderBy `json:"created_by"`
	DeletedAt    *model.OrderBy `json:"deleted_at"`
	DeletedBy    *model.OrderBy `json:"deleted_by"`
	DistrictID   *model.OrderBy `json:"district_id"`
	ID           *model.OrderBy `json:"id"`
	ProvinceID   *model.OrderBy `json:"province_id"`
	UpdatedAt    *model.OrderBy `json:"updated_at"`
	UpdatedBy    *model.OrderBy `json:"updated_by"`
}

// response of any mutation on the table "district_alarm_content_push"
type DistrictAlarmContentPushMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*DistrictAlarmContentPush `json:"returning"`
}

// input type for inserting object relation for remote table "district_alarm_content_push"
type DistrictAlarmContentPushObjRelInsertInput struct {
	Data       *DistrictAlarmContentPushInsertInput `json:"data"`
	OnConflict *DistrictAlarmContentPushOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "district_alarm_content_push"
type DistrictAlarmContentPushOnConflict struct {
	Constraint    DistrictAlarmContentPushConstraint     `json:"constraint"`
	UpdateColumns []DistrictAlarmContentPushUpdateColumn `json:"update_columns"`
	Where         *DistrictAlarmContentPushBoolExp       `json:"where"`
}

// ordering options when selecting data from "district_alarm_content_push"
type DistrictAlarmContentPushOrderBy struct {
	AlarmContent *model.OrderBy `json:"alarm_content"`
	AlarmDataID  *model.OrderBy `json:"alarm_data_id"`
	AlarmType    *model.OrderBy `json:"alarm_type"`
	CityID       *model.OrderBy `json:"city_id"`
	CreatedAt    *model.OrderBy `json:"created_at"`
	CreatedBy    *model.OrderBy `json:"created_by"`
	DeletedAt    *model.OrderBy `json:"deleted_at"`
	DeletedBy    *model.OrderBy `json:"deleted_by"`
	DistrictID   *model.OrderBy `json:"district_id"`
	ID           *model.OrderBy `json:"id"`
	IsDelete     *model.OrderBy `json:"is_delete"`
	ProvinceID   *model.OrderBy `json:"province_id"`
	UpdatedAt    *model.OrderBy `json:"updated_at"`
	UpdatedBy    *model.OrderBy `json:"updated_by"`
}

// primary key columns input for table: "district_alarm_content_push"
type DistrictAlarmContentPushPkColumnsInput struct {
	// 主键
	ID int64 `json:"id"`
}

// input type for updating data in table "district_alarm_content_push"
type DistrictAlarmContentPushSetInput struct {
	AlarmContent *string    `json:"alarm_content"`
	AlarmDataID  *string    `json:"alarm_data_id"`
	AlarmType    *string    `json:"alarm_type"`
	CityID       *string    `json:"city_id"`
	CreatedAt    *time.Time `json:"created_at"`
	CreatedBy    *string    `json:"created_by"`
	DeletedAt    *time.Time `json:"deleted_at"`
	DeletedBy    *string    `json:"deleted_by"`
	DistrictID   *string    `json:"district_id"`
	ID           *int64     `json:"id"`
	IsDelete     *bool      `json:"is_delete"`
	ProvinceID   *string    `json:"province_id"`
	UpdatedAt    *time.Time `json:"updated_at"`
	UpdatedBy    *string    `json:"updated_by"`
}

// aggregate stddev on columns
type DistrictAlarmContentPushStddevFields struct {
	ID *float64 `json:"id"`
}

// order by stddev() on columns of table "district_alarm_content_push"
type DistrictAlarmContentPushStddevOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

// aggregate stddev_pop on columns
type DistrictAlarmContentPushStddevPopFields struct {
	ID *float64 `json:"id"`
}

// order by stddev_pop() on columns of table "district_alarm_content_push"
type DistrictAlarmContentPushStddevPopOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

// aggregate stddev_samp on columns
type DistrictAlarmContentPushStddevSampFields struct {
	ID *float64 `json:"id"`
}

// order by stddev_samp() on columns of table "district_alarm_content_push"
type DistrictAlarmContentPushStddevSampOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

// aggregate sum on columns
type DistrictAlarmContentPushSumFields struct {
	ID *int64 `json:"id"`
}

// order by sum() on columns of table "district_alarm_content_push"
type DistrictAlarmContentPushSumOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

// aggregate var_pop on columns
type DistrictAlarmContentPushVarPopFields struct {
	ID *float64 `json:"id"`
}

// order by var_pop() on columns of table "district_alarm_content_push"
type DistrictAlarmContentPushVarPopOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

// aggregate var_samp on columns
type DistrictAlarmContentPushVarSampFields struct {
	ID *float64 `json:"id"`
}

// order by var_samp() on columns of table "district_alarm_content_push"
type DistrictAlarmContentPushVarSampOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

// aggregate variance on columns
type DistrictAlarmContentPushVarianceFields struct {
	ID *float64 `json:"id"`
}

// order by variance() on columns of table "district_alarm_content_push"
type DistrictAlarmContentPushVarianceOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

// aggregated selection of "vehicle_alarm_data"
type VehicleAlarmDataAggregate struct {
	Aggregate *VehicleAlarmDataAggregateFields `json:"aggregate"`
	Nodes     []*VehicleAlarmData              `json:"nodes"`
}

// aggregate fields of "vehicle_alarm_data"
type VehicleAlarmDataAggregateFields struct {
	Avg        *VehicleAlarmDataAvgFields        `json:"avg"`
	Count      *int                              `json:"count"`
	Max        *VehicleAlarmDataMaxFields        `json:"max"`
	Min        *VehicleAlarmDataMinFields        `json:"min"`
	Stddev     *VehicleAlarmDataStddevFields     `json:"stddev"`
	StddevPop  *VehicleAlarmDataStddevPopFields  `json:"stddev_pop"`
	StddevSamp *VehicleAlarmDataStddevSampFields `json:"stddev_samp"`
	Sum        *VehicleAlarmDataSumFields        `json:"sum"`
	VarPop     *VehicleAlarmDataVarPopFields     `json:"var_pop"`
	VarSamp    *VehicleAlarmDataVarSampFields    `json:"var_samp"`
	Variance   *VehicleAlarmDataVarianceFields   `json:"variance"`
}

// order by aggregate values of table "vehicle_alarm_data"
type VehicleAlarmDataAggregateOrderBy struct {
	Avg        *VehicleAlarmDataAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy                     `json:"count"`
	Max        *VehicleAlarmDataMaxOrderBy        `json:"max"`
	Min        *VehicleAlarmDataMinOrderBy        `json:"min"`
	Stddev     *VehicleAlarmDataStddevOrderBy     `json:"stddev"`
	StddevPop  *VehicleAlarmDataStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *VehicleAlarmDataStddevSampOrderBy `json:"stddev_samp"`
	Sum        *VehicleAlarmDataSumOrderBy        `json:"sum"`
	VarPop     *VehicleAlarmDataVarPopOrderBy     `json:"var_pop"`
	VarSamp    *VehicleAlarmDataVarSampOrderBy    `json:"var_samp"`
	Variance   *VehicleAlarmDataVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "vehicle_alarm_data"
type VehicleAlarmDataArrRelInsertInput struct {
	Data       []*VehicleAlarmDataInsertInput `json:"data"`
	OnConflict *VehicleAlarmDataOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type VehicleAlarmDataAvgFields struct {
	GpsSpeed            *float64 `json:"GPS_speed"`
	ID                  *float64 `json:"id"`
	LatestAlarmPosition *float64 `json:"latest_alarm_position"`
	MaximumSpeed        *float64 `json:"maximum_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
}

// order by avg() on columns of table "vehicle_alarm_data"
type VehicleAlarmDataAvgOrderBy struct {
	GpsSpeed            *model.OrderBy `json:"GPS_speed"`
	ID                  *model.OrderBy `json:"id"`
	LatestAlarmPosition *model.OrderBy `json:"latest_alarm_position"`
	MaximumSpeed        *model.OrderBy `json:"maximum_speed"`
	SpeedLimitThreshold *model.OrderBy `json:"speed_limit_threshold"`
	TachographSpeed     *model.OrderBy `json:"tachograph_speed"`
}

// Boolean expression to filter rows from the table "vehicle_alarm_data". All fields are combined with a logical 'AND'.
type VehicleAlarmDataBoolExp struct {
	GpsSpeed              *model.NumericComparisonExp     `json:"GPS_speed"`
	And                   []*VehicleAlarmDataBoolExp      `json:"_and"`
	Not                   *VehicleAlarmDataBoolExp        `json:"_not"`
	Or                    []*VehicleAlarmDataBoolExp      `json:"_or"`
	AlarmDealID           *model.StringComparisonExp      `json:"alarm_deal_id"`
	AlarmEndPosition      *model.StringComparisonExp      `json:"alarm_end_position"`
	AlarmEndTime          *model.TimestamptzComparisonExp `json:"alarm_end_time"`
	AlarmSource           *model.StringComparisonExp      `json:"alarm_source"`
	AlarmStartTime        *model.TimestamptzComparisonExp `json:"alarm_start_time"`
	AlarmType             *model.StringComparisonExp      `json:"alarm_type"`
	AreaID                *model.StringComparisonExp      `json:"area_id"`
	Coordinate            *model.PointComparisonExp       `json:"coordinate"`
	Duration              *model.StringComparisonExp      `json:"duration"`
	ID                    *model.BigintComparisonExp      `json:"id"`
	IsAlarmEffective      *model.BooleanComparisonExp     `json:"is_alarm_effective"`
	IsAlarmOver           *model.BooleanComparisonExp     `json:"is_alarm_over"`
	IsCancelAlarm         *model.BooleanComparisonExp     `json:"is_cancel_alarm"`
	IsResolve             *model.BooleanComparisonExp     `json:"is_resolve"`
	IsSupervise           *model.BooleanComparisonExp     `json:"is_supervise"`
	LatestAlarmPosition   *model.IntComparisonExp         `json:"latest_alarm_position"`
	LatestAlarmTime       *model.TimestamptzComparisonExp `json:"latest_alarm_time"`
	LocationDescription   *model.StringComparisonExp      `json:"location_description"`
	MaximumSpeed          *model.NumericComparisonExp     `json:"maximum_speed"`
	Pid                   *model.StringComparisonExp      `json:"pid"`
	ProcessingDescription *model.StringComparisonExp      `json:"processing_description"`
	ProcessingMethod      *model.StringComparisonExp      `json:"processing_method"`
	ProcessingStatus      *model.StringComparisonExp      `json:"processing_status"`
	ProcessingTime        *model.TimestamptzComparisonExp `json:"processing_time"`
	Processor             *model.StringComparisonExp      `json:"processor"`
	RecordTime            *model.TimestamptzComparisonExp `json:"record_time"`
	RoadGrade             *model.StringComparisonExp      `json:"road_grade"`
	RoadName              *model.StringComparisonExp      `json:"road_name"`
	SpeedLimitThreshold   *model.NumericComparisonExp     `json:"speed_limit_threshold"`
	SupervisionNote       *model.StringComparisonExp      `json:"supervision_note"`
	SupervisionTime       *model.TimestamptzComparisonExp `json:"supervision_time"`
	Supervisor            *model.StringComparisonExp      `json:"supervisor"`
	TachographSpeed       *model.NumericComparisonExp     `json:"tachograph_speed"`
	VehicleAlarmDataID    *model.StringComparisonExp      `json:"vehicle_alarm_data_id"`
	VehicleID             *model.StringComparisonExp      `json:"vehicle_id"`
}

// input type for incrementing integer column in table "vehicle_alarm_data"
type VehicleAlarmDataIncInput struct {
	GpsSpeed            *float64 `json:"GPS_speed"`
	ID                  *int64   `json:"id"`
	LatestAlarmPosition *int     `json:"latest_alarm_position"`
	MaximumSpeed        *float64 `json:"maximum_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
}

// input type for inserting data into table "vehicle_alarm_data"
type VehicleAlarmDataInsertInput struct {
	GpsSpeed              *float64   `json:"GPS_speed"`
	AlarmDealID           *string    `json:"alarm_deal_id"`
	AlarmEndPosition      *string    `json:"alarm_end_position"`
	AlarmEndTime          *time.Time `json:"alarm_end_time"`
	AlarmSource           *string    `json:"alarm_source"`
	AlarmStartTime        *time.Time `json:"alarm_start_time"`
	AlarmType             *string    `json:"alarm_type"`
	AreaID                *string    `json:"area_id"`
	Coordinate            *string    `json:"coordinate"`
	Duration              *string    `json:"duration"`
	ID                    *int64     `json:"id"`
	IsAlarmEffective      *bool      `json:"is_alarm_effective"`
	IsAlarmOver           *bool      `json:"is_alarm_over"`
	IsCancelAlarm         *bool      `json:"is_cancel_alarm"`
	IsResolve             *bool      `json:"is_resolve"`
	IsSupervise           *bool      `json:"is_supervise"`
	LatestAlarmPosition   *int       `json:"latest_alarm_position"`
	LatestAlarmTime       *time.Time `json:"latest_alarm_time"`
	LocationDescription   *string    `json:"location_description"`
	MaximumSpeed          *float64   `json:"maximum_speed"`
	Pid                   *string    `json:"pid"`
	ProcessingDescription *string    `json:"processing_description"`
	ProcessingMethod      *string    `json:"processing_method"`
	ProcessingStatus      *string    `json:"processing_status"`
	ProcessingTime        *time.Time `json:"processing_time"`
	Processor             *string    `json:"processor"`
	RecordTime            *time.Time `json:"record_time"`
	RoadGrade             *string    `json:"road_grade"`
	RoadName              *string    `json:"road_name"`
	SpeedLimitThreshold   *float64   `json:"speed_limit_threshold"`
	SupervisionNote       *string    `json:"supervision_note"`
	SupervisionTime       *time.Time `json:"supervision_time"`
	Supervisor            *string    `json:"supervisor"`
	TachographSpeed       *float64   `json:"tachograph_speed"`
	VehicleAlarmDataID    *string    `json:"vehicle_alarm_data_id"`
	VehicleID             *string    `json:"vehicle_id"`
}

// aggregate max on columns
type VehicleAlarmDataMaxFields struct {
	GpsSpeed              *float64   `json:"GPS_speed"`
	AlarmDealID           *string    `json:"alarm_deal_id"`
	AlarmEndPosition      *string    `json:"alarm_end_position"`
	AlarmEndTime          *time.Time `json:"alarm_end_time"`
	AlarmSource           *string    `json:"alarm_source"`
	AlarmStartTime        *time.Time `json:"alarm_start_time"`
	AlarmType             *string    `json:"alarm_type"`
	AreaID                *string    `json:"area_id"`
	Duration              *string    `json:"duration"`
	ID                    *int64     `json:"id"`
	LatestAlarmPosition   *int       `json:"latest_alarm_position"`
	LatestAlarmTime       *time.Time `json:"latest_alarm_time"`
	LocationDescription   *string    `json:"location_description"`
	MaximumSpeed          *float64   `json:"maximum_speed"`
	Pid                   *string    `json:"pid"`
	ProcessingDescription *string    `json:"processing_description"`
	ProcessingMethod      *string    `json:"processing_method"`
	ProcessingStatus      *string    `json:"processing_status"`
	ProcessingTime        *time.Time `json:"processing_time"`
	Processor             *string    `json:"processor"`
	RecordTime            *time.Time `json:"record_time"`
	RoadGrade             *string    `json:"road_grade"`
	RoadName              *string    `json:"road_name"`
	SpeedLimitThreshold   *float64   `json:"speed_limit_threshold"`
	SupervisionNote       *string    `json:"supervision_note"`
	SupervisionTime       *time.Time `json:"supervision_time"`
	Supervisor            *string    `json:"supervisor"`
	TachographSpeed       *float64   `json:"tachograph_speed"`
	VehicleAlarmDataID    *string    `json:"vehicle_alarm_data_id"`
	VehicleID             *string    `json:"vehicle_id"`
}

// order by max() on columns of table "vehicle_alarm_data"
type VehicleAlarmDataMaxOrderBy struct {
	GpsSpeed              *model.OrderBy `json:"GPS_speed"`
	AlarmDealID           *model.OrderBy `json:"alarm_deal_id"`
	AlarmEndPosition      *model.OrderBy `json:"alarm_end_position"`
	AlarmEndTime          *model.OrderBy `json:"alarm_end_time"`
	AlarmSource           *model.OrderBy `json:"alarm_source"`
	AlarmStartTime        *model.OrderBy `json:"alarm_start_time"`
	AlarmType             *model.OrderBy `json:"alarm_type"`
	AreaID                *model.OrderBy `json:"area_id"`
	Duration              *model.OrderBy `json:"duration"`
	ID                    *model.OrderBy `json:"id"`
	LatestAlarmPosition   *model.OrderBy `json:"latest_alarm_position"`
	LatestAlarmTime       *model.OrderBy `json:"latest_alarm_time"`
	LocationDescription   *model.OrderBy `json:"location_description"`
	MaximumSpeed          *model.OrderBy `json:"maximum_speed"`
	Pid                   *model.OrderBy `json:"pid"`
	ProcessingDescription *model.OrderBy `json:"processing_description"`
	ProcessingMethod      *model.OrderBy `json:"processing_method"`
	ProcessingStatus      *model.OrderBy `json:"processing_status"`
	ProcessingTime        *model.OrderBy `json:"processing_time"`
	Processor             *model.OrderBy `json:"processor"`
	RecordTime            *model.OrderBy `json:"record_time"`
	RoadGrade             *model.OrderBy `json:"road_grade"`
	RoadName              *model.OrderBy `json:"road_name"`
	SpeedLimitThreshold   *model.OrderBy `json:"speed_limit_threshold"`
	SupervisionNote       *model.OrderBy `json:"supervision_note"`
	SupervisionTime       *model.OrderBy `json:"supervision_time"`
	Supervisor            *model.OrderBy `json:"supervisor"`
	TachographSpeed       *model.OrderBy `json:"tachograph_speed"`
	VehicleAlarmDataID    *model.OrderBy `json:"vehicle_alarm_data_id"`
	VehicleID             *model.OrderBy `json:"vehicle_id"`
}

// aggregate min on columns
type VehicleAlarmDataMinFields struct {
	GpsSpeed              *float64   `json:"GPS_speed"`
	AlarmDealID           *string    `json:"alarm_deal_id"`
	AlarmEndPosition      *string    `json:"alarm_end_position"`
	AlarmEndTime          *time.Time `json:"alarm_end_time"`
	AlarmSource           *string    `json:"alarm_source"`
	AlarmStartTime        *time.Time `json:"alarm_start_time"`
	AlarmType             *string    `json:"alarm_type"`
	AreaID                *string    `json:"area_id"`
	Duration              *string    `json:"duration"`
	ID                    *int64     `json:"id"`
	LatestAlarmPosition   *int       `json:"latest_alarm_position"`
	LatestAlarmTime       *time.Time `json:"latest_alarm_time"`
	LocationDescription   *string    `json:"location_description"`
	MaximumSpeed          *float64   `json:"maximum_speed"`
	Pid                   *string    `json:"pid"`
	ProcessingDescription *string    `json:"processing_description"`
	ProcessingMethod      *string    `json:"processing_method"`
	ProcessingStatus      *string    `json:"processing_status"`
	ProcessingTime        *time.Time `json:"processing_time"`
	Processor             *string    `json:"processor"`
	RecordTime            *time.Time `json:"record_time"`
	RoadGrade             *string    `json:"road_grade"`
	RoadName              *string    `json:"road_name"`
	SpeedLimitThreshold   *float64   `json:"speed_limit_threshold"`
	SupervisionNote       *string    `json:"supervision_note"`
	SupervisionTime       *time.Time `json:"supervision_time"`
	Supervisor            *string    `json:"supervisor"`
	TachographSpeed       *float64   `json:"tachograph_speed"`
	VehicleAlarmDataID    *string    `json:"vehicle_alarm_data_id"`
	VehicleID             *string    `json:"vehicle_id"`
}

// order by min() on columns of table "vehicle_alarm_data"
type VehicleAlarmDataMinOrderBy struct {
	GpsSpeed              *model.OrderBy `json:"GPS_speed"`
	AlarmDealID           *model.OrderBy `json:"alarm_deal_id"`
	AlarmEndPosition      *model.OrderBy `json:"alarm_end_position"`
	AlarmEndTime          *model.OrderBy `json:"alarm_end_time"`
	AlarmSource           *model.OrderBy `json:"alarm_source"`
	AlarmStartTime        *model.OrderBy `json:"alarm_start_time"`
	AlarmType             *model.OrderBy `json:"alarm_type"`
	AreaID                *model.OrderBy `json:"area_id"`
	Duration              *model.OrderBy `json:"duration"`
	ID                    *model.OrderBy `json:"id"`
	LatestAlarmPosition   *model.OrderBy `json:"latest_alarm_position"`
	LatestAlarmTime       *model.OrderBy `json:"latest_alarm_time"`
	LocationDescription   *model.OrderBy `json:"location_description"`
	MaximumSpeed          *model.OrderBy `json:"maximum_speed"`
	Pid                   *model.OrderBy `json:"pid"`
	ProcessingDescription *model.OrderBy `json:"processing_description"`
	ProcessingMethod      *model.OrderBy `json:"processing_method"`
	ProcessingStatus      *model.OrderBy `json:"processing_status"`
	ProcessingTime        *model.OrderBy `json:"processing_time"`
	Processor             *model.OrderBy `json:"processor"`
	RecordTime            *model.OrderBy `json:"record_time"`
	RoadGrade             *model.OrderBy `json:"road_grade"`
	RoadName              *model.OrderBy `json:"road_name"`
	SpeedLimitThreshold   *model.OrderBy `json:"speed_limit_threshold"`
	SupervisionNote       *model.OrderBy `json:"supervision_note"`
	SupervisionTime       *model.OrderBy `json:"supervision_time"`
	Supervisor            *model.OrderBy `json:"supervisor"`
	TachographSpeed       *model.OrderBy `json:"tachograph_speed"`
	VehicleAlarmDataID    *model.OrderBy `json:"vehicle_alarm_data_id"`
	VehicleID             *model.OrderBy `json:"vehicle_id"`
}

// response of any mutation on the table "vehicle_alarm_data"
type VehicleAlarmDataMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*VehicleAlarmData `json:"returning"`
}

// input type for inserting object relation for remote table "vehicle_alarm_data"
type VehicleAlarmDataObjRelInsertInput struct {
	Data       *VehicleAlarmDataInsertInput `json:"data"`
	OnConflict *VehicleAlarmDataOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "vehicle_alarm_data"
type VehicleAlarmDataOnConflict struct {
	Constraint    VehicleAlarmDataConstraint     `json:"constraint"`
	UpdateColumns []VehicleAlarmDataUpdateColumn `json:"update_columns"`
	Where         *VehicleAlarmDataBoolExp       `json:"where"`
}

// ordering options when selecting data from "vehicle_alarm_data"
type VehicleAlarmDataOrderBy struct {
	GpsSpeed              *model.OrderBy `json:"GPS_speed"`
	AlarmDealID           *model.OrderBy `json:"alarm_deal_id"`
	AlarmEndPosition      *model.OrderBy `json:"alarm_end_position"`
	AlarmEndTime          *model.OrderBy `json:"alarm_end_time"`
	AlarmSource           *model.OrderBy `json:"alarm_source"`
	AlarmStartTime        *model.OrderBy `json:"alarm_start_time"`
	AlarmType             *model.OrderBy `json:"alarm_type"`
	AreaID                *model.OrderBy `json:"area_id"`
	Coordinate            *model.OrderBy `json:"coordinate"`
	Duration              *model.OrderBy `json:"duration"`
	ID                    *model.OrderBy `json:"id"`
	IsAlarmEffective      *model.OrderBy `json:"is_alarm_effective"`
	IsAlarmOver           *model.OrderBy `json:"is_alarm_over"`
	IsCancelAlarm         *model.OrderBy `json:"is_cancel_alarm"`
	IsResolve             *model.OrderBy `json:"is_resolve"`
	IsSupervise           *model.OrderBy `json:"is_supervise"`
	LatestAlarmPosition   *model.OrderBy `json:"latest_alarm_position"`
	LatestAlarmTime       *model.OrderBy `json:"latest_alarm_time"`
	LocationDescription   *model.OrderBy `json:"location_description"`
	MaximumSpeed          *model.OrderBy `json:"maximum_speed"`
	Pid                   *model.OrderBy `json:"pid"`
	ProcessingDescription *model.OrderBy `json:"processing_description"`
	ProcessingMethod      *model.OrderBy `json:"processing_method"`
	ProcessingStatus      *model.OrderBy `json:"processing_status"`
	ProcessingTime        *model.OrderBy `json:"processing_time"`
	Processor             *model.OrderBy `json:"processor"`
	RecordTime            *model.OrderBy `json:"record_time"`
	RoadGrade             *model.OrderBy `json:"road_grade"`
	RoadName              *model.OrderBy `json:"road_name"`
	SpeedLimitThreshold   *model.OrderBy `json:"speed_limit_threshold"`
	SupervisionNote       *model.OrderBy `json:"supervision_note"`
	SupervisionTime       *model.OrderBy `json:"supervision_time"`
	Supervisor            *model.OrderBy `json:"supervisor"`
	TachographSpeed       *model.OrderBy `json:"tachograph_speed"`
	VehicleAlarmDataID    *model.OrderBy `json:"vehicle_alarm_data_id"`
	VehicleID             *model.OrderBy `json:"vehicle_id"`
}

// primary key columns input for table: "vehicle_alarm_data"
type VehicleAlarmDataPkColumnsInput struct {
	// 主键
	ID int64 `json:"id"`
	// 报警数据外部编码，由golang程序生成的xid，暴露到外部使用，联合主键
	VehicleAlarmDataID string `json:"vehicle_alarm_data_id"`
}

// input type for updating data in table "vehicle_alarm_data"
type VehicleAlarmDataSetInput struct {
	GpsSpeed              *float64   `json:"GPS_speed"`
	AlarmDealID           *string    `json:"alarm_deal_id"`
	AlarmEndPosition      *string    `json:"alarm_end_position"`
	AlarmEndTime          *time.Time `json:"alarm_end_time"`
	AlarmSource           *string    `json:"alarm_source"`
	AlarmStartTime        *time.Time `json:"alarm_start_time"`
	AlarmType             *string    `json:"alarm_type"`
	AreaID                *string    `json:"area_id"`
	Coordinate            *string    `json:"coordinate"`
	Duration              *string    `json:"duration"`
	ID                    *int64     `json:"id"`
	IsAlarmEffective      *bool      `json:"is_alarm_effective"`
	IsAlarmOver           *bool      `json:"is_alarm_over"`
	IsCancelAlarm         *bool      `json:"is_cancel_alarm"`
	IsResolve             *bool      `json:"is_resolve"`
	IsSupervise           *bool      `json:"is_supervise"`
	LatestAlarmPosition   *int       `json:"latest_alarm_position"`
	LatestAlarmTime       *time.Time `json:"latest_alarm_time"`
	LocationDescription   *string    `json:"location_description"`
	MaximumSpeed          *float64   `json:"maximum_speed"`
	Pid                   *string    `json:"pid"`
	ProcessingDescription *string    `json:"processing_description"`
	ProcessingMethod      *string    `json:"processing_method"`
	ProcessingStatus      *string    `json:"processing_status"`
	ProcessingTime        *time.Time `json:"processing_time"`
	Processor             *string    `json:"processor"`
	RecordTime            *time.Time `json:"record_time"`
	RoadGrade             *string    `json:"road_grade"`
	RoadName              *string    `json:"road_name"`
	SpeedLimitThreshold   *float64   `json:"speed_limit_threshold"`
	SupervisionNote       *string    `json:"supervision_note"`
	SupervisionTime       *time.Time `json:"supervision_time"`
	Supervisor            *string    `json:"supervisor"`
	TachographSpeed       *float64   `json:"tachograph_speed"`
	VehicleAlarmDataID    *string    `json:"vehicle_alarm_data_id"`
	VehicleID             *string    `json:"vehicle_id"`
}

// aggregate stddev on columns
type VehicleAlarmDataStddevFields struct {
	GpsSpeed            *float64 `json:"GPS_speed"`
	ID                  *float64 `json:"id"`
	LatestAlarmPosition *float64 `json:"latest_alarm_position"`
	MaximumSpeed        *float64 `json:"maximum_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
}

// order by stddev() on columns of table "vehicle_alarm_data"
type VehicleAlarmDataStddevOrderBy struct {
	GpsSpeed            *model.OrderBy `json:"GPS_speed"`
	ID                  *model.OrderBy `json:"id"`
	LatestAlarmPosition *model.OrderBy `json:"latest_alarm_position"`
	MaximumSpeed        *model.OrderBy `json:"maximum_speed"`
	SpeedLimitThreshold *model.OrderBy `json:"speed_limit_threshold"`
	TachographSpeed     *model.OrderBy `json:"tachograph_speed"`
}

// aggregate stddev_pop on columns
type VehicleAlarmDataStddevPopFields struct {
	GpsSpeed            *float64 `json:"GPS_speed"`
	ID                  *float64 `json:"id"`
	LatestAlarmPosition *float64 `json:"latest_alarm_position"`
	MaximumSpeed        *float64 `json:"maximum_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
}

// order by stddev_pop() on columns of table "vehicle_alarm_data"
type VehicleAlarmDataStddevPopOrderBy struct {
	GpsSpeed            *model.OrderBy `json:"GPS_speed"`
	ID                  *model.OrderBy `json:"id"`
	LatestAlarmPosition *model.OrderBy `json:"latest_alarm_position"`
	MaximumSpeed        *model.OrderBy `json:"maximum_speed"`
	SpeedLimitThreshold *model.OrderBy `json:"speed_limit_threshold"`
	TachographSpeed     *model.OrderBy `json:"tachograph_speed"`
}

// aggregate stddev_samp on columns
type VehicleAlarmDataStddevSampFields struct {
	GpsSpeed            *float64 `json:"GPS_speed"`
	ID                  *float64 `json:"id"`
	LatestAlarmPosition *float64 `json:"latest_alarm_position"`
	MaximumSpeed        *float64 `json:"maximum_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
}

// order by stddev_samp() on columns of table "vehicle_alarm_data"
type VehicleAlarmDataStddevSampOrderBy struct {
	GpsSpeed            *model.OrderBy `json:"GPS_speed"`
	ID                  *model.OrderBy `json:"id"`
	LatestAlarmPosition *model.OrderBy `json:"latest_alarm_position"`
	MaximumSpeed        *model.OrderBy `json:"maximum_speed"`
	SpeedLimitThreshold *model.OrderBy `json:"speed_limit_threshold"`
	TachographSpeed     *model.OrderBy `json:"tachograph_speed"`
}

// aggregate sum on columns
type VehicleAlarmDataSumFields struct {
	GpsSpeed            *float64 `json:"GPS_speed"`
	ID                  *int64   `json:"id"`
	LatestAlarmPosition *int     `json:"latest_alarm_position"`
	MaximumSpeed        *float64 `json:"maximum_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
}

// order by sum() on columns of table "vehicle_alarm_data"
type VehicleAlarmDataSumOrderBy struct {
	GpsSpeed            *model.OrderBy `json:"GPS_speed"`
	ID                  *model.OrderBy `json:"id"`
	LatestAlarmPosition *model.OrderBy `json:"latest_alarm_position"`
	MaximumSpeed        *model.OrderBy `json:"maximum_speed"`
	SpeedLimitThreshold *model.OrderBy `json:"speed_limit_threshold"`
	TachographSpeed     *model.OrderBy `json:"tachograph_speed"`
}

// aggregate var_pop on columns
type VehicleAlarmDataVarPopFields struct {
	GpsSpeed            *float64 `json:"GPS_speed"`
	ID                  *float64 `json:"id"`
	LatestAlarmPosition *float64 `json:"latest_alarm_position"`
	MaximumSpeed        *float64 `json:"maximum_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
}

// order by var_pop() on columns of table "vehicle_alarm_data"
type VehicleAlarmDataVarPopOrderBy struct {
	GpsSpeed            *model.OrderBy `json:"GPS_speed"`
	ID                  *model.OrderBy `json:"id"`
	LatestAlarmPosition *model.OrderBy `json:"latest_alarm_position"`
	MaximumSpeed        *model.OrderBy `json:"maximum_speed"`
	SpeedLimitThreshold *model.OrderBy `json:"speed_limit_threshold"`
	TachographSpeed     *model.OrderBy `json:"tachograph_speed"`
}

// aggregate var_samp on columns
type VehicleAlarmDataVarSampFields struct {
	GpsSpeed            *float64 `json:"GPS_speed"`
	ID                  *float64 `json:"id"`
	LatestAlarmPosition *float64 `json:"latest_alarm_position"`
	MaximumSpeed        *float64 `json:"maximum_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
}

// order by var_samp() on columns of table "vehicle_alarm_data"
type VehicleAlarmDataVarSampOrderBy struct {
	GpsSpeed            *model.OrderBy `json:"GPS_speed"`
	ID                  *model.OrderBy `json:"id"`
	LatestAlarmPosition *model.OrderBy `json:"latest_alarm_position"`
	MaximumSpeed        *model.OrderBy `json:"maximum_speed"`
	SpeedLimitThreshold *model.OrderBy `json:"speed_limit_threshold"`
	TachographSpeed     *model.OrderBy `json:"tachograph_speed"`
}

// aggregate variance on columns
type VehicleAlarmDataVarianceFields struct {
	GpsSpeed            *float64 `json:"GPS_speed"`
	ID                  *float64 `json:"id"`
	LatestAlarmPosition *float64 `json:"latest_alarm_position"`
	MaximumSpeed        *float64 `json:"maximum_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
}

// order by variance() on columns of table "vehicle_alarm_data"
type VehicleAlarmDataVarianceOrderBy struct {
	GpsSpeed            *model.OrderBy `json:"GPS_speed"`
	ID                  *model.OrderBy `json:"id"`
	LatestAlarmPosition *model.OrderBy `json:"latest_alarm_position"`
	MaximumSpeed        *model.OrderBy `json:"maximum_speed"`
	SpeedLimitThreshold *model.OrderBy `json:"speed_limit_threshold"`
	TachographSpeed     *model.OrderBy `json:"tachograph_speed"`
}

// select columns of table "alarm_processing_record"
type AlarmProcessingRecordSelectColumn string

const (
	// column name
	AlarmProcessingRecordSelectColumnAlarmDataID AlarmProcessingRecordSelectColumn = "alarm_data_id"
	// column name
	AlarmProcessingRecordSelectColumnAlarmSupervisionPictureID AlarmProcessingRecordSelectColumn = "alarm_supervision_picture_id"
	// column name
	AlarmProcessingRecordSelectColumnAnnounceContent AlarmProcessingRecordSelectColumn = "announce_content"
	// column name
	AlarmProcessingRecordSelectColumnAppPushContent AlarmProcessingRecordSelectColumn = "app_push_content"
	// column name
	AlarmProcessingRecordSelectColumnCreatedAt AlarmProcessingRecordSelectColumn = "created_at"
	// column name
	AlarmProcessingRecordSelectColumnCreatedBy AlarmProcessingRecordSelectColumn = "created_by"
	// column name
	AlarmProcessingRecordSelectColumnDeletedAt AlarmProcessingRecordSelectColumn = "deleted_at"
	// column name
	AlarmProcessingRecordSelectColumnDeletedBy AlarmProcessingRecordSelectColumn = "deleted_by"
	// column name
	AlarmProcessingRecordSelectColumnDisposalMethod AlarmProcessingRecordSelectColumn = "disposal_method"
	// column name
	AlarmProcessingRecordSelectColumnDisposalResult AlarmProcessingRecordSelectColumn = "disposal_result"
	// column name
	AlarmProcessingRecordSelectColumnID AlarmProcessingRecordSelectColumn = "id"
	// column name
	AlarmProcessingRecordSelectColumnIsAnnounce AlarmProcessingRecordSelectColumn = "is_announce"
	// column name
	AlarmProcessingRecordSelectColumnIsAppPush AlarmProcessingRecordSelectColumn = "is_app_push"
	// column name
	AlarmProcessingRecordSelectColumnIsDelete AlarmProcessingRecordSelectColumn = "is_delete"
	// column name
	AlarmProcessingRecordSelectColumnIsNotify AlarmProcessingRecordSelectColumn = "is_notify"
	// column name
	AlarmProcessingRecordSelectColumnIsSmsPush AlarmProcessingRecordSelectColumn = "is_sms_push"
	// column name
	AlarmProcessingRecordSelectColumnNotifyContent AlarmProcessingRecordSelectColumn = "notify_content"
	// column name
	AlarmProcessingRecordSelectColumnOperationUser AlarmProcessingRecordSelectColumn = "operation_user"
	// column name
	AlarmProcessingRecordSelectColumnProcessingContent AlarmProcessingRecordSelectColumn = "processing_content"
	// column name
	AlarmProcessingRecordSelectColumnProcessingTime AlarmProcessingRecordSelectColumn = "processing_time"
	// column name
	AlarmProcessingRecordSelectColumnProcessingType AlarmProcessingRecordSelectColumn = "processing_type"
	// column name
	AlarmProcessingRecordSelectColumnUpdatedAt AlarmProcessingRecordSelectColumn = "updated_at"
	// column name
	AlarmProcessingRecordSelectColumnUpdatedBy AlarmProcessingRecordSelectColumn = "updated_by"
)

var AllAlarmProcessingRecordSelectColumn = []AlarmProcessingRecordSelectColumn{
	AlarmProcessingRecordSelectColumnAlarmDataID,
	AlarmProcessingRecordSelectColumnAlarmSupervisionPictureID,
	AlarmProcessingRecordSelectColumnAnnounceContent,
	AlarmProcessingRecordSelectColumnAppPushContent,
	AlarmProcessingRecordSelectColumnCreatedAt,
	AlarmProcessingRecordSelectColumnCreatedBy,
	AlarmProcessingRecordSelectColumnDeletedAt,
	AlarmProcessingRecordSelectColumnDeletedBy,
	AlarmProcessingRecordSelectColumnDisposalMethod,
	AlarmProcessingRecordSelectColumnDisposalResult,
	AlarmProcessingRecordSelectColumnID,
	AlarmProcessingRecordSelectColumnIsAnnounce,
	AlarmProcessingRecordSelectColumnIsAppPush,
	AlarmProcessingRecordSelectColumnIsDelete,
	AlarmProcessingRecordSelectColumnIsNotify,
	AlarmProcessingRecordSelectColumnIsSmsPush,
	AlarmProcessingRecordSelectColumnNotifyContent,
	AlarmProcessingRecordSelectColumnOperationUser,
	AlarmProcessingRecordSelectColumnProcessingContent,
	AlarmProcessingRecordSelectColumnProcessingTime,
	AlarmProcessingRecordSelectColumnProcessingType,
	AlarmProcessingRecordSelectColumnUpdatedAt,
	AlarmProcessingRecordSelectColumnUpdatedBy,
}

func (e AlarmProcessingRecordSelectColumn) IsValid() bool {
	switch e {
	case AlarmProcessingRecordSelectColumnAlarmDataID, AlarmProcessingRecordSelectColumnAlarmSupervisionPictureID, AlarmProcessingRecordSelectColumnAnnounceContent, AlarmProcessingRecordSelectColumnAppPushContent, AlarmProcessingRecordSelectColumnCreatedAt, AlarmProcessingRecordSelectColumnCreatedBy, AlarmProcessingRecordSelectColumnDeletedAt, AlarmProcessingRecordSelectColumnDeletedBy, AlarmProcessingRecordSelectColumnDisposalMethod, AlarmProcessingRecordSelectColumnDisposalResult, AlarmProcessingRecordSelectColumnID, AlarmProcessingRecordSelectColumnIsAnnounce, AlarmProcessingRecordSelectColumnIsAppPush, AlarmProcessingRecordSelectColumnIsDelete, AlarmProcessingRecordSelectColumnIsNotify, AlarmProcessingRecordSelectColumnIsSmsPush, AlarmProcessingRecordSelectColumnNotifyContent, AlarmProcessingRecordSelectColumnOperationUser, AlarmProcessingRecordSelectColumnProcessingContent, AlarmProcessingRecordSelectColumnProcessingTime, AlarmProcessingRecordSelectColumnProcessingType, AlarmProcessingRecordSelectColumnUpdatedAt, AlarmProcessingRecordSelectColumnUpdatedBy:
		return true
	}
	return false
}

func (e AlarmProcessingRecordSelectColumn) String() string {
	return string(e)
}

func (e *AlarmProcessingRecordSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AlarmProcessingRecordSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid alarm_processing_record_select_column", str)
	}
	return nil
}

func (e AlarmProcessingRecordSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// unique or primary key constraints on table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadConstraint string

const (
	// unique or primary key constraint
	AlarmSupervisionPictureUploadConstraintAlarmSupervisionPictureUploadPkey AlarmSupervisionPictureUploadConstraint = "alarm_supervision_picture_upload_pkey"
)

var AllAlarmSupervisionPictureUploadConstraint = []AlarmSupervisionPictureUploadConstraint{
	AlarmSupervisionPictureUploadConstraintAlarmSupervisionPictureUploadPkey,
}

func (e AlarmSupervisionPictureUploadConstraint) IsValid() bool {
	switch e {
	case AlarmSupervisionPictureUploadConstraintAlarmSupervisionPictureUploadPkey:
		return true
	}
	return false
}

func (e AlarmSupervisionPictureUploadConstraint) String() string {
	return string(e)
}

func (e *AlarmSupervisionPictureUploadConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AlarmSupervisionPictureUploadConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid alarm_supervision_picture_upload_constraint", str)
	}
	return nil
}

func (e AlarmSupervisionPictureUploadConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadSelectColumn string

const (
	// column name
	AlarmSupervisionPictureUploadSelectColumnImei AlarmSupervisionPictureUploadSelectColumn = "IMEI"
	// column name
	AlarmSupervisionPictureUploadSelectColumnAlarmSupervisionPictureID AlarmSupervisionPictureUploadSelectColumn = "alarm_supervision_picture_id"
	// column name
	AlarmSupervisionPictureUploadSelectColumnCameraID AlarmSupervisionPictureUploadSelectColumn = "camera_id"
	// column name
	AlarmSupervisionPictureUploadSelectColumnDriverID AlarmSupervisionPictureUploadSelectColumn = "driver_id"
	// column name
	AlarmSupervisionPictureUploadSelectColumnEnterpriseID AlarmSupervisionPictureUploadSelectColumn = "enterprise_id"
	// column name
	AlarmSupervisionPictureUploadSelectColumnID AlarmSupervisionPictureUploadSelectColumn = "id"
	// column name
	AlarmSupervisionPictureUploadSelectColumnMonitoringPicAddress AlarmSupervisionPictureUploadSelectColumn = "monitoring_pic_address"
	// column name
	AlarmSupervisionPictureUploadSelectColumnMonitoringPicName AlarmSupervisionPictureUploadSelectColumn = "monitoring_pic_name"
	// column name
	AlarmSupervisionPictureUploadSelectColumnMonitoringPicUploadTime AlarmSupervisionPictureUploadSelectColumn = "monitoring_pic_upload_time"
	// column name
	AlarmSupervisionPictureUploadSelectColumnPhotoCondition AlarmSupervisionPictureUploadSelectColumn = "photo_condition"
	// column name
	AlarmSupervisionPictureUploadSelectColumnSimNumber AlarmSupervisionPictureUploadSelectColumn = "sim_number"
	// column name
	AlarmSupervisionPictureUploadSelectColumnUpdateTime AlarmSupervisionPictureUploadSelectColumn = "update_time"
	// column name
	AlarmSupervisionPictureUploadSelectColumnVehicleID AlarmSupervisionPictureUploadSelectColumn = "vehicle_id"
)

var AllAlarmSupervisionPictureUploadSelectColumn = []AlarmSupervisionPictureUploadSelectColumn{
	AlarmSupervisionPictureUploadSelectColumnImei,
	AlarmSupervisionPictureUploadSelectColumnAlarmSupervisionPictureID,
	AlarmSupervisionPictureUploadSelectColumnCameraID,
	AlarmSupervisionPictureUploadSelectColumnDriverID,
	AlarmSupervisionPictureUploadSelectColumnEnterpriseID,
	AlarmSupervisionPictureUploadSelectColumnID,
	AlarmSupervisionPictureUploadSelectColumnMonitoringPicAddress,
	AlarmSupervisionPictureUploadSelectColumnMonitoringPicName,
	AlarmSupervisionPictureUploadSelectColumnMonitoringPicUploadTime,
	AlarmSupervisionPictureUploadSelectColumnPhotoCondition,
	AlarmSupervisionPictureUploadSelectColumnSimNumber,
	AlarmSupervisionPictureUploadSelectColumnUpdateTime,
	AlarmSupervisionPictureUploadSelectColumnVehicleID,
}

func (e AlarmSupervisionPictureUploadSelectColumn) IsValid() bool {
	switch e {
	case AlarmSupervisionPictureUploadSelectColumnImei, AlarmSupervisionPictureUploadSelectColumnAlarmSupervisionPictureID, AlarmSupervisionPictureUploadSelectColumnCameraID, AlarmSupervisionPictureUploadSelectColumnDriverID, AlarmSupervisionPictureUploadSelectColumnEnterpriseID, AlarmSupervisionPictureUploadSelectColumnID, AlarmSupervisionPictureUploadSelectColumnMonitoringPicAddress, AlarmSupervisionPictureUploadSelectColumnMonitoringPicName, AlarmSupervisionPictureUploadSelectColumnMonitoringPicUploadTime, AlarmSupervisionPictureUploadSelectColumnPhotoCondition, AlarmSupervisionPictureUploadSelectColumnSimNumber, AlarmSupervisionPictureUploadSelectColumnUpdateTime, AlarmSupervisionPictureUploadSelectColumnVehicleID:
		return true
	}
	return false
}

func (e AlarmSupervisionPictureUploadSelectColumn) String() string {
	return string(e)
}

func (e *AlarmSupervisionPictureUploadSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AlarmSupervisionPictureUploadSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid alarm_supervision_picture_upload_select_column", str)
	}
	return nil
}

func (e AlarmSupervisionPictureUploadSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "alarm_supervision_picture_upload"
type AlarmSupervisionPictureUploadUpdateColumn string

const (
	// column name
	AlarmSupervisionPictureUploadUpdateColumnImei AlarmSupervisionPictureUploadUpdateColumn = "IMEI"
	// column name
	AlarmSupervisionPictureUploadUpdateColumnAlarmSupervisionPictureID AlarmSupervisionPictureUploadUpdateColumn = "alarm_supervision_picture_id"
	// column name
	AlarmSupervisionPictureUploadUpdateColumnCameraID AlarmSupervisionPictureUploadUpdateColumn = "camera_id"
	// column name
	AlarmSupervisionPictureUploadUpdateColumnDriverID AlarmSupervisionPictureUploadUpdateColumn = "driver_id"
	// column name
	AlarmSupervisionPictureUploadUpdateColumnEnterpriseID AlarmSupervisionPictureUploadUpdateColumn = "enterprise_id"
	// column name
	AlarmSupervisionPictureUploadUpdateColumnID AlarmSupervisionPictureUploadUpdateColumn = "id"
	// column name
	AlarmSupervisionPictureUploadUpdateColumnMonitoringPicAddress AlarmSupervisionPictureUploadUpdateColumn = "monitoring_pic_address"
	// column name
	AlarmSupervisionPictureUploadUpdateColumnMonitoringPicName AlarmSupervisionPictureUploadUpdateColumn = "monitoring_pic_name"
	// column name
	AlarmSupervisionPictureUploadUpdateColumnMonitoringPicUploadTime AlarmSupervisionPictureUploadUpdateColumn = "monitoring_pic_upload_time"
	// column name
	AlarmSupervisionPictureUploadUpdateColumnPhotoCondition AlarmSupervisionPictureUploadUpdateColumn = "photo_condition"
	// column name
	AlarmSupervisionPictureUploadUpdateColumnSimNumber AlarmSupervisionPictureUploadUpdateColumn = "sim_number"
	// column name
	AlarmSupervisionPictureUploadUpdateColumnUpdateTime AlarmSupervisionPictureUploadUpdateColumn = "update_time"
	// column name
	AlarmSupervisionPictureUploadUpdateColumnVehicleID AlarmSupervisionPictureUploadUpdateColumn = "vehicle_id"
)

var AllAlarmSupervisionPictureUploadUpdateColumn = []AlarmSupervisionPictureUploadUpdateColumn{
	AlarmSupervisionPictureUploadUpdateColumnImei,
	AlarmSupervisionPictureUploadUpdateColumnAlarmSupervisionPictureID,
	AlarmSupervisionPictureUploadUpdateColumnCameraID,
	AlarmSupervisionPictureUploadUpdateColumnDriverID,
	AlarmSupervisionPictureUploadUpdateColumnEnterpriseID,
	AlarmSupervisionPictureUploadUpdateColumnID,
	AlarmSupervisionPictureUploadUpdateColumnMonitoringPicAddress,
	AlarmSupervisionPictureUploadUpdateColumnMonitoringPicName,
	AlarmSupervisionPictureUploadUpdateColumnMonitoringPicUploadTime,
	AlarmSupervisionPictureUploadUpdateColumnPhotoCondition,
	AlarmSupervisionPictureUploadUpdateColumnSimNumber,
	AlarmSupervisionPictureUploadUpdateColumnUpdateTime,
	AlarmSupervisionPictureUploadUpdateColumnVehicleID,
}

func (e AlarmSupervisionPictureUploadUpdateColumn) IsValid() bool {
	switch e {
	case AlarmSupervisionPictureUploadUpdateColumnImei, AlarmSupervisionPictureUploadUpdateColumnAlarmSupervisionPictureID, AlarmSupervisionPictureUploadUpdateColumnCameraID, AlarmSupervisionPictureUploadUpdateColumnDriverID, AlarmSupervisionPictureUploadUpdateColumnEnterpriseID, AlarmSupervisionPictureUploadUpdateColumnID, AlarmSupervisionPictureUploadUpdateColumnMonitoringPicAddress, AlarmSupervisionPictureUploadUpdateColumnMonitoringPicName, AlarmSupervisionPictureUploadUpdateColumnMonitoringPicUploadTime, AlarmSupervisionPictureUploadUpdateColumnPhotoCondition, AlarmSupervisionPictureUploadUpdateColumnSimNumber, AlarmSupervisionPictureUploadUpdateColumnUpdateTime, AlarmSupervisionPictureUploadUpdateColumnVehicleID:
		return true
	}
	return false
}

func (e AlarmSupervisionPictureUploadUpdateColumn) String() string {
	return string(e)
}

func (e *AlarmSupervisionPictureUploadUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AlarmSupervisionPictureUploadUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid alarm_supervision_picture_upload_update_column", str)
	}
	return nil
}

func (e AlarmSupervisionPictureUploadUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// unique or primary key constraints on table "district_alarm_content_push"
type DistrictAlarmContentPushConstraint string

const (
	// unique or primary key constraint
	DistrictAlarmContentPushConstraintDistrictAlarmContentPushPkey DistrictAlarmContentPushConstraint = "district_alarm_content_push_pkey"
)

var AllDistrictAlarmContentPushConstraint = []DistrictAlarmContentPushConstraint{
	DistrictAlarmContentPushConstraintDistrictAlarmContentPushPkey,
}

func (e DistrictAlarmContentPushConstraint) IsValid() bool {
	switch e {
	case DistrictAlarmContentPushConstraintDistrictAlarmContentPushPkey:
		return true
	}
	return false
}

func (e DistrictAlarmContentPushConstraint) String() string {
	return string(e)
}

func (e *DistrictAlarmContentPushConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DistrictAlarmContentPushConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid district_alarm_content_push_constraint", str)
	}
	return nil
}

func (e DistrictAlarmContentPushConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "district_alarm_content_push"
type DistrictAlarmContentPushSelectColumn string

const (
	// column name
	DistrictAlarmContentPushSelectColumnAlarmContent DistrictAlarmContentPushSelectColumn = "alarm_content"
	// column name
	DistrictAlarmContentPushSelectColumnAlarmDataID DistrictAlarmContentPushSelectColumn = "alarm_data_id"
	// column name
	DistrictAlarmContentPushSelectColumnAlarmType DistrictAlarmContentPushSelectColumn = "alarm_type"
	// column name
	DistrictAlarmContentPushSelectColumnCityID DistrictAlarmContentPushSelectColumn = "city_id"
	// column name
	DistrictAlarmContentPushSelectColumnCreatedAt DistrictAlarmContentPushSelectColumn = "created_at"
	// column name
	DistrictAlarmContentPushSelectColumnCreatedBy DistrictAlarmContentPushSelectColumn = "created_by"
	// column name
	DistrictAlarmContentPushSelectColumnDeletedAt DistrictAlarmContentPushSelectColumn = "deleted_at"
	// column name
	DistrictAlarmContentPushSelectColumnDeletedBy DistrictAlarmContentPushSelectColumn = "deleted_by"
	// column name
	DistrictAlarmContentPushSelectColumnDistrictID DistrictAlarmContentPushSelectColumn = "district_id"
	// column name
	DistrictAlarmContentPushSelectColumnID DistrictAlarmContentPushSelectColumn = "id"
	// column name
	DistrictAlarmContentPushSelectColumnIsDelete DistrictAlarmContentPushSelectColumn = "is_delete"
	// column name
	DistrictAlarmContentPushSelectColumnProvinceID DistrictAlarmContentPushSelectColumn = "province_id"
	// column name
	DistrictAlarmContentPushSelectColumnUpdatedAt DistrictAlarmContentPushSelectColumn = "updated_at"
	// column name
	DistrictAlarmContentPushSelectColumnUpdatedBy DistrictAlarmContentPushSelectColumn = "updated_by"
)

var AllDistrictAlarmContentPushSelectColumn = []DistrictAlarmContentPushSelectColumn{
	DistrictAlarmContentPushSelectColumnAlarmContent,
	DistrictAlarmContentPushSelectColumnAlarmDataID,
	DistrictAlarmContentPushSelectColumnAlarmType,
	DistrictAlarmContentPushSelectColumnCityID,
	DistrictAlarmContentPushSelectColumnCreatedAt,
	DistrictAlarmContentPushSelectColumnCreatedBy,
	DistrictAlarmContentPushSelectColumnDeletedAt,
	DistrictAlarmContentPushSelectColumnDeletedBy,
	DistrictAlarmContentPushSelectColumnDistrictID,
	DistrictAlarmContentPushSelectColumnID,
	DistrictAlarmContentPushSelectColumnIsDelete,
	DistrictAlarmContentPushSelectColumnProvinceID,
	DistrictAlarmContentPushSelectColumnUpdatedAt,
	DistrictAlarmContentPushSelectColumnUpdatedBy,
}

func (e DistrictAlarmContentPushSelectColumn) IsValid() bool {
	switch e {
	case DistrictAlarmContentPushSelectColumnAlarmContent, DistrictAlarmContentPushSelectColumnAlarmDataID, DistrictAlarmContentPushSelectColumnAlarmType, DistrictAlarmContentPushSelectColumnCityID, DistrictAlarmContentPushSelectColumnCreatedAt, DistrictAlarmContentPushSelectColumnCreatedBy, DistrictAlarmContentPushSelectColumnDeletedAt, DistrictAlarmContentPushSelectColumnDeletedBy, DistrictAlarmContentPushSelectColumnDistrictID, DistrictAlarmContentPushSelectColumnID, DistrictAlarmContentPushSelectColumnIsDelete, DistrictAlarmContentPushSelectColumnProvinceID, DistrictAlarmContentPushSelectColumnUpdatedAt, DistrictAlarmContentPushSelectColumnUpdatedBy:
		return true
	}
	return false
}

func (e DistrictAlarmContentPushSelectColumn) String() string {
	return string(e)
}

func (e *DistrictAlarmContentPushSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DistrictAlarmContentPushSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid district_alarm_content_push_select_column", str)
	}
	return nil
}

func (e DistrictAlarmContentPushSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "district_alarm_content_push"
type DistrictAlarmContentPushUpdateColumn string

const (
	// column name
	DistrictAlarmContentPushUpdateColumnAlarmContent DistrictAlarmContentPushUpdateColumn = "alarm_content"
	// column name
	DistrictAlarmContentPushUpdateColumnAlarmDataID DistrictAlarmContentPushUpdateColumn = "alarm_data_id"
	// column name
	DistrictAlarmContentPushUpdateColumnAlarmType DistrictAlarmContentPushUpdateColumn = "alarm_type"
	// column name
	DistrictAlarmContentPushUpdateColumnCityID DistrictAlarmContentPushUpdateColumn = "city_id"
	// column name
	DistrictAlarmContentPushUpdateColumnCreatedAt DistrictAlarmContentPushUpdateColumn = "created_at"
	// column name
	DistrictAlarmContentPushUpdateColumnCreatedBy DistrictAlarmContentPushUpdateColumn = "created_by"
	// column name
	DistrictAlarmContentPushUpdateColumnDeletedAt DistrictAlarmContentPushUpdateColumn = "deleted_at"
	// column name
	DistrictAlarmContentPushUpdateColumnDeletedBy DistrictAlarmContentPushUpdateColumn = "deleted_by"
	// column name
	DistrictAlarmContentPushUpdateColumnDistrictID DistrictAlarmContentPushUpdateColumn = "district_id"
	// column name
	DistrictAlarmContentPushUpdateColumnID DistrictAlarmContentPushUpdateColumn = "id"
	// column name
	DistrictAlarmContentPushUpdateColumnIsDelete DistrictAlarmContentPushUpdateColumn = "is_delete"
	// column name
	DistrictAlarmContentPushUpdateColumnProvinceID DistrictAlarmContentPushUpdateColumn = "province_id"
	// column name
	DistrictAlarmContentPushUpdateColumnUpdatedAt DistrictAlarmContentPushUpdateColumn = "updated_at"
	// column name
	DistrictAlarmContentPushUpdateColumnUpdatedBy DistrictAlarmContentPushUpdateColumn = "updated_by"
)

var AllDistrictAlarmContentPushUpdateColumn = []DistrictAlarmContentPushUpdateColumn{
	DistrictAlarmContentPushUpdateColumnAlarmContent,
	DistrictAlarmContentPushUpdateColumnAlarmDataID,
	DistrictAlarmContentPushUpdateColumnAlarmType,
	DistrictAlarmContentPushUpdateColumnCityID,
	DistrictAlarmContentPushUpdateColumnCreatedAt,
	DistrictAlarmContentPushUpdateColumnCreatedBy,
	DistrictAlarmContentPushUpdateColumnDeletedAt,
	DistrictAlarmContentPushUpdateColumnDeletedBy,
	DistrictAlarmContentPushUpdateColumnDistrictID,
	DistrictAlarmContentPushUpdateColumnID,
	DistrictAlarmContentPushUpdateColumnIsDelete,
	DistrictAlarmContentPushUpdateColumnProvinceID,
	DistrictAlarmContentPushUpdateColumnUpdatedAt,
	DistrictAlarmContentPushUpdateColumnUpdatedBy,
}

func (e DistrictAlarmContentPushUpdateColumn) IsValid() bool {
	switch e {
	case DistrictAlarmContentPushUpdateColumnAlarmContent, DistrictAlarmContentPushUpdateColumnAlarmDataID, DistrictAlarmContentPushUpdateColumnAlarmType, DistrictAlarmContentPushUpdateColumnCityID, DistrictAlarmContentPushUpdateColumnCreatedAt, DistrictAlarmContentPushUpdateColumnCreatedBy, DistrictAlarmContentPushUpdateColumnDeletedAt, DistrictAlarmContentPushUpdateColumnDeletedBy, DistrictAlarmContentPushUpdateColumnDistrictID, DistrictAlarmContentPushUpdateColumnID, DistrictAlarmContentPushUpdateColumnIsDelete, DistrictAlarmContentPushUpdateColumnProvinceID, DistrictAlarmContentPushUpdateColumnUpdatedAt, DistrictAlarmContentPushUpdateColumnUpdatedBy:
		return true
	}
	return false
}

func (e DistrictAlarmContentPushUpdateColumn) String() string {
	return string(e)
}

func (e *DistrictAlarmContentPushUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DistrictAlarmContentPushUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid district_alarm_content_push_update_column", str)
	}
	return nil
}

func (e DistrictAlarmContentPushUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// unique or primary key constraints on table "vehicle_alarm_data"
type VehicleAlarmDataConstraint string

const (
	// unique or primary key constraint
	VehicleAlarmDataConstraintVehicleAlarmDataPkey VehicleAlarmDataConstraint = "vehicle_alarm_data_pkey"
)

var AllVehicleAlarmDataConstraint = []VehicleAlarmDataConstraint{
	VehicleAlarmDataConstraintVehicleAlarmDataPkey,
}

func (e VehicleAlarmDataConstraint) IsValid() bool {
	switch e {
	case VehicleAlarmDataConstraintVehicleAlarmDataPkey:
		return true
	}
	return false
}

func (e VehicleAlarmDataConstraint) String() string {
	return string(e)
}

func (e *VehicleAlarmDataConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleAlarmDataConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid vehicle_alarm_data_constraint", str)
	}
	return nil
}

func (e VehicleAlarmDataConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "vehicle_alarm_data"
type VehicleAlarmDataSelectColumn string

const (
	// column name
	VehicleAlarmDataSelectColumnGpsSpeed VehicleAlarmDataSelectColumn = "GPS_speed"
	// column name
	VehicleAlarmDataSelectColumnAlarmDealID VehicleAlarmDataSelectColumn = "alarm_deal_id"
	// column name
	VehicleAlarmDataSelectColumnAlarmEndPosition VehicleAlarmDataSelectColumn = "alarm_end_position"
	// column name
	VehicleAlarmDataSelectColumnAlarmEndTime VehicleAlarmDataSelectColumn = "alarm_end_time"
	// column name
	VehicleAlarmDataSelectColumnAlarmSource VehicleAlarmDataSelectColumn = "alarm_source"
	// column name
	VehicleAlarmDataSelectColumnAlarmStartTime VehicleAlarmDataSelectColumn = "alarm_start_time"
	// column name
	VehicleAlarmDataSelectColumnAlarmType VehicleAlarmDataSelectColumn = "alarm_type"
	// column name
	VehicleAlarmDataSelectColumnAreaID VehicleAlarmDataSelectColumn = "area_id"
	// column name
	VehicleAlarmDataSelectColumnCoordinate VehicleAlarmDataSelectColumn = "coordinate"
	// column name
	VehicleAlarmDataSelectColumnDuration VehicleAlarmDataSelectColumn = "duration"
	// column name
	VehicleAlarmDataSelectColumnID VehicleAlarmDataSelectColumn = "id"
	// column name
	VehicleAlarmDataSelectColumnIsAlarmEffective VehicleAlarmDataSelectColumn = "is_alarm_effective"
	// column name
	VehicleAlarmDataSelectColumnIsAlarmOver VehicleAlarmDataSelectColumn = "is_alarm_over"
	// column name
	VehicleAlarmDataSelectColumnIsCancelAlarm VehicleAlarmDataSelectColumn = "is_cancel_alarm"
	// column name
	VehicleAlarmDataSelectColumnIsResolve VehicleAlarmDataSelectColumn = "is_resolve"
	// column name
	VehicleAlarmDataSelectColumnIsSupervise VehicleAlarmDataSelectColumn = "is_supervise"
	// column name
	VehicleAlarmDataSelectColumnLatestAlarmPosition VehicleAlarmDataSelectColumn = "latest_alarm_position"
	// column name
	VehicleAlarmDataSelectColumnLatestAlarmTime VehicleAlarmDataSelectColumn = "latest_alarm_time"
	// column name
	VehicleAlarmDataSelectColumnLocationDescription VehicleAlarmDataSelectColumn = "location_description"
	// column name
	VehicleAlarmDataSelectColumnMaximumSpeed VehicleAlarmDataSelectColumn = "maximum_speed"
	// column name
	VehicleAlarmDataSelectColumnPid VehicleAlarmDataSelectColumn = "pid"
	// column name
	VehicleAlarmDataSelectColumnProcessingDescription VehicleAlarmDataSelectColumn = "processing_description"
	// column name
	VehicleAlarmDataSelectColumnProcessingMethod VehicleAlarmDataSelectColumn = "processing_method"
	// column name
	VehicleAlarmDataSelectColumnProcessingStatus VehicleAlarmDataSelectColumn = "processing_status"
	// column name
	VehicleAlarmDataSelectColumnProcessingTime VehicleAlarmDataSelectColumn = "processing_time"
	// column name
	VehicleAlarmDataSelectColumnProcessor VehicleAlarmDataSelectColumn = "processor"
	// column name
	VehicleAlarmDataSelectColumnRecordTime VehicleAlarmDataSelectColumn = "record_time"
	// column name
	VehicleAlarmDataSelectColumnRoadGrade VehicleAlarmDataSelectColumn = "road_grade"
	// column name
	VehicleAlarmDataSelectColumnRoadName VehicleAlarmDataSelectColumn = "road_name"
	// column name
	VehicleAlarmDataSelectColumnSpeedLimitThreshold VehicleAlarmDataSelectColumn = "speed_limit_threshold"
	// column name
	VehicleAlarmDataSelectColumnSupervisionNote VehicleAlarmDataSelectColumn = "supervision_note"
	// column name
	VehicleAlarmDataSelectColumnSupervisionTime VehicleAlarmDataSelectColumn = "supervision_time"
	// column name
	VehicleAlarmDataSelectColumnSupervisor VehicleAlarmDataSelectColumn = "supervisor"
	// column name
	VehicleAlarmDataSelectColumnTachographSpeed VehicleAlarmDataSelectColumn = "tachograph_speed"
	// column name
	VehicleAlarmDataSelectColumnVehicleAlarmDataID VehicleAlarmDataSelectColumn = "vehicle_alarm_data_id"
	// column name
	VehicleAlarmDataSelectColumnVehicleID VehicleAlarmDataSelectColumn = "vehicle_id"
)

var AllVehicleAlarmDataSelectColumn = []VehicleAlarmDataSelectColumn{
	VehicleAlarmDataSelectColumnGpsSpeed,
	VehicleAlarmDataSelectColumnAlarmDealID,
	VehicleAlarmDataSelectColumnAlarmEndPosition,
	VehicleAlarmDataSelectColumnAlarmEndTime,
	VehicleAlarmDataSelectColumnAlarmSource,
	VehicleAlarmDataSelectColumnAlarmStartTime,
	VehicleAlarmDataSelectColumnAlarmType,
	VehicleAlarmDataSelectColumnAreaID,
	VehicleAlarmDataSelectColumnCoordinate,
	VehicleAlarmDataSelectColumnDuration,
	VehicleAlarmDataSelectColumnID,
	VehicleAlarmDataSelectColumnIsAlarmEffective,
	VehicleAlarmDataSelectColumnIsAlarmOver,
	VehicleAlarmDataSelectColumnIsCancelAlarm,
	VehicleAlarmDataSelectColumnIsResolve,
	VehicleAlarmDataSelectColumnIsSupervise,
	VehicleAlarmDataSelectColumnLatestAlarmPosition,
	VehicleAlarmDataSelectColumnLatestAlarmTime,
	VehicleAlarmDataSelectColumnLocationDescription,
	VehicleAlarmDataSelectColumnMaximumSpeed,
	VehicleAlarmDataSelectColumnPid,
	VehicleAlarmDataSelectColumnProcessingDescription,
	VehicleAlarmDataSelectColumnProcessingMethod,
	VehicleAlarmDataSelectColumnProcessingStatus,
	VehicleAlarmDataSelectColumnProcessingTime,
	VehicleAlarmDataSelectColumnProcessor,
	VehicleAlarmDataSelectColumnRecordTime,
	VehicleAlarmDataSelectColumnRoadGrade,
	VehicleAlarmDataSelectColumnRoadName,
	VehicleAlarmDataSelectColumnSpeedLimitThreshold,
	VehicleAlarmDataSelectColumnSupervisionNote,
	VehicleAlarmDataSelectColumnSupervisionTime,
	VehicleAlarmDataSelectColumnSupervisor,
	VehicleAlarmDataSelectColumnTachographSpeed,
	VehicleAlarmDataSelectColumnVehicleAlarmDataID,
	VehicleAlarmDataSelectColumnVehicleID,
}

func (e VehicleAlarmDataSelectColumn) IsValid() bool {
	switch e {
	case VehicleAlarmDataSelectColumnGpsSpeed, VehicleAlarmDataSelectColumnAlarmDealID, VehicleAlarmDataSelectColumnAlarmEndPosition, VehicleAlarmDataSelectColumnAlarmEndTime, VehicleAlarmDataSelectColumnAlarmSource, VehicleAlarmDataSelectColumnAlarmStartTime, VehicleAlarmDataSelectColumnAlarmType, VehicleAlarmDataSelectColumnAreaID, VehicleAlarmDataSelectColumnCoordinate, VehicleAlarmDataSelectColumnDuration, VehicleAlarmDataSelectColumnID, VehicleAlarmDataSelectColumnIsAlarmEffective, VehicleAlarmDataSelectColumnIsAlarmOver, VehicleAlarmDataSelectColumnIsCancelAlarm, VehicleAlarmDataSelectColumnIsResolve, VehicleAlarmDataSelectColumnIsSupervise, VehicleAlarmDataSelectColumnLatestAlarmPosition, VehicleAlarmDataSelectColumnLatestAlarmTime, VehicleAlarmDataSelectColumnLocationDescription, VehicleAlarmDataSelectColumnMaximumSpeed, VehicleAlarmDataSelectColumnPid, VehicleAlarmDataSelectColumnProcessingDescription, VehicleAlarmDataSelectColumnProcessingMethod, VehicleAlarmDataSelectColumnProcessingStatus, VehicleAlarmDataSelectColumnProcessingTime, VehicleAlarmDataSelectColumnProcessor, VehicleAlarmDataSelectColumnRecordTime, VehicleAlarmDataSelectColumnRoadGrade, VehicleAlarmDataSelectColumnRoadName, VehicleAlarmDataSelectColumnSpeedLimitThreshold, VehicleAlarmDataSelectColumnSupervisionNote, VehicleAlarmDataSelectColumnSupervisionTime, VehicleAlarmDataSelectColumnSupervisor, VehicleAlarmDataSelectColumnTachographSpeed, VehicleAlarmDataSelectColumnVehicleAlarmDataID, VehicleAlarmDataSelectColumnVehicleID:
		return true
	}
	return false
}

func (e VehicleAlarmDataSelectColumn) String() string {
	return string(e)
}

func (e *VehicleAlarmDataSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleAlarmDataSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid vehicle_alarm_data_select_column", str)
	}
	return nil
}

func (e VehicleAlarmDataSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "vehicle_alarm_data"
type VehicleAlarmDataUpdateColumn string

const (
	// column name
	VehicleAlarmDataUpdateColumnGpsSpeed VehicleAlarmDataUpdateColumn = "GPS_speed"
	// column name
	VehicleAlarmDataUpdateColumnAlarmDealID VehicleAlarmDataUpdateColumn = "alarm_deal_id"
	// column name
	VehicleAlarmDataUpdateColumnAlarmEndPosition VehicleAlarmDataUpdateColumn = "alarm_end_position"
	// column name
	VehicleAlarmDataUpdateColumnAlarmEndTime VehicleAlarmDataUpdateColumn = "alarm_end_time"
	// column name
	VehicleAlarmDataUpdateColumnAlarmSource VehicleAlarmDataUpdateColumn = "alarm_source"
	// column name
	VehicleAlarmDataUpdateColumnAlarmStartTime VehicleAlarmDataUpdateColumn = "alarm_start_time"
	// column name
	VehicleAlarmDataUpdateColumnAlarmType VehicleAlarmDataUpdateColumn = "alarm_type"
	// column name
	VehicleAlarmDataUpdateColumnAreaID VehicleAlarmDataUpdateColumn = "area_id"
	// column name
	VehicleAlarmDataUpdateColumnCoordinate VehicleAlarmDataUpdateColumn = "coordinate"
	// column name
	VehicleAlarmDataUpdateColumnDuration VehicleAlarmDataUpdateColumn = "duration"
	// column name
	VehicleAlarmDataUpdateColumnID VehicleAlarmDataUpdateColumn = "id"
	// column name
	VehicleAlarmDataUpdateColumnIsAlarmEffective VehicleAlarmDataUpdateColumn = "is_alarm_effective"
	// column name
	VehicleAlarmDataUpdateColumnIsAlarmOver VehicleAlarmDataUpdateColumn = "is_alarm_over"
	// column name
	VehicleAlarmDataUpdateColumnIsCancelAlarm VehicleAlarmDataUpdateColumn = "is_cancel_alarm"
	// column name
	VehicleAlarmDataUpdateColumnIsResolve VehicleAlarmDataUpdateColumn = "is_resolve"
	// column name
	VehicleAlarmDataUpdateColumnIsSupervise VehicleAlarmDataUpdateColumn = "is_supervise"
	// column name
	VehicleAlarmDataUpdateColumnLatestAlarmPosition VehicleAlarmDataUpdateColumn = "latest_alarm_position"
	// column name
	VehicleAlarmDataUpdateColumnLatestAlarmTime VehicleAlarmDataUpdateColumn = "latest_alarm_time"
	// column name
	VehicleAlarmDataUpdateColumnLocationDescription VehicleAlarmDataUpdateColumn = "location_description"
	// column name
	VehicleAlarmDataUpdateColumnMaximumSpeed VehicleAlarmDataUpdateColumn = "maximum_speed"
	// column name
	VehicleAlarmDataUpdateColumnPid VehicleAlarmDataUpdateColumn = "pid"
	// column name
	VehicleAlarmDataUpdateColumnProcessingDescription VehicleAlarmDataUpdateColumn = "processing_description"
	// column name
	VehicleAlarmDataUpdateColumnProcessingMethod VehicleAlarmDataUpdateColumn = "processing_method"
	// column name
	VehicleAlarmDataUpdateColumnProcessingStatus VehicleAlarmDataUpdateColumn = "processing_status"
	// column name
	VehicleAlarmDataUpdateColumnProcessingTime VehicleAlarmDataUpdateColumn = "processing_time"
	// column name
	VehicleAlarmDataUpdateColumnProcessor VehicleAlarmDataUpdateColumn = "processor"
	// column name
	VehicleAlarmDataUpdateColumnRecordTime VehicleAlarmDataUpdateColumn = "record_time"
	// column name
	VehicleAlarmDataUpdateColumnRoadGrade VehicleAlarmDataUpdateColumn = "road_grade"
	// column name
	VehicleAlarmDataUpdateColumnRoadName VehicleAlarmDataUpdateColumn = "road_name"
	// column name
	VehicleAlarmDataUpdateColumnSpeedLimitThreshold VehicleAlarmDataUpdateColumn = "speed_limit_threshold"
	// column name
	VehicleAlarmDataUpdateColumnSupervisionNote VehicleAlarmDataUpdateColumn = "supervision_note"
	// column name
	VehicleAlarmDataUpdateColumnSupervisionTime VehicleAlarmDataUpdateColumn = "supervision_time"
	// column name
	VehicleAlarmDataUpdateColumnSupervisor VehicleAlarmDataUpdateColumn = "supervisor"
	// column name
	VehicleAlarmDataUpdateColumnTachographSpeed VehicleAlarmDataUpdateColumn = "tachograph_speed"
	// column name
	VehicleAlarmDataUpdateColumnVehicleAlarmDataID VehicleAlarmDataUpdateColumn = "vehicle_alarm_data_id"
	// column name
	VehicleAlarmDataUpdateColumnVehicleID VehicleAlarmDataUpdateColumn = "vehicle_id"
)

var AllVehicleAlarmDataUpdateColumn = []VehicleAlarmDataUpdateColumn{
	VehicleAlarmDataUpdateColumnGpsSpeed,
	VehicleAlarmDataUpdateColumnAlarmDealID,
	VehicleAlarmDataUpdateColumnAlarmEndPosition,
	VehicleAlarmDataUpdateColumnAlarmEndTime,
	VehicleAlarmDataUpdateColumnAlarmSource,
	VehicleAlarmDataUpdateColumnAlarmStartTime,
	VehicleAlarmDataUpdateColumnAlarmType,
	VehicleAlarmDataUpdateColumnAreaID,
	VehicleAlarmDataUpdateColumnCoordinate,
	VehicleAlarmDataUpdateColumnDuration,
	VehicleAlarmDataUpdateColumnID,
	VehicleAlarmDataUpdateColumnIsAlarmEffective,
	VehicleAlarmDataUpdateColumnIsAlarmOver,
	VehicleAlarmDataUpdateColumnIsCancelAlarm,
	VehicleAlarmDataUpdateColumnIsResolve,
	VehicleAlarmDataUpdateColumnIsSupervise,
	VehicleAlarmDataUpdateColumnLatestAlarmPosition,
	VehicleAlarmDataUpdateColumnLatestAlarmTime,
	VehicleAlarmDataUpdateColumnLocationDescription,
	VehicleAlarmDataUpdateColumnMaximumSpeed,
	VehicleAlarmDataUpdateColumnPid,
	VehicleAlarmDataUpdateColumnProcessingDescription,
	VehicleAlarmDataUpdateColumnProcessingMethod,
	VehicleAlarmDataUpdateColumnProcessingStatus,
	VehicleAlarmDataUpdateColumnProcessingTime,
	VehicleAlarmDataUpdateColumnProcessor,
	VehicleAlarmDataUpdateColumnRecordTime,
	VehicleAlarmDataUpdateColumnRoadGrade,
	VehicleAlarmDataUpdateColumnRoadName,
	VehicleAlarmDataUpdateColumnSpeedLimitThreshold,
	VehicleAlarmDataUpdateColumnSupervisionNote,
	VehicleAlarmDataUpdateColumnSupervisionTime,
	VehicleAlarmDataUpdateColumnSupervisor,
	VehicleAlarmDataUpdateColumnTachographSpeed,
	VehicleAlarmDataUpdateColumnVehicleAlarmDataID,
	VehicleAlarmDataUpdateColumnVehicleID,
}

func (e VehicleAlarmDataUpdateColumn) IsValid() bool {
	switch e {
	case VehicleAlarmDataUpdateColumnGpsSpeed, VehicleAlarmDataUpdateColumnAlarmDealID, VehicleAlarmDataUpdateColumnAlarmEndPosition, VehicleAlarmDataUpdateColumnAlarmEndTime, VehicleAlarmDataUpdateColumnAlarmSource, VehicleAlarmDataUpdateColumnAlarmStartTime, VehicleAlarmDataUpdateColumnAlarmType, VehicleAlarmDataUpdateColumnAreaID, VehicleAlarmDataUpdateColumnCoordinate, VehicleAlarmDataUpdateColumnDuration, VehicleAlarmDataUpdateColumnID, VehicleAlarmDataUpdateColumnIsAlarmEffective, VehicleAlarmDataUpdateColumnIsAlarmOver, VehicleAlarmDataUpdateColumnIsCancelAlarm, VehicleAlarmDataUpdateColumnIsResolve, VehicleAlarmDataUpdateColumnIsSupervise, VehicleAlarmDataUpdateColumnLatestAlarmPosition, VehicleAlarmDataUpdateColumnLatestAlarmTime, VehicleAlarmDataUpdateColumnLocationDescription, VehicleAlarmDataUpdateColumnMaximumSpeed, VehicleAlarmDataUpdateColumnPid, VehicleAlarmDataUpdateColumnProcessingDescription, VehicleAlarmDataUpdateColumnProcessingMethod, VehicleAlarmDataUpdateColumnProcessingStatus, VehicleAlarmDataUpdateColumnProcessingTime, VehicleAlarmDataUpdateColumnProcessor, VehicleAlarmDataUpdateColumnRecordTime, VehicleAlarmDataUpdateColumnRoadGrade, VehicleAlarmDataUpdateColumnRoadName, VehicleAlarmDataUpdateColumnSpeedLimitThreshold, VehicleAlarmDataUpdateColumnSupervisionNote, VehicleAlarmDataUpdateColumnSupervisionTime, VehicleAlarmDataUpdateColumnSupervisor, VehicleAlarmDataUpdateColumnTachographSpeed, VehicleAlarmDataUpdateColumnVehicleAlarmDataID, VehicleAlarmDataUpdateColumnVehicleID:
		return true
	}
	return false
}

func (e VehicleAlarmDataUpdateColumn) String() string {
	return string(e)
}

func (e *VehicleAlarmDataUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleAlarmDataUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid vehicle_alarm_data_update_column", str)
	}
	return nil
}

func (e VehicleAlarmDataUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
