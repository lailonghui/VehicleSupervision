// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/vehicle_alarm/graph/model"
	model1 "VehicleSupervision/internal/modules/vehicle_alarm/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AlarmProcessingRecord struct {
		AlarmDataID               func(childComplexity int) int
		AlarmSupervisionPictureID func(childComplexity int) int
		AnnounceContent           func(childComplexity int) int
		AppPushContent            func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		DeletedBy                 func(childComplexity int) int
		DisposalMethod            func(childComplexity int) int
		DisposalResult            func(childComplexity int) int
		ID                        func(childComplexity int) int
		IsAnnounce                func(childComplexity int) int
		IsAppPush                 func(childComplexity int) int
		IsDeleted                 func(childComplexity int) int
		IsNotify                  func(childComplexity int) int
		IsSmsPush                 func(childComplexity int) int
		NotifyContent             func(childComplexity int) int
		OperationUser             func(childComplexity int) int
		ProcessingContent         func(childComplexity int) int
		ProcessingTime            func(childComplexity int) int
		ProcessingType            func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		UpdatedBy                 func(childComplexity int) int
	}

	AlarmProcessingRecordAggregate struct {
		Aggregate func(childComplexity int) int
	}

	AlarmProcessingRecordAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	AlarmProcessingRecordAvgFields struct {
		AlarmSupervisionPictureID func(childComplexity int) int
		DisposalMethod            func(childComplexity int) int
		ID                        func(childComplexity int) int
		ProcessingType            func(childComplexity int) int
	}

	AlarmProcessingRecordMaxFields struct {
		AlarmDataID               func(childComplexity int) int
		AlarmSupervisionPictureID func(childComplexity int) int
		AnnounceContent           func(childComplexity int) int
		AppPushContent            func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		DeletedBy                 func(childComplexity int) int
		DisposalMethod            func(childComplexity int) int
		DisposalResult            func(childComplexity int) int
		ID                        func(childComplexity int) int
		IsAnnounce                func(childComplexity int) int
		IsAppPush                 func(childComplexity int) int
		IsDeleted                 func(childComplexity int) int
		IsNotify                  func(childComplexity int) int
		IsSmsPush                 func(childComplexity int) int
		NotifyContent             func(childComplexity int) int
		OperationUser             func(childComplexity int) int
		ProcessingContent         func(childComplexity int) int
		ProcessingTime            func(childComplexity int) int
		ProcessingType            func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		UpdatedBy                 func(childComplexity int) int
	}

	AlarmProcessingRecordMinFields struct {
		AlarmDataID               func(childComplexity int) int
		AlarmSupervisionPictureID func(childComplexity int) int
		AnnounceContent           func(childComplexity int) int
		AppPushContent            func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		DeletedBy                 func(childComplexity int) int
		DisposalMethod            func(childComplexity int) int
		DisposalResult            func(childComplexity int) int
		ID                        func(childComplexity int) int
		IsAnnounce                func(childComplexity int) int
		IsAppPush                 func(childComplexity int) int
		IsDeleted                 func(childComplexity int) int
		IsNotify                  func(childComplexity int) int
		IsSmsPush                 func(childComplexity int) int
		NotifyContent             func(childComplexity int) int
		OperationUser             func(childComplexity int) int
		ProcessingContent         func(childComplexity int) int
		ProcessingTime            func(childComplexity int) int
		ProcessingType            func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		UpdatedBy                 func(childComplexity int) int
	}

	AlarmProcessingRecordMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	AlarmProcessingRecordStddevFields struct {
		AlarmSupervisionPictureID func(childComplexity int) int
		DisposalMethod            func(childComplexity int) int
		ID                        func(childComplexity int) int
		ProcessingType            func(childComplexity int) int
	}

	AlarmProcessingRecordStddevPopFields struct {
		AlarmSupervisionPictureID func(childComplexity int) int
		DisposalMethod            func(childComplexity int) int
		ID                        func(childComplexity int) int
		ProcessingType            func(childComplexity int) int
	}

	AlarmProcessingRecordStddevSampFields struct {
		AlarmSupervisionPictureID func(childComplexity int) int
		DisposalMethod            func(childComplexity int) int
		ID                        func(childComplexity int) int
		ProcessingType            func(childComplexity int) int
	}

	AlarmProcessingRecordSumFields struct {
		AlarmSupervisionPictureID func(childComplexity int) int
		DisposalMethod            func(childComplexity int) int
		ID                        func(childComplexity int) int
		ProcessingType            func(childComplexity int) int
	}

	AlarmProcessingRecordVarPopFields struct {
		AlarmSupervisionPictureID func(childComplexity int) int
		DisposalMethod            func(childComplexity int) int
		ID                        func(childComplexity int) int
		ProcessingType            func(childComplexity int) int
	}

	AlarmProcessingRecordVarSampFields struct {
		AlarmSupervisionPictureID func(childComplexity int) int
		DisposalMethod            func(childComplexity int) int
		ID                        func(childComplexity int) int
		ProcessingType            func(childComplexity int) int
	}

	AlarmProcessingRecordVarianceFields struct {
		AlarmSupervisionPictureID func(childComplexity int) int
		DisposalMethod            func(childComplexity int) int
		ID                        func(childComplexity int) int
		ProcessingType            func(childComplexity int) int
	}

	AlarmSupervisionPictureUpload struct {
		AlarmSupervisionPictureID func(childComplexity int) int
		CameraID                  func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		DeletedBy                 func(childComplexity int) int
		DriverID                  func(childComplexity int) int
		EnterpriseID              func(childComplexity int) int
		ID                        func(childComplexity int) int
		Imel                      func(childComplexity int) int
		MonitoringPicAddress      func(childComplexity int) int
		MonitoringPicName         func(childComplexity int) int
		MonitoringPicUploadTime   func(childComplexity int) int
		PhotoCondition            func(childComplexity int) int
		SimNumber                 func(childComplexity int) int
		UpdateTime                func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		UpdatedBy                 func(childComplexity int) int
		VehicleID                 func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadAggregate struct {
		Aggregate func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadAvgFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadMaxFields struct {
		AlarmSupervisionPictureID func(childComplexity int) int
		CameraID                  func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		DeletedBy                 func(childComplexity int) int
		DriverID                  func(childComplexity int) int
		EnterpriseID              func(childComplexity int) int
		ID                        func(childComplexity int) int
		Imel                      func(childComplexity int) int
		MonitoringPicAddress      func(childComplexity int) int
		MonitoringPicName         func(childComplexity int) int
		MonitoringPicUploadTime   func(childComplexity int) int
		PhotoCondition            func(childComplexity int) int
		SimNumber                 func(childComplexity int) int
		UpdateTime                func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		UpdatedBy                 func(childComplexity int) int
		VehicleID                 func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadMinFields struct {
		AlarmSupervisionPictureID func(childComplexity int) int
		CameraID                  func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		DeletedBy                 func(childComplexity int) int
		DriverID                  func(childComplexity int) int
		EnterpriseID              func(childComplexity int) int
		ID                        func(childComplexity int) int
		Imel                      func(childComplexity int) int
		MonitoringPicAddress      func(childComplexity int) int
		MonitoringPicName         func(childComplexity int) int
		MonitoringPicUploadTime   func(childComplexity int) int
		PhotoCondition            func(childComplexity int) int
		SimNumber                 func(childComplexity int) int
		UpdateTime                func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		UpdatedBy                 func(childComplexity int) int
		VehicleID                 func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadStddevFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadStddevPopFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadStddevSampFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadSumFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadVarPopFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadVarSampFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadVarianceFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	DistrictAlarmContentPush struct {
		AlarmContent func(childComplexity int) int
		AlarmDataID  func(childComplexity int) int
		AlarmType    func(childComplexity int) int
		CityID       func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		DistrictID   func(childComplexity int) int
		ID           func(childComplexity int) int
		IsDeleted    func(childComplexity int) int
		ProvinceID   func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	DistrictAlarmContentPushAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DistrictAlarmContentPushAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DistrictAlarmContentPushAvgFields struct {
		ID func(childComplexity int) int
	}

	DistrictAlarmContentPushMaxFields struct {
		AlarmContent func(childComplexity int) int
		AlarmDataID  func(childComplexity int) int
		AlarmType    func(childComplexity int) int
		CityID       func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		DistrictID   func(childComplexity int) int
		ID           func(childComplexity int) int
		IsDeleted    func(childComplexity int) int
		ProvinceID   func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	DistrictAlarmContentPushMinFields struct {
		AlarmContent func(childComplexity int) int
		AlarmDataID  func(childComplexity int) int
		AlarmType    func(childComplexity int) int
		CityID       func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		DistrictID   func(childComplexity int) int
		ID           func(childComplexity int) int
		IsDeleted    func(childComplexity int) int
		ProvinceID   func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	DistrictAlarmContentPushMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DistrictAlarmContentPushStddevFields struct {
		ID func(childComplexity int) int
	}

	DistrictAlarmContentPushStddevPopFields struct {
		ID func(childComplexity int) int
	}

	DistrictAlarmContentPushStddevSampFields struct {
		ID func(childComplexity int) int
	}

	DistrictAlarmContentPushSumFields struct {
		ID func(childComplexity int) int
	}

	DistrictAlarmContentPushVarPopFields struct {
		ID func(childComplexity int) int
	}

	DistrictAlarmContentPushVarSampFields struct {
		ID func(childComplexity int) int
	}

	DistrictAlarmContentPushVarianceFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseAlarmSendPolice struct {
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		EnterpriseAlarmSendPoliceID func(childComplexity int) int
		EnterpriseContact           func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		EnterpriseName              func(childComplexity int) int
		EnterprisePhone             func(childComplexity int) int
		ID                          func(childComplexity int) int
		PhliceDepartment            func(childComplexity int) int
		Police                      func(childComplexity int) int
		PolicePhone                 func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceAvgFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceMaxFields struct {
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		EnterpriseAlarmSendPoliceID func(childComplexity int) int
		EnterpriseContact           func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		EnterpriseName              func(childComplexity int) int
		EnterprisePhone             func(childComplexity int) int
		ID                          func(childComplexity int) int
		PhliceDepartment            func(childComplexity int) int
		Police                      func(childComplexity int) int
		PolicePhone                 func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceMinFields struct {
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		EnterpriseAlarmSendPoliceID func(childComplexity int) int
		EnterpriseContact           func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		EnterpriseName              func(childComplexity int) int
		EnterprisePhone             func(childComplexity int) int
		ID                          func(childComplexity int) int
		PhliceDepartment            func(childComplexity int) int
		Police                      func(childComplexity int) int
		PolicePhone                 func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceStddevFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceStddevPopFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceStddevSampFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceSumFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceVarPopFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceVarSampFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceVarianceFields struct {
		ID func(childComplexity int) int
	}

	Mutation struct {
		DeleteAlarmProcessingRecord             func(childComplexity int, where model.AlarmProcessingRecordBoolExp) int
		DeleteAlarmProcessingRecordByPk         func(childComplexity int, id int64) int
		DeleteAlarmSupervisionPictureUpload     func(childComplexity int, where model.AlarmSupervisionPictureUploadBoolExp) int
		DeleteAlarmSupervisionPictureUploadByPk func(childComplexity int, id int64) int
		DeleteDistrictAlarmContentPush          func(childComplexity int, where model.DistrictAlarmContentPushBoolExp) int
		DeleteDistrictAlarmContentPushByPk      func(childComplexity int, id int64) int
		DeleteEnterpriseAlarmSendPolice         func(childComplexity int, where model.EnterpriseAlarmSendPoliceBoolExp) int
		DeleteEnterpriseAlarmSendPoliceByPk     func(childComplexity int, id int64) int
		DeleteOfflineAlarmRegistration          func(childComplexity int, where model.OfflineAlarmRegistrationBoolExp) int
		DeleteOfflineAlarmRegistrationByPk      func(childComplexity int, id int64) int
		DeleteVehicleAlarmData                  func(childComplexity int, where model.VehicleAlarmDataBoolExp) int
		DeleteVehicleAlarmDataByPk              func(childComplexity int, id int64) int
		DeleteVideoPlatformAlarmType            func(childComplexity int, where model.VideoPlatformAlarmTypeBoolExp) int
		DeleteVideoPlatformAlarmTypeByPk        func(childComplexity int, id int64) int
		DeleteVoiceAlarmRecord                  func(childComplexity int, where model.VoiceAlarmRecordBoolExp) int
		DeleteVoiceAlarmRecordByPk              func(childComplexity int, id int64) int
		InsertAlarmProcessingRecord             func(childComplexity int, objects []*model.AlarmProcessingRecordInsertInput) int
		InsertAlarmProcessingRecordOne          func(childComplexity int, objects model.AlarmProcessingRecordInsertInput) int
		InsertAlarmSupervisionPictureUpload     func(childComplexity int, objects []*model.AlarmSupervisionPictureUploadInsertInput) int
		InsertAlarmSupervisionPictureUploadOne  func(childComplexity int, objects model.AlarmSupervisionPictureUploadInsertInput) int
		InsertDistrictAlarmContentPush          func(childComplexity int, objects []*model.DistrictAlarmContentPushInsertInput) int
		InsertDistrictAlarmContentPushOne       func(childComplexity int, objects model.DistrictAlarmContentPushInsertInput) int
		InsertEnterpriseAlarmSendPolice         func(childComplexity int, objects []*model.EnterpriseAlarmSendPoliceInsertInput) int
		InsertEnterpriseAlarmSendPoliceOne      func(childComplexity int, objects model.EnterpriseAlarmSendPoliceInsertInput) int
		InsertOfflineAlarmRegistration          func(childComplexity int, objects []*model.OfflineAlarmRegistrationInsertInput) int
		InsertOfflineAlarmRegistrationOne       func(childComplexity int, objects model.OfflineAlarmRegistrationInsertInput) int
		InsertVehicleAlarmData                  func(childComplexity int, objects []*model.VehicleAlarmDataInsertInput) int
		InsertVehicleAlarmDataOne               func(childComplexity int, objects model.VehicleAlarmDataInsertInput) int
		InsertVideoPlatformAlarmType            func(childComplexity int, objects []*model.VideoPlatformAlarmTypeInsertInput) int
		InsertVideoPlatformAlarmTypeOne         func(childComplexity int, objects model.VideoPlatformAlarmTypeInsertInput) int
		InsertVoiceAlarmRecord                  func(childComplexity int, objects []*model.VoiceAlarmRecordInsertInput) int
		InsertVoiceAlarmRecordOne               func(childComplexity int, objects model.VoiceAlarmRecordInsertInput) int
		UpdateAlarmProcessingRecord             func(childComplexity int, inc *model.AlarmProcessingRecordIncInput, set *model.AlarmProcessingRecordSetInput, where model.AlarmProcessingRecordBoolExp) int
		UpdateAlarmProcessingRecordByPk         func(childComplexity int, inc *model.AlarmProcessingRecordIncInput, set *model.AlarmProcessingRecordSetInput, id int64) int
		UpdateAlarmSupervisionPictureUpload     func(childComplexity int, inc *model.AlarmSupervisionPictureUploadIncInput, set *model.AlarmSupervisionPictureUploadSetInput, where model.AlarmSupervisionPictureUploadBoolExp) int
		UpdateAlarmSupervisionPictureUploadByPk func(childComplexity int, inc *model.AlarmSupervisionPictureUploadIncInput, set *model.AlarmSupervisionPictureUploadSetInput, id int64) int
		UpdateDistrictAlarmContentPush          func(childComplexity int, inc *model.DistrictAlarmContentPushIncInput, set *model.DistrictAlarmContentPushSetInput, where model.DistrictAlarmContentPushBoolExp) int
		UpdateDistrictAlarmContentPushByPk      func(childComplexity int, inc *model.DistrictAlarmContentPushIncInput, set *model.DistrictAlarmContentPushSetInput, id int64) int
		UpdateEnterpriseAlarmSendPolice         func(childComplexity int, inc *model.EnterpriseAlarmSendPoliceIncInput, set *model.EnterpriseAlarmSendPoliceSetInput, where model.EnterpriseAlarmSendPoliceBoolExp) int
		UpdateEnterpriseAlarmSendPoliceByPk     func(childComplexity int, inc *model.EnterpriseAlarmSendPoliceIncInput, set *model.EnterpriseAlarmSendPoliceSetInput, id int64) int
		UpdateOfflineAlarmRegistration          func(childComplexity int, inc *model.OfflineAlarmRegistrationIncInput, set *model.OfflineAlarmRegistrationSetInput, where model.OfflineAlarmRegistrationBoolExp) int
		UpdateOfflineAlarmRegistrationByPk      func(childComplexity int, inc *model.OfflineAlarmRegistrationIncInput, set *model.OfflineAlarmRegistrationSetInput, id int64) int
		UpdateVehicleAlarmData                  func(childComplexity int, inc *model.VehicleAlarmDataIncInput, set *model.VehicleAlarmDataSetInput, where model.VehicleAlarmDataBoolExp) int
		UpdateVehicleAlarmDataByPk              func(childComplexity int, inc *model.VehicleAlarmDataIncInput, set *model.VehicleAlarmDataSetInput, id int64) int
		UpdateVideoPlatformAlarmType            func(childComplexity int, inc *model.VideoPlatformAlarmTypeIncInput, set *model.VideoPlatformAlarmTypeSetInput, where model.VideoPlatformAlarmTypeBoolExp) int
		UpdateVideoPlatformAlarmTypeByPk        func(childComplexity int, inc *model.VideoPlatformAlarmTypeIncInput, set *model.VideoPlatformAlarmTypeSetInput, id int64) int
		UpdateVoiceAlarmRecord                  func(childComplexity int, inc *model.VoiceAlarmRecordIncInput, set *model.VoiceAlarmRecordSetInput, where model.VoiceAlarmRecordBoolExp) int
		UpdateVoiceAlarmRecordByPk              func(childComplexity int, inc *model.VoiceAlarmRecordIncInput, set *model.VoiceAlarmRecordSetInput, id int64) int
	}

	OfflineAlarmRegistration struct {
		AlarmType                  func(childComplexity int) int
		CreatedAt                  func(childComplexity int) int
		CreatedBy                  func(childComplexity int) int
		DeletedAt                  func(childComplexity int) int
		DeletedBy                  func(childComplexity int) int
		ID                         func(childComplexity int) int
		IsEndAlarm                 func(childComplexity int) int
		IsNeedMaintain             func(childComplexity int) int
		IsRegistration             func(childComplexity int) int
		IsSendSms                  func(childComplexity int) int
		OfflineAlarmRegistrationID func(childComplexity int) int
		OfflineEndTime             func(childComplexity int) int
		OfflineReason              func(childComplexity int) int
		OfflineStartTime           func(childComplexity int) int
		PhoneReminderContent       func(childComplexity int) int
		PhoneReminderTime          func(childComplexity int) int
		RegistrationTime           func(childComplexity int) int
		RegistrationUser           func(childComplexity int) int
		SmsContent                 func(childComplexity int) int
		SmsSendTime                func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		UpdatedBy                  func(childComplexity int) int
		VehicleID                  func(childComplexity int) int
	}

	OfflineAlarmRegistrationAggregate struct {
		Aggregate func(childComplexity int) int
	}

	OfflineAlarmRegistrationAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	OfflineAlarmRegistrationAvgFields struct {
		AlarmType func(childComplexity int) int
		ID        func(childComplexity int) int
	}

	OfflineAlarmRegistrationMaxFields struct {
		AlarmType                  func(childComplexity int) int
		CreatedAt                  func(childComplexity int) int
		CreatedBy                  func(childComplexity int) int
		DeletedAt                  func(childComplexity int) int
		DeletedBy                  func(childComplexity int) int
		ID                         func(childComplexity int) int
		IsEndAlarm                 func(childComplexity int) int
		IsNeedMaintain             func(childComplexity int) int
		IsRegistration             func(childComplexity int) int
		IsSendSms                  func(childComplexity int) int
		OfflineAlarmRegistrationID func(childComplexity int) int
		OfflineEndTime             func(childComplexity int) int
		OfflineReason              func(childComplexity int) int
		OfflineStartTime           func(childComplexity int) int
		PhoneReminderContent       func(childComplexity int) int
		PhoneReminderTime          func(childComplexity int) int
		RegistrationTime           func(childComplexity int) int
		RegistrationUser           func(childComplexity int) int
		SmsContent                 func(childComplexity int) int
		SmsSendTime                func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		UpdatedBy                  func(childComplexity int) int
		VehicleID                  func(childComplexity int) int
	}

	OfflineAlarmRegistrationMinFields struct {
		AlarmType                  func(childComplexity int) int
		CreatedAt                  func(childComplexity int) int
		CreatedBy                  func(childComplexity int) int
		DeletedAt                  func(childComplexity int) int
		DeletedBy                  func(childComplexity int) int
		ID                         func(childComplexity int) int
		IsEndAlarm                 func(childComplexity int) int
		IsNeedMaintain             func(childComplexity int) int
		IsRegistration             func(childComplexity int) int
		IsSendSms                  func(childComplexity int) int
		OfflineAlarmRegistrationID func(childComplexity int) int
		OfflineEndTime             func(childComplexity int) int
		OfflineReason              func(childComplexity int) int
		OfflineStartTime           func(childComplexity int) int
		PhoneReminderContent       func(childComplexity int) int
		PhoneReminderTime          func(childComplexity int) int
		RegistrationTime           func(childComplexity int) int
		RegistrationUser           func(childComplexity int) int
		SmsContent                 func(childComplexity int) int
		SmsSendTime                func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		UpdatedBy                  func(childComplexity int) int
		VehicleID                  func(childComplexity int) int
	}

	OfflineAlarmRegistrationMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	OfflineAlarmRegistrationStddevFields struct {
		AlarmType func(childComplexity int) int
		ID        func(childComplexity int) int
	}

	OfflineAlarmRegistrationStddevPopFields struct {
		AlarmType func(childComplexity int) int
		ID        func(childComplexity int) int
	}

	OfflineAlarmRegistrationStddevSampFields struct {
		AlarmType func(childComplexity int) int
		ID        func(childComplexity int) int
	}

	OfflineAlarmRegistrationSumFields struct {
		AlarmType func(childComplexity int) int
		ID        func(childComplexity int) int
	}

	OfflineAlarmRegistrationVarPopFields struct {
		AlarmType func(childComplexity int) int
		ID        func(childComplexity int) int
	}

	OfflineAlarmRegistrationVarSampFields struct {
		AlarmType func(childComplexity int) int
		ID        func(childComplexity int) int
	}

	OfflineAlarmRegistrationVarianceFields struct {
		AlarmType func(childComplexity int) int
		ID        func(childComplexity int) int
	}

	Query struct {
		AlarmProcessingRecord                  func(childComplexity int, distinctOn []model.AlarmProcessingRecordSelectColumn, limit *int, offset *int, orderBy []*model.AlarmProcessingRecordOrderBy, where *model.AlarmProcessingRecordBoolExp) int
		AlarmProcessingRecordAggregate         func(childComplexity int, distinctOn []model.AlarmProcessingRecordSelectColumn, limit *int, offset *int, orderBy []*model.AlarmProcessingRecordOrderBy, where *model.AlarmProcessingRecordBoolExp) int
		AlarmProcessingRecordByPk              func(childComplexity int, id int64) int
		AlarmSupervisionPictureUpload          func(childComplexity int, distinctOn []model.AlarmSupervisionPictureUploadSelectColumn, limit *int, offset *int, orderBy []*model.AlarmSupervisionPictureUploadOrderBy, where *model.AlarmSupervisionPictureUploadBoolExp) int
		AlarmSupervisionPictureUploadAggregate func(childComplexity int, distinctOn []model.AlarmSupervisionPictureUploadSelectColumn, limit *int, offset *int, orderBy []*model.AlarmSupervisionPictureUploadOrderBy, where *model.AlarmSupervisionPictureUploadBoolExp) int
		AlarmSupervisionPictureUploadByPk      func(childComplexity int, id int64) int
		DistrictAlarmContentPush               func(childComplexity int, distinctOn []model.DistrictAlarmContentPushSelectColumn, limit *int, offset *int, orderBy []*model.DistrictAlarmContentPushOrderBy, where *model.DistrictAlarmContentPushBoolExp) int
		DistrictAlarmContentPushAggregate      func(childComplexity int, distinctOn []model.DistrictAlarmContentPushSelectColumn, limit *int, offset *int, orderBy []*model.DistrictAlarmContentPushOrderBy, where *model.DistrictAlarmContentPushBoolExp) int
		DistrictAlarmContentPushByPk           func(childComplexity int, id int64) int
		EnterpriseAlarmSendPolice              func(childComplexity int, distinctOn []model.EnterpriseAlarmSendPoliceSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseAlarmSendPoliceOrderBy, where *model.EnterpriseAlarmSendPoliceBoolExp) int
		EnterpriseAlarmSendPoliceAggregate     func(childComplexity int, distinctOn []model.EnterpriseAlarmSendPoliceSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseAlarmSendPoliceOrderBy, where *model.EnterpriseAlarmSendPoliceBoolExp) int
		EnterpriseAlarmSendPoliceByPk          func(childComplexity int, id int64) int
		OfflineAlarmRegistration               func(childComplexity int, distinctOn []model.OfflineAlarmRegistrationSelectColumn, limit *int, offset *int, orderBy []*model.OfflineAlarmRegistrationOrderBy, where *model.OfflineAlarmRegistrationBoolExp) int
		OfflineAlarmRegistrationAggregate      func(childComplexity int, distinctOn []model.OfflineAlarmRegistrationSelectColumn, limit *int, offset *int, orderBy []*model.OfflineAlarmRegistrationOrderBy, where *model.OfflineAlarmRegistrationBoolExp) int
		OfflineAlarmRegistrationByPk           func(childComplexity int, id int64) int
		VehicleAlarmData                       func(childComplexity int, distinctOn []model.VehicleAlarmDataSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmDataOrderBy, where *model.VehicleAlarmDataBoolExp) int
		VehicleAlarmDataAggregate              func(childComplexity int, distinctOn []model.VehicleAlarmDataSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmDataOrderBy, where *model.VehicleAlarmDataBoolExp) int
		VehicleAlarmDataByPk                   func(childComplexity int, id int64) int
		VideoPlatformAlarmType                 func(childComplexity int, distinctOn []model.VideoPlatformAlarmTypeSelectColumn, limit *int, offset *int, orderBy []*model.VideoPlatformAlarmTypeOrderBy, where *model.VideoPlatformAlarmTypeBoolExp) int
		VideoPlatformAlarmTypeAggregate        func(childComplexity int, distinctOn []model.VideoPlatformAlarmTypeSelectColumn, limit *int, offset *int, orderBy []*model.VideoPlatformAlarmTypeOrderBy, where *model.VideoPlatformAlarmTypeBoolExp) int
		VideoPlatformAlarmTypeByPk             func(childComplexity int, id int64) int
		VoiceAlarmRecord                       func(childComplexity int, distinctOn []model.VoiceAlarmRecordSelectColumn, limit *int, offset *int, orderBy []*model.VoiceAlarmRecordOrderBy, where *model.VoiceAlarmRecordBoolExp) int
		VoiceAlarmRecordAggregate              func(childComplexity int, distinctOn []model.VoiceAlarmRecordSelectColumn, limit *int, offset *int, orderBy []*model.VoiceAlarmRecordOrderBy, where *model.VoiceAlarmRecordBoolExp) int
		VoiceAlarmRecordByPk                   func(childComplexity int, id int64) int
	}

	VehicleAlarmData struct {
		AlarmDealID                func(childComplexity int) int
		AlarmEndPosition           func(childComplexity int) int
		AlarmEndTime               func(childComplexity int) int
		AlarmSource                func(childComplexity int) int
		AlarmStartTime             func(childComplexity int) int
		AlarmType                  func(childComplexity int) int
		AreaID                     func(childComplexity int) int
		ConstructionSiteHandleTime func(childComplexity int) int
		Coordinate                 func(childComplexity int) int
		CreatedAt                  func(childComplexity int) int
		CreatedBy                  func(childComplexity int) int
		DeletedAt                  func(childComplexity int) int
		DeletedBy                  func(childComplexity int) int
		Duration                   func(childComplexity int) int
		GpsSpeed                   func(childComplexity int) int
		ID                         func(childComplexity int) int
		IsAlarmEffective           func(childComplexity int) int
		IsAlarmOver                func(childComplexity int) int
		IsCancelAlarm              func(childComplexity int) int
		IsConstructionSiteHandle   func(childComplexity int) int
		IsResolve                  func(childComplexity int) int
		IsSupervise                func(childComplexity int) int
		LatestAlarmPosition        func(childComplexity int) int
		LatestAlarmTime            func(childComplexity int) int
		LocationDescription        func(childComplexity int) int
		MaximumSpeed               func(childComplexity int) int
		Pid                        func(childComplexity int) int
		ProcessingDescription      func(childComplexity int) int
		ProcessingMethod           func(childComplexity int) int
		ProcessingStatus           func(childComplexity int) int
		ProcessingTime             func(childComplexity int) int
		Processor                  func(childComplexity int) int
		RecordTime                 func(childComplexity int) int
		RoadGrade                  func(childComplexity int) int
		RoadName                   func(childComplexity int) int
		SpeedLimitThreshold        func(childComplexity int) int
		SupervisionNote            func(childComplexity int) int
		SupervisionTime            func(childComplexity int) int
		Supervisor                 func(childComplexity int) int
		TachographSpeed            func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		UpdatedBy                  func(childComplexity int) int
		VehicleAlarmDataID         func(childComplexity int) int
		VehicleID                  func(childComplexity int) int
	}

	VehicleAlarmDataAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VehicleAlarmDataAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleAlarmDataAvgFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		LatestAlarmPosition func(childComplexity int) int
		MaximumSpeed        func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleAlarmDataMaxFields struct {
		AlarmDealID                func(childComplexity int) int
		AlarmEndPosition           func(childComplexity int) int
		AlarmEndTime               func(childComplexity int) int
		AlarmSource                func(childComplexity int) int
		AlarmStartTime             func(childComplexity int) int
		AlarmType                  func(childComplexity int) int
		AreaID                     func(childComplexity int) int
		ConstructionSiteHandleTime func(childComplexity int) int
		Coordinate                 func(childComplexity int) int
		CreatedAt                  func(childComplexity int) int
		CreatedBy                  func(childComplexity int) int
		DeletedAt                  func(childComplexity int) int
		DeletedBy                  func(childComplexity int) int
		Duration                   func(childComplexity int) int
		GpsSpeed                   func(childComplexity int) int
		ID                         func(childComplexity int) int
		IsAlarmEffective           func(childComplexity int) int
		IsAlarmOver                func(childComplexity int) int
		IsCancelAlarm              func(childComplexity int) int
		IsConstructionSiteHandle   func(childComplexity int) int
		IsResolve                  func(childComplexity int) int
		IsSupervise                func(childComplexity int) int
		LatestAlarmPosition        func(childComplexity int) int
		LatestAlarmTime            func(childComplexity int) int
		LocationDescription        func(childComplexity int) int
		MaximumSpeed               func(childComplexity int) int
		Pid                        func(childComplexity int) int
		ProcessingDescription      func(childComplexity int) int
		ProcessingMethod           func(childComplexity int) int
		ProcessingStatus           func(childComplexity int) int
		ProcessingTime             func(childComplexity int) int
		Processor                  func(childComplexity int) int
		RecordTime                 func(childComplexity int) int
		RoadGrade                  func(childComplexity int) int
		RoadName                   func(childComplexity int) int
		SpeedLimitThreshold        func(childComplexity int) int
		SupervisionNote            func(childComplexity int) int
		SupervisionTime            func(childComplexity int) int
		Supervisor                 func(childComplexity int) int
		TachographSpeed            func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		UpdatedBy                  func(childComplexity int) int
		VehicleAlarmDataID         func(childComplexity int) int
		VehicleID                  func(childComplexity int) int
	}

	VehicleAlarmDataMinFields struct {
		AlarmDealID                func(childComplexity int) int
		AlarmEndPosition           func(childComplexity int) int
		AlarmEndTime               func(childComplexity int) int
		AlarmSource                func(childComplexity int) int
		AlarmStartTime             func(childComplexity int) int
		AlarmType                  func(childComplexity int) int
		AreaID                     func(childComplexity int) int
		ConstructionSiteHandleTime func(childComplexity int) int
		Coordinate                 func(childComplexity int) int
		CreatedAt                  func(childComplexity int) int
		CreatedBy                  func(childComplexity int) int
		DeletedAt                  func(childComplexity int) int
		DeletedBy                  func(childComplexity int) int
		Duration                   func(childComplexity int) int
		GpsSpeed                   func(childComplexity int) int
		ID                         func(childComplexity int) int
		IsAlarmEffective           func(childComplexity int) int
		IsAlarmOver                func(childComplexity int) int
		IsCancelAlarm              func(childComplexity int) int
		IsConstructionSiteHandle   func(childComplexity int) int
		IsResolve                  func(childComplexity int) int
		IsSupervise                func(childComplexity int) int
		LatestAlarmPosition        func(childComplexity int) int
		LatestAlarmTime            func(childComplexity int) int
		LocationDescription        func(childComplexity int) int
		MaximumSpeed               func(childComplexity int) int
		Pid                        func(childComplexity int) int
		ProcessingDescription      func(childComplexity int) int
		ProcessingMethod           func(childComplexity int) int
		ProcessingStatus           func(childComplexity int) int
		ProcessingTime             func(childComplexity int) int
		Processor                  func(childComplexity int) int
		RecordTime                 func(childComplexity int) int
		RoadGrade                  func(childComplexity int) int
		RoadName                   func(childComplexity int) int
		SpeedLimitThreshold        func(childComplexity int) int
		SupervisionNote            func(childComplexity int) int
		SupervisionTime            func(childComplexity int) int
		Supervisor                 func(childComplexity int) int
		TachographSpeed            func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		UpdatedBy                  func(childComplexity int) int
		VehicleAlarmDataID         func(childComplexity int) int
		VehicleID                  func(childComplexity int) int
	}

	VehicleAlarmDataMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleAlarmDataStddevFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		LatestAlarmPosition func(childComplexity int) int
		MaximumSpeed        func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleAlarmDataStddevPopFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		LatestAlarmPosition func(childComplexity int) int
		MaximumSpeed        func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleAlarmDataStddevSampFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		LatestAlarmPosition func(childComplexity int) int
		MaximumSpeed        func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleAlarmDataSumFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		LatestAlarmPosition func(childComplexity int) int
		MaximumSpeed        func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleAlarmDataVarPopFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		LatestAlarmPosition func(childComplexity int) int
		MaximumSpeed        func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleAlarmDataVarSampFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		LatestAlarmPosition func(childComplexity int) int
		MaximumSpeed        func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleAlarmDataVarianceFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		LatestAlarmPosition func(childComplexity int) int
		MaximumSpeed        func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VideoPlatformAlarmType struct {
		AlarmClassify            func(childComplexity int) int
		AlarmCode                func(childComplexity int) int
		AlarmSource              func(childComplexity int) int
		AlarmType                func(childComplexity int) int
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		DeletedAt                func(childComplexity int) int
		DeletedBy                func(childComplexity int) int
		ID                       func(childComplexity int) int
		IsDeleted                func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
		VehicleAlarmDataID       func(childComplexity int) int
		VideoPlatformAlarmTypeID func(childComplexity int) int
	}

	VideoPlatformAlarmTypeAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VideoPlatformAlarmTypeAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VideoPlatformAlarmTypeAvgFields struct {
		ID                 func(childComplexity int) int
		VehicleAlarmDataID func(childComplexity int) int
	}

	VideoPlatformAlarmTypeMaxFields struct {
		AlarmClassify            func(childComplexity int) int
		AlarmCode                func(childComplexity int) int
		AlarmSource              func(childComplexity int) int
		AlarmType                func(childComplexity int) int
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		DeletedAt                func(childComplexity int) int
		DeletedBy                func(childComplexity int) int
		ID                       func(childComplexity int) int
		IsDeleted                func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
		VehicleAlarmDataID       func(childComplexity int) int
		VideoPlatformAlarmTypeID func(childComplexity int) int
	}

	VideoPlatformAlarmTypeMinFields struct {
		AlarmClassify            func(childComplexity int) int
		AlarmCode                func(childComplexity int) int
		AlarmSource              func(childComplexity int) int
		AlarmType                func(childComplexity int) int
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		DeletedAt                func(childComplexity int) int
		DeletedBy                func(childComplexity int) int
		ID                       func(childComplexity int) int
		IsDeleted                func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
		VehicleAlarmDataID       func(childComplexity int) int
		VideoPlatformAlarmTypeID func(childComplexity int) int
	}

	VideoPlatformAlarmTypeMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VideoPlatformAlarmTypeStddevFields struct {
		ID                 func(childComplexity int) int
		VehicleAlarmDataID func(childComplexity int) int
	}

	VideoPlatformAlarmTypeStddevPopFields struct {
		ID                 func(childComplexity int) int
		VehicleAlarmDataID func(childComplexity int) int
	}

	VideoPlatformAlarmTypeStddevSampFields struct {
		ID                 func(childComplexity int) int
		VehicleAlarmDataID func(childComplexity int) int
	}

	VideoPlatformAlarmTypeSumFields struct {
		ID                 func(childComplexity int) int
		VehicleAlarmDataID func(childComplexity int) int
	}

	VideoPlatformAlarmTypeVarPopFields struct {
		ID                 func(childComplexity int) int
		VehicleAlarmDataID func(childComplexity int) int
	}

	VideoPlatformAlarmTypeVarSampFields struct {
		ID                 func(childComplexity int) int
		VehicleAlarmDataID func(childComplexity int) int
	}

	VideoPlatformAlarmTypeVarianceFields struct {
		ID                 func(childComplexity int) int
		VehicleAlarmDataID func(childComplexity int) int
	}

	VoiceAlarmRecord struct {
		AlarmTime          func(childComplexity int) int
		AlarmType          func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		DeletedBy          func(childComplexity int) int
		ID                 func(childComplexity int) int
		InputPerson        func(childComplexity int) int
		InputTime          func(childComplexity int) int
		IsSuccess          func(childComplexity int) int
		RemindContent      func(childComplexity int) int
		RemindTime         func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
		VehicleID          func(childComplexity int) int
		VioceAlarmRecordID func(childComplexity int) int
	}

	VoiceAlarmRecordAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VoiceAlarmRecordAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VoiceAlarmRecordAvgFields struct {
		ID func(childComplexity int) int
	}

	VoiceAlarmRecordMaxFields struct {
		AlarmTime          func(childComplexity int) int
		AlarmType          func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		DeletedBy          func(childComplexity int) int
		ID                 func(childComplexity int) int
		InputPerson        func(childComplexity int) int
		InputTime          func(childComplexity int) int
		IsSuccess          func(childComplexity int) int
		RemindContent      func(childComplexity int) int
		RemindTime         func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
		VehicleID          func(childComplexity int) int
		VioceAlarmRecordID func(childComplexity int) int
	}

	VoiceAlarmRecordMinFields struct {
		AlarmTime          func(childComplexity int) int
		AlarmType          func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		DeletedBy          func(childComplexity int) int
		ID                 func(childComplexity int) int
		InputPerson        func(childComplexity int) int
		InputTime          func(childComplexity int) int
		IsSuccess          func(childComplexity int) int
		RemindContent      func(childComplexity int) int
		RemindTime         func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
		VehicleID          func(childComplexity int) int
		VioceAlarmRecordID func(childComplexity int) int
	}

	VoiceAlarmRecordMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VoiceAlarmRecordStddevFields struct {
		ID func(childComplexity int) int
	}

	VoiceAlarmRecordStddevPopFields struct {
		ID func(childComplexity int) int
	}

	VoiceAlarmRecordStddevSampFields struct {
		ID func(childComplexity int) int
	}

	VoiceAlarmRecordSumFields struct {
		ID func(childComplexity int) int
	}

	VoiceAlarmRecordVarPopFields struct {
		ID func(childComplexity int) int
	}

	VoiceAlarmRecordVarSampFields struct {
		ID func(childComplexity int) int
	}

	VoiceAlarmRecordVarianceFields struct {
		ID func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteAlarmProcessingRecord(ctx context.Context, where model.AlarmProcessingRecordBoolExp) (*model.AlarmProcessingRecordMutationResponse, error)
	DeleteAlarmProcessingRecordByPk(ctx context.Context, id int64) (*model1.AlarmProcessingRecord, error)
	InsertAlarmProcessingRecord(ctx context.Context, objects []*model.AlarmProcessingRecordInsertInput) (*model.AlarmProcessingRecordMutationResponse, error)
	InsertAlarmProcessingRecordOne(ctx context.Context, objects model.AlarmProcessingRecordInsertInput) (*model1.AlarmProcessingRecord, error)
	UpdateAlarmProcessingRecord(ctx context.Context, inc *model.AlarmProcessingRecordIncInput, set *model.AlarmProcessingRecordSetInput, where model.AlarmProcessingRecordBoolExp) (*model.AlarmProcessingRecordMutationResponse, error)
	UpdateAlarmProcessingRecordByPk(ctx context.Context, inc *model.AlarmProcessingRecordIncInput, set *model.AlarmProcessingRecordSetInput, id int64) (*model1.AlarmProcessingRecord, error)
	DeleteAlarmSupervisionPictureUpload(ctx context.Context, where model.AlarmSupervisionPictureUploadBoolExp) (*model.AlarmSupervisionPictureUploadMutationResponse, error)
	DeleteAlarmSupervisionPictureUploadByPk(ctx context.Context, id int64) (*model1.AlarmSupervisionPictureUpload, error)
	InsertAlarmSupervisionPictureUpload(ctx context.Context, objects []*model.AlarmSupervisionPictureUploadInsertInput) (*model.AlarmSupervisionPictureUploadMutationResponse, error)
	InsertAlarmSupervisionPictureUploadOne(ctx context.Context, objects model.AlarmSupervisionPictureUploadInsertInput) (*model1.AlarmSupervisionPictureUpload, error)
	UpdateAlarmSupervisionPictureUpload(ctx context.Context, inc *model.AlarmSupervisionPictureUploadIncInput, set *model.AlarmSupervisionPictureUploadSetInput, where model.AlarmSupervisionPictureUploadBoolExp) (*model.AlarmSupervisionPictureUploadMutationResponse, error)
	UpdateAlarmSupervisionPictureUploadByPk(ctx context.Context, inc *model.AlarmSupervisionPictureUploadIncInput, set *model.AlarmSupervisionPictureUploadSetInput, id int64) (*model1.AlarmSupervisionPictureUpload, error)
	DeleteDistrictAlarmContentPush(ctx context.Context, where model.DistrictAlarmContentPushBoolExp) (*model.DistrictAlarmContentPushMutationResponse, error)
	DeleteDistrictAlarmContentPushByPk(ctx context.Context, id int64) (*model1.DistrictAlarmContentPush, error)
	InsertDistrictAlarmContentPush(ctx context.Context, objects []*model.DistrictAlarmContentPushInsertInput) (*model.DistrictAlarmContentPushMutationResponse, error)
	InsertDistrictAlarmContentPushOne(ctx context.Context, objects model.DistrictAlarmContentPushInsertInput) (*model1.DistrictAlarmContentPush, error)
	UpdateDistrictAlarmContentPush(ctx context.Context, inc *model.DistrictAlarmContentPushIncInput, set *model.DistrictAlarmContentPushSetInput, where model.DistrictAlarmContentPushBoolExp) (*model.DistrictAlarmContentPushMutationResponse, error)
	UpdateDistrictAlarmContentPushByPk(ctx context.Context, inc *model.DistrictAlarmContentPushIncInput, set *model.DistrictAlarmContentPushSetInput, id int64) (*model1.DistrictAlarmContentPush, error)
	DeleteEnterpriseAlarmSendPolice(ctx context.Context, where model.EnterpriseAlarmSendPoliceBoolExp) (*model.EnterpriseAlarmSendPoliceMutationResponse, error)
	DeleteEnterpriseAlarmSendPoliceByPk(ctx context.Context, id int64) (*model1.EnterpriseAlarmSendPolice, error)
	InsertEnterpriseAlarmSendPolice(ctx context.Context, objects []*model.EnterpriseAlarmSendPoliceInsertInput) (*model.EnterpriseAlarmSendPoliceMutationResponse, error)
	InsertEnterpriseAlarmSendPoliceOne(ctx context.Context, objects model.EnterpriseAlarmSendPoliceInsertInput) (*model1.EnterpriseAlarmSendPolice, error)
	UpdateEnterpriseAlarmSendPolice(ctx context.Context, inc *model.EnterpriseAlarmSendPoliceIncInput, set *model.EnterpriseAlarmSendPoliceSetInput, where model.EnterpriseAlarmSendPoliceBoolExp) (*model.EnterpriseAlarmSendPoliceMutationResponse, error)
	UpdateEnterpriseAlarmSendPoliceByPk(ctx context.Context, inc *model.EnterpriseAlarmSendPoliceIncInput, set *model.EnterpriseAlarmSendPoliceSetInput, id int64) (*model1.EnterpriseAlarmSendPolice, error)
	DeleteOfflineAlarmRegistration(ctx context.Context, where model.OfflineAlarmRegistrationBoolExp) (*model.OfflineAlarmRegistrationMutationResponse, error)
	DeleteOfflineAlarmRegistrationByPk(ctx context.Context, id int64) (*model1.OfflineAlarmRegistration, error)
	InsertOfflineAlarmRegistration(ctx context.Context, objects []*model.OfflineAlarmRegistrationInsertInput) (*model.OfflineAlarmRegistrationMutationResponse, error)
	InsertOfflineAlarmRegistrationOne(ctx context.Context, objects model.OfflineAlarmRegistrationInsertInput) (*model1.OfflineAlarmRegistration, error)
	UpdateOfflineAlarmRegistration(ctx context.Context, inc *model.OfflineAlarmRegistrationIncInput, set *model.OfflineAlarmRegistrationSetInput, where model.OfflineAlarmRegistrationBoolExp) (*model.OfflineAlarmRegistrationMutationResponse, error)
	UpdateOfflineAlarmRegistrationByPk(ctx context.Context, inc *model.OfflineAlarmRegistrationIncInput, set *model.OfflineAlarmRegistrationSetInput, id int64) (*model1.OfflineAlarmRegistration, error)
	DeleteVehicleAlarmData(ctx context.Context, where model.VehicleAlarmDataBoolExp) (*model.VehicleAlarmDataMutationResponse, error)
	DeleteVehicleAlarmDataByPk(ctx context.Context, id int64) (*model1.VehicleAlarmData, error)
	InsertVehicleAlarmData(ctx context.Context, objects []*model.VehicleAlarmDataInsertInput) (*model.VehicleAlarmDataMutationResponse, error)
	InsertVehicleAlarmDataOne(ctx context.Context, objects model.VehicleAlarmDataInsertInput) (*model1.VehicleAlarmData, error)
	UpdateVehicleAlarmData(ctx context.Context, inc *model.VehicleAlarmDataIncInput, set *model.VehicleAlarmDataSetInput, where model.VehicleAlarmDataBoolExp) (*model.VehicleAlarmDataMutationResponse, error)
	UpdateVehicleAlarmDataByPk(ctx context.Context, inc *model.VehicleAlarmDataIncInput, set *model.VehicleAlarmDataSetInput, id int64) (*model1.VehicleAlarmData, error)
	DeleteVideoPlatformAlarmType(ctx context.Context, where model.VideoPlatformAlarmTypeBoolExp) (*model.VideoPlatformAlarmTypeMutationResponse, error)
	DeleteVideoPlatformAlarmTypeByPk(ctx context.Context, id int64) (*model1.VideoPlatformAlarmType, error)
	InsertVideoPlatformAlarmType(ctx context.Context, objects []*model.VideoPlatformAlarmTypeInsertInput) (*model.VideoPlatformAlarmTypeMutationResponse, error)
	InsertVideoPlatformAlarmTypeOne(ctx context.Context, objects model.VideoPlatformAlarmTypeInsertInput) (*model1.VideoPlatformAlarmType, error)
	UpdateVideoPlatformAlarmType(ctx context.Context, inc *model.VideoPlatformAlarmTypeIncInput, set *model.VideoPlatformAlarmTypeSetInput, where model.VideoPlatformAlarmTypeBoolExp) (*model.VideoPlatformAlarmTypeMutationResponse, error)
	UpdateVideoPlatformAlarmTypeByPk(ctx context.Context, inc *model.VideoPlatformAlarmTypeIncInput, set *model.VideoPlatformAlarmTypeSetInput, id int64) (*model1.VideoPlatformAlarmType, error)
	DeleteVoiceAlarmRecord(ctx context.Context, where model.VoiceAlarmRecordBoolExp) (*model.VoiceAlarmRecordMutationResponse, error)
	DeleteVoiceAlarmRecordByPk(ctx context.Context, id int64) (*model1.VoiceAlarmRecord, error)
	InsertVoiceAlarmRecord(ctx context.Context, objects []*model.VoiceAlarmRecordInsertInput) (*model.VoiceAlarmRecordMutationResponse, error)
	InsertVoiceAlarmRecordOne(ctx context.Context, objects model.VoiceAlarmRecordInsertInput) (*model1.VoiceAlarmRecord, error)
	UpdateVoiceAlarmRecord(ctx context.Context, inc *model.VoiceAlarmRecordIncInput, set *model.VoiceAlarmRecordSetInput, where model.VoiceAlarmRecordBoolExp) (*model.VoiceAlarmRecordMutationResponse, error)
	UpdateVoiceAlarmRecordByPk(ctx context.Context, inc *model.VoiceAlarmRecordIncInput, set *model.VoiceAlarmRecordSetInput, id int64) (*model1.VoiceAlarmRecord, error)
}
type QueryResolver interface {
	AlarmProcessingRecord(ctx context.Context, distinctOn []model.AlarmProcessingRecordSelectColumn, limit *int, offset *int, orderBy []*model.AlarmProcessingRecordOrderBy, where *model.AlarmProcessingRecordBoolExp) ([]*model1.AlarmProcessingRecord, error)
	AlarmProcessingRecordAggregate(ctx context.Context, distinctOn []model.AlarmProcessingRecordSelectColumn, limit *int, offset *int, orderBy []*model.AlarmProcessingRecordOrderBy, where *model.AlarmProcessingRecordBoolExp) (*model.AlarmProcessingRecordAggregate, error)
	AlarmProcessingRecordByPk(ctx context.Context, id int64) (*model1.AlarmProcessingRecord, error)
	AlarmSupervisionPictureUpload(ctx context.Context, distinctOn []model.AlarmSupervisionPictureUploadSelectColumn, limit *int, offset *int, orderBy []*model.AlarmSupervisionPictureUploadOrderBy, where *model.AlarmSupervisionPictureUploadBoolExp) ([]*model1.AlarmSupervisionPictureUpload, error)
	AlarmSupervisionPictureUploadAggregate(ctx context.Context, distinctOn []model.AlarmSupervisionPictureUploadSelectColumn, limit *int, offset *int, orderBy []*model.AlarmSupervisionPictureUploadOrderBy, where *model.AlarmSupervisionPictureUploadBoolExp) (*model.AlarmSupervisionPictureUploadAggregate, error)
	AlarmSupervisionPictureUploadByPk(ctx context.Context, id int64) (*model1.AlarmSupervisionPictureUpload, error)
	DistrictAlarmContentPush(ctx context.Context, distinctOn []model.DistrictAlarmContentPushSelectColumn, limit *int, offset *int, orderBy []*model.DistrictAlarmContentPushOrderBy, where *model.DistrictAlarmContentPushBoolExp) ([]*model1.DistrictAlarmContentPush, error)
	DistrictAlarmContentPushAggregate(ctx context.Context, distinctOn []model.DistrictAlarmContentPushSelectColumn, limit *int, offset *int, orderBy []*model.DistrictAlarmContentPushOrderBy, where *model.DistrictAlarmContentPushBoolExp) (*model.DistrictAlarmContentPushAggregate, error)
	DistrictAlarmContentPushByPk(ctx context.Context, id int64) (*model1.DistrictAlarmContentPush, error)
	EnterpriseAlarmSendPolice(ctx context.Context, distinctOn []model.EnterpriseAlarmSendPoliceSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseAlarmSendPoliceOrderBy, where *model.EnterpriseAlarmSendPoliceBoolExp) ([]*model1.EnterpriseAlarmSendPolice, error)
	EnterpriseAlarmSendPoliceAggregate(ctx context.Context, distinctOn []model.EnterpriseAlarmSendPoliceSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseAlarmSendPoliceOrderBy, where *model.EnterpriseAlarmSendPoliceBoolExp) (*model.EnterpriseAlarmSendPoliceAggregate, error)
	EnterpriseAlarmSendPoliceByPk(ctx context.Context, id int64) (*model1.EnterpriseAlarmSendPolice, error)
	OfflineAlarmRegistration(ctx context.Context, distinctOn []model.OfflineAlarmRegistrationSelectColumn, limit *int, offset *int, orderBy []*model.OfflineAlarmRegistrationOrderBy, where *model.OfflineAlarmRegistrationBoolExp) ([]*model1.OfflineAlarmRegistration, error)
	OfflineAlarmRegistrationAggregate(ctx context.Context, distinctOn []model.OfflineAlarmRegistrationSelectColumn, limit *int, offset *int, orderBy []*model.OfflineAlarmRegistrationOrderBy, where *model.OfflineAlarmRegistrationBoolExp) (*model.OfflineAlarmRegistrationAggregate, error)
	OfflineAlarmRegistrationByPk(ctx context.Context, id int64) (*model1.OfflineAlarmRegistration, error)
	VehicleAlarmData(ctx context.Context, distinctOn []model.VehicleAlarmDataSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmDataOrderBy, where *model.VehicleAlarmDataBoolExp) ([]*model1.VehicleAlarmData, error)
	VehicleAlarmDataAggregate(ctx context.Context, distinctOn []model.VehicleAlarmDataSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmDataOrderBy, where *model.VehicleAlarmDataBoolExp) (*model.VehicleAlarmDataAggregate, error)
	VehicleAlarmDataByPk(ctx context.Context, id int64) (*model1.VehicleAlarmData, error)
	VideoPlatformAlarmType(ctx context.Context, distinctOn []model.VideoPlatformAlarmTypeSelectColumn, limit *int, offset *int, orderBy []*model.VideoPlatformAlarmTypeOrderBy, where *model.VideoPlatformAlarmTypeBoolExp) ([]*model1.VideoPlatformAlarmType, error)
	VideoPlatformAlarmTypeAggregate(ctx context.Context, distinctOn []model.VideoPlatformAlarmTypeSelectColumn, limit *int, offset *int, orderBy []*model.VideoPlatformAlarmTypeOrderBy, where *model.VideoPlatformAlarmTypeBoolExp) (*model.VideoPlatformAlarmTypeAggregate, error)
	VideoPlatformAlarmTypeByPk(ctx context.Context, id int64) (*model1.VideoPlatformAlarmType, error)
	VoiceAlarmRecord(ctx context.Context, distinctOn []model.VoiceAlarmRecordSelectColumn, limit *int, offset *int, orderBy []*model.VoiceAlarmRecordOrderBy, where *model.VoiceAlarmRecordBoolExp) ([]*model1.VoiceAlarmRecord, error)
	VoiceAlarmRecordAggregate(ctx context.Context, distinctOn []model.VoiceAlarmRecordSelectColumn, limit *int, offset *int, orderBy []*model.VoiceAlarmRecordOrderBy, where *model.VoiceAlarmRecordBoolExp) (*model.VoiceAlarmRecordAggregate, error)
	VoiceAlarmRecordByPk(ctx context.Context, id int64) (*model1.VoiceAlarmRecord, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "AlarmProcessingRecord.alarm_data_id":
		if e.complexity.AlarmProcessingRecord.AlarmDataID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.AlarmDataID(childComplexity), true

	case "AlarmProcessingRecord.alarm_supervision_picture_id":
		if e.complexity.AlarmProcessingRecord.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.AlarmSupervisionPictureID(childComplexity), true

	case "AlarmProcessingRecord.announce_content":
		if e.complexity.AlarmProcessingRecord.AnnounceContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.AnnounceContent(childComplexity), true

	case "AlarmProcessingRecord.app_push_content":
		if e.complexity.AlarmProcessingRecord.AppPushContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.AppPushContent(childComplexity), true

	case "AlarmProcessingRecord.created_at":
		if e.complexity.AlarmProcessingRecord.CreatedAt == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.CreatedAt(childComplexity), true

	case "AlarmProcessingRecord.created_by":
		if e.complexity.AlarmProcessingRecord.CreatedBy == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.CreatedBy(childComplexity), true

	case "AlarmProcessingRecord.deleted_at":
		if e.complexity.AlarmProcessingRecord.DeletedAt == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.DeletedAt(childComplexity), true

	case "AlarmProcessingRecord.deleted_by":
		if e.complexity.AlarmProcessingRecord.DeletedBy == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.DeletedBy(childComplexity), true

	case "AlarmProcessingRecord.disposal_method":
		if e.complexity.AlarmProcessingRecord.DisposalMethod == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.DisposalMethod(childComplexity), true

	case "AlarmProcessingRecord.disposal_result":
		if e.complexity.AlarmProcessingRecord.DisposalResult == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.DisposalResult(childComplexity), true

	case "AlarmProcessingRecord.id":
		if e.complexity.AlarmProcessingRecord.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.ID(childComplexity), true

	case "AlarmProcessingRecord.is_announce":
		if e.complexity.AlarmProcessingRecord.IsAnnounce == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.IsAnnounce(childComplexity), true

	case "AlarmProcessingRecord.is_app_push":
		if e.complexity.AlarmProcessingRecord.IsAppPush == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.IsAppPush(childComplexity), true

	case "AlarmProcessingRecord.is_deleted":
		if e.complexity.AlarmProcessingRecord.IsDeleted == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.IsDeleted(childComplexity), true

	case "AlarmProcessingRecord.is_notify":
		if e.complexity.AlarmProcessingRecord.IsNotify == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.IsNotify(childComplexity), true

	case "AlarmProcessingRecord.is_sms_push":
		if e.complexity.AlarmProcessingRecord.IsSmsPush == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.IsSmsPush(childComplexity), true

	case "AlarmProcessingRecord.notify_content":
		if e.complexity.AlarmProcessingRecord.NotifyContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.NotifyContent(childComplexity), true

	case "AlarmProcessingRecord.operation_user":
		if e.complexity.AlarmProcessingRecord.OperationUser == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.OperationUser(childComplexity), true

	case "AlarmProcessingRecord.processing_content":
		if e.complexity.AlarmProcessingRecord.ProcessingContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.ProcessingContent(childComplexity), true

	case "AlarmProcessingRecord.processing_time":
		if e.complexity.AlarmProcessingRecord.ProcessingTime == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.ProcessingTime(childComplexity), true

	case "AlarmProcessingRecord.processing_type":
		if e.complexity.AlarmProcessingRecord.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.ProcessingType(childComplexity), true

	case "AlarmProcessingRecord.updated_at":
		if e.complexity.AlarmProcessingRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.UpdatedAt(childComplexity), true

	case "AlarmProcessingRecord.updated_by":
		if e.complexity.AlarmProcessingRecord.UpdatedBy == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.UpdatedBy(childComplexity), true

	case "AlarmProcessingRecordAggregate.aggregate":
		if e.complexity.AlarmProcessingRecordAggregate.Aggregate == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregate.Aggregate(childComplexity), true

	case "AlarmProcessingRecordAggregateFields.avg":
		if e.complexity.AlarmProcessingRecordAggregateFields.Avg == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.Avg(childComplexity), true

	case "AlarmProcessingRecordAggregateFields.count":
		if e.complexity.AlarmProcessingRecordAggregateFields.Count == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.Count(childComplexity), true

	case "AlarmProcessingRecordAggregateFields.max":
		if e.complexity.AlarmProcessingRecordAggregateFields.Max == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.Max(childComplexity), true

	case "AlarmProcessingRecordAggregateFields.min":
		if e.complexity.AlarmProcessingRecordAggregateFields.Min == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.Min(childComplexity), true

	case "AlarmProcessingRecordAggregateFields.stddev":
		if e.complexity.AlarmProcessingRecordAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.Stddev(childComplexity), true

	case "AlarmProcessingRecordAggregateFields.stddev_pop":
		if e.complexity.AlarmProcessingRecordAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.StddevPop(childComplexity), true

	case "AlarmProcessingRecordAggregateFields.stddev_samp":
		if e.complexity.AlarmProcessingRecordAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.StddevSamp(childComplexity), true

	case "AlarmProcessingRecordAggregateFields.sum":
		if e.complexity.AlarmProcessingRecordAggregateFields.Sum == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.Sum(childComplexity), true

	case "AlarmProcessingRecordAggregateFields.var_pop":
		if e.complexity.AlarmProcessingRecordAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.VarPop(childComplexity), true

	case "AlarmProcessingRecordAggregateFields.var_samp":
		if e.complexity.AlarmProcessingRecordAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.VarSamp(childComplexity), true

	case "AlarmProcessingRecordAggregateFields.variance":
		if e.complexity.AlarmProcessingRecordAggregateFields.Variance == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.Variance(childComplexity), true

	case "AlarmProcessingRecordAvgFields.alarm_supervision_picture_id":
		if e.complexity.AlarmProcessingRecordAvgFields.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAvgFields.AlarmSupervisionPictureID(childComplexity), true

	case "AlarmProcessingRecordAvgFields.disposal_method":
		if e.complexity.AlarmProcessingRecordAvgFields.DisposalMethod == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAvgFields.DisposalMethod(childComplexity), true

	case "AlarmProcessingRecordAvgFields.id":
		if e.complexity.AlarmProcessingRecordAvgFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAvgFields.ID(childComplexity), true

	case "AlarmProcessingRecordAvgFields.processing_type":
		if e.complexity.AlarmProcessingRecordAvgFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAvgFields.ProcessingType(childComplexity), true

	case "AlarmProcessingRecordMaxFields.alarm_data_id":
		if e.complexity.AlarmProcessingRecordMaxFields.AlarmDataID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.AlarmDataID(childComplexity), true

	case "AlarmProcessingRecordMaxFields.alarm_supervision_picture_id":
		if e.complexity.AlarmProcessingRecordMaxFields.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.AlarmSupervisionPictureID(childComplexity), true

	case "AlarmProcessingRecordMaxFields.announce_content":
		if e.complexity.AlarmProcessingRecordMaxFields.AnnounceContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.AnnounceContent(childComplexity), true

	case "AlarmProcessingRecordMaxFields.app_push_content":
		if e.complexity.AlarmProcessingRecordMaxFields.AppPushContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.AppPushContent(childComplexity), true

	case "AlarmProcessingRecordMaxFields.created_at":
		if e.complexity.AlarmProcessingRecordMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.CreatedAt(childComplexity), true

	case "AlarmProcessingRecordMaxFields.created_by":
		if e.complexity.AlarmProcessingRecordMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.CreatedBy(childComplexity), true

	case "AlarmProcessingRecordMaxFields.deleted_at":
		if e.complexity.AlarmProcessingRecordMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.DeletedAt(childComplexity), true

	case "AlarmProcessingRecordMaxFields.deleted_by":
		if e.complexity.AlarmProcessingRecordMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.DeletedBy(childComplexity), true

	case "AlarmProcessingRecordMaxFields.disposal_method":
		if e.complexity.AlarmProcessingRecordMaxFields.DisposalMethod == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.DisposalMethod(childComplexity), true

	case "AlarmProcessingRecordMaxFields.disposal_result":
		if e.complexity.AlarmProcessingRecordMaxFields.DisposalResult == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.DisposalResult(childComplexity), true

	case "AlarmProcessingRecordMaxFields.id":
		if e.complexity.AlarmProcessingRecordMaxFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.ID(childComplexity), true

	case "AlarmProcessingRecordMaxFields.is_announce":
		if e.complexity.AlarmProcessingRecordMaxFields.IsAnnounce == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.IsAnnounce(childComplexity), true

	case "AlarmProcessingRecordMaxFields.is_app_push":
		if e.complexity.AlarmProcessingRecordMaxFields.IsAppPush == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.IsAppPush(childComplexity), true

	case "AlarmProcessingRecordMaxFields.is_deleted":
		if e.complexity.AlarmProcessingRecordMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.IsDeleted(childComplexity), true

	case "AlarmProcessingRecordMaxFields.is_notify":
		if e.complexity.AlarmProcessingRecordMaxFields.IsNotify == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.IsNotify(childComplexity), true

	case "AlarmProcessingRecordMaxFields.is_sms_push":
		if e.complexity.AlarmProcessingRecordMaxFields.IsSmsPush == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.IsSmsPush(childComplexity), true

	case "AlarmProcessingRecordMaxFields.notify_content":
		if e.complexity.AlarmProcessingRecordMaxFields.NotifyContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.NotifyContent(childComplexity), true

	case "AlarmProcessingRecordMaxFields.operation_user":
		if e.complexity.AlarmProcessingRecordMaxFields.OperationUser == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.OperationUser(childComplexity), true

	case "AlarmProcessingRecordMaxFields.processing_content":
		if e.complexity.AlarmProcessingRecordMaxFields.ProcessingContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.ProcessingContent(childComplexity), true

	case "AlarmProcessingRecordMaxFields.processing_time":
		if e.complexity.AlarmProcessingRecordMaxFields.ProcessingTime == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.ProcessingTime(childComplexity), true

	case "AlarmProcessingRecordMaxFields.processing_type":
		if e.complexity.AlarmProcessingRecordMaxFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.ProcessingType(childComplexity), true

	case "AlarmProcessingRecordMaxFields.updated_at":
		if e.complexity.AlarmProcessingRecordMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.UpdatedAt(childComplexity), true

	case "AlarmProcessingRecordMaxFields.updated_by":
		if e.complexity.AlarmProcessingRecordMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.UpdatedBy(childComplexity), true

	case "AlarmProcessingRecordMinFields.alarm_data_id":
		if e.complexity.AlarmProcessingRecordMinFields.AlarmDataID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.AlarmDataID(childComplexity), true

	case "AlarmProcessingRecordMinFields.alarm_supervision_picture_id":
		if e.complexity.AlarmProcessingRecordMinFields.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.AlarmSupervisionPictureID(childComplexity), true

	case "AlarmProcessingRecordMinFields.announce_content":
		if e.complexity.AlarmProcessingRecordMinFields.AnnounceContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.AnnounceContent(childComplexity), true

	case "AlarmProcessingRecordMinFields.app_push_content":
		if e.complexity.AlarmProcessingRecordMinFields.AppPushContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.AppPushContent(childComplexity), true

	case "AlarmProcessingRecordMinFields.created_at":
		if e.complexity.AlarmProcessingRecordMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.CreatedAt(childComplexity), true

	case "AlarmProcessingRecordMinFields.created_by":
		if e.complexity.AlarmProcessingRecordMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.CreatedBy(childComplexity), true

	case "AlarmProcessingRecordMinFields.deleted_at":
		if e.complexity.AlarmProcessingRecordMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.DeletedAt(childComplexity), true

	case "AlarmProcessingRecordMinFields.deleted_by":
		if e.complexity.AlarmProcessingRecordMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.DeletedBy(childComplexity), true

	case "AlarmProcessingRecordMinFields.disposal_method":
		if e.complexity.AlarmProcessingRecordMinFields.DisposalMethod == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.DisposalMethod(childComplexity), true

	case "AlarmProcessingRecordMinFields.disposal_result":
		if e.complexity.AlarmProcessingRecordMinFields.DisposalResult == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.DisposalResult(childComplexity), true

	case "AlarmProcessingRecordMinFields.id":
		if e.complexity.AlarmProcessingRecordMinFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.ID(childComplexity), true

	case "AlarmProcessingRecordMinFields.is_announce":
		if e.complexity.AlarmProcessingRecordMinFields.IsAnnounce == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.IsAnnounce(childComplexity), true

	case "AlarmProcessingRecordMinFields.is_app_push":
		if e.complexity.AlarmProcessingRecordMinFields.IsAppPush == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.IsAppPush(childComplexity), true

	case "AlarmProcessingRecordMinFields.is_deleted":
		if e.complexity.AlarmProcessingRecordMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.IsDeleted(childComplexity), true

	case "AlarmProcessingRecordMinFields.is_notify":
		if e.complexity.AlarmProcessingRecordMinFields.IsNotify == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.IsNotify(childComplexity), true

	case "AlarmProcessingRecordMinFields.is_sms_push":
		if e.complexity.AlarmProcessingRecordMinFields.IsSmsPush == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.IsSmsPush(childComplexity), true

	case "AlarmProcessingRecordMinFields.notify_content":
		if e.complexity.AlarmProcessingRecordMinFields.NotifyContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.NotifyContent(childComplexity), true

	case "AlarmProcessingRecordMinFields.operation_user":
		if e.complexity.AlarmProcessingRecordMinFields.OperationUser == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.OperationUser(childComplexity), true

	case "AlarmProcessingRecordMinFields.processing_content":
		if e.complexity.AlarmProcessingRecordMinFields.ProcessingContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.ProcessingContent(childComplexity), true

	case "AlarmProcessingRecordMinFields.processing_time":
		if e.complexity.AlarmProcessingRecordMinFields.ProcessingTime == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.ProcessingTime(childComplexity), true

	case "AlarmProcessingRecordMinFields.processing_type":
		if e.complexity.AlarmProcessingRecordMinFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.ProcessingType(childComplexity), true

	case "AlarmProcessingRecordMinFields.updated_at":
		if e.complexity.AlarmProcessingRecordMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.UpdatedAt(childComplexity), true

	case "AlarmProcessingRecordMinFields.updated_by":
		if e.complexity.AlarmProcessingRecordMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.UpdatedBy(childComplexity), true

	case "AlarmProcessingRecordMutationResponse.affected_rows":
		if e.complexity.AlarmProcessingRecordMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMutationResponse.AffectedRows(childComplexity), true

	case "AlarmProcessingRecordMutationResponse.returning":
		if e.complexity.AlarmProcessingRecordMutationResponse.Returning == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMutationResponse.Returning(childComplexity), true

	case "AlarmProcessingRecordStddevFields.alarm_supervision_picture_id":
		if e.complexity.AlarmProcessingRecordStddevFields.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordStddevFields.AlarmSupervisionPictureID(childComplexity), true

	case "AlarmProcessingRecordStddevFields.disposal_method":
		if e.complexity.AlarmProcessingRecordStddevFields.DisposalMethod == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordStddevFields.DisposalMethod(childComplexity), true

	case "AlarmProcessingRecordStddevFields.id":
		if e.complexity.AlarmProcessingRecordStddevFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordStddevFields.ID(childComplexity), true

	case "AlarmProcessingRecordStddevFields.processing_type":
		if e.complexity.AlarmProcessingRecordStddevFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordStddevFields.ProcessingType(childComplexity), true

	case "AlarmProcessingRecordStddevPopFields.alarm_supervision_picture_id":
		if e.complexity.AlarmProcessingRecordStddevPopFields.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordStddevPopFields.AlarmSupervisionPictureID(childComplexity), true

	case "AlarmProcessingRecordStddevPopFields.disposal_method":
		if e.complexity.AlarmProcessingRecordStddevPopFields.DisposalMethod == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordStddevPopFields.DisposalMethod(childComplexity), true

	case "AlarmProcessingRecordStddevPopFields.id":
		if e.complexity.AlarmProcessingRecordStddevPopFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordStddevPopFields.ID(childComplexity), true

	case "AlarmProcessingRecordStddevPopFields.processing_type":
		if e.complexity.AlarmProcessingRecordStddevPopFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordStddevPopFields.ProcessingType(childComplexity), true

	case "AlarmProcessingRecordStddevSampFields.alarm_supervision_picture_id":
		if e.complexity.AlarmProcessingRecordStddevSampFields.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordStddevSampFields.AlarmSupervisionPictureID(childComplexity), true

	case "AlarmProcessingRecordStddevSampFields.disposal_method":
		if e.complexity.AlarmProcessingRecordStddevSampFields.DisposalMethod == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordStddevSampFields.DisposalMethod(childComplexity), true

	case "AlarmProcessingRecordStddevSampFields.id":
		if e.complexity.AlarmProcessingRecordStddevSampFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordStddevSampFields.ID(childComplexity), true

	case "AlarmProcessingRecordStddevSampFields.processing_type":
		if e.complexity.AlarmProcessingRecordStddevSampFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordStddevSampFields.ProcessingType(childComplexity), true

	case "AlarmProcessingRecordSumFields.alarm_supervision_picture_id":
		if e.complexity.AlarmProcessingRecordSumFields.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordSumFields.AlarmSupervisionPictureID(childComplexity), true

	case "AlarmProcessingRecordSumFields.disposal_method":
		if e.complexity.AlarmProcessingRecordSumFields.DisposalMethod == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordSumFields.DisposalMethod(childComplexity), true

	case "AlarmProcessingRecordSumFields.id":
		if e.complexity.AlarmProcessingRecordSumFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordSumFields.ID(childComplexity), true

	case "AlarmProcessingRecordSumFields.processing_type":
		if e.complexity.AlarmProcessingRecordSumFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordSumFields.ProcessingType(childComplexity), true

	case "AlarmProcessingRecordVarPopFields.alarm_supervision_picture_id":
		if e.complexity.AlarmProcessingRecordVarPopFields.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordVarPopFields.AlarmSupervisionPictureID(childComplexity), true

	case "AlarmProcessingRecordVarPopFields.disposal_method":
		if e.complexity.AlarmProcessingRecordVarPopFields.DisposalMethod == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordVarPopFields.DisposalMethod(childComplexity), true

	case "AlarmProcessingRecordVarPopFields.id":
		if e.complexity.AlarmProcessingRecordVarPopFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordVarPopFields.ID(childComplexity), true

	case "AlarmProcessingRecordVarPopFields.processing_type":
		if e.complexity.AlarmProcessingRecordVarPopFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordVarPopFields.ProcessingType(childComplexity), true

	case "AlarmProcessingRecordVarSampFields.alarm_supervision_picture_id":
		if e.complexity.AlarmProcessingRecordVarSampFields.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordVarSampFields.AlarmSupervisionPictureID(childComplexity), true

	case "AlarmProcessingRecordVarSampFields.disposal_method":
		if e.complexity.AlarmProcessingRecordVarSampFields.DisposalMethod == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordVarSampFields.DisposalMethod(childComplexity), true

	case "AlarmProcessingRecordVarSampFields.id":
		if e.complexity.AlarmProcessingRecordVarSampFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordVarSampFields.ID(childComplexity), true

	case "AlarmProcessingRecordVarSampFields.processing_type":
		if e.complexity.AlarmProcessingRecordVarSampFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordVarSampFields.ProcessingType(childComplexity), true

	case "AlarmProcessingRecordVarianceFields.alarm_supervision_picture_id":
		if e.complexity.AlarmProcessingRecordVarianceFields.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordVarianceFields.AlarmSupervisionPictureID(childComplexity), true

	case "AlarmProcessingRecordVarianceFields.disposal_method":
		if e.complexity.AlarmProcessingRecordVarianceFields.DisposalMethod == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordVarianceFields.DisposalMethod(childComplexity), true

	case "AlarmProcessingRecordVarianceFields.id":
		if e.complexity.AlarmProcessingRecordVarianceFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordVarianceFields.ID(childComplexity), true

	case "AlarmProcessingRecordVarianceFields.processing_type":
		if e.complexity.AlarmProcessingRecordVarianceFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordVarianceFields.ProcessingType(childComplexity), true

	case "AlarmSupervisionPictureUpload.alarm_supervision_picture_id":
		if e.complexity.AlarmSupervisionPictureUpload.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.AlarmSupervisionPictureID(childComplexity), true

	case "AlarmSupervisionPictureUpload.camera_id":
		if e.complexity.AlarmSupervisionPictureUpload.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.CameraID(childComplexity), true

	case "AlarmSupervisionPictureUpload.created_at":
		if e.complexity.AlarmSupervisionPictureUpload.CreatedAt == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.CreatedAt(childComplexity), true

	case "AlarmSupervisionPictureUpload.created_by":
		if e.complexity.AlarmSupervisionPictureUpload.CreatedBy == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.CreatedBy(childComplexity), true

	case "AlarmSupervisionPictureUpload.deleted_at":
		if e.complexity.AlarmSupervisionPictureUpload.DeletedAt == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.DeletedAt(childComplexity), true

	case "AlarmSupervisionPictureUpload.deleted_by":
		if e.complexity.AlarmSupervisionPictureUpload.DeletedBy == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.DeletedBy(childComplexity), true

	case "AlarmSupervisionPictureUpload.driver_id":
		if e.complexity.AlarmSupervisionPictureUpload.DriverID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.DriverID(childComplexity), true

	case "AlarmSupervisionPictureUpload.enterprise_id":
		if e.complexity.AlarmSupervisionPictureUpload.EnterpriseID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.EnterpriseID(childComplexity), true

	case "AlarmSupervisionPictureUpload.id":
		if e.complexity.AlarmSupervisionPictureUpload.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.ID(childComplexity), true

	case "AlarmSupervisionPictureUpload.imel":
		if e.complexity.AlarmSupervisionPictureUpload.Imel == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.Imel(childComplexity), true

	case "AlarmSupervisionPictureUpload.monitoring_pic_address":
		if e.complexity.AlarmSupervisionPictureUpload.MonitoringPicAddress == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.MonitoringPicAddress(childComplexity), true

	case "AlarmSupervisionPictureUpload.monitoring_pic_name":
		if e.complexity.AlarmSupervisionPictureUpload.MonitoringPicName == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.MonitoringPicName(childComplexity), true

	case "AlarmSupervisionPictureUpload.monitoring_pic_upload_time":
		if e.complexity.AlarmSupervisionPictureUpload.MonitoringPicUploadTime == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.MonitoringPicUploadTime(childComplexity), true

	case "AlarmSupervisionPictureUpload.photo_condition":
		if e.complexity.AlarmSupervisionPictureUpload.PhotoCondition == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.PhotoCondition(childComplexity), true

	case "AlarmSupervisionPictureUpload.sim_number":
		if e.complexity.AlarmSupervisionPictureUpload.SimNumber == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.SimNumber(childComplexity), true

	case "AlarmSupervisionPictureUpload.update_time":
		if e.complexity.AlarmSupervisionPictureUpload.UpdateTime == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.UpdateTime(childComplexity), true

	case "AlarmSupervisionPictureUpload.updated_at":
		if e.complexity.AlarmSupervisionPictureUpload.UpdatedAt == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.UpdatedAt(childComplexity), true

	case "AlarmSupervisionPictureUpload.updated_by":
		if e.complexity.AlarmSupervisionPictureUpload.UpdatedBy == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.UpdatedBy(childComplexity), true

	case "AlarmSupervisionPictureUpload.vehicle_id":
		if e.complexity.AlarmSupervisionPictureUpload.VehicleID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.VehicleID(childComplexity), true

	case "AlarmSupervisionPictureUploadAggregate.aggregate":
		if e.complexity.AlarmSupervisionPictureUploadAggregate.Aggregate == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregate.Aggregate(childComplexity), true

	case "AlarmSupervisionPictureUploadAggregateFields.avg":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.Avg == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.Avg(childComplexity), true

	case "AlarmSupervisionPictureUploadAggregateFields.count":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.Count == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.Count(childComplexity), true

	case "AlarmSupervisionPictureUploadAggregateFields.max":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.Max == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.Max(childComplexity), true

	case "AlarmSupervisionPictureUploadAggregateFields.min":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.Min == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.Min(childComplexity), true

	case "AlarmSupervisionPictureUploadAggregateFields.stddev":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.Stddev(childComplexity), true

	case "AlarmSupervisionPictureUploadAggregateFields.stddev_pop":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.StddevPop(childComplexity), true

	case "AlarmSupervisionPictureUploadAggregateFields.stddev_samp":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.StddevSamp(childComplexity), true

	case "AlarmSupervisionPictureUploadAggregateFields.sum":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.Sum == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.Sum(childComplexity), true

	case "AlarmSupervisionPictureUploadAggregateFields.var_pop":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.VarPop(childComplexity), true

	case "AlarmSupervisionPictureUploadAggregateFields.var_samp":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.VarSamp(childComplexity), true

	case "AlarmSupervisionPictureUploadAggregateFields.variance":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.Variance == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.Variance(childComplexity), true

	case "AlarmSupervisionPictureUploadAvgFields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadAvgFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAvgFields.CameraID(childComplexity), true

	case "AlarmSupervisionPictureUploadAvgFields.id":
		if e.complexity.AlarmSupervisionPictureUploadAvgFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAvgFields.ID(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.alarm_supervision_picture_id":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.AlarmSupervisionPictureID(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.CameraID(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.created_at":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.CreatedAt(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.created_by":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.CreatedBy(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.deleted_at":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.DeletedAt(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.deleted_by":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.DeletedBy(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.driver_id":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.DriverID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.DriverID(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.enterprise_id":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.EnterpriseID(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.id":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.ID(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.imel":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.Imel == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.Imel(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.monitoring_pic_address":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.MonitoringPicAddress == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.MonitoringPicAddress(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.monitoring_pic_name":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.MonitoringPicName == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.MonitoringPicName(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.monitoring_pic_upload_time":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.MonitoringPicUploadTime == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.MonitoringPicUploadTime(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.photo_condition":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.PhotoCondition == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.PhotoCondition(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.sim_number":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.SimNumber == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.SimNumber(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.update_time":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.UpdateTime == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.UpdateTime(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.updated_at":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.UpdatedAt(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.updated_by":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.UpdatedBy(childComplexity), true

	case "AlarmSupervisionPictureUploadMaxFields.vehicle_id":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.VehicleID(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.alarm_supervision_picture_id":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.AlarmSupervisionPictureID(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.CameraID(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.created_at":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.CreatedAt(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.created_by":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.CreatedBy(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.deleted_at":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.DeletedAt(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.deleted_by":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.DeletedBy(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.driver_id":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.DriverID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.DriverID(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.enterprise_id":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.EnterpriseID(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.id":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.ID(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.imel":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.Imel == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.Imel(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.monitoring_pic_address":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.MonitoringPicAddress == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.MonitoringPicAddress(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.monitoring_pic_name":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.MonitoringPicName == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.MonitoringPicName(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.monitoring_pic_upload_time":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.MonitoringPicUploadTime == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.MonitoringPicUploadTime(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.photo_condition":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.PhotoCondition == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.PhotoCondition(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.sim_number":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.SimNumber == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.SimNumber(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.update_time":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.UpdateTime == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.UpdateTime(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.updated_at":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.UpdatedAt(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.updated_by":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.UpdatedBy(childComplexity), true

	case "AlarmSupervisionPictureUploadMinFields.vehicle_id":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.VehicleID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.VehicleID(childComplexity), true

	case "AlarmSupervisionPictureUploadMutationResponse.affected_rows":
		if e.complexity.AlarmSupervisionPictureUploadMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMutationResponse.AffectedRows(childComplexity), true

	case "AlarmSupervisionPictureUploadMutationResponse.returning":
		if e.complexity.AlarmSupervisionPictureUploadMutationResponse.Returning == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMutationResponse.Returning(childComplexity), true

	case "AlarmSupervisionPictureUploadStddevFields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadStddevFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadStddevFields.CameraID(childComplexity), true

	case "AlarmSupervisionPictureUploadStddevFields.id":
		if e.complexity.AlarmSupervisionPictureUploadStddevFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadStddevFields.ID(childComplexity), true

	case "AlarmSupervisionPictureUploadStddevPopFields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadStddevPopFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadStddevPopFields.CameraID(childComplexity), true

	case "AlarmSupervisionPictureUploadStddevPopFields.id":
		if e.complexity.AlarmSupervisionPictureUploadStddevPopFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadStddevPopFields.ID(childComplexity), true

	case "AlarmSupervisionPictureUploadStddevSampFields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadStddevSampFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadStddevSampFields.CameraID(childComplexity), true

	case "AlarmSupervisionPictureUploadStddevSampFields.id":
		if e.complexity.AlarmSupervisionPictureUploadStddevSampFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadStddevSampFields.ID(childComplexity), true

	case "AlarmSupervisionPictureUploadSumFields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadSumFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadSumFields.CameraID(childComplexity), true

	case "AlarmSupervisionPictureUploadSumFields.id":
		if e.complexity.AlarmSupervisionPictureUploadSumFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadSumFields.ID(childComplexity), true

	case "AlarmSupervisionPictureUploadVarPopFields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadVarPopFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadVarPopFields.CameraID(childComplexity), true

	case "AlarmSupervisionPictureUploadVarPopFields.id":
		if e.complexity.AlarmSupervisionPictureUploadVarPopFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadVarPopFields.ID(childComplexity), true

	case "AlarmSupervisionPictureUploadVarSampFields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadVarSampFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadVarSampFields.CameraID(childComplexity), true

	case "AlarmSupervisionPictureUploadVarSampFields.id":
		if e.complexity.AlarmSupervisionPictureUploadVarSampFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadVarSampFields.ID(childComplexity), true

	case "AlarmSupervisionPictureUploadVarianceFields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadVarianceFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadVarianceFields.CameraID(childComplexity), true

	case "AlarmSupervisionPictureUploadVarianceFields.id":
		if e.complexity.AlarmSupervisionPictureUploadVarianceFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadVarianceFields.ID(childComplexity), true

	case "DistrictAlarmContentPush.alarm_content":
		if e.complexity.DistrictAlarmContentPush.AlarmContent == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.AlarmContent(childComplexity), true

	case "DistrictAlarmContentPush.alarm_data_id":
		if e.complexity.DistrictAlarmContentPush.AlarmDataID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.AlarmDataID(childComplexity), true

	case "DistrictAlarmContentPush.alarm_type":
		if e.complexity.DistrictAlarmContentPush.AlarmType == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.AlarmType(childComplexity), true

	case "DistrictAlarmContentPush.city_id":
		if e.complexity.DistrictAlarmContentPush.CityID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.CityID(childComplexity), true

	case "DistrictAlarmContentPush.created_at":
		if e.complexity.DistrictAlarmContentPush.CreatedAt == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.CreatedAt(childComplexity), true

	case "DistrictAlarmContentPush.created_by":
		if e.complexity.DistrictAlarmContentPush.CreatedBy == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.CreatedBy(childComplexity), true

	case "DistrictAlarmContentPush.deleted_at":
		if e.complexity.DistrictAlarmContentPush.DeletedAt == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.DeletedAt(childComplexity), true

	case "DistrictAlarmContentPush.deleted_by":
		if e.complexity.DistrictAlarmContentPush.DeletedBy == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.DeletedBy(childComplexity), true

	case "DistrictAlarmContentPush.district_id":
		if e.complexity.DistrictAlarmContentPush.DistrictID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.DistrictID(childComplexity), true

	case "DistrictAlarmContentPush.id":
		if e.complexity.DistrictAlarmContentPush.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.ID(childComplexity), true

	case "DistrictAlarmContentPush.is_deleted":
		if e.complexity.DistrictAlarmContentPush.IsDeleted == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.IsDeleted(childComplexity), true

	case "DistrictAlarmContentPush.province_id":
		if e.complexity.DistrictAlarmContentPush.ProvinceID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.ProvinceID(childComplexity), true

	case "DistrictAlarmContentPush.updated_at":
		if e.complexity.DistrictAlarmContentPush.UpdatedAt == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.UpdatedAt(childComplexity), true

	case "DistrictAlarmContentPush.updated_by":
		if e.complexity.DistrictAlarmContentPush.UpdatedBy == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.UpdatedBy(childComplexity), true

	case "DistrictAlarmContentPushAggregate.aggregate":
		if e.complexity.DistrictAlarmContentPushAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregate.Aggregate(childComplexity), true

	case "DistrictAlarmContentPushAggregateFields.avg":
		if e.complexity.DistrictAlarmContentPushAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.Avg(childComplexity), true

	case "DistrictAlarmContentPushAggregateFields.count":
		if e.complexity.DistrictAlarmContentPushAggregateFields.Count == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.Count(childComplexity), true

	case "DistrictAlarmContentPushAggregateFields.max":
		if e.complexity.DistrictAlarmContentPushAggregateFields.Max == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.Max(childComplexity), true

	case "DistrictAlarmContentPushAggregateFields.min":
		if e.complexity.DistrictAlarmContentPushAggregateFields.Min == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.Min(childComplexity), true

	case "DistrictAlarmContentPushAggregateFields.stddev":
		if e.complexity.DistrictAlarmContentPushAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.Stddev(childComplexity), true

	case "DistrictAlarmContentPushAggregateFields.stddev_pop":
		if e.complexity.DistrictAlarmContentPushAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.StddevPop(childComplexity), true

	case "DistrictAlarmContentPushAggregateFields.stddev_samp":
		if e.complexity.DistrictAlarmContentPushAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.StddevSamp(childComplexity), true

	case "DistrictAlarmContentPushAggregateFields.sum":
		if e.complexity.DistrictAlarmContentPushAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.Sum(childComplexity), true

	case "DistrictAlarmContentPushAggregateFields.var_pop":
		if e.complexity.DistrictAlarmContentPushAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.VarPop(childComplexity), true

	case "DistrictAlarmContentPushAggregateFields.var_samp":
		if e.complexity.DistrictAlarmContentPushAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.VarSamp(childComplexity), true

	case "DistrictAlarmContentPushAggregateFields.variance":
		if e.complexity.DistrictAlarmContentPushAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.Variance(childComplexity), true

	case "DistrictAlarmContentPushAvgFields.id":
		if e.complexity.DistrictAlarmContentPushAvgFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAvgFields.ID(childComplexity), true

	case "DistrictAlarmContentPushMaxFields.alarm_content":
		if e.complexity.DistrictAlarmContentPushMaxFields.AlarmContent == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.AlarmContent(childComplexity), true

	case "DistrictAlarmContentPushMaxFields.alarm_data_id":
		if e.complexity.DistrictAlarmContentPushMaxFields.AlarmDataID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.AlarmDataID(childComplexity), true

	case "DistrictAlarmContentPushMaxFields.alarm_type":
		if e.complexity.DistrictAlarmContentPushMaxFields.AlarmType == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.AlarmType(childComplexity), true

	case "DistrictAlarmContentPushMaxFields.city_id":
		if e.complexity.DistrictAlarmContentPushMaxFields.CityID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.CityID(childComplexity), true

	case "DistrictAlarmContentPushMaxFields.created_at":
		if e.complexity.DistrictAlarmContentPushMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.CreatedAt(childComplexity), true

	case "DistrictAlarmContentPushMaxFields.created_by":
		if e.complexity.DistrictAlarmContentPushMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.CreatedBy(childComplexity), true

	case "DistrictAlarmContentPushMaxFields.deleted_at":
		if e.complexity.DistrictAlarmContentPushMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.DeletedAt(childComplexity), true

	case "DistrictAlarmContentPushMaxFields.deleted_by":
		if e.complexity.DistrictAlarmContentPushMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.DeletedBy(childComplexity), true

	case "DistrictAlarmContentPushMaxFields.district_id":
		if e.complexity.DistrictAlarmContentPushMaxFields.DistrictID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.DistrictID(childComplexity), true

	case "DistrictAlarmContentPushMaxFields.id":
		if e.complexity.DistrictAlarmContentPushMaxFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.ID(childComplexity), true

	case "DistrictAlarmContentPushMaxFields.is_deleted":
		if e.complexity.DistrictAlarmContentPushMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.IsDeleted(childComplexity), true

	case "DistrictAlarmContentPushMaxFields.province_id":
		if e.complexity.DistrictAlarmContentPushMaxFields.ProvinceID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.ProvinceID(childComplexity), true

	case "DistrictAlarmContentPushMaxFields.updated_at":
		if e.complexity.DistrictAlarmContentPushMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.UpdatedAt(childComplexity), true

	case "DistrictAlarmContentPushMaxFields.updated_by":
		if e.complexity.DistrictAlarmContentPushMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.UpdatedBy(childComplexity), true

	case "DistrictAlarmContentPushMinFields.alarm_content":
		if e.complexity.DistrictAlarmContentPushMinFields.AlarmContent == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.AlarmContent(childComplexity), true

	case "DistrictAlarmContentPushMinFields.alarm_data_id":
		if e.complexity.DistrictAlarmContentPushMinFields.AlarmDataID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.AlarmDataID(childComplexity), true

	case "DistrictAlarmContentPushMinFields.alarm_type":
		if e.complexity.DistrictAlarmContentPushMinFields.AlarmType == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.AlarmType(childComplexity), true

	case "DistrictAlarmContentPushMinFields.city_id":
		if e.complexity.DistrictAlarmContentPushMinFields.CityID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.CityID(childComplexity), true

	case "DistrictAlarmContentPushMinFields.created_at":
		if e.complexity.DistrictAlarmContentPushMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.CreatedAt(childComplexity), true

	case "DistrictAlarmContentPushMinFields.created_by":
		if e.complexity.DistrictAlarmContentPushMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.CreatedBy(childComplexity), true

	case "DistrictAlarmContentPushMinFields.deleted_at":
		if e.complexity.DistrictAlarmContentPushMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.DeletedAt(childComplexity), true

	case "DistrictAlarmContentPushMinFields.deleted_by":
		if e.complexity.DistrictAlarmContentPushMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.DeletedBy(childComplexity), true

	case "DistrictAlarmContentPushMinFields.district_id":
		if e.complexity.DistrictAlarmContentPushMinFields.DistrictID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.DistrictID(childComplexity), true

	case "DistrictAlarmContentPushMinFields.id":
		if e.complexity.DistrictAlarmContentPushMinFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.ID(childComplexity), true

	case "DistrictAlarmContentPushMinFields.is_deleted":
		if e.complexity.DistrictAlarmContentPushMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.IsDeleted(childComplexity), true

	case "DistrictAlarmContentPushMinFields.province_id":
		if e.complexity.DistrictAlarmContentPushMinFields.ProvinceID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.ProvinceID(childComplexity), true

	case "DistrictAlarmContentPushMinFields.updated_at":
		if e.complexity.DistrictAlarmContentPushMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.UpdatedAt(childComplexity), true

	case "DistrictAlarmContentPushMinFields.updated_by":
		if e.complexity.DistrictAlarmContentPushMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.UpdatedBy(childComplexity), true

	case "DistrictAlarmContentPushMutationResponse.affected_rows":
		if e.complexity.DistrictAlarmContentPushMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMutationResponse.AffectedRows(childComplexity), true

	case "DistrictAlarmContentPushMutationResponse.returning":
		if e.complexity.DistrictAlarmContentPushMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMutationResponse.Returning(childComplexity), true

	case "DistrictAlarmContentPushStddevFields.id":
		if e.complexity.DistrictAlarmContentPushStddevFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushStddevFields.ID(childComplexity), true

	case "DistrictAlarmContentPushStddevPopFields.id":
		if e.complexity.DistrictAlarmContentPushStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushStddevPopFields.ID(childComplexity), true

	case "DistrictAlarmContentPushStddevSampFields.id":
		if e.complexity.DistrictAlarmContentPushStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushStddevSampFields.ID(childComplexity), true

	case "DistrictAlarmContentPushSumFields.id":
		if e.complexity.DistrictAlarmContentPushSumFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushSumFields.ID(childComplexity), true

	case "DistrictAlarmContentPushVarPopFields.id":
		if e.complexity.DistrictAlarmContentPushVarPopFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushVarPopFields.ID(childComplexity), true

	case "DistrictAlarmContentPushVarSampFields.id":
		if e.complexity.DistrictAlarmContentPushVarSampFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushVarSampFields.ID(childComplexity), true

	case "DistrictAlarmContentPushVarianceFields.id":
		if e.complexity.DistrictAlarmContentPushVarianceFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushVarianceFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPolice.created_at":
		if e.complexity.EnterpriseAlarmSendPolice.CreatedAt == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.CreatedAt(childComplexity), true

	case "EnterpriseAlarmSendPolice.created_by":
		if e.complexity.EnterpriseAlarmSendPolice.CreatedBy == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.CreatedBy(childComplexity), true

	case "EnterpriseAlarmSendPolice.deleted_at":
		if e.complexity.EnterpriseAlarmSendPolice.DeletedAt == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.DeletedAt(childComplexity), true

	case "EnterpriseAlarmSendPolice.deleted_by":
		if e.complexity.EnterpriseAlarmSendPolice.DeletedBy == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.DeletedBy(childComplexity), true

	case "EnterpriseAlarmSendPolice.enterprise_alarm_send_police_id":
		if e.complexity.EnterpriseAlarmSendPolice.EnterpriseAlarmSendPoliceID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.EnterpriseAlarmSendPoliceID(childComplexity), true

	case "EnterpriseAlarmSendPolice.enterprise_contact":
		if e.complexity.EnterpriseAlarmSendPolice.EnterpriseContact == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.EnterpriseContact(childComplexity), true

	case "EnterpriseAlarmSendPolice.enterprise_id":
		if e.complexity.EnterpriseAlarmSendPolice.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.EnterpriseID(childComplexity), true

	case "EnterpriseAlarmSendPolice.enterprise_name":
		if e.complexity.EnterpriseAlarmSendPolice.EnterpriseName == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.EnterpriseName(childComplexity), true

	case "EnterpriseAlarmSendPolice.enterprise_phone":
		if e.complexity.EnterpriseAlarmSendPolice.EnterprisePhone == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.EnterprisePhone(childComplexity), true

	case "EnterpriseAlarmSendPolice.id":
		if e.complexity.EnterpriseAlarmSendPolice.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.ID(childComplexity), true

	case "EnterpriseAlarmSendPolice.phlice_department":
		if e.complexity.EnterpriseAlarmSendPolice.PhliceDepartment == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.PhliceDepartment(childComplexity), true

	case "EnterpriseAlarmSendPolice.police":
		if e.complexity.EnterpriseAlarmSendPolice.Police == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.Police(childComplexity), true

	case "EnterpriseAlarmSendPolice.police_phone":
		if e.complexity.EnterpriseAlarmSendPolice.PolicePhone == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.PolicePhone(childComplexity), true

	case "EnterpriseAlarmSendPolice.updated_at":
		if e.complexity.EnterpriseAlarmSendPolice.UpdatedAt == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.UpdatedAt(childComplexity), true

	case "EnterpriseAlarmSendPolice.updated_by":
		if e.complexity.EnterpriseAlarmSendPolice.UpdatedBy == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.UpdatedBy(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregate.aggregate":
		if e.complexity.EnterpriseAlarmSendPoliceAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregate.Aggregate(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.avg":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Avg(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.count":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Count == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Count(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.max":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Max == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Max(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.min":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Min == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Min(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.stddev":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Stddev(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.stddev_pop":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.StddevPop(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.stddev_samp":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.StddevSamp(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.sum":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Sum(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.var_pop":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.VarPop(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.var_samp":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.VarSamp(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.variance":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Variance(childComplexity), true

	case "EnterpriseAlarmSendPoliceAvgFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceAvgFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAvgFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.created_at":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.CreatedAt(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.created_by":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.CreatedBy(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.deleted_at":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.DeletedAt(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.deleted_by":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.DeletedBy(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.enterprise_alarm_send_police_id":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterpriseAlarmSendPoliceID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterpriseAlarmSendPoliceID(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.enterprise_contact":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterpriseContact == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterpriseContact(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.enterprise_id":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterpriseID(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.enterprise_name":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterpriseName == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterpriseName(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.enterprise_phone":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterprisePhone == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterprisePhone(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.phlice_department":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.PhliceDepartment == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.PhliceDepartment(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.police":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.Police == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.Police(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.police_phone":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.PolicePhone == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.PolicePhone(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.updated_at":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.UpdatedAt(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.updated_by":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.UpdatedBy(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.created_at":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.CreatedAt(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.created_by":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.CreatedBy(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.deleted_at":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.DeletedAt(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.deleted_by":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.DeletedBy(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.enterprise_alarm_send_police_id":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterpriseAlarmSendPoliceID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterpriseAlarmSendPoliceID(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.enterprise_contact":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterpriseContact == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterpriseContact(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.enterprise_id":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterpriseID(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.enterprise_name":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterpriseName == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterpriseName(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.enterprise_phone":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterprisePhone == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterprisePhone(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.phlice_department":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.PhliceDepartment == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.PhliceDepartment(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.police":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.Police == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.Police(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.police_phone":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.PolicePhone == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.PolicePhone(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.updated_at":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.UpdatedAt(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.updated_by":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.UpdatedBy(childComplexity), true

	case "EnterpriseAlarmSendPoliceMutationResponse.affected_rows":
		if e.complexity.EnterpriseAlarmSendPoliceMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMutationResponse.AffectedRows(childComplexity), true

	case "EnterpriseAlarmSendPoliceMutationResponse.returning":
		if e.complexity.EnterpriseAlarmSendPoliceMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMutationResponse.Returning(childComplexity), true

	case "EnterpriseAlarmSendPoliceStddevFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceStddevFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceStddevFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPoliceStddevPopFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceStddevPopFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPoliceStddevSampFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceStddevSampFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPoliceSumFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceSumFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceSumFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPoliceVarPopFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceVarPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceVarPopFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPoliceVarSampFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceVarSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceVarSampFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPoliceVarianceFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceVarianceFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceVarianceFields.ID(childComplexity), true

	case "Mutation.delete_alarm_processing_record":
		if e.complexity.Mutation.DeleteAlarmProcessingRecord == nil {
			break
		}

		args, err := ec.field_Mutation_delete_alarm_processing_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAlarmProcessingRecord(childComplexity, args["where"].(model.AlarmProcessingRecordBoolExp)), true

	case "Mutation.delete_alarm_processing_record_by_pk":
		if e.complexity.Mutation.DeleteAlarmProcessingRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_alarm_processing_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAlarmProcessingRecordByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_alarm_supervision_picture_upload":
		if e.complexity.Mutation.DeleteAlarmSupervisionPictureUpload == nil {
			break
		}

		args, err := ec.field_Mutation_delete_alarm_supervision_picture_upload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAlarmSupervisionPictureUpload(childComplexity, args["where"].(model.AlarmSupervisionPictureUploadBoolExp)), true

	case "Mutation.delete_alarm_supervision_picture_upload_by_pk":
		if e.complexity.Mutation.DeleteAlarmSupervisionPictureUploadByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_alarm_supervision_picture_upload_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAlarmSupervisionPictureUploadByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_district_alarm_content_push":
		if e.complexity.Mutation.DeleteDistrictAlarmContentPush == nil {
			break
		}

		args, err := ec.field_Mutation_delete_district_alarm_content_push_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDistrictAlarmContentPush(childComplexity, args["where"].(model.DistrictAlarmContentPushBoolExp)), true

	case "Mutation.delete_district_alarm_content_push_by_pk":
		if e.complexity.Mutation.DeleteDistrictAlarmContentPushByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_district_alarm_content_push_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDistrictAlarmContentPushByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_enterprise_alarm_send_police":
		if e.complexity.Mutation.DeleteEnterpriseAlarmSendPolice == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_alarm_send_police_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseAlarmSendPolice(childComplexity, args["where"].(model.EnterpriseAlarmSendPoliceBoolExp)), true

	case "Mutation.delete_enterprise_alarm_send_police_by_pk":
		if e.complexity.Mutation.DeleteEnterpriseAlarmSendPoliceByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_alarm_send_police_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseAlarmSendPoliceByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_offline_alarm_registration":
		if e.complexity.Mutation.DeleteOfflineAlarmRegistration == nil {
			break
		}

		args, err := ec.field_Mutation_delete_offline_alarm_registration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOfflineAlarmRegistration(childComplexity, args["where"].(model.OfflineAlarmRegistrationBoolExp)), true

	case "Mutation.delete_offline_alarm_registration_by_pk":
		if e.complexity.Mutation.DeleteOfflineAlarmRegistrationByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_offline_alarm_registration_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOfflineAlarmRegistrationByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_alarm_data":
		if e.complexity.Mutation.DeleteVehicleAlarmData == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_alarm_data_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleAlarmData(childComplexity, args["where"].(model.VehicleAlarmDataBoolExp)), true

	case "Mutation.delete_vehicle_alarm_data_by_pk":
		if e.complexity.Mutation.DeleteVehicleAlarmDataByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_alarm_data_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleAlarmDataByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_video_platform_alarm_type":
		if e.complexity.Mutation.DeleteVideoPlatformAlarmType == nil {
			break
		}

		args, err := ec.field_Mutation_delete_video_platform_alarm_type_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVideoPlatformAlarmType(childComplexity, args["where"].(model.VideoPlatformAlarmTypeBoolExp)), true

	case "Mutation.delete_video_platform_alarm_type_by_pk":
		if e.complexity.Mutation.DeleteVideoPlatformAlarmTypeByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_video_platform_alarm_type_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVideoPlatformAlarmTypeByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_voice_alarm_record":
		if e.complexity.Mutation.DeleteVoiceAlarmRecord == nil {
			break
		}

		args, err := ec.field_Mutation_delete_voice_alarm_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVoiceAlarmRecord(childComplexity, args["where"].(model.VoiceAlarmRecordBoolExp)), true

	case "Mutation.delete_voice_alarm_record_by_pk":
		if e.complexity.Mutation.DeleteVoiceAlarmRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_voice_alarm_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVoiceAlarmRecordByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.insert_alarm_processing_record":
		if e.complexity.Mutation.InsertAlarmProcessingRecord == nil {
			break
		}

		args, err := ec.field_Mutation_insert_alarm_processing_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertAlarmProcessingRecord(childComplexity, args["objects"].([]*model.AlarmProcessingRecordInsertInput)), true

	case "Mutation.insert_alarm_processing_record_one":
		if e.complexity.Mutation.InsertAlarmProcessingRecordOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_alarm_processing_record_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertAlarmProcessingRecordOne(childComplexity, args["objects"].(model.AlarmProcessingRecordInsertInput)), true

	case "Mutation.insert_alarm_supervision_picture_upload":
		if e.complexity.Mutation.InsertAlarmSupervisionPictureUpload == nil {
			break
		}

		args, err := ec.field_Mutation_insert_alarm_supervision_picture_upload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertAlarmSupervisionPictureUpload(childComplexity, args["objects"].([]*model.AlarmSupervisionPictureUploadInsertInput)), true

	case "Mutation.insert_alarm_supervision_picture_upload_one":
		if e.complexity.Mutation.InsertAlarmSupervisionPictureUploadOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_alarm_supervision_picture_upload_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertAlarmSupervisionPictureUploadOne(childComplexity, args["objects"].(model.AlarmSupervisionPictureUploadInsertInput)), true

	case "Mutation.insert_district_alarm_content_push":
		if e.complexity.Mutation.InsertDistrictAlarmContentPush == nil {
			break
		}

		args, err := ec.field_Mutation_insert_district_alarm_content_push_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDistrictAlarmContentPush(childComplexity, args["objects"].([]*model.DistrictAlarmContentPushInsertInput)), true

	case "Mutation.insert_district_alarm_content_push_one":
		if e.complexity.Mutation.InsertDistrictAlarmContentPushOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_district_alarm_content_push_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDistrictAlarmContentPushOne(childComplexity, args["objects"].(model.DistrictAlarmContentPushInsertInput)), true

	case "Mutation.insert_enterprise_alarm_send_police":
		if e.complexity.Mutation.InsertEnterpriseAlarmSendPolice == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_alarm_send_police_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseAlarmSendPolice(childComplexity, args["objects"].([]*model.EnterpriseAlarmSendPoliceInsertInput)), true

	case "Mutation.insert_enterprise_alarm_send_police_one":
		if e.complexity.Mutation.InsertEnterpriseAlarmSendPoliceOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_alarm_send_police_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseAlarmSendPoliceOne(childComplexity, args["objects"].(model.EnterpriseAlarmSendPoliceInsertInput)), true

	case "Mutation.insert_offline_alarm_registration":
		if e.complexity.Mutation.InsertOfflineAlarmRegistration == nil {
			break
		}

		args, err := ec.field_Mutation_insert_offline_alarm_registration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertOfflineAlarmRegistration(childComplexity, args["objects"].([]*model.OfflineAlarmRegistrationInsertInput)), true

	case "Mutation.insert_offline_alarm_registration_one":
		if e.complexity.Mutation.InsertOfflineAlarmRegistrationOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_offline_alarm_registration_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertOfflineAlarmRegistrationOne(childComplexity, args["objects"].(model.OfflineAlarmRegistrationInsertInput)), true

	case "Mutation.insert_vehicle_alarm_data":
		if e.complexity.Mutation.InsertVehicleAlarmData == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_alarm_data_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleAlarmData(childComplexity, args["objects"].([]*model.VehicleAlarmDataInsertInput)), true

	case "Mutation.insert_vehicle_alarm_data_one":
		if e.complexity.Mutation.InsertVehicleAlarmDataOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_alarm_data_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleAlarmDataOne(childComplexity, args["objects"].(model.VehicleAlarmDataInsertInput)), true

	case "Mutation.insert_video_platform_alarm_type":
		if e.complexity.Mutation.InsertVideoPlatformAlarmType == nil {
			break
		}

		args, err := ec.field_Mutation_insert_video_platform_alarm_type_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVideoPlatformAlarmType(childComplexity, args["objects"].([]*model.VideoPlatformAlarmTypeInsertInput)), true

	case "Mutation.insert_video_platform_alarm_type_one":
		if e.complexity.Mutation.InsertVideoPlatformAlarmTypeOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_video_platform_alarm_type_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVideoPlatformAlarmTypeOne(childComplexity, args["objects"].(model.VideoPlatformAlarmTypeInsertInput)), true

	case "Mutation.insert_voice_alarm_record":
		if e.complexity.Mutation.InsertVoiceAlarmRecord == nil {
			break
		}

		args, err := ec.field_Mutation_insert_voice_alarm_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVoiceAlarmRecord(childComplexity, args["objects"].([]*model.VoiceAlarmRecordInsertInput)), true

	case "Mutation.insert_voice_alarm_record_one":
		if e.complexity.Mutation.InsertVoiceAlarmRecordOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_voice_alarm_record_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVoiceAlarmRecordOne(childComplexity, args["objects"].(model.VoiceAlarmRecordInsertInput)), true

	case "Mutation.update_alarm_processing_record":
		if e.complexity.Mutation.UpdateAlarmProcessingRecord == nil {
			break
		}

		args, err := ec.field_Mutation_update_alarm_processing_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAlarmProcessingRecord(childComplexity, args["_inc"].(*model.AlarmProcessingRecordIncInput), args["_set"].(*model.AlarmProcessingRecordSetInput), args["where"].(model.AlarmProcessingRecordBoolExp)), true

	case "Mutation.update_alarm_processing_record_by_pk":
		if e.complexity.Mutation.UpdateAlarmProcessingRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_alarm_processing_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAlarmProcessingRecordByPk(childComplexity, args["_inc"].(*model.AlarmProcessingRecordIncInput), args["_set"].(*model.AlarmProcessingRecordSetInput), args["id"].(int64)), true

	case "Mutation.update_alarm_supervision_picture_upload":
		if e.complexity.Mutation.UpdateAlarmSupervisionPictureUpload == nil {
			break
		}

		args, err := ec.field_Mutation_update_alarm_supervision_picture_upload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAlarmSupervisionPictureUpload(childComplexity, args["_inc"].(*model.AlarmSupervisionPictureUploadIncInput), args["_set"].(*model.AlarmSupervisionPictureUploadSetInput), args["where"].(model.AlarmSupervisionPictureUploadBoolExp)), true

	case "Mutation.update_alarm_supervision_picture_upload_by_pk":
		if e.complexity.Mutation.UpdateAlarmSupervisionPictureUploadByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_alarm_supervision_picture_upload_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAlarmSupervisionPictureUploadByPk(childComplexity, args["_inc"].(*model.AlarmSupervisionPictureUploadIncInput), args["_set"].(*model.AlarmSupervisionPictureUploadSetInput), args["id"].(int64)), true

	case "Mutation.update_district_alarm_content_push":
		if e.complexity.Mutation.UpdateDistrictAlarmContentPush == nil {
			break
		}

		args, err := ec.field_Mutation_update_district_alarm_content_push_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDistrictAlarmContentPush(childComplexity, args["_inc"].(*model.DistrictAlarmContentPushIncInput), args["_set"].(*model.DistrictAlarmContentPushSetInput), args["where"].(model.DistrictAlarmContentPushBoolExp)), true

	case "Mutation.update_district_alarm_content_push_by_pk":
		if e.complexity.Mutation.UpdateDistrictAlarmContentPushByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_district_alarm_content_push_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDistrictAlarmContentPushByPk(childComplexity, args["_inc"].(*model.DistrictAlarmContentPushIncInput), args["_set"].(*model.DistrictAlarmContentPushSetInput), args["id"].(int64)), true

	case "Mutation.update_enterprise_alarm_send_police":
		if e.complexity.Mutation.UpdateEnterpriseAlarmSendPolice == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_alarm_send_police_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseAlarmSendPolice(childComplexity, args["_inc"].(*model.EnterpriseAlarmSendPoliceIncInput), args["_set"].(*model.EnterpriseAlarmSendPoliceSetInput), args["where"].(model.EnterpriseAlarmSendPoliceBoolExp)), true

	case "Mutation.update_enterprise_alarm_send_police_by_pk":
		if e.complexity.Mutation.UpdateEnterpriseAlarmSendPoliceByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_alarm_send_police_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseAlarmSendPoliceByPk(childComplexity, args["_inc"].(*model.EnterpriseAlarmSendPoliceIncInput), args["_set"].(*model.EnterpriseAlarmSendPoliceSetInput), args["id"].(int64)), true

	case "Mutation.update_offline_alarm_registration":
		if e.complexity.Mutation.UpdateOfflineAlarmRegistration == nil {
			break
		}

		args, err := ec.field_Mutation_update_offline_alarm_registration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOfflineAlarmRegistration(childComplexity, args["_inc"].(*model.OfflineAlarmRegistrationIncInput), args["_set"].(*model.OfflineAlarmRegistrationSetInput), args["where"].(model.OfflineAlarmRegistrationBoolExp)), true

	case "Mutation.update_offline_alarm_registration_by_pk":
		if e.complexity.Mutation.UpdateOfflineAlarmRegistrationByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_offline_alarm_registration_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOfflineAlarmRegistrationByPk(childComplexity, args["_inc"].(*model.OfflineAlarmRegistrationIncInput), args["_set"].(*model.OfflineAlarmRegistrationSetInput), args["id"].(int64)), true

	case "Mutation.update_vehicle_alarm_data":
		if e.complexity.Mutation.UpdateVehicleAlarmData == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_alarm_data_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleAlarmData(childComplexity, args["_inc"].(*model.VehicleAlarmDataIncInput), args["_set"].(*model.VehicleAlarmDataSetInput), args["where"].(model.VehicleAlarmDataBoolExp)), true

	case "Mutation.update_vehicle_alarm_data_by_pk":
		if e.complexity.Mutation.UpdateVehicleAlarmDataByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_alarm_data_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleAlarmDataByPk(childComplexity, args["_inc"].(*model.VehicleAlarmDataIncInput), args["_set"].(*model.VehicleAlarmDataSetInput), args["id"].(int64)), true

	case "Mutation.update_video_platform_alarm_type":
		if e.complexity.Mutation.UpdateVideoPlatformAlarmType == nil {
			break
		}

		args, err := ec.field_Mutation_update_video_platform_alarm_type_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVideoPlatformAlarmType(childComplexity, args["_inc"].(*model.VideoPlatformAlarmTypeIncInput), args["_set"].(*model.VideoPlatformAlarmTypeSetInput), args["where"].(model.VideoPlatformAlarmTypeBoolExp)), true

	case "Mutation.update_video_platform_alarm_type_by_pk":
		if e.complexity.Mutation.UpdateVideoPlatformAlarmTypeByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_video_platform_alarm_type_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVideoPlatformAlarmTypeByPk(childComplexity, args["_inc"].(*model.VideoPlatformAlarmTypeIncInput), args["_set"].(*model.VideoPlatformAlarmTypeSetInput), args["id"].(int64)), true

	case "Mutation.update_voice_alarm_record":
		if e.complexity.Mutation.UpdateVoiceAlarmRecord == nil {
			break
		}

		args, err := ec.field_Mutation_update_voice_alarm_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVoiceAlarmRecord(childComplexity, args["_inc"].(*model.VoiceAlarmRecordIncInput), args["_set"].(*model.VoiceAlarmRecordSetInput), args["where"].(model.VoiceAlarmRecordBoolExp)), true

	case "Mutation.update_voice_alarm_record_by_pk":
		if e.complexity.Mutation.UpdateVoiceAlarmRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_voice_alarm_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVoiceAlarmRecordByPk(childComplexity, args["_inc"].(*model.VoiceAlarmRecordIncInput), args["_set"].(*model.VoiceAlarmRecordSetInput), args["id"].(int64)), true

	case "OfflineAlarmRegistration.alarm_type":
		if e.complexity.OfflineAlarmRegistration.AlarmType == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.AlarmType(childComplexity), true

	case "OfflineAlarmRegistration.created_at":
		if e.complexity.OfflineAlarmRegistration.CreatedAt == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.CreatedAt(childComplexity), true

	case "OfflineAlarmRegistration.created_by":
		if e.complexity.OfflineAlarmRegistration.CreatedBy == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.CreatedBy(childComplexity), true

	case "OfflineAlarmRegistration.deleted_at":
		if e.complexity.OfflineAlarmRegistration.DeletedAt == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.DeletedAt(childComplexity), true

	case "OfflineAlarmRegistration.deleted_by":
		if e.complexity.OfflineAlarmRegistration.DeletedBy == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.DeletedBy(childComplexity), true

	case "OfflineAlarmRegistration.id":
		if e.complexity.OfflineAlarmRegistration.ID == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.ID(childComplexity), true

	case "OfflineAlarmRegistration.is_end_alarm":
		if e.complexity.OfflineAlarmRegistration.IsEndAlarm == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.IsEndAlarm(childComplexity), true

	case "OfflineAlarmRegistration.is_need_maintain":
		if e.complexity.OfflineAlarmRegistration.IsNeedMaintain == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.IsNeedMaintain(childComplexity), true

	case "OfflineAlarmRegistration.is_registration":
		if e.complexity.OfflineAlarmRegistration.IsRegistration == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.IsRegistration(childComplexity), true

	case "OfflineAlarmRegistration.is_send_sms":
		if e.complexity.OfflineAlarmRegistration.IsSendSms == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.IsSendSms(childComplexity), true

	case "OfflineAlarmRegistration.offline_alarm_registration_id":
		if e.complexity.OfflineAlarmRegistration.OfflineAlarmRegistrationID == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.OfflineAlarmRegistrationID(childComplexity), true

	case "OfflineAlarmRegistration.offline_end_time":
		if e.complexity.OfflineAlarmRegistration.OfflineEndTime == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.OfflineEndTime(childComplexity), true

	case "OfflineAlarmRegistration.offline_reason":
		if e.complexity.OfflineAlarmRegistration.OfflineReason == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.OfflineReason(childComplexity), true

	case "OfflineAlarmRegistration.offline_start_time":
		if e.complexity.OfflineAlarmRegistration.OfflineStartTime == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.OfflineStartTime(childComplexity), true

	case "OfflineAlarmRegistration.phone_reminder_content":
		if e.complexity.OfflineAlarmRegistration.PhoneReminderContent == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.PhoneReminderContent(childComplexity), true

	case "OfflineAlarmRegistration.phone_reminder_time":
		if e.complexity.OfflineAlarmRegistration.PhoneReminderTime == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.PhoneReminderTime(childComplexity), true

	case "OfflineAlarmRegistration.registration_time":
		if e.complexity.OfflineAlarmRegistration.RegistrationTime == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.RegistrationTime(childComplexity), true

	case "OfflineAlarmRegistration.registration_user":
		if e.complexity.OfflineAlarmRegistration.RegistrationUser == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.RegistrationUser(childComplexity), true

	case "OfflineAlarmRegistration.sms_content":
		if e.complexity.OfflineAlarmRegistration.SmsContent == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.SmsContent(childComplexity), true

	case "OfflineAlarmRegistration.sms_send_time":
		if e.complexity.OfflineAlarmRegistration.SmsSendTime == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.SmsSendTime(childComplexity), true

	case "OfflineAlarmRegistration.updated_at":
		if e.complexity.OfflineAlarmRegistration.UpdatedAt == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.UpdatedAt(childComplexity), true

	case "OfflineAlarmRegistration.updated_by":
		if e.complexity.OfflineAlarmRegistration.UpdatedBy == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.UpdatedBy(childComplexity), true

	case "OfflineAlarmRegistration.vehicle_id":
		if e.complexity.OfflineAlarmRegistration.VehicleID == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistration.VehicleID(childComplexity), true

	case "OfflineAlarmRegistrationAggregate.aggregate":
		if e.complexity.OfflineAlarmRegistrationAggregate.Aggregate == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationAggregate.Aggregate(childComplexity), true

	case "OfflineAlarmRegistrationAggregateFields.avg":
		if e.complexity.OfflineAlarmRegistrationAggregateFields.Avg == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationAggregateFields.Avg(childComplexity), true

	case "OfflineAlarmRegistrationAggregateFields.count":
		if e.complexity.OfflineAlarmRegistrationAggregateFields.Count == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationAggregateFields.Count(childComplexity), true

	case "OfflineAlarmRegistrationAggregateFields.max":
		if e.complexity.OfflineAlarmRegistrationAggregateFields.Max == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationAggregateFields.Max(childComplexity), true

	case "OfflineAlarmRegistrationAggregateFields.min":
		if e.complexity.OfflineAlarmRegistrationAggregateFields.Min == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationAggregateFields.Min(childComplexity), true

	case "OfflineAlarmRegistrationAggregateFields.stddev":
		if e.complexity.OfflineAlarmRegistrationAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationAggregateFields.Stddev(childComplexity), true

	case "OfflineAlarmRegistrationAggregateFields.stddev_pop":
		if e.complexity.OfflineAlarmRegistrationAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationAggregateFields.StddevPop(childComplexity), true

	case "OfflineAlarmRegistrationAggregateFields.stddev_samp":
		if e.complexity.OfflineAlarmRegistrationAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationAggregateFields.StddevSamp(childComplexity), true

	case "OfflineAlarmRegistrationAggregateFields.sum":
		if e.complexity.OfflineAlarmRegistrationAggregateFields.Sum == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationAggregateFields.Sum(childComplexity), true

	case "OfflineAlarmRegistrationAggregateFields.var_pop":
		if e.complexity.OfflineAlarmRegistrationAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationAggregateFields.VarPop(childComplexity), true

	case "OfflineAlarmRegistrationAggregateFields.var_samp":
		if e.complexity.OfflineAlarmRegistrationAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationAggregateFields.VarSamp(childComplexity), true

	case "OfflineAlarmRegistrationAggregateFields.variance":
		if e.complexity.OfflineAlarmRegistrationAggregateFields.Variance == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationAggregateFields.Variance(childComplexity), true

	case "OfflineAlarmRegistrationAvgFields.alarm_type":
		if e.complexity.OfflineAlarmRegistrationAvgFields.AlarmType == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationAvgFields.AlarmType(childComplexity), true

	case "OfflineAlarmRegistrationAvgFields.id":
		if e.complexity.OfflineAlarmRegistrationAvgFields.ID == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationAvgFields.ID(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.alarm_type":
		if e.complexity.OfflineAlarmRegistrationMaxFields.AlarmType == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.AlarmType(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.created_at":
		if e.complexity.OfflineAlarmRegistrationMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.CreatedAt(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.created_by":
		if e.complexity.OfflineAlarmRegistrationMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.CreatedBy(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.deleted_at":
		if e.complexity.OfflineAlarmRegistrationMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.DeletedAt(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.deleted_by":
		if e.complexity.OfflineAlarmRegistrationMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.DeletedBy(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.id":
		if e.complexity.OfflineAlarmRegistrationMaxFields.ID == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.ID(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.is_end_alarm":
		if e.complexity.OfflineAlarmRegistrationMaxFields.IsEndAlarm == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.IsEndAlarm(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.is_need_maintain":
		if e.complexity.OfflineAlarmRegistrationMaxFields.IsNeedMaintain == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.IsNeedMaintain(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.is_registration":
		if e.complexity.OfflineAlarmRegistrationMaxFields.IsRegistration == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.IsRegistration(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.is_send_sms":
		if e.complexity.OfflineAlarmRegistrationMaxFields.IsSendSms == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.IsSendSms(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.offline_alarm_registration_id":
		if e.complexity.OfflineAlarmRegistrationMaxFields.OfflineAlarmRegistrationID == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.OfflineAlarmRegistrationID(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.offline_end_time":
		if e.complexity.OfflineAlarmRegistrationMaxFields.OfflineEndTime == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.OfflineEndTime(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.offline_reason":
		if e.complexity.OfflineAlarmRegistrationMaxFields.OfflineReason == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.OfflineReason(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.offline_start_time":
		if e.complexity.OfflineAlarmRegistrationMaxFields.OfflineStartTime == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.OfflineStartTime(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.phone_reminder_content":
		if e.complexity.OfflineAlarmRegistrationMaxFields.PhoneReminderContent == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.PhoneReminderContent(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.phone_reminder_time":
		if e.complexity.OfflineAlarmRegistrationMaxFields.PhoneReminderTime == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.PhoneReminderTime(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.registration_time":
		if e.complexity.OfflineAlarmRegistrationMaxFields.RegistrationTime == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.RegistrationTime(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.registration_user":
		if e.complexity.OfflineAlarmRegistrationMaxFields.RegistrationUser == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.RegistrationUser(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.sms_content":
		if e.complexity.OfflineAlarmRegistrationMaxFields.SmsContent == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.SmsContent(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.sms_send_time":
		if e.complexity.OfflineAlarmRegistrationMaxFields.SmsSendTime == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.SmsSendTime(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.updated_at":
		if e.complexity.OfflineAlarmRegistrationMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.UpdatedAt(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.updated_by":
		if e.complexity.OfflineAlarmRegistrationMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.UpdatedBy(childComplexity), true

	case "OfflineAlarmRegistrationMaxFields.vehicle_id":
		if e.complexity.OfflineAlarmRegistrationMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMaxFields.VehicleID(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.alarm_type":
		if e.complexity.OfflineAlarmRegistrationMinFields.AlarmType == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.AlarmType(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.created_at":
		if e.complexity.OfflineAlarmRegistrationMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.CreatedAt(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.created_by":
		if e.complexity.OfflineAlarmRegistrationMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.CreatedBy(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.deleted_at":
		if e.complexity.OfflineAlarmRegistrationMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.DeletedAt(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.deleted_by":
		if e.complexity.OfflineAlarmRegistrationMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.DeletedBy(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.id":
		if e.complexity.OfflineAlarmRegistrationMinFields.ID == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.ID(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.is_end_alarm":
		if e.complexity.OfflineAlarmRegistrationMinFields.IsEndAlarm == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.IsEndAlarm(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.is_need_maintain":
		if e.complexity.OfflineAlarmRegistrationMinFields.IsNeedMaintain == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.IsNeedMaintain(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.is_registration":
		if e.complexity.OfflineAlarmRegistrationMinFields.IsRegistration == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.IsRegistration(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.is_send_sms":
		if e.complexity.OfflineAlarmRegistrationMinFields.IsSendSms == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.IsSendSms(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.offline_alarm_registration_id":
		if e.complexity.OfflineAlarmRegistrationMinFields.OfflineAlarmRegistrationID == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.OfflineAlarmRegistrationID(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.offline_end_time":
		if e.complexity.OfflineAlarmRegistrationMinFields.OfflineEndTime == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.OfflineEndTime(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.offline_reason":
		if e.complexity.OfflineAlarmRegistrationMinFields.OfflineReason == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.OfflineReason(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.offline_start_time":
		if e.complexity.OfflineAlarmRegistrationMinFields.OfflineStartTime == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.OfflineStartTime(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.phone_reminder_content":
		if e.complexity.OfflineAlarmRegistrationMinFields.PhoneReminderContent == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.PhoneReminderContent(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.phone_reminder_time":
		if e.complexity.OfflineAlarmRegistrationMinFields.PhoneReminderTime == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.PhoneReminderTime(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.registration_time":
		if e.complexity.OfflineAlarmRegistrationMinFields.RegistrationTime == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.RegistrationTime(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.registration_user":
		if e.complexity.OfflineAlarmRegistrationMinFields.RegistrationUser == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.RegistrationUser(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.sms_content":
		if e.complexity.OfflineAlarmRegistrationMinFields.SmsContent == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.SmsContent(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.sms_send_time":
		if e.complexity.OfflineAlarmRegistrationMinFields.SmsSendTime == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.SmsSendTime(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.updated_at":
		if e.complexity.OfflineAlarmRegistrationMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.UpdatedAt(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.updated_by":
		if e.complexity.OfflineAlarmRegistrationMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.UpdatedBy(childComplexity), true

	case "OfflineAlarmRegistrationMinFields.vehicle_id":
		if e.complexity.OfflineAlarmRegistrationMinFields.VehicleID == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMinFields.VehicleID(childComplexity), true

	case "OfflineAlarmRegistrationMutationResponse.affected_rows":
		if e.complexity.OfflineAlarmRegistrationMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMutationResponse.AffectedRows(childComplexity), true

	case "OfflineAlarmRegistrationMutationResponse.returning":
		if e.complexity.OfflineAlarmRegistrationMutationResponse.Returning == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationMutationResponse.Returning(childComplexity), true

	case "OfflineAlarmRegistrationStddevFields.alarm_type":
		if e.complexity.OfflineAlarmRegistrationStddevFields.AlarmType == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationStddevFields.AlarmType(childComplexity), true

	case "OfflineAlarmRegistrationStddevFields.id":
		if e.complexity.OfflineAlarmRegistrationStddevFields.ID == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationStddevFields.ID(childComplexity), true

	case "OfflineAlarmRegistrationStddevPopFields.alarm_type":
		if e.complexity.OfflineAlarmRegistrationStddevPopFields.AlarmType == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationStddevPopFields.AlarmType(childComplexity), true

	case "OfflineAlarmRegistrationStddevPopFields.id":
		if e.complexity.OfflineAlarmRegistrationStddevPopFields.ID == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationStddevPopFields.ID(childComplexity), true

	case "OfflineAlarmRegistrationStddevSampFields.alarm_type":
		if e.complexity.OfflineAlarmRegistrationStddevSampFields.AlarmType == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationStddevSampFields.AlarmType(childComplexity), true

	case "OfflineAlarmRegistrationStddevSampFields.id":
		if e.complexity.OfflineAlarmRegistrationStddevSampFields.ID == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationStddevSampFields.ID(childComplexity), true

	case "OfflineAlarmRegistrationSumFields.alarm_type":
		if e.complexity.OfflineAlarmRegistrationSumFields.AlarmType == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationSumFields.AlarmType(childComplexity), true

	case "OfflineAlarmRegistrationSumFields.id":
		if e.complexity.OfflineAlarmRegistrationSumFields.ID == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationSumFields.ID(childComplexity), true

	case "OfflineAlarmRegistrationVarPopFields.alarm_type":
		if e.complexity.OfflineAlarmRegistrationVarPopFields.AlarmType == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationVarPopFields.AlarmType(childComplexity), true

	case "OfflineAlarmRegistrationVarPopFields.id":
		if e.complexity.OfflineAlarmRegistrationVarPopFields.ID == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationVarPopFields.ID(childComplexity), true

	case "OfflineAlarmRegistrationVarSampFields.alarm_type":
		if e.complexity.OfflineAlarmRegistrationVarSampFields.AlarmType == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationVarSampFields.AlarmType(childComplexity), true

	case "OfflineAlarmRegistrationVarSampFields.id":
		if e.complexity.OfflineAlarmRegistrationVarSampFields.ID == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationVarSampFields.ID(childComplexity), true

	case "OfflineAlarmRegistrationVarianceFields.alarm_type":
		if e.complexity.OfflineAlarmRegistrationVarianceFields.AlarmType == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationVarianceFields.AlarmType(childComplexity), true

	case "OfflineAlarmRegistrationVarianceFields.id":
		if e.complexity.OfflineAlarmRegistrationVarianceFields.ID == nil {
			break
		}

		return e.complexity.OfflineAlarmRegistrationVarianceFields.ID(childComplexity), true

	case "Query.alarm_processing_record":
		if e.complexity.Query.AlarmProcessingRecord == nil {
			break
		}

		args, err := ec.field_Query_alarm_processing_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AlarmProcessingRecord(childComplexity, args["distinct_on"].([]model.AlarmProcessingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmProcessingRecordOrderBy), args["where"].(*model.AlarmProcessingRecordBoolExp)), true

	case "Query.alarm_processing_record_aggregate":
		if e.complexity.Query.AlarmProcessingRecordAggregate == nil {
			break
		}

		args, err := ec.field_Query_alarm_processing_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AlarmProcessingRecordAggregate(childComplexity, args["distinct_on"].([]model.AlarmProcessingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmProcessingRecordOrderBy), args["where"].(*model.AlarmProcessingRecordBoolExp)), true

	case "Query.alarm_processing_record_by_pk":
		if e.complexity.Query.AlarmProcessingRecordByPk == nil {
			break
		}

		args, err := ec.field_Query_alarm_processing_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AlarmProcessingRecordByPk(childComplexity, args["id"].(int64)), true

	case "Query.alarm_supervision_picture_upload":
		if e.complexity.Query.AlarmSupervisionPictureUpload == nil {
			break
		}

		args, err := ec.field_Query_alarm_supervision_picture_upload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AlarmSupervisionPictureUpload(childComplexity, args["distinct_on"].([]model.AlarmSupervisionPictureUploadSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmSupervisionPictureUploadOrderBy), args["where"].(*model.AlarmSupervisionPictureUploadBoolExp)), true

	case "Query.alarm_supervision_picture_upload_aggregate":
		if e.complexity.Query.AlarmSupervisionPictureUploadAggregate == nil {
			break
		}

		args, err := ec.field_Query_alarm_supervision_picture_upload_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AlarmSupervisionPictureUploadAggregate(childComplexity, args["distinct_on"].([]model.AlarmSupervisionPictureUploadSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmSupervisionPictureUploadOrderBy), args["where"].(*model.AlarmSupervisionPictureUploadBoolExp)), true

	case "Query.alarm_supervision_picture_upload_by_pk":
		if e.complexity.Query.AlarmSupervisionPictureUploadByPk == nil {
			break
		}

		args, err := ec.field_Query_alarm_supervision_picture_upload_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AlarmSupervisionPictureUploadByPk(childComplexity, args["id"].(int64)), true

	case "Query.district_alarm_content_push":
		if e.complexity.Query.DistrictAlarmContentPush == nil {
			break
		}

		args, err := ec.field_Query_district_alarm_content_push_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DistrictAlarmContentPush(childComplexity, args["distinct_on"].([]model.DistrictAlarmContentPushSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DistrictAlarmContentPushOrderBy), args["where"].(*model.DistrictAlarmContentPushBoolExp)), true

	case "Query.district_alarm_content_push_aggregate":
		if e.complexity.Query.DistrictAlarmContentPushAggregate == nil {
			break
		}

		args, err := ec.field_Query_district_alarm_content_push_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DistrictAlarmContentPushAggregate(childComplexity, args["distinct_on"].([]model.DistrictAlarmContentPushSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DistrictAlarmContentPushOrderBy), args["where"].(*model.DistrictAlarmContentPushBoolExp)), true

	case "Query.district_alarm_content_push_by_pk":
		if e.complexity.Query.DistrictAlarmContentPushByPk == nil {
			break
		}

		args, err := ec.field_Query_district_alarm_content_push_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DistrictAlarmContentPushByPk(childComplexity, args["id"].(int64)), true

	case "Query.enterprise_alarm_send_police":
		if e.complexity.Query.EnterpriseAlarmSendPolice == nil {
			break
		}

		args, err := ec.field_Query_enterprise_alarm_send_police_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseAlarmSendPolice(childComplexity, args["distinct_on"].([]model.EnterpriseAlarmSendPoliceSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseAlarmSendPoliceOrderBy), args["where"].(*model.EnterpriseAlarmSendPoliceBoolExp)), true

	case "Query.enterprise_alarm_send_police_aggregate":
		if e.complexity.Query.EnterpriseAlarmSendPoliceAggregate == nil {
			break
		}

		args, err := ec.field_Query_enterprise_alarm_send_police_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseAlarmSendPoliceAggregate(childComplexity, args["distinct_on"].([]model.EnterpriseAlarmSendPoliceSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseAlarmSendPoliceOrderBy), args["where"].(*model.EnterpriseAlarmSendPoliceBoolExp)), true

	case "Query.enterprise_alarm_send_police_by_pk":
		if e.complexity.Query.EnterpriseAlarmSendPoliceByPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_alarm_send_police_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseAlarmSendPoliceByPk(childComplexity, args["id"].(int64)), true

	case "Query.offline_alarm_registration":
		if e.complexity.Query.OfflineAlarmRegistration == nil {
			break
		}

		args, err := ec.field_Query_offline_alarm_registration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OfflineAlarmRegistration(childComplexity, args["distinct_on"].([]model.OfflineAlarmRegistrationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OfflineAlarmRegistrationOrderBy), args["where"].(*model.OfflineAlarmRegistrationBoolExp)), true

	case "Query.offline_alarm_registration_aggregate":
		if e.complexity.Query.OfflineAlarmRegistrationAggregate == nil {
			break
		}

		args, err := ec.field_Query_offline_alarm_registration_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OfflineAlarmRegistrationAggregate(childComplexity, args["distinct_on"].([]model.OfflineAlarmRegistrationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OfflineAlarmRegistrationOrderBy), args["where"].(*model.OfflineAlarmRegistrationBoolExp)), true

	case "Query.offline_alarm_registration_by_pk":
		if e.complexity.Query.OfflineAlarmRegistrationByPk == nil {
			break
		}

		args, err := ec.field_Query_offline_alarm_registration_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OfflineAlarmRegistrationByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_alarm_data":
		if e.complexity.Query.VehicleAlarmData == nil {
			break
		}

		args, err := ec.field_Query_vehicle_alarm_data_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleAlarmData(childComplexity, args["distinct_on"].([]model.VehicleAlarmDataSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmDataOrderBy), args["where"].(*model.VehicleAlarmDataBoolExp)), true

	case "Query.vehicle_alarm_data_aggregate":
		if e.complexity.Query.VehicleAlarmDataAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_alarm_data_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleAlarmDataAggregate(childComplexity, args["distinct_on"].([]model.VehicleAlarmDataSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmDataOrderBy), args["where"].(*model.VehicleAlarmDataBoolExp)), true

	case "Query.vehicle_alarm_data_by_pk":
		if e.complexity.Query.VehicleAlarmDataByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_alarm_data_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleAlarmDataByPk(childComplexity, args["id"].(int64)), true

	case "Query.video_platform_alarm_type":
		if e.complexity.Query.VideoPlatformAlarmType == nil {
			break
		}

		args, err := ec.field_Query_video_platform_alarm_type_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VideoPlatformAlarmType(childComplexity, args["distinct_on"].([]model.VideoPlatformAlarmTypeSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VideoPlatformAlarmTypeOrderBy), args["where"].(*model.VideoPlatformAlarmTypeBoolExp)), true

	case "Query.video_platform_alarm_type_aggregate":
		if e.complexity.Query.VideoPlatformAlarmTypeAggregate == nil {
			break
		}

		args, err := ec.field_Query_video_platform_alarm_type_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VideoPlatformAlarmTypeAggregate(childComplexity, args["distinct_on"].([]model.VideoPlatformAlarmTypeSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VideoPlatformAlarmTypeOrderBy), args["where"].(*model.VideoPlatformAlarmTypeBoolExp)), true

	case "Query.video_platform_alarm_type_by_pk":
		if e.complexity.Query.VideoPlatformAlarmTypeByPk == nil {
			break
		}

		args, err := ec.field_Query_video_platform_alarm_type_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VideoPlatformAlarmTypeByPk(childComplexity, args["id"].(int64)), true

	case "Query.voice_alarm_record":
		if e.complexity.Query.VoiceAlarmRecord == nil {
			break
		}

		args, err := ec.field_Query_voice_alarm_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VoiceAlarmRecord(childComplexity, args["distinct_on"].([]model.VoiceAlarmRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VoiceAlarmRecordOrderBy), args["where"].(*model.VoiceAlarmRecordBoolExp)), true

	case "Query.voice_alarm_record_aggregate":
		if e.complexity.Query.VoiceAlarmRecordAggregate == nil {
			break
		}

		args, err := ec.field_Query_voice_alarm_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VoiceAlarmRecordAggregate(childComplexity, args["distinct_on"].([]model.VoiceAlarmRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VoiceAlarmRecordOrderBy), args["where"].(*model.VoiceAlarmRecordBoolExp)), true

	case "Query.voice_alarm_record_by_pk":
		if e.complexity.Query.VoiceAlarmRecordByPk == nil {
			break
		}

		args, err := ec.field_Query_voice_alarm_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VoiceAlarmRecordByPk(childComplexity, args["id"].(int64)), true

	case "VehicleAlarmData.alarm_deal_id":
		if e.complexity.VehicleAlarmData.AlarmDealID == nil {
			break
		}

		return e.complexity.VehicleAlarmData.AlarmDealID(childComplexity), true

	case "VehicleAlarmData.alarm_end_position":
		if e.complexity.VehicleAlarmData.AlarmEndPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmData.AlarmEndPosition(childComplexity), true

	case "VehicleAlarmData.alarm_end_time":
		if e.complexity.VehicleAlarmData.AlarmEndTime == nil {
			break
		}

		return e.complexity.VehicleAlarmData.AlarmEndTime(childComplexity), true

	case "VehicleAlarmData.alarm_source":
		if e.complexity.VehicleAlarmData.AlarmSource == nil {
			break
		}

		return e.complexity.VehicleAlarmData.AlarmSource(childComplexity), true

	case "VehicleAlarmData.alarm_start_time":
		if e.complexity.VehicleAlarmData.AlarmStartTime == nil {
			break
		}

		return e.complexity.VehicleAlarmData.AlarmStartTime(childComplexity), true

	case "VehicleAlarmData.alarm_type":
		if e.complexity.VehicleAlarmData.AlarmType == nil {
			break
		}

		return e.complexity.VehicleAlarmData.AlarmType(childComplexity), true

	case "VehicleAlarmData.area_id":
		if e.complexity.VehicleAlarmData.AreaID == nil {
			break
		}

		return e.complexity.VehicleAlarmData.AreaID(childComplexity), true

	case "VehicleAlarmData.construction_site_handle_time":
		if e.complexity.VehicleAlarmData.ConstructionSiteHandleTime == nil {
			break
		}

		return e.complexity.VehicleAlarmData.ConstructionSiteHandleTime(childComplexity), true

	case "VehicleAlarmData.coordinate":
		if e.complexity.VehicleAlarmData.Coordinate == nil {
			break
		}

		return e.complexity.VehicleAlarmData.Coordinate(childComplexity), true

	case "VehicleAlarmData.created_at":
		if e.complexity.VehicleAlarmData.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmData.CreatedAt(childComplexity), true

	case "VehicleAlarmData.created_by":
		if e.complexity.VehicleAlarmData.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmData.CreatedBy(childComplexity), true

	case "VehicleAlarmData.deleted_at":
		if e.complexity.VehicleAlarmData.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmData.DeletedAt(childComplexity), true

	case "VehicleAlarmData.deleted_by":
		if e.complexity.VehicleAlarmData.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmData.DeletedBy(childComplexity), true

	case "VehicleAlarmData.duration":
		if e.complexity.VehicleAlarmData.Duration == nil {
			break
		}

		return e.complexity.VehicleAlarmData.Duration(childComplexity), true

	case "VehicleAlarmData.gps_speed":
		if e.complexity.VehicleAlarmData.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmData.GpsSpeed(childComplexity), true

	case "VehicleAlarmData.id":
		if e.complexity.VehicleAlarmData.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmData.ID(childComplexity), true

	case "VehicleAlarmData.is_alarm_effective":
		if e.complexity.VehicleAlarmData.IsAlarmEffective == nil {
			break
		}

		return e.complexity.VehicleAlarmData.IsAlarmEffective(childComplexity), true

	case "VehicleAlarmData.is_alarm_over":
		if e.complexity.VehicleAlarmData.IsAlarmOver == nil {
			break
		}

		return e.complexity.VehicleAlarmData.IsAlarmOver(childComplexity), true

	case "VehicleAlarmData.is_cancel_alarm":
		if e.complexity.VehicleAlarmData.IsCancelAlarm == nil {
			break
		}

		return e.complexity.VehicleAlarmData.IsCancelAlarm(childComplexity), true

	case "VehicleAlarmData.is_construction_site_handle":
		if e.complexity.VehicleAlarmData.IsConstructionSiteHandle == nil {
			break
		}

		return e.complexity.VehicleAlarmData.IsConstructionSiteHandle(childComplexity), true

	case "VehicleAlarmData.is_resolve":
		if e.complexity.VehicleAlarmData.IsResolve == nil {
			break
		}

		return e.complexity.VehicleAlarmData.IsResolve(childComplexity), true

	case "VehicleAlarmData.is_supervise":
		if e.complexity.VehicleAlarmData.IsSupervise == nil {
			break
		}

		return e.complexity.VehicleAlarmData.IsSupervise(childComplexity), true

	case "VehicleAlarmData.latest_alarm_position":
		if e.complexity.VehicleAlarmData.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmData.LatestAlarmPosition(childComplexity), true

	case "VehicleAlarmData.latest_alarm_time":
		if e.complexity.VehicleAlarmData.LatestAlarmTime == nil {
			break
		}

		return e.complexity.VehicleAlarmData.LatestAlarmTime(childComplexity), true

	case "VehicleAlarmData.location_description":
		if e.complexity.VehicleAlarmData.LocationDescription == nil {
			break
		}

		return e.complexity.VehicleAlarmData.LocationDescription(childComplexity), true

	case "VehicleAlarmData.maximum_speed":
		if e.complexity.VehicleAlarmData.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmData.MaximumSpeed(childComplexity), true

	case "VehicleAlarmData.pid":
		if e.complexity.VehicleAlarmData.Pid == nil {
			break
		}

		return e.complexity.VehicleAlarmData.Pid(childComplexity), true

	case "VehicleAlarmData.processing_description":
		if e.complexity.VehicleAlarmData.ProcessingDescription == nil {
			break
		}

		return e.complexity.VehicleAlarmData.ProcessingDescription(childComplexity), true

	case "VehicleAlarmData.processing_method":
		if e.complexity.VehicleAlarmData.ProcessingMethod == nil {
			break
		}

		return e.complexity.VehicleAlarmData.ProcessingMethod(childComplexity), true

	case "VehicleAlarmData.processing_status":
		if e.complexity.VehicleAlarmData.ProcessingStatus == nil {
			break
		}

		return e.complexity.VehicleAlarmData.ProcessingStatus(childComplexity), true

	case "VehicleAlarmData.processing_time":
		if e.complexity.VehicleAlarmData.ProcessingTime == nil {
			break
		}

		return e.complexity.VehicleAlarmData.ProcessingTime(childComplexity), true

	case "VehicleAlarmData.processor":
		if e.complexity.VehicleAlarmData.Processor == nil {
			break
		}

		return e.complexity.VehicleAlarmData.Processor(childComplexity), true

	case "VehicleAlarmData.record_time":
		if e.complexity.VehicleAlarmData.RecordTime == nil {
			break
		}

		return e.complexity.VehicleAlarmData.RecordTime(childComplexity), true

	case "VehicleAlarmData.road_grade":
		if e.complexity.VehicleAlarmData.RoadGrade == nil {
			break
		}

		return e.complexity.VehicleAlarmData.RoadGrade(childComplexity), true

	case "VehicleAlarmData.road_name":
		if e.complexity.VehicleAlarmData.RoadName == nil {
			break
		}

		return e.complexity.VehicleAlarmData.RoadName(childComplexity), true

	case "VehicleAlarmData.speed_limit_threshold":
		if e.complexity.VehicleAlarmData.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmData.SpeedLimitThreshold(childComplexity), true

	case "VehicleAlarmData.supervision_note":
		if e.complexity.VehicleAlarmData.SupervisionNote == nil {
			break
		}

		return e.complexity.VehicleAlarmData.SupervisionNote(childComplexity), true

	case "VehicleAlarmData.supervision_time":
		if e.complexity.VehicleAlarmData.SupervisionTime == nil {
			break
		}

		return e.complexity.VehicleAlarmData.SupervisionTime(childComplexity), true

	case "VehicleAlarmData.supervisor":
		if e.complexity.VehicleAlarmData.Supervisor == nil {
			break
		}

		return e.complexity.VehicleAlarmData.Supervisor(childComplexity), true

	case "VehicleAlarmData.tachograph_speed":
		if e.complexity.VehicleAlarmData.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmData.TachographSpeed(childComplexity), true

	case "VehicleAlarmData.updated_at":
		if e.complexity.VehicleAlarmData.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmData.UpdatedAt(childComplexity), true

	case "VehicleAlarmData.updated_by":
		if e.complexity.VehicleAlarmData.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmData.UpdatedBy(childComplexity), true

	case "VehicleAlarmData.vehicle_alarm_data_id":
		if e.complexity.VehicleAlarmData.VehicleAlarmDataID == nil {
			break
		}

		return e.complexity.VehicleAlarmData.VehicleAlarmDataID(childComplexity), true

	case "VehicleAlarmData.vehicle_id":
		if e.complexity.VehicleAlarmData.VehicleID == nil {
			break
		}

		return e.complexity.VehicleAlarmData.VehicleID(childComplexity), true

	case "VehicleAlarmDataAggregate.aggregate":
		if e.complexity.VehicleAlarmDataAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregate.Aggregate(childComplexity), true

	case "VehicleAlarmDataAggregateFields.avg":
		if e.complexity.VehicleAlarmDataAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.Avg(childComplexity), true

	case "VehicleAlarmDataAggregateFields.count":
		if e.complexity.VehicleAlarmDataAggregateFields.Count == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.Count(childComplexity), true

	case "VehicleAlarmDataAggregateFields.max":
		if e.complexity.VehicleAlarmDataAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.Max(childComplexity), true

	case "VehicleAlarmDataAggregateFields.min":
		if e.complexity.VehicleAlarmDataAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.Min(childComplexity), true

	case "VehicleAlarmDataAggregateFields.stddev":
		if e.complexity.VehicleAlarmDataAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.Stddev(childComplexity), true

	case "VehicleAlarmDataAggregateFields.stddev_pop":
		if e.complexity.VehicleAlarmDataAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.StddevPop(childComplexity), true

	case "VehicleAlarmDataAggregateFields.stddev_samp":
		if e.complexity.VehicleAlarmDataAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.StddevSamp(childComplexity), true

	case "VehicleAlarmDataAggregateFields.sum":
		if e.complexity.VehicleAlarmDataAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.Sum(childComplexity), true

	case "VehicleAlarmDataAggregateFields.var_pop":
		if e.complexity.VehicleAlarmDataAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.VarPop(childComplexity), true

	case "VehicleAlarmDataAggregateFields.var_samp":
		if e.complexity.VehicleAlarmDataAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.VarSamp(childComplexity), true

	case "VehicleAlarmDataAggregateFields.variance":
		if e.complexity.VehicleAlarmDataAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.Variance(childComplexity), true

	case "VehicleAlarmDataAvgFields.gps_speed":
		if e.complexity.VehicleAlarmDataAvgFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAvgFields.GpsSpeed(childComplexity), true

	case "VehicleAlarmDataAvgFields.id":
		if e.complexity.VehicleAlarmDataAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAvgFields.ID(childComplexity), true

	case "VehicleAlarmDataAvgFields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataAvgFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAvgFields.LatestAlarmPosition(childComplexity), true

	case "VehicleAlarmDataAvgFields.maximum_speed":
		if e.complexity.VehicleAlarmDataAvgFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAvgFields.MaximumSpeed(childComplexity), true

	case "VehicleAlarmDataAvgFields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataAvgFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAvgFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleAlarmDataAvgFields.tachograph_speed":
		if e.complexity.VehicleAlarmDataAvgFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAvgFields.TachographSpeed(childComplexity), true

	case "VehicleAlarmDataMaxFields.alarm_deal_id":
		if e.complexity.VehicleAlarmDataMaxFields.AlarmDealID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.AlarmDealID(childComplexity), true

	case "VehicleAlarmDataMaxFields.alarm_end_position":
		if e.complexity.VehicleAlarmDataMaxFields.AlarmEndPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.AlarmEndPosition(childComplexity), true

	case "VehicleAlarmDataMaxFields.alarm_end_time":
		if e.complexity.VehicleAlarmDataMaxFields.AlarmEndTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.AlarmEndTime(childComplexity), true

	case "VehicleAlarmDataMaxFields.alarm_source":
		if e.complexity.VehicleAlarmDataMaxFields.AlarmSource == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.AlarmSource(childComplexity), true

	case "VehicleAlarmDataMaxFields.alarm_start_time":
		if e.complexity.VehicleAlarmDataMaxFields.AlarmStartTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.AlarmStartTime(childComplexity), true

	case "VehicleAlarmDataMaxFields.alarm_type":
		if e.complexity.VehicleAlarmDataMaxFields.AlarmType == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.AlarmType(childComplexity), true

	case "VehicleAlarmDataMaxFields.area_id":
		if e.complexity.VehicleAlarmDataMaxFields.AreaID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.AreaID(childComplexity), true

	case "VehicleAlarmDataMaxFields.construction_site_handle_time":
		if e.complexity.VehicleAlarmDataMaxFields.ConstructionSiteHandleTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.ConstructionSiteHandleTime(childComplexity), true

	case "VehicleAlarmDataMaxFields.coordinate":
		if e.complexity.VehicleAlarmDataMaxFields.Coordinate == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.Coordinate(childComplexity), true

	case "VehicleAlarmDataMaxFields.created_at":
		if e.complexity.VehicleAlarmDataMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.CreatedAt(childComplexity), true

	case "VehicleAlarmDataMaxFields.created_by":
		if e.complexity.VehicleAlarmDataMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.CreatedBy(childComplexity), true

	case "VehicleAlarmDataMaxFields.deleted_at":
		if e.complexity.VehicleAlarmDataMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.DeletedAt(childComplexity), true

	case "VehicleAlarmDataMaxFields.deleted_by":
		if e.complexity.VehicleAlarmDataMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.DeletedBy(childComplexity), true

	case "VehicleAlarmDataMaxFields.duration":
		if e.complexity.VehicleAlarmDataMaxFields.Duration == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.Duration(childComplexity), true

	case "VehicleAlarmDataMaxFields.gps_speed":
		if e.complexity.VehicleAlarmDataMaxFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.GpsSpeed(childComplexity), true

	case "VehicleAlarmDataMaxFields.id":
		if e.complexity.VehicleAlarmDataMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.ID(childComplexity), true

	case "VehicleAlarmDataMaxFields.is_alarm_effective":
		if e.complexity.VehicleAlarmDataMaxFields.IsAlarmEffective == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.IsAlarmEffective(childComplexity), true

	case "VehicleAlarmDataMaxFields.is_alarm_over":
		if e.complexity.VehicleAlarmDataMaxFields.IsAlarmOver == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.IsAlarmOver(childComplexity), true

	case "VehicleAlarmDataMaxFields.is_cancel_alarm":
		if e.complexity.VehicleAlarmDataMaxFields.IsCancelAlarm == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.IsCancelAlarm(childComplexity), true

	case "VehicleAlarmDataMaxFields.is_construction_site_handle":
		if e.complexity.VehicleAlarmDataMaxFields.IsConstructionSiteHandle == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.IsConstructionSiteHandle(childComplexity), true

	case "VehicleAlarmDataMaxFields.is_resolve":
		if e.complexity.VehicleAlarmDataMaxFields.IsResolve == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.IsResolve(childComplexity), true

	case "VehicleAlarmDataMaxFields.is_supervise":
		if e.complexity.VehicleAlarmDataMaxFields.IsSupervise == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.IsSupervise(childComplexity), true

	case "VehicleAlarmDataMaxFields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataMaxFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.LatestAlarmPosition(childComplexity), true

	case "VehicleAlarmDataMaxFields.latest_alarm_time":
		if e.complexity.VehicleAlarmDataMaxFields.LatestAlarmTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.LatestAlarmTime(childComplexity), true

	case "VehicleAlarmDataMaxFields.location_description":
		if e.complexity.VehicleAlarmDataMaxFields.LocationDescription == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.LocationDescription(childComplexity), true

	case "VehicleAlarmDataMaxFields.maximum_speed":
		if e.complexity.VehicleAlarmDataMaxFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.MaximumSpeed(childComplexity), true

	case "VehicleAlarmDataMaxFields.pid":
		if e.complexity.VehicleAlarmDataMaxFields.Pid == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.Pid(childComplexity), true

	case "VehicleAlarmDataMaxFields.processing_description":
		if e.complexity.VehicleAlarmDataMaxFields.ProcessingDescription == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.ProcessingDescription(childComplexity), true

	case "VehicleAlarmDataMaxFields.processing_method":
		if e.complexity.VehicleAlarmDataMaxFields.ProcessingMethod == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.ProcessingMethod(childComplexity), true

	case "VehicleAlarmDataMaxFields.processing_status":
		if e.complexity.VehicleAlarmDataMaxFields.ProcessingStatus == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.ProcessingStatus(childComplexity), true

	case "VehicleAlarmDataMaxFields.processing_time":
		if e.complexity.VehicleAlarmDataMaxFields.ProcessingTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.ProcessingTime(childComplexity), true

	case "VehicleAlarmDataMaxFields.processor":
		if e.complexity.VehicleAlarmDataMaxFields.Processor == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.Processor(childComplexity), true

	case "VehicleAlarmDataMaxFields.record_time":
		if e.complexity.VehicleAlarmDataMaxFields.RecordTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.RecordTime(childComplexity), true

	case "VehicleAlarmDataMaxFields.road_grade":
		if e.complexity.VehicleAlarmDataMaxFields.RoadGrade == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.RoadGrade(childComplexity), true

	case "VehicleAlarmDataMaxFields.road_name":
		if e.complexity.VehicleAlarmDataMaxFields.RoadName == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.RoadName(childComplexity), true

	case "VehicleAlarmDataMaxFields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataMaxFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleAlarmDataMaxFields.supervision_note":
		if e.complexity.VehicleAlarmDataMaxFields.SupervisionNote == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.SupervisionNote(childComplexity), true

	case "VehicleAlarmDataMaxFields.supervision_time":
		if e.complexity.VehicleAlarmDataMaxFields.SupervisionTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.SupervisionTime(childComplexity), true

	case "VehicleAlarmDataMaxFields.supervisor":
		if e.complexity.VehicleAlarmDataMaxFields.Supervisor == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.Supervisor(childComplexity), true

	case "VehicleAlarmDataMaxFields.tachograph_speed":
		if e.complexity.VehicleAlarmDataMaxFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.TachographSpeed(childComplexity), true

	case "VehicleAlarmDataMaxFields.updated_at":
		if e.complexity.VehicleAlarmDataMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.UpdatedAt(childComplexity), true

	case "VehicleAlarmDataMaxFields.updated_by":
		if e.complexity.VehicleAlarmDataMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.UpdatedBy(childComplexity), true

	case "VehicleAlarmDataMaxFields.vehicle_alarm_data_id":
		if e.complexity.VehicleAlarmDataMaxFields.VehicleAlarmDataID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.VehicleAlarmDataID(childComplexity), true

	case "VehicleAlarmDataMaxFields.vehicle_id":
		if e.complexity.VehicleAlarmDataMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.VehicleID(childComplexity), true

	case "VehicleAlarmDataMinFields.alarm_deal_id":
		if e.complexity.VehicleAlarmDataMinFields.AlarmDealID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.AlarmDealID(childComplexity), true

	case "VehicleAlarmDataMinFields.alarm_end_position":
		if e.complexity.VehicleAlarmDataMinFields.AlarmEndPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.AlarmEndPosition(childComplexity), true

	case "VehicleAlarmDataMinFields.alarm_end_time":
		if e.complexity.VehicleAlarmDataMinFields.AlarmEndTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.AlarmEndTime(childComplexity), true

	case "VehicleAlarmDataMinFields.alarm_source":
		if e.complexity.VehicleAlarmDataMinFields.AlarmSource == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.AlarmSource(childComplexity), true

	case "VehicleAlarmDataMinFields.alarm_start_time":
		if e.complexity.VehicleAlarmDataMinFields.AlarmStartTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.AlarmStartTime(childComplexity), true

	case "VehicleAlarmDataMinFields.alarm_type":
		if e.complexity.VehicleAlarmDataMinFields.AlarmType == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.AlarmType(childComplexity), true

	case "VehicleAlarmDataMinFields.area_id":
		if e.complexity.VehicleAlarmDataMinFields.AreaID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.AreaID(childComplexity), true

	case "VehicleAlarmDataMinFields.construction_site_handle_time":
		if e.complexity.VehicleAlarmDataMinFields.ConstructionSiteHandleTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.ConstructionSiteHandleTime(childComplexity), true

	case "VehicleAlarmDataMinFields.coordinate":
		if e.complexity.VehicleAlarmDataMinFields.Coordinate == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.Coordinate(childComplexity), true

	case "VehicleAlarmDataMinFields.created_at":
		if e.complexity.VehicleAlarmDataMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.CreatedAt(childComplexity), true

	case "VehicleAlarmDataMinFields.created_by":
		if e.complexity.VehicleAlarmDataMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.CreatedBy(childComplexity), true

	case "VehicleAlarmDataMinFields.deleted_at":
		if e.complexity.VehicleAlarmDataMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.DeletedAt(childComplexity), true

	case "VehicleAlarmDataMinFields.deleted_by":
		if e.complexity.VehicleAlarmDataMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.DeletedBy(childComplexity), true

	case "VehicleAlarmDataMinFields.duration":
		if e.complexity.VehicleAlarmDataMinFields.Duration == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.Duration(childComplexity), true

	case "VehicleAlarmDataMinFields.gps_speed":
		if e.complexity.VehicleAlarmDataMinFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.GpsSpeed(childComplexity), true

	case "VehicleAlarmDataMinFields.id":
		if e.complexity.VehicleAlarmDataMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.ID(childComplexity), true

	case "VehicleAlarmDataMinFields.is_alarm_effective":
		if e.complexity.VehicleAlarmDataMinFields.IsAlarmEffective == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.IsAlarmEffective(childComplexity), true

	case "VehicleAlarmDataMinFields.is_alarm_over":
		if e.complexity.VehicleAlarmDataMinFields.IsAlarmOver == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.IsAlarmOver(childComplexity), true

	case "VehicleAlarmDataMinFields.is_cancel_alarm":
		if e.complexity.VehicleAlarmDataMinFields.IsCancelAlarm == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.IsCancelAlarm(childComplexity), true

	case "VehicleAlarmDataMinFields.is_construction_site_handle":
		if e.complexity.VehicleAlarmDataMinFields.IsConstructionSiteHandle == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.IsConstructionSiteHandle(childComplexity), true

	case "VehicleAlarmDataMinFields.is_resolve":
		if e.complexity.VehicleAlarmDataMinFields.IsResolve == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.IsResolve(childComplexity), true

	case "VehicleAlarmDataMinFields.is_supervise":
		if e.complexity.VehicleAlarmDataMinFields.IsSupervise == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.IsSupervise(childComplexity), true

	case "VehicleAlarmDataMinFields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataMinFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.LatestAlarmPosition(childComplexity), true

	case "VehicleAlarmDataMinFields.latest_alarm_time":
		if e.complexity.VehicleAlarmDataMinFields.LatestAlarmTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.LatestAlarmTime(childComplexity), true

	case "VehicleAlarmDataMinFields.location_description":
		if e.complexity.VehicleAlarmDataMinFields.LocationDescription == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.LocationDescription(childComplexity), true

	case "VehicleAlarmDataMinFields.maximum_speed":
		if e.complexity.VehicleAlarmDataMinFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.MaximumSpeed(childComplexity), true

	case "VehicleAlarmDataMinFields.pid":
		if e.complexity.VehicleAlarmDataMinFields.Pid == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.Pid(childComplexity), true

	case "VehicleAlarmDataMinFields.processing_description":
		if e.complexity.VehicleAlarmDataMinFields.ProcessingDescription == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.ProcessingDescription(childComplexity), true

	case "VehicleAlarmDataMinFields.processing_method":
		if e.complexity.VehicleAlarmDataMinFields.ProcessingMethod == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.ProcessingMethod(childComplexity), true

	case "VehicleAlarmDataMinFields.processing_status":
		if e.complexity.VehicleAlarmDataMinFields.ProcessingStatus == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.ProcessingStatus(childComplexity), true

	case "VehicleAlarmDataMinFields.processing_time":
		if e.complexity.VehicleAlarmDataMinFields.ProcessingTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.ProcessingTime(childComplexity), true

	case "VehicleAlarmDataMinFields.processor":
		if e.complexity.VehicleAlarmDataMinFields.Processor == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.Processor(childComplexity), true

	case "VehicleAlarmDataMinFields.record_time":
		if e.complexity.VehicleAlarmDataMinFields.RecordTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.RecordTime(childComplexity), true

	case "VehicleAlarmDataMinFields.road_grade":
		if e.complexity.VehicleAlarmDataMinFields.RoadGrade == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.RoadGrade(childComplexity), true

	case "VehicleAlarmDataMinFields.road_name":
		if e.complexity.VehicleAlarmDataMinFields.RoadName == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.RoadName(childComplexity), true

	case "VehicleAlarmDataMinFields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataMinFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleAlarmDataMinFields.supervision_note":
		if e.complexity.VehicleAlarmDataMinFields.SupervisionNote == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.SupervisionNote(childComplexity), true

	case "VehicleAlarmDataMinFields.supervision_time":
		if e.complexity.VehicleAlarmDataMinFields.SupervisionTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.SupervisionTime(childComplexity), true

	case "VehicleAlarmDataMinFields.supervisor":
		if e.complexity.VehicleAlarmDataMinFields.Supervisor == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.Supervisor(childComplexity), true

	case "VehicleAlarmDataMinFields.tachograph_speed":
		if e.complexity.VehicleAlarmDataMinFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.TachographSpeed(childComplexity), true

	case "VehicleAlarmDataMinFields.updated_at":
		if e.complexity.VehicleAlarmDataMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.UpdatedAt(childComplexity), true

	case "VehicleAlarmDataMinFields.updated_by":
		if e.complexity.VehicleAlarmDataMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.UpdatedBy(childComplexity), true

	case "VehicleAlarmDataMinFields.vehicle_alarm_data_id":
		if e.complexity.VehicleAlarmDataMinFields.VehicleAlarmDataID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.VehicleAlarmDataID(childComplexity), true

	case "VehicleAlarmDataMinFields.vehicle_id":
		if e.complexity.VehicleAlarmDataMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.VehicleID(childComplexity), true

	case "VehicleAlarmDataMutationResponse.affected_rows":
		if e.complexity.VehicleAlarmDataMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMutationResponse.AffectedRows(childComplexity), true

	case "VehicleAlarmDataMutationResponse.returning":
		if e.complexity.VehicleAlarmDataMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMutationResponse.Returning(childComplexity), true

	case "VehicleAlarmDataStddevFields.gps_speed":
		if e.complexity.VehicleAlarmDataStddevFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevFields.GpsSpeed(childComplexity), true

	case "VehicleAlarmDataStddevFields.id":
		if e.complexity.VehicleAlarmDataStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevFields.ID(childComplexity), true

	case "VehicleAlarmDataStddevFields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataStddevFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevFields.LatestAlarmPosition(childComplexity), true

	case "VehicleAlarmDataStddevFields.maximum_speed":
		if e.complexity.VehicleAlarmDataStddevFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevFields.MaximumSpeed(childComplexity), true

	case "VehicleAlarmDataStddevFields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataStddevFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleAlarmDataStddevFields.tachograph_speed":
		if e.complexity.VehicleAlarmDataStddevFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevFields.TachographSpeed(childComplexity), true

	case "VehicleAlarmDataStddevPopFields.gps_speed":
		if e.complexity.VehicleAlarmDataStddevPopFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevPopFields.GpsSpeed(childComplexity), true

	case "VehicleAlarmDataStddevPopFields.id":
		if e.complexity.VehicleAlarmDataStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevPopFields.ID(childComplexity), true

	case "VehicleAlarmDataStddevPopFields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataStddevPopFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevPopFields.LatestAlarmPosition(childComplexity), true

	case "VehicleAlarmDataStddevPopFields.maximum_speed":
		if e.complexity.VehicleAlarmDataStddevPopFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevPopFields.MaximumSpeed(childComplexity), true

	case "VehicleAlarmDataStddevPopFields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataStddevPopFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevPopFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleAlarmDataStddevPopFields.tachograph_speed":
		if e.complexity.VehicleAlarmDataStddevPopFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevPopFields.TachographSpeed(childComplexity), true

	case "VehicleAlarmDataStddevSampFields.gps_speed":
		if e.complexity.VehicleAlarmDataStddevSampFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevSampFields.GpsSpeed(childComplexity), true

	case "VehicleAlarmDataStddevSampFields.id":
		if e.complexity.VehicleAlarmDataStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevSampFields.ID(childComplexity), true

	case "VehicleAlarmDataStddevSampFields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataStddevSampFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevSampFields.LatestAlarmPosition(childComplexity), true

	case "VehicleAlarmDataStddevSampFields.maximum_speed":
		if e.complexity.VehicleAlarmDataStddevSampFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevSampFields.MaximumSpeed(childComplexity), true

	case "VehicleAlarmDataStddevSampFields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataStddevSampFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevSampFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleAlarmDataStddevSampFields.tachograph_speed":
		if e.complexity.VehicleAlarmDataStddevSampFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevSampFields.TachographSpeed(childComplexity), true

	case "VehicleAlarmDataSumFields.gps_speed":
		if e.complexity.VehicleAlarmDataSumFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataSumFields.GpsSpeed(childComplexity), true

	case "VehicleAlarmDataSumFields.id":
		if e.complexity.VehicleAlarmDataSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataSumFields.ID(childComplexity), true

	case "VehicleAlarmDataSumFields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataSumFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataSumFields.LatestAlarmPosition(childComplexity), true

	case "VehicleAlarmDataSumFields.maximum_speed":
		if e.complexity.VehicleAlarmDataSumFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataSumFields.MaximumSpeed(childComplexity), true

	case "VehicleAlarmDataSumFields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataSumFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataSumFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleAlarmDataSumFields.tachograph_speed":
		if e.complexity.VehicleAlarmDataSumFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataSumFields.TachographSpeed(childComplexity), true

	case "VehicleAlarmDataVarPopFields.gps_speed":
		if e.complexity.VehicleAlarmDataVarPopFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarPopFields.GpsSpeed(childComplexity), true

	case "VehicleAlarmDataVarPopFields.id":
		if e.complexity.VehicleAlarmDataVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarPopFields.ID(childComplexity), true

	case "VehicleAlarmDataVarPopFields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataVarPopFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarPopFields.LatestAlarmPosition(childComplexity), true

	case "VehicleAlarmDataVarPopFields.maximum_speed":
		if e.complexity.VehicleAlarmDataVarPopFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarPopFields.MaximumSpeed(childComplexity), true

	case "VehicleAlarmDataVarPopFields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataVarPopFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarPopFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleAlarmDataVarPopFields.tachograph_speed":
		if e.complexity.VehicleAlarmDataVarPopFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarPopFields.TachographSpeed(childComplexity), true

	case "VehicleAlarmDataVarSampFields.gps_speed":
		if e.complexity.VehicleAlarmDataVarSampFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarSampFields.GpsSpeed(childComplexity), true

	case "VehicleAlarmDataVarSampFields.id":
		if e.complexity.VehicleAlarmDataVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarSampFields.ID(childComplexity), true

	case "VehicleAlarmDataVarSampFields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataVarSampFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarSampFields.LatestAlarmPosition(childComplexity), true

	case "VehicleAlarmDataVarSampFields.maximum_speed":
		if e.complexity.VehicleAlarmDataVarSampFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarSampFields.MaximumSpeed(childComplexity), true

	case "VehicleAlarmDataVarSampFields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataVarSampFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarSampFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleAlarmDataVarSampFields.tachograph_speed":
		if e.complexity.VehicleAlarmDataVarSampFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarSampFields.TachographSpeed(childComplexity), true

	case "VehicleAlarmDataVarianceFields.gps_speed":
		if e.complexity.VehicleAlarmDataVarianceFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarianceFields.GpsSpeed(childComplexity), true

	case "VehicleAlarmDataVarianceFields.id":
		if e.complexity.VehicleAlarmDataVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarianceFields.ID(childComplexity), true

	case "VehicleAlarmDataVarianceFields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataVarianceFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarianceFields.LatestAlarmPosition(childComplexity), true

	case "VehicleAlarmDataVarianceFields.maximum_speed":
		if e.complexity.VehicleAlarmDataVarianceFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarianceFields.MaximumSpeed(childComplexity), true

	case "VehicleAlarmDataVarianceFields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataVarianceFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarianceFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleAlarmDataVarianceFields.tachograph_speed":
		if e.complexity.VehicleAlarmDataVarianceFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarianceFields.TachographSpeed(childComplexity), true

	case "VideoPlatformAlarmType.alarm_classify":
		if e.complexity.VideoPlatformAlarmType.AlarmClassify == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmType.AlarmClassify(childComplexity), true

	case "VideoPlatformAlarmType.alarm_code":
		if e.complexity.VideoPlatformAlarmType.AlarmCode == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmType.AlarmCode(childComplexity), true

	case "VideoPlatformAlarmType.alarm_source":
		if e.complexity.VideoPlatformAlarmType.AlarmSource == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmType.AlarmSource(childComplexity), true

	case "VideoPlatformAlarmType.alarm_type":
		if e.complexity.VideoPlatformAlarmType.AlarmType == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmType.AlarmType(childComplexity), true

	case "VideoPlatformAlarmType.created_at":
		if e.complexity.VideoPlatformAlarmType.CreatedAt == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmType.CreatedAt(childComplexity), true

	case "VideoPlatformAlarmType.created_by":
		if e.complexity.VideoPlatformAlarmType.CreatedBy == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmType.CreatedBy(childComplexity), true

	case "VideoPlatformAlarmType.deleted_at":
		if e.complexity.VideoPlatformAlarmType.DeletedAt == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmType.DeletedAt(childComplexity), true

	case "VideoPlatformAlarmType.deleted_by":
		if e.complexity.VideoPlatformAlarmType.DeletedBy == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmType.DeletedBy(childComplexity), true

	case "VideoPlatformAlarmType.id":
		if e.complexity.VideoPlatformAlarmType.ID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmType.ID(childComplexity), true

	case "VideoPlatformAlarmType.is_deleted":
		if e.complexity.VideoPlatformAlarmType.IsDeleted == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmType.IsDeleted(childComplexity), true

	case "VideoPlatformAlarmType.updated_at":
		if e.complexity.VideoPlatformAlarmType.UpdatedAt == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmType.UpdatedAt(childComplexity), true

	case "VideoPlatformAlarmType.updated_by":
		if e.complexity.VideoPlatformAlarmType.UpdatedBy == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmType.UpdatedBy(childComplexity), true

	case "VideoPlatformAlarmType.vehicle_alarm_data_id":
		if e.complexity.VideoPlatformAlarmType.VehicleAlarmDataID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmType.VehicleAlarmDataID(childComplexity), true

	case "VideoPlatformAlarmType.video_platform_alarm_type_id":
		if e.complexity.VideoPlatformAlarmType.VideoPlatformAlarmTypeID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmType.VideoPlatformAlarmTypeID(childComplexity), true

	case "VideoPlatformAlarmTypeAggregate.aggregate":
		if e.complexity.VideoPlatformAlarmTypeAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeAggregate.Aggregate(childComplexity), true

	case "VideoPlatformAlarmTypeAggregateFields.avg":
		if e.complexity.VideoPlatformAlarmTypeAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeAggregateFields.Avg(childComplexity), true

	case "VideoPlatformAlarmTypeAggregateFields.count":
		if e.complexity.VideoPlatformAlarmTypeAggregateFields.Count == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeAggregateFields.Count(childComplexity), true

	case "VideoPlatformAlarmTypeAggregateFields.max":
		if e.complexity.VideoPlatformAlarmTypeAggregateFields.Max == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeAggregateFields.Max(childComplexity), true

	case "VideoPlatformAlarmTypeAggregateFields.min":
		if e.complexity.VideoPlatformAlarmTypeAggregateFields.Min == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeAggregateFields.Min(childComplexity), true

	case "VideoPlatformAlarmTypeAggregateFields.stddev":
		if e.complexity.VideoPlatformAlarmTypeAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeAggregateFields.Stddev(childComplexity), true

	case "VideoPlatformAlarmTypeAggregateFields.stddev_pop":
		if e.complexity.VideoPlatformAlarmTypeAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeAggregateFields.StddevPop(childComplexity), true

	case "VideoPlatformAlarmTypeAggregateFields.stddev_samp":
		if e.complexity.VideoPlatformAlarmTypeAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeAggregateFields.StddevSamp(childComplexity), true

	case "VideoPlatformAlarmTypeAggregateFields.sum":
		if e.complexity.VideoPlatformAlarmTypeAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeAggregateFields.Sum(childComplexity), true

	case "VideoPlatformAlarmTypeAggregateFields.var_pop":
		if e.complexity.VideoPlatformAlarmTypeAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeAggregateFields.VarPop(childComplexity), true

	case "VideoPlatformAlarmTypeAggregateFields.var_samp":
		if e.complexity.VideoPlatformAlarmTypeAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeAggregateFields.VarSamp(childComplexity), true

	case "VideoPlatformAlarmTypeAggregateFields.variance":
		if e.complexity.VideoPlatformAlarmTypeAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeAggregateFields.Variance(childComplexity), true

	case "VideoPlatformAlarmTypeAvgFields.id":
		if e.complexity.VideoPlatformAlarmTypeAvgFields.ID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeAvgFields.ID(childComplexity), true

	case "VideoPlatformAlarmTypeAvgFields.vehicle_alarm_data_id":
		if e.complexity.VideoPlatformAlarmTypeAvgFields.VehicleAlarmDataID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeAvgFields.VehicleAlarmDataID(childComplexity), true

	case "VideoPlatformAlarmTypeMaxFields.alarm_classify":
		if e.complexity.VideoPlatformAlarmTypeMaxFields.AlarmClassify == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMaxFields.AlarmClassify(childComplexity), true

	case "VideoPlatformAlarmTypeMaxFields.alarm_code":
		if e.complexity.VideoPlatformAlarmTypeMaxFields.AlarmCode == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMaxFields.AlarmCode(childComplexity), true

	case "VideoPlatformAlarmTypeMaxFields.alarm_source":
		if e.complexity.VideoPlatformAlarmTypeMaxFields.AlarmSource == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMaxFields.AlarmSource(childComplexity), true

	case "VideoPlatformAlarmTypeMaxFields.alarm_type":
		if e.complexity.VideoPlatformAlarmTypeMaxFields.AlarmType == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMaxFields.AlarmType(childComplexity), true

	case "VideoPlatformAlarmTypeMaxFields.created_at":
		if e.complexity.VideoPlatformAlarmTypeMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMaxFields.CreatedAt(childComplexity), true

	case "VideoPlatformAlarmTypeMaxFields.created_by":
		if e.complexity.VideoPlatformAlarmTypeMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMaxFields.CreatedBy(childComplexity), true

	case "VideoPlatformAlarmTypeMaxFields.deleted_at":
		if e.complexity.VideoPlatformAlarmTypeMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMaxFields.DeletedAt(childComplexity), true

	case "VideoPlatformAlarmTypeMaxFields.deleted_by":
		if e.complexity.VideoPlatformAlarmTypeMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMaxFields.DeletedBy(childComplexity), true

	case "VideoPlatformAlarmTypeMaxFields.id":
		if e.complexity.VideoPlatformAlarmTypeMaxFields.ID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMaxFields.ID(childComplexity), true

	case "VideoPlatformAlarmTypeMaxFields.is_deleted":
		if e.complexity.VideoPlatformAlarmTypeMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMaxFields.IsDeleted(childComplexity), true

	case "VideoPlatformAlarmTypeMaxFields.updated_at":
		if e.complexity.VideoPlatformAlarmTypeMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMaxFields.UpdatedAt(childComplexity), true

	case "VideoPlatformAlarmTypeMaxFields.updated_by":
		if e.complexity.VideoPlatformAlarmTypeMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMaxFields.UpdatedBy(childComplexity), true

	case "VideoPlatformAlarmTypeMaxFields.vehicle_alarm_data_id":
		if e.complexity.VideoPlatformAlarmTypeMaxFields.VehicleAlarmDataID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMaxFields.VehicleAlarmDataID(childComplexity), true

	case "VideoPlatformAlarmTypeMaxFields.video_platform_alarm_type_id":
		if e.complexity.VideoPlatformAlarmTypeMaxFields.VideoPlatformAlarmTypeID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMaxFields.VideoPlatformAlarmTypeID(childComplexity), true

	case "VideoPlatformAlarmTypeMinFields.alarm_classify":
		if e.complexity.VideoPlatformAlarmTypeMinFields.AlarmClassify == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMinFields.AlarmClassify(childComplexity), true

	case "VideoPlatformAlarmTypeMinFields.alarm_code":
		if e.complexity.VideoPlatformAlarmTypeMinFields.AlarmCode == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMinFields.AlarmCode(childComplexity), true

	case "VideoPlatformAlarmTypeMinFields.alarm_source":
		if e.complexity.VideoPlatformAlarmTypeMinFields.AlarmSource == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMinFields.AlarmSource(childComplexity), true

	case "VideoPlatformAlarmTypeMinFields.alarm_type":
		if e.complexity.VideoPlatformAlarmTypeMinFields.AlarmType == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMinFields.AlarmType(childComplexity), true

	case "VideoPlatformAlarmTypeMinFields.created_at":
		if e.complexity.VideoPlatformAlarmTypeMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMinFields.CreatedAt(childComplexity), true

	case "VideoPlatformAlarmTypeMinFields.created_by":
		if e.complexity.VideoPlatformAlarmTypeMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMinFields.CreatedBy(childComplexity), true

	case "VideoPlatformAlarmTypeMinFields.deleted_at":
		if e.complexity.VideoPlatformAlarmTypeMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMinFields.DeletedAt(childComplexity), true

	case "VideoPlatformAlarmTypeMinFields.deleted_by":
		if e.complexity.VideoPlatformAlarmTypeMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMinFields.DeletedBy(childComplexity), true

	case "VideoPlatformAlarmTypeMinFields.id":
		if e.complexity.VideoPlatformAlarmTypeMinFields.ID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMinFields.ID(childComplexity), true

	case "VideoPlatformAlarmTypeMinFields.is_deleted":
		if e.complexity.VideoPlatformAlarmTypeMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMinFields.IsDeleted(childComplexity), true

	case "VideoPlatformAlarmTypeMinFields.updated_at":
		if e.complexity.VideoPlatformAlarmTypeMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMinFields.UpdatedAt(childComplexity), true

	case "VideoPlatformAlarmTypeMinFields.updated_by":
		if e.complexity.VideoPlatformAlarmTypeMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMinFields.UpdatedBy(childComplexity), true

	case "VideoPlatformAlarmTypeMinFields.vehicle_alarm_data_id":
		if e.complexity.VideoPlatformAlarmTypeMinFields.VehicleAlarmDataID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMinFields.VehicleAlarmDataID(childComplexity), true

	case "VideoPlatformAlarmTypeMinFields.video_platform_alarm_type_id":
		if e.complexity.VideoPlatformAlarmTypeMinFields.VideoPlatformAlarmTypeID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMinFields.VideoPlatformAlarmTypeID(childComplexity), true

	case "VideoPlatformAlarmTypeMutationResponse.affected_rows":
		if e.complexity.VideoPlatformAlarmTypeMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMutationResponse.AffectedRows(childComplexity), true

	case "VideoPlatformAlarmTypeMutationResponse.returning":
		if e.complexity.VideoPlatformAlarmTypeMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeMutationResponse.Returning(childComplexity), true

	case "VideoPlatformAlarmTypeStddevFields.id":
		if e.complexity.VideoPlatformAlarmTypeStddevFields.ID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeStddevFields.ID(childComplexity), true

	case "VideoPlatformAlarmTypeStddevFields.vehicle_alarm_data_id":
		if e.complexity.VideoPlatformAlarmTypeStddevFields.VehicleAlarmDataID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeStddevFields.VehicleAlarmDataID(childComplexity), true

	case "VideoPlatformAlarmTypeStddevPopFields.id":
		if e.complexity.VideoPlatformAlarmTypeStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeStddevPopFields.ID(childComplexity), true

	case "VideoPlatformAlarmTypeStddevPopFields.vehicle_alarm_data_id":
		if e.complexity.VideoPlatformAlarmTypeStddevPopFields.VehicleAlarmDataID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeStddevPopFields.VehicleAlarmDataID(childComplexity), true

	case "VideoPlatformAlarmTypeStddevSampFields.id":
		if e.complexity.VideoPlatformAlarmTypeStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeStddevSampFields.ID(childComplexity), true

	case "VideoPlatformAlarmTypeStddevSampFields.vehicle_alarm_data_id":
		if e.complexity.VideoPlatformAlarmTypeStddevSampFields.VehicleAlarmDataID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeStddevSampFields.VehicleAlarmDataID(childComplexity), true

	case "VideoPlatformAlarmTypeSumFields.id":
		if e.complexity.VideoPlatformAlarmTypeSumFields.ID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeSumFields.ID(childComplexity), true

	case "VideoPlatformAlarmTypeSumFields.vehicle_alarm_data_id":
		if e.complexity.VideoPlatformAlarmTypeSumFields.VehicleAlarmDataID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeSumFields.VehicleAlarmDataID(childComplexity), true

	case "VideoPlatformAlarmTypeVarPopFields.id":
		if e.complexity.VideoPlatformAlarmTypeVarPopFields.ID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeVarPopFields.ID(childComplexity), true

	case "VideoPlatformAlarmTypeVarPopFields.vehicle_alarm_data_id":
		if e.complexity.VideoPlatformAlarmTypeVarPopFields.VehicleAlarmDataID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeVarPopFields.VehicleAlarmDataID(childComplexity), true

	case "VideoPlatformAlarmTypeVarSampFields.id":
		if e.complexity.VideoPlatformAlarmTypeVarSampFields.ID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeVarSampFields.ID(childComplexity), true

	case "VideoPlatformAlarmTypeVarSampFields.vehicle_alarm_data_id":
		if e.complexity.VideoPlatformAlarmTypeVarSampFields.VehicleAlarmDataID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeVarSampFields.VehicleAlarmDataID(childComplexity), true

	case "VideoPlatformAlarmTypeVarianceFields.id":
		if e.complexity.VideoPlatformAlarmTypeVarianceFields.ID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeVarianceFields.ID(childComplexity), true

	case "VideoPlatformAlarmTypeVarianceFields.vehicle_alarm_data_id":
		if e.complexity.VideoPlatformAlarmTypeVarianceFields.VehicleAlarmDataID == nil {
			break
		}

		return e.complexity.VideoPlatformAlarmTypeVarianceFields.VehicleAlarmDataID(childComplexity), true

	case "VoiceAlarmRecord.alarm_time":
		if e.complexity.VoiceAlarmRecord.AlarmTime == nil {
			break
		}

		return e.complexity.VoiceAlarmRecord.AlarmTime(childComplexity), true

	case "VoiceAlarmRecord.alarm_type":
		if e.complexity.VoiceAlarmRecord.AlarmType == nil {
			break
		}

		return e.complexity.VoiceAlarmRecord.AlarmType(childComplexity), true

	case "VoiceAlarmRecord.created_at":
		if e.complexity.VoiceAlarmRecord.CreatedAt == nil {
			break
		}

		return e.complexity.VoiceAlarmRecord.CreatedAt(childComplexity), true

	case "VoiceAlarmRecord.created_by":
		if e.complexity.VoiceAlarmRecord.CreatedBy == nil {
			break
		}

		return e.complexity.VoiceAlarmRecord.CreatedBy(childComplexity), true

	case "VoiceAlarmRecord.deleted_at":
		if e.complexity.VoiceAlarmRecord.DeletedAt == nil {
			break
		}

		return e.complexity.VoiceAlarmRecord.DeletedAt(childComplexity), true

	case "VoiceAlarmRecord.deleted_by":
		if e.complexity.VoiceAlarmRecord.DeletedBy == nil {
			break
		}

		return e.complexity.VoiceAlarmRecord.DeletedBy(childComplexity), true

	case "VoiceAlarmRecord.id":
		if e.complexity.VoiceAlarmRecord.ID == nil {
			break
		}

		return e.complexity.VoiceAlarmRecord.ID(childComplexity), true

	case "VoiceAlarmRecord.input_person":
		if e.complexity.VoiceAlarmRecord.InputPerson == nil {
			break
		}

		return e.complexity.VoiceAlarmRecord.InputPerson(childComplexity), true

	case "VoiceAlarmRecord.input_time":
		if e.complexity.VoiceAlarmRecord.InputTime == nil {
			break
		}

		return e.complexity.VoiceAlarmRecord.InputTime(childComplexity), true

	case "VoiceAlarmRecord.is_success":
		if e.complexity.VoiceAlarmRecord.IsSuccess == nil {
			break
		}

		return e.complexity.VoiceAlarmRecord.IsSuccess(childComplexity), true

	case "VoiceAlarmRecord.remind_content":
		if e.complexity.VoiceAlarmRecord.RemindContent == nil {
			break
		}

		return e.complexity.VoiceAlarmRecord.RemindContent(childComplexity), true

	case "VoiceAlarmRecord.remind_time":
		if e.complexity.VoiceAlarmRecord.RemindTime == nil {
			break
		}

		return e.complexity.VoiceAlarmRecord.RemindTime(childComplexity), true

	case "VoiceAlarmRecord.updated_at":
		if e.complexity.VoiceAlarmRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.VoiceAlarmRecord.UpdatedAt(childComplexity), true

	case "VoiceAlarmRecord.updated_by":
		if e.complexity.VoiceAlarmRecord.UpdatedBy == nil {
			break
		}

		return e.complexity.VoiceAlarmRecord.UpdatedBy(childComplexity), true

	case "VoiceAlarmRecord.vehicle_id":
		if e.complexity.VoiceAlarmRecord.VehicleID == nil {
			break
		}

		return e.complexity.VoiceAlarmRecord.VehicleID(childComplexity), true

	case "VoiceAlarmRecord.vioce_alarm_record_id":
		if e.complexity.VoiceAlarmRecord.VioceAlarmRecordID == nil {
			break
		}

		return e.complexity.VoiceAlarmRecord.VioceAlarmRecordID(childComplexity), true

	case "VoiceAlarmRecordAggregate.aggregate":
		if e.complexity.VoiceAlarmRecordAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordAggregate.Aggregate(childComplexity), true

	case "VoiceAlarmRecordAggregateFields.avg":
		if e.complexity.VoiceAlarmRecordAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordAggregateFields.Avg(childComplexity), true

	case "VoiceAlarmRecordAggregateFields.count":
		if e.complexity.VoiceAlarmRecordAggregateFields.Count == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordAggregateFields.Count(childComplexity), true

	case "VoiceAlarmRecordAggregateFields.max":
		if e.complexity.VoiceAlarmRecordAggregateFields.Max == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordAggregateFields.Max(childComplexity), true

	case "VoiceAlarmRecordAggregateFields.min":
		if e.complexity.VoiceAlarmRecordAggregateFields.Min == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordAggregateFields.Min(childComplexity), true

	case "VoiceAlarmRecordAggregateFields.stddev":
		if e.complexity.VoiceAlarmRecordAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordAggregateFields.Stddev(childComplexity), true

	case "VoiceAlarmRecordAggregateFields.stddev_pop":
		if e.complexity.VoiceAlarmRecordAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordAggregateFields.StddevPop(childComplexity), true

	case "VoiceAlarmRecordAggregateFields.stddev_samp":
		if e.complexity.VoiceAlarmRecordAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordAggregateFields.StddevSamp(childComplexity), true

	case "VoiceAlarmRecordAggregateFields.sum":
		if e.complexity.VoiceAlarmRecordAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordAggregateFields.Sum(childComplexity), true

	case "VoiceAlarmRecordAggregateFields.var_pop":
		if e.complexity.VoiceAlarmRecordAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordAggregateFields.VarPop(childComplexity), true

	case "VoiceAlarmRecordAggregateFields.var_samp":
		if e.complexity.VoiceAlarmRecordAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordAggregateFields.VarSamp(childComplexity), true

	case "VoiceAlarmRecordAggregateFields.variance":
		if e.complexity.VoiceAlarmRecordAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordAggregateFields.Variance(childComplexity), true

	case "VoiceAlarmRecordAvgFields.id":
		if e.complexity.VoiceAlarmRecordAvgFields.ID == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordAvgFields.ID(childComplexity), true

	case "VoiceAlarmRecordMaxFields.alarm_time":
		if e.complexity.VoiceAlarmRecordMaxFields.AlarmTime == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMaxFields.AlarmTime(childComplexity), true

	case "VoiceAlarmRecordMaxFields.alarm_type":
		if e.complexity.VoiceAlarmRecordMaxFields.AlarmType == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMaxFields.AlarmType(childComplexity), true

	case "VoiceAlarmRecordMaxFields.created_at":
		if e.complexity.VoiceAlarmRecordMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMaxFields.CreatedAt(childComplexity), true

	case "VoiceAlarmRecordMaxFields.created_by":
		if e.complexity.VoiceAlarmRecordMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMaxFields.CreatedBy(childComplexity), true

	case "VoiceAlarmRecordMaxFields.deleted_at":
		if e.complexity.VoiceAlarmRecordMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMaxFields.DeletedAt(childComplexity), true

	case "VoiceAlarmRecordMaxFields.deleted_by":
		if e.complexity.VoiceAlarmRecordMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMaxFields.DeletedBy(childComplexity), true

	case "VoiceAlarmRecordMaxFields.id":
		if e.complexity.VoiceAlarmRecordMaxFields.ID == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMaxFields.ID(childComplexity), true

	case "VoiceAlarmRecordMaxFields.input_person":
		if e.complexity.VoiceAlarmRecordMaxFields.InputPerson == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMaxFields.InputPerson(childComplexity), true

	case "VoiceAlarmRecordMaxFields.input_time":
		if e.complexity.VoiceAlarmRecordMaxFields.InputTime == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMaxFields.InputTime(childComplexity), true

	case "VoiceAlarmRecordMaxFields.is_success":
		if e.complexity.VoiceAlarmRecordMaxFields.IsSuccess == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMaxFields.IsSuccess(childComplexity), true

	case "VoiceAlarmRecordMaxFields.remind_content":
		if e.complexity.VoiceAlarmRecordMaxFields.RemindContent == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMaxFields.RemindContent(childComplexity), true

	case "VoiceAlarmRecordMaxFields.remind_time":
		if e.complexity.VoiceAlarmRecordMaxFields.RemindTime == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMaxFields.RemindTime(childComplexity), true

	case "VoiceAlarmRecordMaxFields.updated_at":
		if e.complexity.VoiceAlarmRecordMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMaxFields.UpdatedAt(childComplexity), true

	case "VoiceAlarmRecordMaxFields.updated_by":
		if e.complexity.VoiceAlarmRecordMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMaxFields.UpdatedBy(childComplexity), true

	case "VoiceAlarmRecordMaxFields.vehicle_id":
		if e.complexity.VoiceAlarmRecordMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMaxFields.VehicleID(childComplexity), true

	case "VoiceAlarmRecordMaxFields.vioce_alarm_record_id":
		if e.complexity.VoiceAlarmRecordMaxFields.VioceAlarmRecordID == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMaxFields.VioceAlarmRecordID(childComplexity), true

	case "VoiceAlarmRecordMinFields.alarm_time":
		if e.complexity.VoiceAlarmRecordMinFields.AlarmTime == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMinFields.AlarmTime(childComplexity), true

	case "VoiceAlarmRecordMinFields.alarm_type":
		if e.complexity.VoiceAlarmRecordMinFields.AlarmType == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMinFields.AlarmType(childComplexity), true

	case "VoiceAlarmRecordMinFields.created_at":
		if e.complexity.VoiceAlarmRecordMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMinFields.CreatedAt(childComplexity), true

	case "VoiceAlarmRecordMinFields.created_by":
		if e.complexity.VoiceAlarmRecordMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMinFields.CreatedBy(childComplexity), true

	case "VoiceAlarmRecordMinFields.deleted_at":
		if e.complexity.VoiceAlarmRecordMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMinFields.DeletedAt(childComplexity), true

	case "VoiceAlarmRecordMinFields.deleted_by":
		if e.complexity.VoiceAlarmRecordMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMinFields.DeletedBy(childComplexity), true

	case "VoiceAlarmRecordMinFields.id":
		if e.complexity.VoiceAlarmRecordMinFields.ID == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMinFields.ID(childComplexity), true

	case "VoiceAlarmRecordMinFields.input_person":
		if e.complexity.VoiceAlarmRecordMinFields.InputPerson == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMinFields.InputPerson(childComplexity), true

	case "VoiceAlarmRecordMinFields.input_time":
		if e.complexity.VoiceAlarmRecordMinFields.InputTime == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMinFields.InputTime(childComplexity), true

	case "VoiceAlarmRecordMinFields.is_success":
		if e.complexity.VoiceAlarmRecordMinFields.IsSuccess == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMinFields.IsSuccess(childComplexity), true

	case "VoiceAlarmRecordMinFields.remind_content":
		if e.complexity.VoiceAlarmRecordMinFields.RemindContent == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMinFields.RemindContent(childComplexity), true

	case "VoiceAlarmRecordMinFields.remind_time":
		if e.complexity.VoiceAlarmRecordMinFields.RemindTime == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMinFields.RemindTime(childComplexity), true

	case "VoiceAlarmRecordMinFields.updated_at":
		if e.complexity.VoiceAlarmRecordMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMinFields.UpdatedAt(childComplexity), true

	case "VoiceAlarmRecordMinFields.updated_by":
		if e.complexity.VoiceAlarmRecordMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMinFields.UpdatedBy(childComplexity), true

	case "VoiceAlarmRecordMinFields.vehicle_id":
		if e.complexity.VoiceAlarmRecordMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMinFields.VehicleID(childComplexity), true

	case "VoiceAlarmRecordMinFields.vioce_alarm_record_id":
		if e.complexity.VoiceAlarmRecordMinFields.VioceAlarmRecordID == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMinFields.VioceAlarmRecordID(childComplexity), true

	case "VoiceAlarmRecordMutationResponse.affected_rows":
		if e.complexity.VoiceAlarmRecordMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMutationResponse.AffectedRows(childComplexity), true

	case "VoiceAlarmRecordMutationResponse.returning":
		if e.complexity.VoiceAlarmRecordMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordMutationResponse.Returning(childComplexity), true

	case "VoiceAlarmRecordStddevFields.id":
		if e.complexity.VoiceAlarmRecordStddevFields.ID == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordStddevFields.ID(childComplexity), true

	case "VoiceAlarmRecordStddevPopFields.id":
		if e.complexity.VoiceAlarmRecordStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordStddevPopFields.ID(childComplexity), true

	case "VoiceAlarmRecordStddevSampFields.id":
		if e.complexity.VoiceAlarmRecordStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordStddevSampFields.ID(childComplexity), true

	case "VoiceAlarmRecordSumFields.id":
		if e.complexity.VoiceAlarmRecordSumFields.ID == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordSumFields.ID(childComplexity), true

	case "VoiceAlarmRecordVarPopFields.id":
		if e.complexity.VoiceAlarmRecordVarPopFields.ID == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordVarPopFields.ID(childComplexity), true

	case "VoiceAlarmRecordVarSampFields.id":
		if e.complexity.VoiceAlarmRecordVarSampFields.ID == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordVarSampFields.ID(childComplexity), true

	case "VoiceAlarmRecordVarianceFields.id":
		if e.complexity.VoiceAlarmRecordVarianceFields.ID == nil {
			break
		}

		return e.complexity.VoiceAlarmRecordVarianceFields.ID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/alarm_processing_record.graphqls", Input: `"""
报警处理记录表
"""
type AlarmProcessingRecord {
	"""
	 按指定方法生成                                               ( 主键                       )
	"""
	id: Bigint!
	"""
	 vehicle_alarm_data报警数据表的alarm_data_id              
	"""
	alarm_data_id: String!
	"""
	 alarm_supervision_picture_ upload报警监管图片上传表的alarm_supervision_picture_id 
	"""
	alarm_supervision_picture_id: Bigint!
	"""
	 处理内容                                                     
	"""
	processing_content: String
	"""
	 处理时间                                                     
	"""
	processing_time: Timestamptz
	"""
	 处理类型  1.超速报警  2.疲劳驾驶  3.工程报警  4.超三天断电报警  5.进出区域报警  6.进出区域报警  7.安检到期报警  11.进出工地报警 
	"""
	processing_type: Int
	"""
	 操作用户                                                     ( system_user表的user_id )
	"""
	operation_user: String
	"""
	 是否短信推送                                                 
	"""
	is_sms_push: Boolean
	"""
	 是否通报                                                     
	"""
	is_notify: Boolean
	"""
	 是否语音通知                                                 
	"""
	is_announce: Boolean
	"""
	 是否APP推送                                                  
	"""
	is_app_push: Boolean
	"""
	 通报内容                                                     
	"""
	notify_content: String
	"""
	 语音内容                                                     
	"""
	announce_content: String
	"""
	 APP推送内容                                                  
	"""
	app_push_content: String
	"""
	 处置方式                                                     ( 处置方式字典           )
	"""
	disposal_method: Int
	"""
	 处置结果                                                     
	"""
	disposal_result: String
	"""
	 是否删除                                                     ( false                      )
	"""
	is_deleted: Boolean
	"""
	 创建时间                                                     
	"""
	created_at: Timestamptz!
	"""
	 创建人                                                       ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                                     
	"""
	updated_at: Timestamptz
	"""
	 修改人                                                       ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                                     
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                                       ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "alarm_processing_record"
"""
type AlarmProcessingRecordAggregate {
	aggregate: AlarmProcessingRecordAggregateFields
}
"""
aggregate fields of "alarm_processing_record"
"""
type AlarmProcessingRecordAggregateFields {
	avg: AlarmProcessingRecordAvgFields
	count: Int
	max: AlarmProcessingRecordMaxFields
	min: AlarmProcessingRecordMinFields
	stddev: AlarmProcessingRecordStddevFields
	stddev_pop: AlarmProcessingRecordStddevPopFields
	stddev_samp: AlarmProcessingRecordStddevSampFields
	sum: AlarmProcessingRecordSumFields
	var_pop: AlarmProcessingRecordVarPopFields
	var_samp: AlarmProcessingRecordVarSampFields
	variance: AlarmProcessingRecordVarianceFields
}
"""
aggregate avg on columns of table "alarm_processing_record"
"""
type AlarmProcessingRecordAvgFields {
	id: Bigint
	alarm_supervision_picture_id: Bigint
	processing_type: Int
	disposal_method: Int
}
"""
aggregate max on columns of table "alarm_processing_record"
"""
type AlarmProcessingRecordMaxFields {
	id: Bigint
	alarm_data_id: String
	alarm_supervision_picture_id: Bigint
	processing_content: String
	processing_time: Timestamptz
	processing_type: Int
	operation_user: String
	is_sms_push: Boolean
	is_notify: Boolean
	is_announce: Boolean
	is_app_push: Boolean
	notify_content: String
	announce_content: String
	app_push_content: String
	disposal_method: Int
	disposal_result: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "alarm_processing_record"
"""
type AlarmProcessingRecordMinFields {
	id: Bigint
	alarm_data_id: String
	alarm_supervision_picture_id: Bigint
	processing_content: String
	processing_time: Timestamptz
	processing_type: Int
	operation_user: String
	is_sms_push: Boolean
	is_notify: Boolean
	is_announce: Boolean
	is_app_push: Boolean
	notify_content: String
	announce_content: String
	app_push_content: String
	disposal_method: Int
	disposal_result: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "alarm_processing_record"
"""
type AlarmProcessingRecordStddevFields {
	id: Bigint
	alarm_supervision_picture_id: Bigint
	processing_type: Int
	disposal_method: Int
}
"""
aggregate stddev_pop on columns of table "alarm_processing_record"
"""
type AlarmProcessingRecordStddevPopFields {
	id: Bigint
	alarm_supervision_picture_id: Bigint
	processing_type: Int
	disposal_method: Int
}
"""
aggregate stddev_samp on columns of table "alarm_processing_record"
"""
type AlarmProcessingRecordStddevSampFields {
	id: Bigint
	alarm_supervision_picture_id: Bigint
	processing_type: Int
	disposal_method: Int
}
"""
aggregate sum on columns of table "alarm_processing_record"
"""
type AlarmProcessingRecordSumFields {
	id: Bigint
	alarm_supervision_picture_id: Bigint
	processing_type: Int
	disposal_method: Int
}
"""
aggregate var_pop on columns of table "alarm_processing_record"
"""
type AlarmProcessingRecordVarPopFields {
	id: Bigint
	alarm_supervision_picture_id: Bigint
	processing_type: Int
	disposal_method: Int
}
"""
aggregate var_samp on columns of table "alarm_processing_record"
"""
type AlarmProcessingRecordVarSampFields {
	id: Bigint
	alarm_supervision_picture_id: Bigint
	processing_type: Int
	disposal_method: Int
}
"""
aggregate variance on columns of table "alarm_processing_record"
"""
type AlarmProcessingRecordVarianceFields {
	id: Bigint
	alarm_supervision_picture_id: Bigint
	processing_type: Int
	disposal_method: Int
}
"""
response of any mutation on the table "alarm_processing_record"
"""
type AlarmProcessingRecordMutationResponse {
	affected_rows: Int!
	returning: [AlarmProcessingRecord!]!
}
"""
ordering options when selecting data from "alarm_processing_record"
"""
input AlarmProcessingRecordOrderBy {
	id: OrderBy
	alarm_data_id: OrderBy
	alarm_supervision_picture_id: OrderBy
	processing_content: OrderBy
	processing_time: OrderBy
	processing_type: OrderBy
	operation_user: OrderBy
	is_sms_push: OrderBy
	is_notify: OrderBy
	is_announce: OrderBy
	is_app_push: OrderBy
	notify_content: OrderBy
	announce_content: OrderBy
	app_push_content: OrderBy
	disposal_method: OrderBy
	disposal_result: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'alarm_processing_record'.
"""
input AlarmProcessingRecordBoolExp {
	_and: [AlarmProcessingRecordBoolExp]
	_not: AlarmProcessingRecordBoolExp
	_or: [AlarmProcessingRecordBoolExp]
	id: BigintComparisonExp
	alarm_data_id: StringComparisonExp
	alarm_supervision_picture_id: BigintComparisonExp
	processing_content: StringComparisonExp
	processing_time: TimestamptzComparisonExp
	processing_type: IntComparisonExp
	operation_user: StringComparisonExp
	is_sms_push: BooleanComparisonExp
	is_notify: BooleanComparisonExp
	is_announce: BooleanComparisonExp
	is_app_push: BooleanComparisonExp
	notify_content: StringComparisonExp
	announce_content: StringComparisonExp
	app_push_content: StringComparisonExp
	disposal_method: IntComparisonExp
	disposal_result: StringComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "alarm_processing_record"
"""
input AlarmProcessingRecordInsertInput {
	processing_content: String
	processing_time: Timestamptz
	processing_type: Int
	operation_user: String
	is_sms_push: Boolean
	is_notify: Boolean
	is_announce: Boolean
	is_app_push: Boolean
	notify_content: String
	announce_content: String
	app_push_content: String
	disposal_method: Int
	disposal_result: String
	is_deleted: Boolean
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "alarm_processing_record"
"""
input AlarmProcessingRecordIncInput {
	id: Bigint
	alarm_supervision_picture_id: Bigint
	processing_type: Int
	disposal_method: Int
}
"""
input type for updating data in table "alarm_processing_record"
"""
input AlarmProcessingRecordSetInput {
	id: Bigint
	alarm_data_id: String
	alarm_supervision_picture_id: Bigint
	processing_content: String
	processing_time: Timestamptz
	processing_type: Int
	operation_user: String
	is_sms_push: Boolean
	is_notify: Boolean
	is_announce: Boolean
	is_app_push: Boolean
	notify_content: String
	announce_content: String
	app_push_content: String
	disposal_method: Int
	disposal_result: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum AlarmProcessingRecordSelectColumn {
	"""
	 按指定方法生成                                               ( 主键                       )
	"""
	id
	"""
	 vehicle_alarm_data报警数据表的alarm_data_id              
	"""
	alarm_data_id
	"""
	 alarm_supervision_picture_ upload报警监管图片上传表的alarm_supervision_picture_id 
	"""
	alarm_supervision_picture_id
	"""
	 处理内容                                                     
	"""
	processing_content
	"""
	 处理时间                                                     
	"""
	processing_time
	"""
	 处理类型  1.超速报警  2.疲劳驾驶  3.工程报警  4.超三天断电报警  5.进出区域报警  6.进出区域报警  7.安检到期报警  11.进出工地报警 
	"""
	processing_type
	"""
	 操作用户                                                     ( system_user表的user_id )
	"""
	operation_user
	"""
	 是否短信推送                                                 
	"""
	is_sms_push
	"""
	 是否通报                                                     
	"""
	is_notify
	"""
	 是否语音通知                                                 
	"""
	is_announce
	"""
	 是否APP推送                                                  
	"""
	is_app_push
	"""
	 通报内容                                                     
	"""
	notify_content
	"""
	 语音内容                                                     
	"""
	announce_content
	"""
	 APP推送内容                                                  
	"""
	app_push_content
	"""
	 处置方式                                                     ( 处置方式字典           )
	"""
	disposal_method
	"""
	 处置结果                                                     
	"""
	disposal_result
	"""
	 是否删除                                                     ( false                      )
	"""
	is_deleted
	"""
	 创建时间                                                     
	"""
	created_at
	"""
	 创建人                                                       ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                                     
	"""
	updated_at
	"""
	 修改人                                                       ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                                     
	"""
	deleted_at
	"""
	 删除人                                                       ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	alarm_processing_record(distinct_on: [AlarmProcessingRecordSelectColumn!], limit: Int, offset: Int, order_by: [AlarmProcessingRecordOrderBy!], where: AlarmProcessingRecordBoolExp): [AlarmProcessingRecord!]!
	"""
	聚合查询
	"""
	alarm_processing_record_aggregate(distinct_on: [AlarmProcessingRecordSelectColumn!], limit: Int, offset: Int, order_by: [AlarmProcessingRecordOrderBy!], where: AlarmProcessingRecordBoolExp): AlarmProcessingRecordAggregate!
	"""
	主键查询
	"""
	alarm_processing_record_by_pk(id: Bigint!): AlarmProcessingRecord!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_alarm_processing_record(where: AlarmProcessingRecordBoolExp!): AlarmProcessingRecordMutationResponse
	"""
	根据主键删除记录
	"""
	delete_alarm_processing_record_by_pk(id: Bigint!): AlarmProcessingRecord
	"""
	插入
	"""
	insert_alarm_processing_record(objects: [AlarmProcessingRecordInsertInput!]!): AlarmProcessingRecordMutationResponse
	"""
	插入一条记录
	"""
	insert_alarm_processing_record_one(objects: AlarmProcessingRecordInsertInput!): AlarmProcessingRecord
	"""
	更新
	"""
	update_alarm_processing_record(_inc: AlarmProcessingRecordIncInput, _set: AlarmProcessingRecordSetInput, where: AlarmProcessingRecordBoolExp!): AlarmProcessingRecordMutationResponse
	"""
	更新
	"""
	update_alarm_processing_record_by_pk(_inc: AlarmProcessingRecordIncInput, _set: AlarmProcessingRecordSetInput, id: Bigint!): AlarmProcessingRecord
}
`, BuiltIn: false},
	{Name: "graph/graphqls/alarm_supervision_picture_upload.graphqls", Input: `"""
报警监管图片上传表
"""
type AlarmSupervisionPictureUpload {
	"""
	 按指定方法生成                                               ( 主键                                 )
	"""
	id: Bigint!
	"""
	 报警监管图片上传外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                             )
	"""
	alarm_supervision_picture_id: String!
	"""
	 车辆ID                                                       ( vehicle_info表vehicle_id         )
	"""
	vehicle_id: String!
	"""
	 驾驶员id                                                     ( driver_info 表的driver_id        )
	"""
	driver_id: String
	"""
	 所在企业id                                                   ( enterprise_info表的enterprise_id )
	"""
	enterprise_id: String
	"""
	 摄像头ID                                                     ( 摄像头ID字典                     )
	"""
	camera_id: Int
	"""
	 拍照条件                                                     ( 拍照条件字典                     )
	"""
	photo_condition: String
	"""
	 终端上报时间                                                 
	"""
	update_time: Timestamptz
	"""
	 报警监控图片名称                                             
	"""
	monitoring_pic_name: String
	"""
	 报警监控图片地址                                             
	"""
	monitoring_pic_address: String
	"""
	 报警监控图片上传时间                                         
	"""
	monitoring_pic_upload_time: Timestamptz
	"""
	 终端IMEI                                                     ( 国际移动设备标识别码                 )
	"""
	imel: String
	"""
	 SIM卡号                                                      
	"""
	sim_number: String
	"""
	 创建时间                                                     
	"""
	created_at: Timestamptz!
	"""
	 创建人                                                       ( system_user表的user_id           )
	"""
	created_by: String!
	"""
	 修改时间                                                     
	"""
	updated_at: Timestamptz
	"""
	 修改人                                                       ( system_user表的user_id           )
	"""
	updated_by: String
	"""
	 删除时间                                                     
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                                       ( system_user表的user_id           )
	"""
	deleted_by: String
}
"""
aggregated selection of "alarm_supervision_picture_upload"
"""
type AlarmSupervisionPictureUploadAggregate {
	aggregate: AlarmSupervisionPictureUploadAggregateFields
}
"""
aggregate fields of "alarm_supervision_picture_upload"
"""
type AlarmSupervisionPictureUploadAggregateFields {
	avg: AlarmSupervisionPictureUploadAvgFields
	count: Int
	max: AlarmSupervisionPictureUploadMaxFields
	min: AlarmSupervisionPictureUploadMinFields
	stddev: AlarmSupervisionPictureUploadStddevFields
	stddev_pop: AlarmSupervisionPictureUploadStddevPopFields
	stddev_samp: AlarmSupervisionPictureUploadStddevSampFields
	sum: AlarmSupervisionPictureUploadSumFields
	var_pop: AlarmSupervisionPictureUploadVarPopFields
	var_samp: AlarmSupervisionPictureUploadVarSampFields
	variance: AlarmSupervisionPictureUploadVarianceFields
}
"""
aggregate avg on columns of table "alarm_supervision_picture_upload"
"""
type AlarmSupervisionPictureUploadAvgFields {
	id: Bigint
	camera_id: Int
}
"""
aggregate max on columns of table "alarm_supervision_picture_upload"
"""
type AlarmSupervisionPictureUploadMaxFields {
	id: Bigint
	alarm_supervision_picture_id: String
	vehicle_id: String
	driver_id: String
	enterprise_id: String
	camera_id: Int
	photo_condition: String
	update_time: Timestamptz
	monitoring_pic_name: String
	monitoring_pic_address: String
	monitoring_pic_upload_time: Timestamptz
	imel: String
	sim_number: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "alarm_supervision_picture_upload"
"""
type AlarmSupervisionPictureUploadMinFields {
	id: Bigint
	alarm_supervision_picture_id: String
	vehicle_id: String
	driver_id: String
	enterprise_id: String
	camera_id: Int
	photo_condition: String
	update_time: Timestamptz
	monitoring_pic_name: String
	monitoring_pic_address: String
	monitoring_pic_upload_time: Timestamptz
	imel: String
	sim_number: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "alarm_supervision_picture_upload"
"""
type AlarmSupervisionPictureUploadStddevFields {
	id: Bigint
	camera_id: Int
}
"""
aggregate stddev_pop on columns of table "alarm_supervision_picture_upload"
"""
type AlarmSupervisionPictureUploadStddevPopFields {
	id: Bigint
	camera_id: Int
}
"""
aggregate stddev_samp on columns of table "alarm_supervision_picture_upload"
"""
type AlarmSupervisionPictureUploadStddevSampFields {
	id: Bigint
	camera_id: Int
}
"""
aggregate sum on columns of table "alarm_supervision_picture_upload"
"""
type AlarmSupervisionPictureUploadSumFields {
	id: Bigint
	camera_id: Int
}
"""
aggregate var_pop on columns of table "alarm_supervision_picture_upload"
"""
type AlarmSupervisionPictureUploadVarPopFields {
	id: Bigint
	camera_id: Int
}
"""
aggregate var_samp on columns of table "alarm_supervision_picture_upload"
"""
type AlarmSupervisionPictureUploadVarSampFields {
	id: Bigint
	camera_id: Int
}
"""
aggregate variance on columns of table "alarm_supervision_picture_upload"
"""
type AlarmSupervisionPictureUploadVarianceFields {
	id: Bigint
	camera_id: Int
}
"""
response of any mutation on the table "alarm_supervision_picture_upload"
"""
type AlarmSupervisionPictureUploadMutationResponse {
	affected_rows: Int!
	returning: [AlarmSupervisionPictureUpload!]!
}
"""
ordering options when selecting data from "alarm_supervision_picture_upload"
"""
input AlarmSupervisionPictureUploadOrderBy {
	id: OrderBy
	alarm_supervision_picture_id: OrderBy
	vehicle_id: OrderBy
	driver_id: OrderBy
	enterprise_id: OrderBy
	camera_id: OrderBy
	photo_condition: OrderBy
	update_time: OrderBy
	monitoring_pic_name: OrderBy
	monitoring_pic_address: OrderBy
	monitoring_pic_upload_time: OrderBy
	imel: OrderBy
	sim_number: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'alarm_supervision_picture_upload'.
"""
input AlarmSupervisionPictureUploadBoolExp {
	_and: [AlarmSupervisionPictureUploadBoolExp]
	_not: AlarmSupervisionPictureUploadBoolExp
	_or: [AlarmSupervisionPictureUploadBoolExp]
	id: BigintComparisonExp
	alarm_supervision_picture_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	driver_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	camera_id: IntComparisonExp
	photo_condition: StringComparisonExp
	update_time: TimestamptzComparisonExp
	monitoring_pic_name: StringComparisonExp
	monitoring_pic_address: StringComparisonExp
	monitoring_pic_upload_time: TimestamptzComparisonExp
	imel: StringComparisonExp
	sim_number: StringComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "alarm_supervision_picture_upload"
"""
input AlarmSupervisionPictureUploadInsertInput {
	driver_id: String
	enterprise_id: String
	camera_id: Int
	photo_condition: String
	update_time: Timestamptz
	monitoring_pic_name: String
	monitoring_pic_address: String
	monitoring_pic_upload_time: Timestamptz
	imel: String
	sim_number: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "alarm_supervision_picture_upload"
"""
input AlarmSupervisionPictureUploadIncInput {
	id: Bigint
	camera_id: Int
}
"""
input type for updating data in table "alarm_supervision_picture_upload"
"""
input AlarmSupervisionPictureUploadSetInput {
	id: Bigint
	alarm_supervision_picture_id: String
	vehicle_id: String
	driver_id: String
	enterprise_id: String
	camera_id: Int
	photo_condition: String
	update_time: Timestamptz
	monitoring_pic_name: String
	monitoring_pic_address: String
	monitoring_pic_upload_time: Timestamptz
	imel: String
	sim_number: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum AlarmSupervisionPictureUploadSelectColumn {
	"""
	 按指定方法生成                                               ( 主键                                 )
	"""
	id
	"""
	 报警监管图片上传外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                             )
	"""
	alarm_supervision_picture_id
	"""
	 车辆ID                                                       ( vehicle_info表vehicle_id         )
	"""
	vehicle_id
	"""
	 驾驶员id                                                     ( driver_info 表的driver_id        )
	"""
	driver_id
	"""
	 所在企业id                                                   ( enterprise_info表的enterprise_id )
	"""
	enterprise_id
	"""
	 摄像头ID                                                     ( 摄像头ID字典                     )
	"""
	camera_id
	"""
	 拍照条件                                                     ( 拍照条件字典                     )
	"""
	photo_condition
	"""
	 终端上报时间                                                 
	"""
	update_time
	"""
	 报警监控图片名称                                             
	"""
	monitoring_pic_name
	"""
	 报警监控图片地址                                             
	"""
	monitoring_pic_address
	"""
	 报警监控图片上传时间                                         
	"""
	monitoring_pic_upload_time
	"""
	 终端IMEI                                                     ( 国际移动设备标识别码                 )
	"""
	imel
	"""
	 SIM卡号                                                      
	"""
	sim_number
	"""
	 创建时间                                                     
	"""
	created_at
	"""
	 创建人                                                       ( system_user表的user_id           )
	"""
	created_by
	"""
	 修改时间                                                     
	"""
	updated_at
	"""
	 修改人                                                       ( system_user表的user_id           )
	"""
	updated_by
	"""
	 删除时间                                                     
	"""
	deleted_at
	"""
	 删除人                                                       ( system_user表的user_id           )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	alarm_supervision_picture_upload(distinct_on: [AlarmSupervisionPictureUploadSelectColumn!], limit: Int, offset: Int, order_by: [AlarmSupervisionPictureUploadOrderBy!], where: AlarmSupervisionPictureUploadBoolExp): [AlarmSupervisionPictureUpload!]!
	"""
	聚合查询
	"""
	alarm_supervision_picture_upload_aggregate(distinct_on: [AlarmSupervisionPictureUploadSelectColumn!], limit: Int, offset: Int, order_by: [AlarmSupervisionPictureUploadOrderBy!], where: AlarmSupervisionPictureUploadBoolExp): AlarmSupervisionPictureUploadAggregate!
	"""
	主键查询
	"""
	alarm_supervision_picture_upload_by_pk(id: Bigint!): AlarmSupervisionPictureUpload!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_alarm_supervision_picture_upload(where: AlarmSupervisionPictureUploadBoolExp!): AlarmSupervisionPictureUploadMutationResponse
	"""
	根据主键删除记录
	"""
	delete_alarm_supervision_picture_upload_by_pk(id: Bigint!): AlarmSupervisionPictureUpload
	"""
	插入
	"""
	insert_alarm_supervision_picture_upload(objects: [AlarmSupervisionPictureUploadInsertInput!]!): AlarmSupervisionPictureUploadMutationResponse
	"""
	插入一条记录
	"""
	insert_alarm_supervision_picture_upload_one(objects: AlarmSupervisionPictureUploadInsertInput!): AlarmSupervisionPictureUpload
	"""
	更新
	"""
	update_alarm_supervision_picture_upload(_inc: AlarmSupervisionPictureUploadIncInput, _set: AlarmSupervisionPictureUploadSetInput, where: AlarmSupervisionPictureUploadBoolExp!): AlarmSupervisionPictureUploadMutationResponse
	"""
	更新
	"""
	update_alarm_supervision_picture_upload_by_pk(_inc: AlarmSupervisionPictureUploadIncInput, _set: AlarmSupervisionPictureUploadSetInput, id: Bigint!): AlarmSupervisionPictureUpload
}
`, BuiltIn: false},
	{Name: "graph/graphqls/common.graphqls", Input: `
"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
	_eq: Jsonb
	_gt: Jsonb
	_gte: Jsonb
	_in: [Jsonb!]
	_is_null: Boolean
	_lt: Jsonb
	_lte: Jsonb
	_neq: Jsonb
	_nin: [Jsonb!]
}
"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
	_eq: Bigint
	_gt: Bigint
	_gte: Bigint
	_in: [Bigint!]
	_is_null: Boolean
	_lt: Bigint
	_lte: Bigint
	_neq: Bigint
	_nin: [Bigint!]
}
"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
	_eq: Boolean
	_gt: Boolean
	_gte: Boolean
	_in: [Boolean!]
	_is_null: Boolean
	_lt: Boolean
	_lte: Boolean
	_neq: Boolean
	_nin: [Boolean!]
}
"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
	_eq: Int
	_gt: Int
	_gte: Int
	_in: [Int!]
	_is_null: Boolean
	_lt: Int
	_lte: Int
	_neq: Int
	_nin: [Int!]
}
"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input FloatComparisonExp{
	_eq: Float
	_gt: Float
	_gte: Float
	_in: [Float!]
	_is_null: Boolean
	_lt: Float
	_lte: Float
	_neq: Float
	_nin: [Float!]
}
"""
column ordering options
"""
enum OrderBy {
	"""
	in the ascending order, nulls last
	"""
	asc
	"""
	in the ascending order, nulls first
	"""
	asc_nulls_first
	"""
	in the ascending order, nulls last
	"""
	asc_nulls_last
	"""
	in the descending order, nulls first
	"""
	desc
	"""
	in the descending order, nulls first
	"""
	desc_nulls_first
	"""
	in the descending order, nulls last
	"""
	desc_nulls_last
}
"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
	_eq: String
	_gt: String
	_gte: String
	_ilike: String
	_in: [String!]
	_is_null: Boolean
	_like: String
	_lt: String
	_lte: String
	_neq: String
	_nilike: String
	_nin: [String!]
	_nlike: String
	_nsimilar: String
	_similar: String
}
"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
	_eq: Timestamptz
	_gt: Timestamptz
	_gte: Timestamptz
	_in: [Timestamptz!]
	_is_null: Boolean
	_lt: Timestamptz
	_lte: Timestamptz
	_neq: Timestamptz
	_nin: [Timestamptz!]
}
"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input NumericComparisonExp {
	_eq: Numeric
	_gt: Numeric
	_gte: Numeric
	_in: [Numeric!]
	_is_null: Boolean
	_lt: Numeric
	_lte: Numeric
	_neq: Numeric
	_nin: [Numeric!]
}
"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input PointComparisonExp {
	_eq: Point
	_gt: Point
	_gte: Point
	_in: [Point!]
	_is_null: Boolean
	_lt: Point
	_lte: Point
	_neq: Point
	_nin: [Point!]
}
scalar Jsonb
scalar Bigint
scalar Timestamptz
scalar Point
scalar Numeric

`, BuiltIn: false},
	{Name: "graph/graphqls/district_alarm_content_push.graphqls", Input: `"""
各县市区报警内容推送表
"""
type DistrictAlarmContentPush {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id: Bigint!
	"""
	 vehicle_alarm_data报警数据表的alarm_data_id 
	"""
	alarm_data_id: String!
	"""
	 报警类型                                        ( 报警类型字典           )
	"""
	alarm_type: String
	"""
	 内容                                            
	"""
	alarm_content: String
	"""
	 省份ID                                          ( 省份表province_id      )
	"""
	province_id: String
	"""
	 城市ID                                          ( 城市表city_id          )
	"""
	city_id: String
	"""
	 区ID                                            ( 区域表district_id      )
	"""
	district_id: String
	"""
	 是否删除                                        ( false                      )
	"""
	is_deleted: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "district_alarm_content_push"
"""
type DistrictAlarmContentPushAggregate {
	aggregate: DistrictAlarmContentPushAggregateFields
}
"""
aggregate fields of "district_alarm_content_push"
"""
type DistrictAlarmContentPushAggregateFields {
	avg: DistrictAlarmContentPushAvgFields
	count: Int
	max: DistrictAlarmContentPushMaxFields
	min: DistrictAlarmContentPushMinFields
	stddev: DistrictAlarmContentPushStddevFields
	stddev_pop: DistrictAlarmContentPushStddevPopFields
	stddev_samp: DistrictAlarmContentPushStddevSampFields
	sum: DistrictAlarmContentPushSumFields
	var_pop: DistrictAlarmContentPushVarPopFields
	var_samp: DistrictAlarmContentPushVarSampFields
	variance: DistrictAlarmContentPushVarianceFields
}
"""
aggregate avg on columns of table "district_alarm_content_push"
"""
type DistrictAlarmContentPushAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "district_alarm_content_push"
"""
type DistrictAlarmContentPushMaxFields {
	id: Bigint
	alarm_data_id: String
	alarm_type: String
	alarm_content: String
	province_id: String
	city_id: String
	district_id: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "district_alarm_content_push"
"""
type DistrictAlarmContentPushMinFields {
	id: Bigint
	alarm_data_id: String
	alarm_type: String
	alarm_content: String
	province_id: String
	city_id: String
	district_id: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "district_alarm_content_push"
"""
type DistrictAlarmContentPushStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "district_alarm_content_push"
"""
type DistrictAlarmContentPushStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "district_alarm_content_push"
"""
type DistrictAlarmContentPushStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "district_alarm_content_push"
"""
type DistrictAlarmContentPushSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "district_alarm_content_push"
"""
type DistrictAlarmContentPushVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "district_alarm_content_push"
"""
type DistrictAlarmContentPushVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "district_alarm_content_push"
"""
type DistrictAlarmContentPushVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "district_alarm_content_push"
"""
type DistrictAlarmContentPushMutationResponse {
	affected_rows: Int!
	returning: [DistrictAlarmContentPush!]!
}
"""
ordering options when selecting data from "district_alarm_content_push"
"""
input DistrictAlarmContentPushOrderBy {
	id: OrderBy
	alarm_data_id: OrderBy
	alarm_type: OrderBy
	alarm_content: OrderBy
	province_id: OrderBy
	city_id: OrderBy
	district_id: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'district_alarm_content_push'.
"""
input DistrictAlarmContentPushBoolExp {
	_and: [DistrictAlarmContentPushBoolExp]
	_not: DistrictAlarmContentPushBoolExp
	_or: [DistrictAlarmContentPushBoolExp]
	id: BigintComparisonExp
	alarm_data_id: StringComparisonExp
	alarm_type: StringComparisonExp
	alarm_content: StringComparisonExp
	province_id: StringComparisonExp
	city_id: StringComparisonExp
	district_id: StringComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "district_alarm_content_push"
"""
input DistrictAlarmContentPushInsertInput {
	alarm_type: String
	alarm_content: String
	province_id: String
	city_id: String
	district_id: String
	is_deleted: Boolean
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "district_alarm_content_push"
"""
input DistrictAlarmContentPushIncInput {
	id: Bigint
}
"""
input type for updating data in table "district_alarm_content_push"
"""
input DistrictAlarmContentPushSetInput {
	id: Bigint
	alarm_data_id: String
	alarm_type: String
	alarm_content: String
	province_id: String
	city_id: String
	district_id: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum DistrictAlarmContentPushSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id
	"""
	 vehicle_alarm_data报警数据表的alarm_data_id 
	"""
	alarm_data_id
	"""
	 报警类型                                        ( 报警类型字典           )
	"""
	alarm_type
	"""
	 内容                                            
	"""
	alarm_content
	"""
	 省份ID                                          ( 省份表province_id      )
	"""
	province_id
	"""
	 城市ID                                          ( 城市表city_id          )
	"""
	city_id
	"""
	 区ID                                            ( 区域表district_id      )
	"""
	district_id
	"""
	 是否删除                                        ( false                      )
	"""
	is_deleted
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	district_alarm_content_push(distinct_on: [DistrictAlarmContentPushSelectColumn!], limit: Int, offset: Int, order_by: [DistrictAlarmContentPushOrderBy!], where: DistrictAlarmContentPushBoolExp): [DistrictAlarmContentPush!]!
	"""
	聚合查询
	"""
	district_alarm_content_push_aggregate(distinct_on: [DistrictAlarmContentPushSelectColumn!], limit: Int, offset: Int, order_by: [DistrictAlarmContentPushOrderBy!], where: DistrictAlarmContentPushBoolExp): DistrictAlarmContentPushAggregate!
	"""
	主键查询
	"""
	district_alarm_content_push_by_pk(id: Bigint!): DistrictAlarmContentPush!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_district_alarm_content_push(where: DistrictAlarmContentPushBoolExp!): DistrictAlarmContentPushMutationResponse
	"""
	根据主键删除记录
	"""
	delete_district_alarm_content_push_by_pk(id: Bigint!): DistrictAlarmContentPush
	"""
	插入
	"""
	insert_district_alarm_content_push(objects: [DistrictAlarmContentPushInsertInput!]!): DistrictAlarmContentPushMutationResponse
	"""
	插入一条记录
	"""
	insert_district_alarm_content_push_one(objects: DistrictAlarmContentPushInsertInput!): DistrictAlarmContentPush
	"""
	更新
	"""
	update_district_alarm_content_push(_inc: DistrictAlarmContentPushIncInput, _set: DistrictAlarmContentPushSetInput, where: DistrictAlarmContentPushBoolExp!): DistrictAlarmContentPushMutationResponse
	"""
	更新
	"""
	update_district_alarm_content_push_by_pk(_inc: DistrictAlarmContentPushIncInput, _set: DistrictAlarmContentPushSetInput, id: Bigint!): DistrictAlarmContentPush
}
`, BuiltIn: false},
	{Name: "graph/graphqls/enterprise_alarm_send_police.graphqls", Input: `"""
企业报警发送交警联系人
"""
type EnterpriseAlarmSendPolice {
	"""
	 按指定方法生成                                  ( 主键                                 )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                             )
	"""
	enterprise_alarm_send_police_id: String!
	"""
	 所在企业id                                      ( enterprise_info表的enterprise_id )
	"""
	enterprise_id: String
	"""
	 企业名称                                        
	"""
	enterprise_name: String
	"""
	 企业联系人                                      
	"""
	enterprise_contact: String
	"""
	 企业联系电话                                    
	"""
	enterprise_phone: String
	"""
	 交警                                            
	"""
	police: String
	"""
	 交警联系电话                                    
	"""
	police_phone: String
	"""
	 交警所属部门                                    
	"""
	phlice_department: String
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id           )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id           )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id           )
	"""
	deleted_by: String
}
"""
aggregated selection of "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceAggregate {
	aggregate: EnterpriseAlarmSendPoliceAggregateFields
}
"""
aggregate fields of "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceAggregateFields {
	avg: EnterpriseAlarmSendPoliceAvgFields
	count: Int
	max: EnterpriseAlarmSendPoliceMaxFields
	min: EnterpriseAlarmSendPoliceMinFields
	stddev: EnterpriseAlarmSendPoliceStddevFields
	stddev_pop: EnterpriseAlarmSendPoliceStddevPopFields
	stddev_samp: EnterpriseAlarmSendPoliceStddevSampFields
	sum: EnterpriseAlarmSendPoliceSumFields
	var_pop: EnterpriseAlarmSendPoliceVarPopFields
	var_samp: EnterpriseAlarmSendPoliceVarSampFields
	variance: EnterpriseAlarmSendPoliceVarianceFields
}
"""
aggregate avg on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceMaxFields {
	id: Bigint
	enterprise_alarm_send_police_id: String
	enterprise_id: String
	enterprise_name: String
	enterprise_contact: String
	enterprise_phone: String
	police: String
	police_phone: String
	phlice_department: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceMinFields {
	id: Bigint
	enterprise_alarm_send_police_id: String
	enterprise_id: String
	enterprise_name: String
	enterprise_contact: String
	enterprise_phone: String
	police: String
	police_phone: String
	phlice_department: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceMutationResponse {
	affected_rows: Int!
	returning: [EnterpriseAlarmSendPolice!]!
}
"""
ordering options when selecting data from "enterprise_alarm_send_police"
"""
input EnterpriseAlarmSendPoliceOrderBy {
	id: OrderBy
	enterprise_alarm_send_police_id: OrderBy
	enterprise_id: OrderBy
	enterprise_name: OrderBy
	enterprise_contact: OrderBy
	enterprise_phone: OrderBy
	police: OrderBy
	police_phone: OrderBy
	phlice_department: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_alarm_send_police'.
"""
input EnterpriseAlarmSendPoliceBoolExp {
	_and: [EnterpriseAlarmSendPoliceBoolExp]
	_not: EnterpriseAlarmSendPoliceBoolExp
	_or: [EnterpriseAlarmSendPoliceBoolExp]
	id: BigintComparisonExp
	enterprise_alarm_send_police_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	enterprise_name: StringComparisonExp
	enterprise_contact: StringComparisonExp
	enterprise_phone: StringComparisonExp
	police: StringComparisonExp
	police_phone: StringComparisonExp
	phlice_department: StringComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "enterprise_alarm_send_police"
"""
input EnterpriseAlarmSendPoliceInsertInput {
	enterprise_id: String
	enterprise_name: String
	enterprise_contact: String
	enterprise_phone: String
	police: String
	police_phone: String
	phlice_department: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "enterprise_alarm_send_police"
"""
input EnterpriseAlarmSendPoliceIncInput {
	id: Bigint
}
"""
input type for updating data in table "enterprise_alarm_send_police"
"""
input EnterpriseAlarmSendPoliceSetInput {
	id: Bigint
	enterprise_alarm_send_police_id: String
	enterprise_id: String
	enterprise_name: String
	enterprise_contact: String
	enterprise_phone: String
	police: String
	police_phone: String
	phlice_department: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum EnterpriseAlarmSendPoliceSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                                 )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                             )
	"""
	enterprise_alarm_send_police_id
	"""
	 所在企业id                                      ( enterprise_info表的enterprise_id )
	"""
	enterprise_id
	"""
	 企业名称                                        
	"""
	enterprise_name
	"""
	 企业联系人                                      
	"""
	enterprise_contact
	"""
	 企业联系电话                                    
	"""
	enterprise_phone
	"""
	 交警                                            
	"""
	police
	"""
	 交警联系电话                                    
	"""
	police_phone
	"""
	 交警所属部门                                    
	"""
	phlice_department
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id           )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id           )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id           )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	enterprise_alarm_send_police(distinct_on: [EnterpriseAlarmSendPoliceSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseAlarmSendPoliceOrderBy!], where: EnterpriseAlarmSendPoliceBoolExp): [EnterpriseAlarmSendPolice!]!
	"""
	聚合查询
	"""
	enterprise_alarm_send_police_aggregate(distinct_on: [EnterpriseAlarmSendPoliceSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseAlarmSendPoliceOrderBy!], where: EnterpriseAlarmSendPoliceBoolExp): EnterpriseAlarmSendPoliceAggregate!
	"""
	主键查询
	"""
	enterprise_alarm_send_police_by_pk(id: Bigint!): EnterpriseAlarmSendPolice!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_enterprise_alarm_send_police(where: EnterpriseAlarmSendPoliceBoolExp!): EnterpriseAlarmSendPoliceMutationResponse
	"""
	根据主键删除记录
	"""
	delete_enterprise_alarm_send_police_by_pk(id: Bigint!): EnterpriseAlarmSendPolice
	"""
	插入
	"""
	insert_enterprise_alarm_send_police(objects: [EnterpriseAlarmSendPoliceInsertInput!]!): EnterpriseAlarmSendPoliceMutationResponse
	"""
	插入一条记录
	"""
	insert_enterprise_alarm_send_police_one(objects: EnterpriseAlarmSendPoliceInsertInput!): EnterpriseAlarmSendPolice
	"""
	更新
	"""
	update_enterprise_alarm_send_police(_inc: EnterpriseAlarmSendPoliceIncInput, _set: EnterpriseAlarmSendPoliceSetInput, where: EnterpriseAlarmSendPoliceBoolExp!): EnterpriseAlarmSendPoliceMutationResponse
	"""
	更新
	"""
	update_enterprise_alarm_send_police_by_pk(_inc: EnterpriseAlarmSendPoliceIncInput, _set: EnterpriseAlarmSendPoliceSetInput, id: Bigint!): EnterpriseAlarmSendPolice
}
`, BuiltIn: false},
	{Name: "graph/graphqls/offline_alarm_registration.graphqls", Input: `"""
不在线报警登记
"""
type OfflineAlarmRegistration {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	offline_alarm_registration_id: String!
	"""
	 vehicle_info 车辆信息表 的vehicle_id        
	"""
	vehicle_id: String!
	"""
	 离线开始时间                                    
	"""
	offline_start_time: Timestamptz
	"""
	 离线结束时间                                    
	"""
	offline_end_time: Timestamptz
	"""
	 登记用户                                        ( system_user表的user_id )
	"""
	registration_user: String
	"""
	 登记时间                                        
	"""
	registration_time: Timestamptz
	"""
	 短信发送内容                                    
	"""
	sms_content: String
	"""
	 电话提醒内容                                    
	"""
	phone_reminder_content: String
	"""
	 短信发送时间                                    
	"""
	sms_send_time: Timestamptz
	"""
	 电话提醒时间                                    
	"""
	phone_reminder_time: Timestamptz
	"""
	 离线原因                                        
	"""
	offline_reason: String
	"""
	 报警类型                                        ( 报警类型字典           )
	"""
	alarm_type: Int
	"""
	 是否登记                                        
	"""
	is_registration: Boolean
	"""
	 是否结束报警                                    
	"""
	is_end_alarm: Boolean
	"""
	 是否发送短信                                    
	"""
	is_send_sms: Boolean
	"""
	 是否需要维护                                    
	"""
	is_need_maintain: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "offline_alarm_registration"
"""
type OfflineAlarmRegistrationAggregate {
	aggregate: OfflineAlarmRegistrationAggregateFields
}
"""
aggregate fields of "offline_alarm_registration"
"""
type OfflineAlarmRegistrationAggregateFields {
	avg: OfflineAlarmRegistrationAvgFields
	count: Int
	max: OfflineAlarmRegistrationMaxFields
	min: OfflineAlarmRegistrationMinFields
	stddev: OfflineAlarmRegistrationStddevFields
	stddev_pop: OfflineAlarmRegistrationStddevPopFields
	stddev_samp: OfflineAlarmRegistrationStddevSampFields
	sum: OfflineAlarmRegistrationSumFields
	var_pop: OfflineAlarmRegistrationVarPopFields
	var_samp: OfflineAlarmRegistrationVarSampFields
	variance: OfflineAlarmRegistrationVarianceFields
}
"""
aggregate avg on columns of table "offline_alarm_registration"
"""
type OfflineAlarmRegistrationAvgFields {
	id: Bigint
	alarm_type: Int
}
"""
aggregate max on columns of table "offline_alarm_registration"
"""
type OfflineAlarmRegistrationMaxFields {
	id: Bigint
	offline_alarm_registration_id: String
	vehicle_id: String
	offline_start_time: Timestamptz
	offline_end_time: Timestamptz
	registration_user: String
	registration_time: Timestamptz
	sms_content: String
	phone_reminder_content: String
	sms_send_time: Timestamptz
	phone_reminder_time: Timestamptz
	offline_reason: String
	alarm_type: Int
	is_registration: Boolean
	is_end_alarm: Boolean
	is_send_sms: Boolean
	is_need_maintain: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "offline_alarm_registration"
"""
type OfflineAlarmRegistrationMinFields {
	id: Bigint
	offline_alarm_registration_id: String
	vehicle_id: String
	offline_start_time: Timestamptz
	offline_end_time: Timestamptz
	registration_user: String
	registration_time: Timestamptz
	sms_content: String
	phone_reminder_content: String
	sms_send_time: Timestamptz
	phone_reminder_time: Timestamptz
	offline_reason: String
	alarm_type: Int
	is_registration: Boolean
	is_end_alarm: Boolean
	is_send_sms: Boolean
	is_need_maintain: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "offline_alarm_registration"
"""
type OfflineAlarmRegistrationStddevFields {
	id: Bigint
	alarm_type: Int
}
"""
aggregate stddev_pop on columns of table "offline_alarm_registration"
"""
type OfflineAlarmRegistrationStddevPopFields {
	id: Bigint
	alarm_type: Int
}
"""
aggregate stddev_samp on columns of table "offline_alarm_registration"
"""
type OfflineAlarmRegistrationStddevSampFields {
	id: Bigint
	alarm_type: Int
}
"""
aggregate sum on columns of table "offline_alarm_registration"
"""
type OfflineAlarmRegistrationSumFields {
	id: Bigint
	alarm_type: Int
}
"""
aggregate var_pop on columns of table "offline_alarm_registration"
"""
type OfflineAlarmRegistrationVarPopFields {
	id: Bigint
	alarm_type: Int
}
"""
aggregate var_samp on columns of table "offline_alarm_registration"
"""
type OfflineAlarmRegistrationVarSampFields {
	id: Bigint
	alarm_type: Int
}
"""
aggregate variance on columns of table "offline_alarm_registration"
"""
type OfflineAlarmRegistrationVarianceFields {
	id: Bigint
	alarm_type: Int
}
"""
response of any mutation on the table "offline_alarm_registration"
"""
type OfflineAlarmRegistrationMutationResponse {
	affected_rows: Int!
	returning: [OfflineAlarmRegistration!]!
}
"""
ordering options when selecting data from "offline_alarm_registration"
"""
input OfflineAlarmRegistrationOrderBy {
	id: OrderBy
	offline_alarm_registration_id: OrderBy
	vehicle_id: OrderBy
	offline_start_time: OrderBy
	offline_end_time: OrderBy
	registration_user: OrderBy
	registration_time: OrderBy
	sms_content: OrderBy
	phone_reminder_content: OrderBy
	sms_send_time: OrderBy
	phone_reminder_time: OrderBy
	offline_reason: OrderBy
	alarm_type: OrderBy
	is_registration: OrderBy
	is_end_alarm: OrderBy
	is_send_sms: OrderBy
	is_need_maintain: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'offline_alarm_registration'.
"""
input OfflineAlarmRegistrationBoolExp {
	_and: [OfflineAlarmRegistrationBoolExp]
	_not: OfflineAlarmRegistrationBoolExp
	_or: [OfflineAlarmRegistrationBoolExp]
	id: BigintComparisonExp
	offline_alarm_registration_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	offline_start_time: TimestamptzComparisonExp
	offline_end_time: TimestamptzComparisonExp
	registration_user: StringComparisonExp
	registration_time: TimestamptzComparisonExp
	sms_content: StringComparisonExp
	phone_reminder_content: StringComparisonExp
	sms_send_time: TimestamptzComparisonExp
	phone_reminder_time: TimestamptzComparisonExp
	offline_reason: StringComparisonExp
	alarm_type: IntComparisonExp
	is_registration: BooleanComparisonExp
	is_end_alarm: BooleanComparisonExp
	is_send_sms: BooleanComparisonExp
	is_need_maintain: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "offline_alarm_registration"
"""
input OfflineAlarmRegistrationInsertInput {
	offline_start_time: Timestamptz
	offline_end_time: Timestamptz
	registration_user: String
	registration_time: Timestamptz
	sms_content: String
	phone_reminder_content: String
	sms_send_time: Timestamptz
	phone_reminder_time: Timestamptz
	offline_reason: String
	alarm_type: Int
	is_registration: Boolean
	is_end_alarm: Boolean
	is_send_sms: Boolean
	is_need_maintain: Boolean
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "offline_alarm_registration"
"""
input OfflineAlarmRegistrationIncInput {
	id: Bigint
	alarm_type: Int
}
"""
input type for updating data in table "offline_alarm_registration"
"""
input OfflineAlarmRegistrationSetInput {
	id: Bigint
	offline_alarm_registration_id: String
	vehicle_id: String
	offline_start_time: Timestamptz
	offline_end_time: Timestamptz
	registration_user: String
	registration_time: Timestamptz
	sms_content: String
	phone_reminder_content: String
	sms_send_time: Timestamptz
	phone_reminder_time: Timestamptz
	offline_reason: String
	alarm_type: Int
	is_registration: Boolean
	is_end_alarm: Boolean
	is_send_sms: Boolean
	is_need_maintain: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum OfflineAlarmRegistrationSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	offline_alarm_registration_id
	"""
	 vehicle_info 车辆信息表 的vehicle_id        
	"""
	vehicle_id
	"""
	 离线开始时间                                    
	"""
	offline_start_time
	"""
	 离线结束时间                                    
	"""
	offline_end_time
	"""
	 登记用户                                        ( system_user表的user_id )
	"""
	registration_user
	"""
	 登记时间                                        
	"""
	registration_time
	"""
	 短信发送内容                                    
	"""
	sms_content
	"""
	 电话提醒内容                                    
	"""
	phone_reminder_content
	"""
	 短信发送时间                                    
	"""
	sms_send_time
	"""
	 电话提醒时间                                    
	"""
	phone_reminder_time
	"""
	 离线原因                                        
	"""
	offline_reason
	"""
	 报警类型                                        ( 报警类型字典           )
	"""
	alarm_type
	"""
	 是否登记                                        
	"""
	is_registration
	"""
	 是否结束报警                                    
	"""
	is_end_alarm
	"""
	 是否发送短信                                    
	"""
	is_send_sms
	"""
	 是否需要维护                                    
	"""
	is_need_maintain
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	offline_alarm_registration(distinct_on: [OfflineAlarmRegistrationSelectColumn!], limit: Int, offset: Int, order_by: [OfflineAlarmRegistrationOrderBy!], where: OfflineAlarmRegistrationBoolExp): [OfflineAlarmRegistration!]!
	"""
	聚合查询
	"""
	offline_alarm_registration_aggregate(distinct_on: [OfflineAlarmRegistrationSelectColumn!], limit: Int, offset: Int, order_by: [OfflineAlarmRegistrationOrderBy!], where: OfflineAlarmRegistrationBoolExp): OfflineAlarmRegistrationAggregate!
	"""
	主键查询
	"""
	offline_alarm_registration_by_pk(id: Bigint!): OfflineAlarmRegistration!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_offline_alarm_registration(where: OfflineAlarmRegistrationBoolExp!): OfflineAlarmRegistrationMutationResponse
	"""
	根据主键删除记录
	"""
	delete_offline_alarm_registration_by_pk(id: Bigint!): OfflineAlarmRegistration
	"""
	插入
	"""
	insert_offline_alarm_registration(objects: [OfflineAlarmRegistrationInsertInput!]!): OfflineAlarmRegistrationMutationResponse
	"""
	插入一条记录
	"""
	insert_offline_alarm_registration_one(objects: OfflineAlarmRegistrationInsertInput!): OfflineAlarmRegistration
	"""
	更新
	"""
	update_offline_alarm_registration(_inc: OfflineAlarmRegistrationIncInput, _set: OfflineAlarmRegistrationSetInput, where: OfflineAlarmRegistrationBoolExp!): OfflineAlarmRegistrationMutationResponse
	"""
	更新
	"""
	update_offline_alarm_registration_by_pk(_inc: OfflineAlarmRegistrationIncInput, _set: OfflineAlarmRegistrationSetInput, id: Bigint!): OfflineAlarmRegistration
}
`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_alarm_data.graphqls", Input: `"""
报警数据表
"""
type VehicleAlarmData {
	"""
	 按指定方法生成                                          ( 主键                               )
	"""
	id: Bigint!
	"""
	 报警数据外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                           )
	"""
	vehicle_alarm_data_id: String!
	"""
	 车辆ID                                                  ( 引用vehicle_info表的vehicle_id )
	"""
	vehicle_id: String
	"""
	 报警类型                                                ( 报警类型字典                   )
	"""
	alarm_type: String
	"""
	 报警开始时间                                            
	"""
	alarm_start_time: Timestamptz
	"""
	 报警结束时间                                            
	"""
	alarm_end_time: Timestamptz
	"""
	 报警结束位置                                            
	"""
	alarm_end_position: String
	"""
	 最新报警时间                                            
	"""
	latest_alarm_time: Timestamptz
	"""
	 最新报警位置                                            
	"""
	latest_alarm_position: Int
	"""
	 报警是否有效                                            
	"""
	is_alarm_effective: Boolean
	"""
	 报警是否结束                                            
	"""
	is_alarm_over: Boolean
	"""
	 是否取消报警                                            
	"""
	is_cancel_alarm: Boolean
	"""
	 报警来源:1.终端报警 2.平台报警                          ( 报警来源字典                   )
	"""
	alarm_source: String
	"""
	 处理时间                                                
	"""
	processing_time: Timestamptz
	"""
	 处理方式                                                ( 处警处理方式字典               )
	"""
	processing_method: String
	"""
	 处理描述                                                
	"""
	processing_description: String
	"""
	 处理人                                                  ( system_user表的user_id         )
	"""
	processor: String
	"""
	 处理状态                                                ( 处警处理状态字典               )
	"""
	processing_status: String
	"""
	 行驶记录仪速度                                          
	"""
	tachograph_speed: Numeric
	"""
	 GPS速度                                                 
	"""
	gps_speed: Numeric
	"""
	 最高速度                                                
	"""
	maximum_speed: Numeric
	"""
	 限速阀值                                                
	"""
	speed_limit_threshold: Numeric
	"""
	 空间数据类型point表示经度(longitude)和纬度(latitude)    
	"""
	coordinate: Point
	"""
	 位置描述                                                
	"""
	location_description: String
	"""
	 持续时间                                                
	"""
	duration: String
	"""
	 道路等级                                                ( 道路等级字典                   )
	"""
	road_grade: String
	"""
	 道路名称                                                
	"""
	road_name: String
	"""
	 进区域ID                                                
	"""
	area_id: String
	"""
	 处警ID                                                  
	"""
	alarm_deal_id: String
	"""
	 地区                                                    
	"""
	pid: String
	"""
	 记录时间                                                
	"""
	record_time: Timestamptz
	"""
	 监管人                                                  ( system_user表的user_id         )
	"""
	supervisor: String
	"""
	 管理部门是否监管                                        
	"""
	is_supervise: Boolean
	"""
	 管理部门监管时间                                        
	"""
	supervision_time: Timestamptz
	"""
	 监管备注                                                
	"""
	supervision_note: String
	"""
	 是否解析                                                
	"""
	is_resolve: Boolean
	"""
	 工地是否处理                                            
	"""
	is_construction_site_handle: Boolean
	"""
	 工地处理时间                                            
	"""
	construction_site_handle_time: Timestamptz
	"""
	 创建时间                                                
	"""
	created_at: Timestamptz!
	"""
	 创建人                                                  ( system_user表的user_id         )
	"""
	created_by: String!
	"""
	 修改时间                                                
	"""
	updated_at: Timestamptz
	"""
	 修改人                                                  ( system_user表的user_id         )
	"""
	updated_by: String
	"""
	 删除时间                                                
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                                  ( system_user表的user_id         )
	"""
	deleted_by: String
}
"""
aggregated selection of "vehicle_alarm_data"
"""
type VehicleAlarmDataAggregate {
	aggregate: VehicleAlarmDataAggregateFields
}
"""
aggregate fields of "vehicle_alarm_data"
"""
type VehicleAlarmDataAggregateFields {
	avg: VehicleAlarmDataAvgFields
	count: Int
	max: VehicleAlarmDataMaxFields
	min: VehicleAlarmDataMinFields
	stddev: VehicleAlarmDataStddevFields
	stddev_pop: VehicleAlarmDataStddevPopFields
	stddev_samp: VehicleAlarmDataStddevSampFields
	sum: VehicleAlarmDataSumFields
	var_pop: VehicleAlarmDataVarPopFields
	var_samp: VehicleAlarmDataVarSampFields
	variance: VehicleAlarmDataVarianceFields
}
"""
aggregate avg on columns of table "vehicle_alarm_data"
"""
type VehicleAlarmDataAvgFields {
	id: Bigint
	latest_alarm_position: Int
	tachograph_speed: Numeric
	gps_speed: Numeric
	maximum_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate max on columns of table "vehicle_alarm_data"
"""
type VehicleAlarmDataMaxFields {
	id: Bigint
	vehicle_alarm_data_id: String
	vehicle_id: String
	alarm_type: String
	alarm_start_time: Timestamptz
	alarm_end_time: Timestamptz
	alarm_end_position: String
	latest_alarm_time: Timestamptz
	latest_alarm_position: Int
	is_alarm_effective: Boolean
	is_alarm_over: Boolean
	is_cancel_alarm: Boolean
	alarm_source: String
	processing_time: Timestamptz
	processing_method: String
	processing_description: String
	processor: String
	processing_status: String
	tachograph_speed: Numeric
	gps_speed: Numeric
	maximum_speed: Numeric
	speed_limit_threshold: Numeric
	coordinate: Point
	location_description: String
	duration: String
	road_grade: String
	road_name: String
	area_id: String
	alarm_deal_id: String
	pid: String
	record_time: Timestamptz
	supervisor: String
	is_supervise: Boolean
	supervision_time: Timestamptz
	supervision_note: String
	is_resolve: Boolean
	is_construction_site_handle: Boolean
	construction_site_handle_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "vehicle_alarm_data"
"""
type VehicleAlarmDataMinFields {
	id: Bigint
	vehicle_alarm_data_id: String
	vehicle_id: String
	alarm_type: String
	alarm_start_time: Timestamptz
	alarm_end_time: Timestamptz
	alarm_end_position: String
	latest_alarm_time: Timestamptz
	latest_alarm_position: Int
	is_alarm_effective: Boolean
	is_alarm_over: Boolean
	is_cancel_alarm: Boolean
	alarm_source: String
	processing_time: Timestamptz
	processing_method: String
	processing_description: String
	processor: String
	processing_status: String
	tachograph_speed: Numeric
	gps_speed: Numeric
	maximum_speed: Numeric
	speed_limit_threshold: Numeric
	coordinate: Point
	location_description: String
	duration: String
	road_grade: String
	road_name: String
	area_id: String
	alarm_deal_id: String
	pid: String
	record_time: Timestamptz
	supervisor: String
	is_supervise: Boolean
	supervision_time: Timestamptz
	supervision_note: String
	is_resolve: Boolean
	is_construction_site_handle: Boolean
	construction_site_handle_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "vehicle_alarm_data"
"""
type VehicleAlarmDataStddevFields {
	id: Bigint
	latest_alarm_position: Int
	tachograph_speed: Numeric
	gps_speed: Numeric
	maximum_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate stddev_pop on columns of table "vehicle_alarm_data"
"""
type VehicleAlarmDataStddevPopFields {
	id: Bigint
	latest_alarm_position: Int
	tachograph_speed: Numeric
	gps_speed: Numeric
	maximum_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate stddev_samp on columns of table "vehicle_alarm_data"
"""
type VehicleAlarmDataStddevSampFields {
	id: Bigint
	latest_alarm_position: Int
	tachograph_speed: Numeric
	gps_speed: Numeric
	maximum_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate sum on columns of table "vehicle_alarm_data"
"""
type VehicleAlarmDataSumFields {
	id: Bigint
	latest_alarm_position: Int
	tachograph_speed: Numeric
	gps_speed: Numeric
	maximum_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate var_pop on columns of table "vehicle_alarm_data"
"""
type VehicleAlarmDataVarPopFields {
	id: Bigint
	latest_alarm_position: Int
	tachograph_speed: Numeric
	gps_speed: Numeric
	maximum_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate var_samp on columns of table "vehicle_alarm_data"
"""
type VehicleAlarmDataVarSampFields {
	id: Bigint
	latest_alarm_position: Int
	tachograph_speed: Numeric
	gps_speed: Numeric
	maximum_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate variance on columns of table "vehicle_alarm_data"
"""
type VehicleAlarmDataVarianceFields {
	id: Bigint
	latest_alarm_position: Int
	tachograph_speed: Numeric
	gps_speed: Numeric
	maximum_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
response of any mutation on the table "vehicle_alarm_data"
"""
type VehicleAlarmDataMutationResponse {
	affected_rows: Int!
	returning: [VehicleAlarmData!]!
}
"""
ordering options when selecting data from "vehicle_alarm_data"
"""
input VehicleAlarmDataOrderBy {
	id: OrderBy
	vehicle_alarm_data_id: OrderBy
	vehicle_id: OrderBy
	alarm_type: OrderBy
	alarm_start_time: OrderBy
	alarm_end_time: OrderBy
	alarm_end_position: OrderBy
	latest_alarm_time: OrderBy
	latest_alarm_position: OrderBy
	is_alarm_effective: OrderBy
	is_alarm_over: OrderBy
	is_cancel_alarm: OrderBy
	alarm_source: OrderBy
	processing_time: OrderBy
	processing_method: OrderBy
	processing_description: OrderBy
	processor: OrderBy
	processing_status: OrderBy
	tachograph_speed: OrderBy
	gps_speed: OrderBy
	maximum_speed: OrderBy
	speed_limit_threshold: OrderBy
	coordinate: OrderBy
	location_description: OrderBy
	duration: OrderBy
	road_grade: OrderBy
	road_name: OrderBy
	area_id: OrderBy
	alarm_deal_id: OrderBy
	pid: OrderBy
	record_time: OrderBy
	supervisor: OrderBy
	is_supervise: OrderBy
	supervision_time: OrderBy
	supervision_note: OrderBy
	is_resolve: OrderBy
	is_construction_site_handle: OrderBy
	construction_site_handle_time: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_alarm_data'.
"""
input VehicleAlarmDataBoolExp {
	_and: [VehicleAlarmDataBoolExp]
	_not: VehicleAlarmDataBoolExp
	_or: [VehicleAlarmDataBoolExp]
	id: BigintComparisonExp
	vehicle_alarm_data_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	alarm_type: StringComparisonExp
	alarm_start_time: TimestamptzComparisonExp
	alarm_end_time: TimestamptzComparisonExp
	alarm_end_position: StringComparisonExp
	latest_alarm_time: TimestamptzComparisonExp
	latest_alarm_position: IntComparisonExp
	is_alarm_effective: BooleanComparisonExp
	is_alarm_over: BooleanComparisonExp
	is_cancel_alarm: BooleanComparisonExp
	alarm_source: StringComparisonExp
	processing_time: TimestamptzComparisonExp
	processing_method: StringComparisonExp
	processing_description: StringComparisonExp
	processor: StringComparisonExp
	processing_status: StringComparisonExp
	tachograph_speed: NumericComparisonExp
	gps_speed: NumericComparisonExp
	maximum_speed: NumericComparisonExp
	speed_limit_threshold: NumericComparisonExp
	coordinate: PointComparisonExp
	location_description: StringComparisonExp
	duration: StringComparisonExp
	road_grade: StringComparisonExp
	road_name: StringComparisonExp
	area_id: StringComparisonExp
	alarm_deal_id: StringComparisonExp
	pid: StringComparisonExp
	record_time: TimestamptzComparisonExp
	supervisor: StringComparisonExp
	is_supervise: BooleanComparisonExp
	supervision_time: TimestamptzComparisonExp
	supervision_note: StringComparisonExp
	is_resolve: BooleanComparisonExp
	is_construction_site_handle: BooleanComparisonExp
	construction_site_handle_time: TimestamptzComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "vehicle_alarm_data"
"""
input VehicleAlarmDataInsertInput {
	vehicle_id: String
	alarm_type: String
	alarm_start_time: Timestamptz
	alarm_end_time: Timestamptz
	alarm_end_position: String
	latest_alarm_time: Timestamptz
	latest_alarm_position: Int
	is_alarm_effective: Boolean
	is_alarm_over: Boolean
	is_cancel_alarm: Boolean
	alarm_source: String
	processing_time: Timestamptz
	processing_method: String
	processing_description: String
	processor: String
	processing_status: String
	tachograph_speed: Numeric
	gps_speed: Numeric
	maximum_speed: Numeric
	speed_limit_threshold: Numeric
	coordinate: Point
	location_description: String
	duration: String
	road_grade: String
	road_name: String
	area_id: String
	alarm_deal_id: String
	pid: String
	record_time: Timestamptz
	supervisor: String
	is_supervise: Boolean
	supervision_time: Timestamptz
	supervision_note: String
	is_resolve: Boolean
	is_construction_site_handle: Boolean
	construction_site_handle_time: Timestamptz
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "vehicle_alarm_data"
"""
input VehicleAlarmDataIncInput {
	id: Bigint
	latest_alarm_position: Int
	tachograph_speed: Numeric
	gps_speed: Numeric
	maximum_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
input type for updating data in table "vehicle_alarm_data"
"""
input VehicleAlarmDataSetInput {
	id: Bigint
	vehicle_alarm_data_id: String
	vehicle_id: String
	alarm_type: String
	alarm_start_time: Timestamptz
	alarm_end_time: Timestamptz
	alarm_end_position: String
	latest_alarm_time: Timestamptz
	latest_alarm_position: Int
	is_alarm_effective: Boolean
	is_alarm_over: Boolean
	is_cancel_alarm: Boolean
	alarm_source: String
	processing_time: Timestamptz
	processing_method: String
	processing_description: String
	processor: String
	processing_status: String
	tachograph_speed: Numeric
	gps_speed: Numeric
	maximum_speed: Numeric
	speed_limit_threshold: Numeric
	coordinate: Point
	location_description: String
	duration: String
	road_grade: String
	road_name: String
	area_id: String
	alarm_deal_id: String
	pid: String
	record_time: Timestamptz
	supervisor: String
	is_supervise: Boolean
	supervision_time: Timestamptz
	supervision_note: String
	is_resolve: Boolean
	is_construction_site_handle: Boolean
	construction_site_handle_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum VehicleAlarmDataSelectColumn {
	"""
	 按指定方法生成                                          ( 主键                               )
	"""
	id
	"""
	 报警数据外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                           )
	"""
	vehicle_alarm_data_id
	"""
	 车辆ID                                                  ( 引用vehicle_info表的vehicle_id )
	"""
	vehicle_id
	"""
	 报警类型                                                ( 报警类型字典                   )
	"""
	alarm_type
	"""
	 报警开始时间                                            
	"""
	alarm_start_time
	"""
	 报警结束时间                                            
	"""
	alarm_end_time
	"""
	 报警结束位置                                            
	"""
	alarm_end_position
	"""
	 最新报警时间                                            
	"""
	latest_alarm_time
	"""
	 最新报警位置                                            
	"""
	latest_alarm_position
	"""
	 报警是否有效                                            
	"""
	is_alarm_effective
	"""
	 报警是否结束                                            
	"""
	is_alarm_over
	"""
	 是否取消报警                                            
	"""
	is_cancel_alarm
	"""
	 报警来源:1.终端报警 2.平台报警                          ( 报警来源字典                   )
	"""
	alarm_source
	"""
	 处理时间                                                
	"""
	processing_time
	"""
	 处理方式                                                ( 处警处理方式字典               )
	"""
	processing_method
	"""
	 处理描述                                                
	"""
	processing_description
	"""
	 处理人                                                  ( system_user表的user_id         )
	"""
	processor
	"""
	 处理状态                                                ( 处警处理状态字典               )
	"""
	processing_status
	"""
	 行驶记录仪速度                                          
	"""
	tachograph_speed
	"""
	 GPS速度                                                 
	"""
	gps_speed
	"""
	 最高速度                                                
	"""
	maximum_speed
	"""
	 限速阀值                                                
	"""
	speed_limit_threshold
	"""
	 空间数据类型point表示经度(longitude)和纬度(latitude)    
	"""
	coordinate
	"""
	 位置描述                                                
	"""
	location_description
	"""
	 持续时间                                                
	"""
	duration
	"""
	 道路等级                                                ( 道路等级字典                   )
	"""
	road_grade
	"""
	 道路名称                                                
	"""
	road_name
	"""
	 进区域ID                                                
	"""
	area_id
	"""
	 处警ID                                                  
	"""
	alarm_deal_id
	"""
	 地区                                                    
	"""
	pid
	"""
	 记录时间                                                
	"""
	record_time
	"""
	 监管人                                                  ( system_user表的user_id         )
	"""
	supervisor
	"""
	 管理部门是否监管                                        
	"""
	is_supervise
	"""
	 管理部门监管时间                                        
	"""
	supervision_time
	"""
	 监管备注                                                
	"""
	supervision_note
	"""
	 是否解析                                                
	"""
	is_resolve
	"""
	 工地是否处理                                            
	"""
	is_construction_site_handle
	"""
	 工地处理时间                                            
	"""
	construction_site_handle_time
	"""
	 创建时间                                                
	"""
	created_at
	"""
	 创建人                                                  ( system_user表的user_id         )
	"""
	created_by
	"""
	 修改时间                                                
	"""
	updated_at
	"""
	 修改人                                                  ( system_user表的user_id         )
	"""
	updated_by
	"""
	 删除时间                                                
	"""
	deleted_at
	"""
	 删除人                                                  ( system_user表的user_id         )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	vehicle_alarm_data(distinct_on: [VehicleAlarmDataSelectColumn!], limit: Int, offset: Int, order_by: [VehicleAlarmDataOrderBy!], where: VehicleAlarmDataBoolExp): [VehicleAlarmData!]!
	"""
	聚合查询
	"""
	vehicle_alarm_data_aggregate(distinct_on: [VehicleAlarmDataSelectColumn!], limit: Int, offset: Int, order_by: [VehicleAlarmDataOrderBy!], where: VehicleAlarmDataBoolExp): VehicleAlarmDataAggregate!
	"""
	主键查询
	"""
	vehicle_alarm_data_by_pk(id: Bigint!): VehicleAlarmData!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_vehicle_alarm_data(where: VehicleAlarmDataBoolExp!): VehicleAlarmDataMutationResponse
	"""
	根据主键删除记录
	"""
	delete_vehicle_alarm_data_by_pk(id: Bigint!): VehicleAlarmData
	"""
	插入
	"""
	insert_vehicle_alarm_data(objects: [VehicleAlarmDataInsertInput!]!): VehicleAlarmDataMutationResponse
	"""
	插入一条记录
	"""
	insert_vehicle_alarm_data_one(objects: VehicleAlarmDataInsertInput!): VehicleAlarmData
	"""
	更新
	"""
	update_vehicle_alarm_data(_inc: VehicleAlarmDataIncInput, _set: VehicleAlarmDataSetInput, where: VehicleAlarmDataBoolExp!): VehicleAlarmDataMutationResponse
	"""
	更新
	"""
	update_vehicle_alarm_data_by_pk(_inc: VehicleAlarmDataIncInput, _set: VehicleAlarmDataSetInput, id: Bigint!): VehicleAlarmData
}
`, BuiltIn: false},
	{Name: "graph/graphqls/video_platform_alarm_type.graphqls", Input: `"""
视频平台报警类型字典
"""
type VideoPlatformAlarmType {
	"""
	 按指定方法生成                                  ( 主键                                                      )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                  )
	"""
	video_platform_alarm_type_id: String!
	"""
	 报警数据表id                                    ( vehicle_alarm_data  报警数据表的vehicle_alarm_data_id )
	"""
	vehicle_alarm_data_id: Int
	"""
	 报警类型                                        
	"""
	alarm_type: String
	"""
	 报警来源                                        
	"""
	alarm_source: String
	"""
	 报警分类                                        ( Adas报警字典                                          )
	"""
	alarm_classify: String
	"""
	 报警代码                                        
	"""
	alarm_code: String
	"""
	 是否删除                                        
	"""
	is_deleted: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id                                )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id                                )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id                                )
	"""
	deleted_by: String
}
"""
aggregated selection of "video_platform_alarm_type"
"""
type VideoPlatformAlarmTypeAggregate {
	aggregate: VideoPlatformAlarmTypeAggregateFields
}
"""
aggregate fields of "video_platform_alarm_type"
"""
type VideoPlatformAlarmTypeAggregateFields {
	avg: VideoPlatformAlarmTypeAvgFields
	count: Int
	max: VideoPlatformAlarmTypeMaxFields
	min: VideoPlatformAlarmTypeMinFields
	stddev: VideoPlatformAlarmTypeStddevFields
	stddev_pop: VideoPlatformAlarmTypeStddevPopFields
	stddev_samp: VideoPlatformAlarmTypeStddevSampFields
	sum: VideoPlatformAlarmTypeSumFields
	var_pop: VideoPlatformAlarmTypeVarPopFields
	var_samp: VideoPlatformAlarmTypeVarSampFields
	variance: VideoPlatformAlarmTypeVarianceFields
}
"""
aggregate avg on columns of table "video_platform_alarm_type"
"""
type VideoPlatformAlarmTypeAvgFields {
	id: Bigint
	vehicle_alarm_data_id: Int
}
"""
aggregate max on columns of table "video_platform_alarm_type"
"""
type VideoPlatformAlarmTypeMaxFields {
	id: Bigint
	video_platform_alarm_type_id: String
	vehicle_alarm_data_id: Int
	alarm_type: String
	alarm_source: String
	alarm_classify: String
	alarm_code: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "video_platform_alarm_type"
"""
type VideoPlatformAlarmTypeMinFields {
	id: Bigint
	video_platform_alarm_type_id: String
	vehicle_alarm_data_id: Int
	alarm_type: String
	alarm_source: String
	alarm_classify: String
	alarm_code: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "video_platform_alarm_type"
"""
type VideoPlatformAlarmTypeStddevFields {
	id: Bigint
	vehicle_alarm_data_id: Int
}
"""
aggregate stddev_pop on columns of table "video_platform_alarm_type"
"""
type VideoPlatformAlarmTypeStddevPopFields {
	id: Bigint
	vehicle_alarm_data_id: Int
}
"""
aggregate stddev_samp on columns of table "video_platform_alarm_type"
"""
type VideoPlatformAlarmTypeStddevSampFields {
	id: Bigint
	vehicle_alarm_data_id: Int
}
"""
aggregate sum on columns of table "video_platform_alarm_type"
"""
type VideoPlatformAlarmTypeSumFields {
	id: Bigint
	vehicle_alarm_data_id: Int
}
"""
aggregate var_pop on columns of table "video_platform_alarm_type"
"""
type VideoPlatformAlarmTypeVarPopFields {
	id: Bigint
	vehicle_alarm_data_id: Int
}
"""
aggregate var_samp on columns of table "video_platform_alarm_type"
"""
type VideoPlatformAlarmTypeVarSampFields {
	id: Bigint
	vehicle_alarm_data_id: Int
}
"""
aggregate variance on columns of table "video_platform_alarm_type"
"""
type VideoPlatformAlarmTypeVarianceFields {
	id: Bigint
	vehicle_alarm_data_id: Int
}
"""
response of any mutation on the table "video_platform_alarm_type"
"""
type VideoPlatformAlarmTypeMutationResponse {
	affected_rows: Int!
	returning: [VideoPlatformAlarmType!]!
}
"""
ordering options when selecting data from "video_platform_alarm_type"
"""
input VideoPlatformAlarmTypeOrderBy {
	id: OrderBy
	video_platform_alarm_type_id: OrderBy
	vehicle_alarm_data_id: OrderBy
	alarm_type: OrderBy
	alarm_source: OrderBy
	alarm_classify: OrderBy
	alarm_code: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'video_platform_alarm_type'.
"""
input VideoPlatformAlarmTypeBoolExp {
	_and: [VideoPlatformAlarmTypeBoolExp]
	_not: VideoPlatformAlarmTypeBoolExp
	_or: [VideoPlatformAlarmTypeBoolExp]
	id: BigintComparisonExp
	video_platform_alarm_type_id: StringComparisonExp
	vehicle_alarm_data_id: IntComparisonExp
	alarm_type: StringComparisonExp
	alarm_source: StringComparisonExp
	alarm_classify: StringComparisonExp
	alarm_code: StringComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "video_platform_alarm_type"
"""
input VideoPlatformAlarmTypeInsertInput {
	vehicle_alarm_data_id: Int
	alarm_type: String
	alarm_source: String
	alarm_classify: String
	alarm_code: String
	is_deleted: Boolean
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "video_platform_alarm_type"
"""
input VideoPlatformAlarmTypeIncInput {
	id: Bigint
	vehicle_alarm_data_id: Int
}
"""
input type for updating data in table "video_platform_alarm_type"
"""
input VideoPlatformAlarmTypeSetInput {
	id: Bigint
	video_platform_alarm_type_id: String
	vehicle_alarm_data_id: Int
	alarm_type: String
	alarm_source: String
	alarm_classify: String
	alarm_code: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum VideoPlatformAlarmTypeSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                                                      )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                  )
	"""
	video_platform_alarm_type_id
	"""
	 报警数据表id                                    ( vehicle_alarm_data  报警数据表的vehicle_alarm_data_id )
	"""
	vehicle_alarm_data_id
	"""
	 报警类型                                        
	"""
	alarm_type
	"""
	 报警来源                                        
	"""
	alarm_source
	"""
	 报警分类                                        ( Adas报警字典                                          )
	"""
	alarm_classify
	"""
	 报警代码                                        
	"""
	alarm_code
	"""
	 是否删除                                        
	"""
	is_deleted
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id                                )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id                                )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id                                )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	video_platform_alarm_type(distinct_on: [VideoPlatformAlarmTypeSelectColumn!], limit: Int, offset: Int, order_by: [VideoPlatformAlarmTypeOrderBy!], where: VideoPlatformAlarmTypeBoolExp): [VideoPlatformAlarmType!]!
	"""
	聚合查询
	"""
	video_platform_alarm_type_aggregate(distinct_on: [VideoPlatformAlarmTypeSelectColumn!], limit: Int, offset: Int, order_by: [VideoPlatformAlarmTypeOrderBy!], where: VideoPlatformAlarmTypeBoolExp): VideoPlatformAlarmTypeAggregate!
	"""
	主键查询
	"""
	video_platform_alarm_type_by_pk(id: Bigint!): VideoPlatformAlarmType!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_video_platform_alarm_type(where: VideoPlatformAlarmTypeBoolExp!): VideoPlatformAlarmTypeMutationResponse
	"""
	根据主键删除记录
	"""
	delete_video_platform_alarm_type_by_pk(id: Bigint!): VideoPlatformAlarmType
	"""
	插入
	"""
	insert_video_platform_alarm_type(objects: [VideoPlatformAlarmTypeInsertInput!]!): VideoPlatformAlarmTypeMutationResponse
	"""
	插入一条记录
	"""
	insert_video_platform_alarm_type_one(objects: VideoPlatformAlarmTypeInsertInput!): VideoPlatformAlarmType
	"""
	更新
	"""
	update_video_platform_alarm_type(_inc: VideoPlatformAlarmTypeIncInput, _set: VideoPlatformAlarmTypeSetInput, where: VideoPlatformAlarmTypeBoolExp!): VideoPlatformAlarmTypeMutationResponse
	"""
	更新
	"""
	update_video_platform_alarm_type_by_pk(_inc: VideoPlatformAlarmTypeIncInput, _set: VideoPlatformAlarmTypeSetInput, id: Bigint!): VideoPlatformAlarmType
}
`, BuiltIn: false},
	{Name: "graph/graphqls/voice_alarm_record.graphqls", Input: `"""
语音报警记录
"""
type VoiceAlarmRecord {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	vioce_alarm_record_id: String!
	"""
	 vehicle_info 车辆信息表 的vehicle_id        
	"""
	vehicle_id: String!
	"""
	 报警时间                                        
	"""
	alarm_time: Timestamptz
	"""
	 报警类型                                        
	"""
	alarm_type: String
	"""
	 提醒时间                                        
	"""
	remind_time: Timestamptz
	"""
	 提醒内容                                        
	"""
	remind_content: String
	"""
	 录入人                                          ( system_user表的user_id )
	"""
	input_person: String
	"""
	 录入时间                                        
	"""
	input_time: Timestamptz
	"""
	 是否成功                                        
	"""
	is_success: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "voice_alarm_record"
"""
type VoiceAlarmRecordAggregate {
	aggregate: VoiceAlarmRecordAggregateFields
}
"""
aggregate fields of "voice_alarm_record"
"""
type VoiceAlarmRecordAggregateFields {
	avg: VoiceAlarmRecordAvgFields
	count: Int
	max: VoiceAlarmRecordMaxFields
	min: VoiceAlarmRecordMinFields
	stddev: VoiceAlarmRecordStddevFields
	stddev_pop: VoiceAlarmRecordStddevPopFields
	stddev_samp: VoiceAlarmRecordStddevSampFields
	sum: VoiceAlarmRecordSumFields
	var_pop: VoiceAlarmRecordVarPopFields
	var_samp: VoiceAlarmRecordVarSampFields
	variance: VoiceAlarmRecordVarianceFields
}
"""
aggregate avg on columns of table "voice_alarm_record"
"""
type VoiceAlarmRecordAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "voice_alarm_record"
"""
type VoiceAlarmRecordMaxFields {
	id: Bigint
	vioce_alarm_record_id: String
	vehicle_id: String
	alarm_time: Timestamptz
	alarm_type: String
	remind_time: Timestamptz
	remind_content: String
	input_person: String
	input_time: Timestamptz
	is_success: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "voice_alarm_record"
"""
type VoiceAlarmRecordMinFields {
	id: Bigint
	vioce_alarm_record_id: String
	vehicle_id: String
	alarm_time: Timestamptz
	alarm_type: String
	remind_time: Timestamptz
	remind_content: String
	input_person: String
	input_time: Timestamptz
	is_success: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "voice_alarm_record"
"""
type VoiceAlarmRecordStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "voice_alarm_record"
"""
type VoiceAlarmRecordStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "voice_alarm_record"
"""
type VoiceAlarmRecordStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "voice_alarm_record"
"""
type VoiceAlarmRecordSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "voice_alarm_record"
"""
type VoiceAlarmRecordVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "voice_alarm_record"
"""
type VoiceAlarmRecordVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "voice_alarm_record"
"""
type VoiceAlarmRecordVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "voice_alarm_record"
"""
type VoiceAlarmRecordMutationResponse {
	affected_rows: Int!
	returning: [VoiceAlarmRecord!]!
}
"""
ordering options when selecting data from "voice_alarm_record"
"""
input VoiceAlarmRecordOrderBy {
	id: OrderBy
	vioce_alarm_record_id: OrderBy
	vehicle_id: OrderBy
	alarm_time: OrderBy
	alarm_type: OrderBy
	remind_time: OrderBy
	remind_content: OrderBy
	input_person: OrderBy
	input_time: OrderBy
	is_success: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'voice_alarm_record'.
"""
input VoiceAlarmRecordBoolExp {
	_and: [VoiceAlarmRecordBoolExp]
	_not: VoiceAlarmRecordBoolExp
	_or: [VoiceAlarmRecordBoolExp]
	id: BigintComparisonExp
	vioce_alarm_record_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	alarm_time: TimestamptzComparisonExp
	alarm_type: StringComparisonExp
	remind_time: TimestamptzComparisonExp
	remind_content: StringComparisonExp
	input_person: StringComparisonExp
	input_time: TimestamptzComparisonExp
	is_success: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "voice_alarm_record"
"""
input VoiceAlarmRecordInsertInput {
	alarm_time: Timestamptz
	alarm_type: String
	remind_time: Timestamptz
	remind_content: String
	input_person: String
	input_time: Timestamptz
	is_success: Boolean
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "voice_alarm_record"
"""
input VoiceAlarmRecordIncInput {
	id: Bigint
}
"""
input type for updating data in table "voice_alarm_record"
"""
input VoiceAlarmRecordSetInput {
	id: Bigint
	vioce_alarm_record_id: String
	vehicle_id: String
	alarm_time: Timestamptz
	alarm_type: String
	remind_time: Timestamptz
	remind_content: String
	input_person: String
	input_time: Timestamptz
	is_success: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum VoiceAlarmRecordSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	vioce_alarm_record_id
	"""
	 vehicle_info 车辆信息表 的vehicle_id        
	"""
	vehicle_id
	"""
	 报警时间                                        
	"""
	alarm_time
	"""
	 报警类型                                        
	"""
	alarm_type
	"""
	 提醒时间                                        
	"""
	remind_time
	"""
	 提醒内容                                        
	"""
	remind_content
	"""
	 录入人                                          ( system_user表的user_id )
	"""
	input_person
	"""
	 录入时间                                        
	"""
	input_time
	"""
	 是否成功                                        
	"""
	is_success
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	voice_alarm_record(distinct_on: [VoiceAlarmRecordSelectColumn!], limit: Int, offset: Int, order_by: [VoiceAlarmRecordOrderBy!], where: VoiceAlarmRecordBoolExp): [VoiceAlarmRecord!]!
	"""
	聚合查询
	"""
	voice_alarm_record_aggregate(distinct_on: [VoiceAlarmRecordSelectColumn!], limit: Int, offset: Int, order_by: [VoiceAlarmRecordOrderBy!], where: VoiceAlarmRecordBoolExp): VoiceAlarmRecordAggregate!
	"""
	主键查询
	"""
	voice_alarm_record_by_pk(id: Bigint!): VoiceAlarmRecord!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_voice_alarm_record(where: VoiceAlarmRecordBoolExp!): VoiceAlarmRecordMutationResponse
	"""
	根据主键删除记录
	"""
	delete_voice_alarm_record_by_pk(id: Bigint!): VoiceAlarmRecord
	"""
	插入
	"""
	insert_voice_alarm_record(objects: [VoiceAlarmRecordInsertInput!]!): VoiceAlarmRecordMutationResponse
	"""
	插入一条记录
	"""
	insert_voice_alarm_record_one(objects: VoiceAlarmRecordInsertInput!): VoiceAlarmRecord
	"""
	更新
	"""
	update_voice_alarm_record(_inc: VoiceAlarmRecordIncInput, _set: VoiceAlarmRecordSetInput, where: VoiceAlarmRecordBoolExp!): VoiceAlarmRecordMutationResponse
	"""
	更新
	"""
	update_voice_alarm_record_by_pk(_inc: VoiceAlarmRecordIncInput, _set: VoiceAlarmRecordSetInput, id: Bigint!): VoiceAlarmRecord
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_alarm_processing_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AlarmProcessingRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNAlarmProcessingRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_alarm_processing_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_alarm_supervision_picture_upload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AlarmSupervisionPictureUploadBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNAlarmSupervisionPictureUploadBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_alarm_supervision_picture_upload_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_district_alarm_content_push_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DistrictAlarmContentPushBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDistrictAlarmContentPushBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_district_alarm_content_push_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_alarm_send_police_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseAlarmSendPoliceBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEnterpriseAlarmSendPoliceBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_alarm_send_police_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_offline_alarm_registration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OfflineAlarmRegistrationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNOfflineAlarmRegistrationBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_offline_alarm_registration_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_alarm_data_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleAlarmDataBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVehicleAlarmDataBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_alarm_data_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_video_platform_alarm_type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VideoPlatformAlarmTypeBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVideoPlatformAlarmTypeBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_video_platform_alarm_type_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_voice_alarm_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VoiceAlarmRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVoiceAlarmRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_voice_alarm_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_alarm_processing_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AlarmProcessingRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNAlarmProcessingRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_alarm_processing_record_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AlarmProcessingRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNAlarmProcessingRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_alarm_supervision_picture_upload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AlarmSupervisionPictureUploadInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNAlarmSupervisionPictureUploadInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_alarm_supervision_picture_upload_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AlarmSupervisionPictureUploadInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNAlarmSupervisionPictureUploadInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_district_alarm_content_push_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DistrictAlarmContentPushInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDistrictAlarmContentPushInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_district_alarm_content_push_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DistrictAlarmContentPushInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDistrictAlarmContentPushInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_alarm_send_police_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EnterpriseAlarmSendPoliceInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseAlarmSendPoliceInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_alarm_send_police_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseAlarmSendPoliceInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseAlarmSendPoliceInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_offline_alarm_registration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.OfflineAlarmRegistrationInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNOfflineAlarmRegistrationInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_offline_alarm_registration_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OfflineAlarmRegistrationInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNOfflineAlarmRegistrationInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_alarm_data_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleAlarmDataInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleAlarmDataInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_alarm_data_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleAlarmDataInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleAlarmDataInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_video_platform_alarm_type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VideoPlatformAlarmTypeInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVideoPlatformAlarmTypeInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_video_platform_alarm_type_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VideoPlatformAlarmTypeInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVideoPlatformAlarmTypeInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_voice_alarm_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VoiceAlarmRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVoiceAlarmRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_voice_alarm_record_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VoiceAlarmRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVoiceAlarmRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_update_alarm_processing_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AlarmProcessingRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOAlarmProcessingRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.AlarmProcessingRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOAlarmProcessingRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.AlarmProcessingRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNAlarmProcessingRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_alarm_processing_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AlarmProcessingRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOAlarmProcessingRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.AlarmProcessingRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOAlarmProcessingRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_alarm_supervision_picture_upload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AlarmSupervisionPictureUploadIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOAlarmSupervisionPictureUploadIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.AlarmSupervisionPictureUploadSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOAlarmSupervisionPictureUploadSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.AlarmSupervisionPictureUploadBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNAlarmSupervisionPictureUploadBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_alarm_supervision_picture_upload_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AlarmSupervisionPictureUploadIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOAlarmSupervisionPictureUploadIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.AlarmSupervisionPictureUploadSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOAlarmSupervisionPictureUploadSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_district_alarm_content_push_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DistrictAlarmContentPushIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODistrictAlarmContentPushIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DistrictAlarmContentPushSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODistrictAlarmContentPushSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DistrictAlarmContentPushBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDistrictAlarmContentPushBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_district_alarm_content_push_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DistrictAlarmContentPushIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODistrictAlarmContentPushIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DistrictAlarmContentPushSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODistrictAlarmContentPushSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_alarm_send_police_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseAlarmSendPoliceIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseAlarmSendPoliceIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseAlarmSendPoliceSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseAlarmSendPoliceSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterpriseAlarmSendPoliceBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEnterpriseAlarmSendPoliceBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_alarm_send_police_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseAlarmSendPoliceIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseAlarmSendPoliceIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseAlarmSendPoliceSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseAlarmSendPoliceSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_offline_alarm_registration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.OfflineAlarmRegistrationIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOOfflineAlarmRegistrationIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.OfflineAlarmRegistrationSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOOfflineAlarmRegistrationSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.OfflineAlarmRegistrationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNOfflineAlarmRegistrationBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_offline_alarm_registration_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.OfflineAlarmRegistrationIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOOfflineAlarmRegistrationIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.OfflineAlarmRegistrationSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOOfflineAlarmRegistrationSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_alarm_data_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleAlarmDataIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleAlarmDataIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleAlarmDataSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleAlarmDataSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleAlarmDataBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVehicleAlarmDataBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_alarm_data_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleAlarmDataIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleAlarmDataIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleAlarmDataSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleAlarmDataSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_video_platform_alarm_type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VideoPlatformAlarmTypeIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVideoPlatformAlarmTypeIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VideoPlatformAlarmTypeSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVideoPlatformAlarmTypeSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VideoPlatformAlarmTypeBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVideoPlatformAlarmTypeBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_video_platform_alarm_type_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VideoPlatformAlarmTypeIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVideoPlatformAlarmTypeIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VideoPlatformAlarmTypeSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVideoPlatformAlarmTypeSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_voice_alarm_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VoiceAlarmRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVoiceAlarmRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VoiceAlarmRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVoiceAlarmRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VoiceAlarmRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVoiceAlarmRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_voice_alarm_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VoiceAlarmRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVoiceAlarmRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VoiceAlarmRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVoiceAlarmRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_alarm_processing_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AlarmProcessingRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOAlarmProcessingRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AlarmProcessingRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOAlarmProcessingRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AlarmProcessingRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOAlarmProcessingRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_alarm_processing_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AlarmProcessingRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOAlarmProcessingRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AlarmProcessingRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOAlarmProcessingRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AlarmProcessingRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOAlarmProcessingRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_alarm_processing_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_alarm_supervision_picture_upload_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AlarmSupervisionPictureUploadSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOAlarmSupervisionPictureUploadSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AlarmSupervisionPictureUploadOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOAlarmSupervisionPictureUploadOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AlarmSupervisionPictureUploadBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOAlarmSupervisionPictureUploadBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_alarm_supervision_picture_upload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AlarmSupervisionPictureUploadSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOAlarmSupervisionPictureUploadSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AlarmSupervisionPictureUploadOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOAlarmSupervisionPictureUploadOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AlarmSupervisionPictureUploadBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOAlarmSupervisionPictureUploadBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_alarm_supervision_picture_upload_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_district_alarm_content_push_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DistrictAlarmContentPushSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODistrictAlarmContentPushSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DistrictAlarmContentPushOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODistrictAlarmContentPushOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DistrictAlarmContentPushBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODistrictAlarmContentPushBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_district_alarm_content_push_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DistrictAlarmContentPushSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODistrictAlarmContentPushSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DistrictAlarmContentPushOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODistrictAlarmContentPushOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DistrictAlarmContentPushBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODistrictAlarmContentPushBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_district_alarm_content_push_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_alarm_send_police_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseAlarmSendPoliceSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseAlarmSendPoliceSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseAlarmSendPoliceOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseAlarmSendPoliceOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseAlarmSendPoliceBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseAlarmSendPoliceBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_alarm_send_police_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseAlarmSendPoliceSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseAlarmSendPoliceSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseAlarmSendPoliceOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseAlarmSendPoliceOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseAlarmSendPoliceBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseAlarmSendPoliceBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_alarm_send_police_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_offline_alarm_registration_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.OfflineAlarmRegistrationSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOOfflineAlarmRegistrationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.OfflineAlarmRegistrationOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOOfflineAlarmRegistrationOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.OfflineAlarmRegistrationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOOfflineAlarmRegistrationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_offline_alarm_registration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.OfflineAlarmRegistrationSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOOfflineAlarmRegistrationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.OfflineAlarmRegistrationOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOOfflineAlarmRegistrationOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.OfflineAlarmRegistrationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOOfflineAlarmRegistrationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_offline_alarm_registration_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_alarm_data_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleAlarmDataSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleAlarmDataSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleAlarmDataOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleAlarmDataOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleAlarmDataBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleAlarmDataBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_alarm_data_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleAlarmDataSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleAlarmDataSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleAlarmDataOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleAlarmDataOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleAlarmDataBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleAlarmDataBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_alarm_data_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_video_platform_alarm_type_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VideoPlatformAlarmTypeSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVideoPlatformAlarmTypeSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VideoPlatformAlarmTypeOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVideoPlatformAlarmTypeOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VideoPlatformAlarmTypeBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVideoPlatformAlarmTypeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_video_platform_alarm_type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VideoPlatformAlarmTypeSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVideoPlatformAlarmTypeSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VideoPlatformAlarmTypeOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVideoPlatformAlarmTypeOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VideoPlatformAlarmTypeBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVideoPlatformAlarmTypeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_video_platform_alarm_type_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_voice_alarm_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VoiceAlarmRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVoiceAlarmRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VoiceAlarmRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVoiceAlarmRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VoiceAlarmRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVoiceAlarmRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_voice_alarm_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VoiceAlarmRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVoiceAlarmRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VoiceAlarmRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVoiceAlarmRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VoiceAlarmRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVoiceAlarmRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_voice_alarm_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AlarmProcessingRecord_id(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_processing_content(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_processing_time(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_processing_type(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_operation_user(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_is_sms_push(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSmsPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_is_notify(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNotify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_is_announce(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAnnounce, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_is_app_push(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAppPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_notify_content(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotifyContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_announce_content(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnounceContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_app_push_content(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppPushContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_disposal_result(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecord_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordAggregateFields)
	fc.Result = res
	return ec.marshalOAlarmProcessingRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordAvgFields)
	fc.Result = res
	return ec.marshalOAlarmProcessingRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordMaxFields)
	fc.Result = res
	return ec.marshalOAlarmProcessingRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordMinFields)
	fc.Result = res
	return ec.marshalOAlarmProcessingRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordStddevFields)
	fc.Result = res
	return ec.marshalOAlarmProcessingRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordStddevPopFields)
	fc.Result = res
	return ec.marshalOAlarmProcessingRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordStddevSampFields)
	fc.Result = res
	return ec.marshalOAlarmProcessingRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordSumFields)
	fc.Result = res
	return ec.marshalOAlarmProcessingRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordVarPopFields)
	fc.Result = res
	return ec.marshalOAlarmProcessingRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordVarSampFields)
	fc.Result = res
	return ec.marshalOAlarmProcessingRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordVarianceFields)
	fc.Result = res
	return ec.marshalOAlarmProcessingRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordAvgFields_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordAvgFields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordAvgFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_processing_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_processing_time(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_operation_user(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_is_sms_push(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSmsPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_is_notify(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNotify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_is_announce(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAnnounce, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_is_app_push(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAppPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_notify_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotifyContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_announce_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnounceContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_app_push_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppPushContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_disposal_result(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_processing_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_processing_time(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_operation_user(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_is_sms_push(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSmsPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_is_notify(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNotify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_is_announce(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAnnounce, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_is_app_push(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAppPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_notify_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotifyContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_announce_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnounceContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_app_push_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppPushContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_disposal_result(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.AlarmProcessingRecord)
	fc.Result = res
	return ec.marshalNAlarmProcessingRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmProcessingRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordStddevFields_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordStddevFields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordStddevFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordStddevPopFields_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordStddevPopFields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordStddevPopFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordStddevSampFields_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordStddevSampFields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordStddevSampFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordSumFields_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordSumFields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordSumFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordVarPopFields_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordVarPopFields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordVarPopFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordVarSampFields_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordVarSampFields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordVarSampFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordVarianceFields_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordVarianceFields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmProcessingRecordVarianceFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmProcessingRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_id(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_camera_id(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_photo_condition(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoCondition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_update_time(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_monitoring_pic_name(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_monitoring_pic_address(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_monitoring_pic_upload_time(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicUploadTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_imel(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_sim_number(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUpload_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUpload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadAggregateFields)
	fc.Result = res
	return ec.marshalOAlarmSupervisionPictureUploadAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadAvgFields)
	fc.Result = res
	return ec.marshalOAlarmSupervisionPictureUploadAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadMaxFields)
	fc.Result = res
	return ec.marshalOAlarmSupervisionPictureUploadMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadMinFields)
	fc.Result = res
	return ec.marshalOAlarmSupervisionPictureUploadMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadStddevFields)
	fc.Result = res
	return ec.marshalOAlarmSupervisionPictureUploadStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadStddevPopFields)
	fc.Result = res
	return ec.marshalOAlarmSupervisionPictureUploadStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadStddevSampFields)
	fc.Result = res
	return ec.marshalOAlarmSupervisionPictureUploadStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadSumFields)
	fc.Result = res
	return ec.marshalOAlarmSupervisionPictureUploadSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadVarPopFields)
	fc.Result = res
	return ec.marshalOAlarmSupervisionPictureUploadVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadVarSampFields)
	fc.Result = res
	return ec.marshalOAlarmSupervisionPictureUploadVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadVarianceFields)
	fc.Result = res
	return ec.marshalOAlarmSupervisionPictureUploadVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadAvgFields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_photo_condition(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoCondition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_update_time(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_monitoring_pic_name(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_monitoring_pic_address(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_monitoring_pic_upload_time(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicUploadTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_imel(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_photo_condition(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoCondition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_update_time(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_monitoring_pic_name(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_monitoring_pic_address(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_monitoring_pic_upload_time(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicUploadTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_imel(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.AlarmSupervisionPictureUpload)
	fc.Result = res
	return ec.marshalNAlarmSupervisionPictureUpload2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmSupervisionPictureUploadᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadStddevFields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadStddevPopFields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadStddevSampFields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadSumFields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadVarPopFields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadVarSampFields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlarmSupervisionPictureUploadVarianceFields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlarmSupervisionPictureUploadVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPush_id(ctx context.Context, field graphql.CollectedField, obj *model1.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPush",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPush_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model1.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPush",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPush_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model1.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPush",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPush_alarm_content(ctx context.Context, field graphql.CollectedField, obj *model1.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPush",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPush_province_id(ctx context.Context, field graphql.CollectedField, obj *model1.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPush",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPush_city_id(ctx context.Context, field graphql.CollectedField, obj *model1.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPush",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPush_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPush",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPush_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPush",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPush_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPush",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPush_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPush",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPush_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPush",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPush_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPush",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPush_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPush",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPush_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPush",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushAggregateFields)
	fc.Result = res
	return ec.marshalODistrictAlarmContentPushAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushAvgFields)
	fc.Result = res
	return ec.marshalODistrictAlarmContentPushAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushMaxFields)
	fc.Result = res
	return ec.marshalODistrictAlarmContentPushMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushMinFields)
	fc.Result = res
	return ec.marshalODistrictAlarmContentPushMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushStddevFields)
	fc.Result = res
	return ec.marshalODistrictAlarmContentPushStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushStddevPopFields)
	fc.Result = res
	return ec.marshalODistrictAlarmContentPushStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushStddevSampFields)
	fc.Result = res
	return ec.marshalODistrictAlarmContentPushStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushSumFields)
	fc.Result = res
	return ec.marshalODistrictAlarmContentPushSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushVarPopFields)
	fc.Result = res
	return ec.marshalODistrictAlarmContentPushVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushVarSampFields)
	fc.Result = res
	return ec.marshalODistrictAlarmContentPushVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushVarianceFields)
	fc.Result = res
	return ec.marshalODistrictAlarmContentPushVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMaxFields_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMaxFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMaxFields_alarm_content(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMaxFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMaxFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMaxFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMinFields_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMinFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMinFields_alarm_content(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMinFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMinFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMinFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DistrictAlarmContentPush)
	fc.Result = res
	return ec.marshalNDistrictAlarmContentPush2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐDistrictAlarmContentPushᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DistrictAlarmContentPushVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DistrictAlarmContentPushVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_enterprise_alarm_send_police_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseAlarmSendPoliceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_enterprise_contact(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseContact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_enterprise_phone(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterprisePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_police(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Police, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_police_phone(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PolicePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_phlice_department(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhliceDepartment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceAggregateFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceAvgFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceMaxFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceMinFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceStddevFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceStddevPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceStddevSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceSumFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceVarPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceVarSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceVarianceFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_enterprise_alarm_send_police_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseAlarmSendPoliceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_enterprise_contact(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseContact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_enterprise_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterprisePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_police(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Police, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_police_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PolicePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_phlice_department(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhliceDepartment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_enterprise_alarm_send_police_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseAlarmSendPoliceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_enterprise_contact(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseContact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_enterprise_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterprisePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_police(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Police, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_police_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PolicePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_phlice_department(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhliceDepartment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseAlarmSendPolice)
	fc.Result = res
	return ec.marshalNEnterpriseAlarmSendPolice2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐEnterpriseAlarmSendPoliceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_alarm_processing_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_alarm_processing_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAlarmProcessingRecord(rctx, args["where"].(model.AlarmProcessingRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordMutationResponse)
	fc.Result = res
	return ec.marshalOAlarmProcessingRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_alarm_processing_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_alarm_processing_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAlarmProcessingRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.AlarmProcessingRecord)
	fc.Result = res
	return ec.marshalOAlarmProcessingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmProcessingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_alarm_processing_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_alarm_processing_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertAlarmProcessingRecord(rctx, args["objects"].([]*model.AlarmProcessingRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordMutationResponse)
	fc.Result = res
	return ec.marshalOAlarmProcessingRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_alarm_processing_record_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_alarm_processing_record_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertAlarmProcessingRecordOne(rctx, args["objects"].(model.AlarmProcessingRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.AlarmProcessingRecord)
	fc.Result = res
	return ec.marshalOAlarmProcessingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmProcessingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_alarm_processing_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_alarm_processing_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAlarmProcessingRecord(rctx, args["_inc"].(*model.AlarmProcessingRecordIncInput), args["_set"].(*model.AlarmProcessingRecordSetInput), args["where"].(model.AlarmProcessingRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordMutationResponse)
	fc.Result = res
	return ec.marshalOAlarmProcessingRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_alarm_processing_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_alarm_processing_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAlarmProcessingRecordByPk(rctx, args["_inc"].(*model.AlarmProcessingRecordIncInput), args["_set"].(*model.AlarmProcessingRecordSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.AlarmProcessingRecord)
	fc.Result = res
	return ec.marshalOAlarmProcessingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmProcessingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_alarm_supervision_picture_upload(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_alarm_supervision_picture_upload_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAlarmSupervisionPictureUpload(rctx, args["where"].(model.AlarmSupervisionPictureUploadBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadMutationResponse)
	fc.Result = res
	return ec.marshalOAlarmSupervisionPictureUploadMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_alarm_supervision_picture_upload_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_alarm_supervision_picture_upload_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAlarmSupervisionPictureUploadByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.AlarmSupervisionPictureUpload)
	fc.Result = res
	return ec.marshalOAlarmSupervisionPictureUpload2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmSupervisionPictureUpload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_alarm_supervision_picture_upload(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_alarm_supervision_picture_upload_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertAlarmSupervisionPictureUpload(rctx, args["objects"].([]*model.AlarmSupervisionPictureUploadInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadMutationResponse)
	fc.Result = res
	return ec.marshalOAlarmSupervisionPictureUploadMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_alarm_supervision_picture_upload_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_alarm_supervision_picture_upload_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertAlarmSupervisionPictureUploadOne(rctx, args["objects"].(model.AlarmSupervisionPictureUploadInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.AlarmSupervisionPictureUpload)
	fc.Result = res
	return ec.marshalOAlarmSupervisionPictureUpload2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmSupervisionPictureUpload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_alarm_supervision_picture_upload(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_alarm_supervision_picture_upload_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAlarmSupervisionPictureUpload(rctx, args["_inc"].(*model.AlarmSupervisionPictureUploadIncInput), args["_set"].(*model.AlarmSupervisionPictureUploadSetInput), args["where"].(model.AlarmSupervisionPictureUploadBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadMutationResponse)
	fc.Result = res
	return ec.marshalOAlarmSupervisionPictureUploadMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_alarm_supervision_picture_upload_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_alarm_supervision_picture_upload_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAlarmSupervisionPictureUploadByPk(rctx, args["_inc"].(*model.AlarmSupervisionPictureUploadIncInput), args["_set"].(*model.AlarmSupervisionPictureUploadSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.AlarmSupervisionPictureUpload)
	fc.Result = res
	return ec.marshalOAlarmSupervisionPictureUpload2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmSupervisionPictureUpload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_district_alarm_content_push(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_district_alarm_content_push_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDistrictAlarmContentPush(rctx, args["where"].(model.DistrictAlarmContentPushBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushMutationResponse)
	fc.Result = res
	return ec.marshalODistrictAlarmContentPushMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_district_alarm_content_push_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_district_alarm_content_push_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDistrictAlarmContentPushByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DistrictAlarmContentPush)
	fc.Result = res
	return ec.marshalODistrictAlarmContentPush2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐDistrictAlarmContentPush(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_district_alarm_content_push(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_district_alarm_content_push_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDistrictAlarmContentPush(rctx, args["objects"].([]*model.DistrictAlarmContentPushInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushMutationResponse)
	fc.Result = res
	return ec.marshalODistrictAlarmContentPushMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_district_alarm_content_push_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_district_alarm_content_push_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDistrictAlarmContentPushOne(rctx, args["objects"].(model.DistrictAlarmContentPushInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DistrictAlarmContentPush)
	fc.Result = res
	return ec.marshalODistrictAlarmContentPush2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐDistrictAlarmContentPush(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_district_alarm_content_push(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_district_alarm_content_push_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDistrictAlarmContentPush(rctx, args["_inc"].(*model.DistrictAlarmContentPushIncInput), args["_set"].(*model.DistrictAlarmContentPushSetInput), args["where"].(model.DistrictAlarmContentPushBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushMutationResponse)
	fc.Result = res
	return ec.marshalODistrictAlarmContentPushMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_district_alarm_content_push_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_district_alarm_content_push_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDistrictAlarmContentPushByPk(rctx, args["_inc"].(*model.DistrictAlarmContentPushIncInput), args["_set"].(*model.DistrictAlarmContentPushSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DistrictAlarmContentPush)
	fc.Result = res
	return ec.marshalODistrictAlarmContentPush2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐDistrictAlarmContentPush(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_alarm_send_police(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_alarm_send_police_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseAlarmSendPolice(rctx, args["where"].(model.EnterpriseAlarmSendPoliceBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_alarm_send_police_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_alarm_send_police_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseAlarmSendPoliceByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseAlarmSendPolice)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPolice2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐEnterpriseAlarmSendPolice(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_alarm_send_police(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_alarm_send_police_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseAlarmSendPolice(rctx, args["objects"].([]*model.EnterpriseAlarmSendPoliceInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_alarm_send_police_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_alarm_send_police_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseAlarmSendPoliceOne(rctx, args["objects"].(model.EnterpriseAlarmSendPoliceInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseAlarmSendPolice)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPolice2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐEnterpriseAlarmSendPolice(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_alarm_send_police(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_alarm_send_police_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseAlarmSendPolice(rctx, args["_inc"].(*model.EnterpriseAlarmSendPoliceIncInput), args["_set"].(*model.EnterpriseAlarmSendPoliceSetInput), args["where"].(model.EnterpriseAlarmSendPoliceBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_alarm_send_police_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_alarm_send_police_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseAlarmSendPoliceByPk(rctx, args["_inc"].(*model.EnterpriseAlarmSendPoliceIncInput), args["_set"].(*model.EnterpriseAlarmSendPoliceSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseAlarmSendPolice)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPolice2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐEnterpriseAlarmSendPolice(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_offline_alarm_registration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_offline_alarm_registration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOfflineAlarmRegistration(rctx, args["where"].(model.OfflineAlarmRegistrationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineAlarmRegistrationMutationResponse)
	fc.Result = res
	return ec.marshalOOfflineAlarmRegistrationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_offline_alarm_registration_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_offline_alarm_registration_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOfflineAlarmRegistrationByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.OfflineAlarmRegistration)
	fc.Result = res
	return ec.marshalOOfflineAlarmRegistration2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐOfflineAlarmRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_offline_alarm_registration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_offline_alarm_registration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertOfflineAlarmRegistration(rctx, args["objects"].([]*model.OfflineAlarmRegistrationInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineAlarmRegistrationMutationResponse)
	fc.Result = res
	return ec.marshalOOfflineAlarmRegistrationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_offline_alarm_registration_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_offline_alarm_registration_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertOfflineAlarmRegistrationOne(rctx, args["objects"].(model.OfflineAlarmRegistrationInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.OfflineAlarmRegistration)
	fc.Result = res
	return ec.marshalOOfflineAlarmRegistration2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐOfflineAlarmRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_offline_alarm_registration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_offline_alarm_registration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOfflineAlarmRegistration(rctx, args["_inc"].(*model.OfflineAlarmRegistrationIncInput), args["_set"].(*model.OfflineAlarmRegistrationSetInput), args["where"].(model.OfflineAlarmRegistrationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineAlarmRegistrationMutationResponse)
	fc.Result = res
	return ec.marshalOOfflineAlarmRegistrationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_offline_alarm_registration_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_offline_alarm_registration_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOfflineAlarmRegistrationByPk(rctx, args["_inc"].(*model.OfflineAlarmRegistrationIncInput), args["_set"].(*model.OfflineAlarmRegistrationSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.OfflineAlarmRegistration)
	fc.Result = res
	return ec.marshalOOfflineAlarmRegistration2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐOfflineAlarmRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_alarm_data(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_alarm_data_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleAlarmData(rctx, args["where"].(model.VehicleAlarmDataBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleAlarmDataMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_alarm_data_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_alarm_data_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleAlarmDataByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleAlarmData)
	fc.Result = res
	return ec.marshalOVehicleAlarmData2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVehicleAlarmData(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_alarm_data(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_alarm_data_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleAlarmData(rctx, args["objects"].([]*model.VehicleAlarmDataInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleAlarmDataMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_alarm_data_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_alarm_data_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleAlarmDataOne(rctx, args["objects"].(model.VehicleAlarmDataInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleAlarmData)
	fc.Result = res
	return ec.marshalOVehicleAlarmData2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVehicleAlarmData(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_alarm_data(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_alarm_data_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleAlarmData(rctx, args["_inc"].(*model.VehicleAlarmDataIncInput), args["_set"].(*model.VehicleAlarmDataSetInput), args["where"].(model.VehicleAlarmDataBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleAlarmDataMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_alarm_data_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_alarm_data_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleAlarmDataByPk(rctx, args["_inc"].(*model.VehicleAlarmDataIncInput), args["_set"].(*model.VehicleAlarmDataSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleAlarmData)
	fc.Result = res
	return ec.marshalOVehicleAlarmData2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVehicleAlarmData(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_video_platform_alarm_type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_video_platform_alarm_type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVideoPlatformAlarmType(rctx, args["where"].(model.VideoPlatformAlarmTypeBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VideoPlatformAlarmTypeMutationResponse)
	fc.Result = res
	return ec.marshalOVideoPlatformAlarmTypeMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_video_platform_alarm_type_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_video_platform_alarm_type_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVideoPlatformAlarmTypeByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VideoPlatformAlarmType)
	fc.Result = res
	return ec.marshalOVideoPlatformAlarmType2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVideoPlatformAlarmType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_video_platform_alarm_type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_video_platform_alarm_type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVideoPlatformAlarmType(rctx, args["objects"].([]*model.VideoPlatformAlarmTypeInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VideoPlatformAlarmTypeMutationResponse)
	fc.Result = res
	return ec.marshalOVideoPlatformAlarmTypeMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_video_platform_alarm_type_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_video_platform_alarm_type_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVideoPlatformAlarmTypeOne(rctx, args["objects"].(model.VideoPlatformAlarmTypeInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VideoPlatformAlarmType)
	fc.Result = res
	return ec.marshalOVideoPlatformAlarmType2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVideoPlatformAlarmType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_video_platform_alarm_type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_video_platform_alarm_type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVideoPlatformAlarmType(rctx, args["_inc"].(*model.VideoPlatformAlarmTypeIncInput), args["_set"].(*model.VideoPlatformAlarmTypeSetInput), args["where"].(model.VideoPlatformAlarmTypeBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VideoPlatformAlarmTypeMutationResponse)
	fc.Result = res
	return ec.marshalOVideoPlatformAlarmTypeMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_video_platform_alarm_type_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_video_platform_alarm_type_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVideoPlatformAlarmTypeByPk(rctx, args["_inc"].(*model.VideoPlatformAlarmTypeIncInput), args["_set"].(*model.VideoPlatformAlarmTypeSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VideoPlatformAlarmType)
	fc.Result = res
	return ec.marshalOVideoPlatformAlarmType2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVideoPlatformAlarmType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_voice_alarm_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_voice_alarm_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVoiceAlarmRecord(rctx, args["where"].(model.VoiceAlarmRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VoiceAlarmRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVoiceAlarmRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_voice_alarm_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_voice_alarm_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVoiceAlarmRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VoiceAlarmRecord)
	fc.Result = res
	return ec.marshalOVoiceAlarmRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVoiceAlarmRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_voice_alarm_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_voice_alarm_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVoiceAlarmRecord(rctx, args["objects"].([]*model.VoiceAlarmRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VoiceAlarmRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVoiceAlarmRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_voice_alarm_record_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_voice_alarm_record_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVoiceAlarmRecordOne(rctx, args["objects"].(model.VoiceAlarmRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VoiceAlarmRecord)
	fc.Result = res
	return ec.marshalOVoiceAlarmRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVoiceAlarmRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_voice_alarm_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_voice_alarm_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVoiceAlarmRecord(rctx, args["_inc"].(*model.VoiceAlarmRecordIncInput), args["_set"].(*model.VoiceAlarmRecordSetInput), args["where"].(model.VoiceAlarmRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VoiceAlarmRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVoiceAlarmRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_voice_alarm_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_voice_alarm_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVoiceAlarmRecordByPk(rctx, args["_inc"].(*model.VoiceAlarmRecordIncInput), args["_set"].(*model.VoiceAlarmRecordSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VoiceAlarmRecord)
	fc.Result = res
	return ec.marshalOVoiceAlarmRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVoiceAlarmRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_id(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_offline_alarm_registration_id(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfflineAlarmRegistrationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_offline_start_time(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfflineStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_offline_end_time(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfflineEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_registration_user(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_registration_time(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_sms_content(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmsContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_phone_reminder_content(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneReminderContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_sms_send_time(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmsSendTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_phone_reminder_time(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneReminderTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_offline_reason(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfflineReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_is_registration(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRegistration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_is_end_alarm(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEndAlarm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_is_send_sms(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSendSms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_is_need_maintain(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNeedMaintain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistration_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.OfflineAlarmRegistration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineAlarmRegistrationAggregateFields)
	fc.Result = res
	return ec.marshalOOfflineAlarmRegistrationAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineAlarmRegistrationAvgFields)
	fc.Result = res
	return ec.marshalOOfflineAlarmRegistrationAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineAlarmRegistrationMaxFields)
	fc.Result = res
	return ec.marshalOOfflineAlarmRegistrationMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineAlarmRegistrationMinFields)
	fc.Result = res
	return ec.marshalOOfflineAlarmRegistrationMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineAlarmRegistrationStddevFields)
	fc.Result = res
	return ec.marshalOOfflineAlarmRegistrationStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineAlarmRegistrationStddevPopFields)
	fc.Result = res
	return ec.marshalOOfflineAlarmRegistrationStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineAlarmRegistrationStddevSampFields)
	fc.Result = res
	return ec.marshalOOfflineAlarmRegistrationStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineAlarmRegistrationSumFields)
	fc.Result = res
	return ec.marshalOOfflineAlarmRegistrationSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineAlarmRegistrationVarPopFields)
	fc.Result = res
	return ec.marshalOOfflineAlarmRegistrationVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineAlarmRegistrationVarSampFields)
	fc.Result = res
	return ec.marshalOOfflineAlarmRegistrationVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OfflineAlarmRegistrationVarianceFields)
	fc.Result = res
	return ec.marshalOOfflineAlarmRegistrationVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationAvgFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_offline_alarm_registration_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfflineAlarmRegistrationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_offline_start_time(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfflineStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_offline_end_time(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfflineEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_registration_user(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_sms_content(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmsContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_phone_reminder_content(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneReminderContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_sms_send_time(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmsSendTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_phone_reminder_time(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneReminderTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_offline_reason(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfflineReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_is_registration(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRegistration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_is_end_alarm(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEndAlarm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_is_send_sms(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSendSms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_is_need_maintain(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNeedMaintain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_offline_alarm_registration_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfflineAlarmRegistrationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_offline_start_time(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfflineStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_offline_end_time(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfflineEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_registration_user(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_sms_content(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmsContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_phone_reminder_content(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneReminderContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_sms_send_time(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmsSendTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_phone_reminder_time(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneReminderTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_offline_reason(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfflineReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_is_registration(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRegistration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_is_end_alarm(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEndAlarm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_is_send_sms(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSendSms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_is_need_maintain(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNeedMaintain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.OfflineAlarmRegistration)
	fc.Result = res
	return ec.marshalNOfflineAlarmRegistration2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐOfflineAlarmRegistrationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationStddevFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationStddevPopFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationStddevSampFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationSumFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationVarPopFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationVarSampFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _OfflineAlarmRegistrationVarianceFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.OfflineAlarmRegistrationVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OfflineAlarmRegistrationVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_alarm_processing_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_alarm_processing_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AlarmProcessingRecord(rctx, args["distinct_on"].([]model.AlarmProcessingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmProcessingRecordOrderBy), args["where"].(*model.AlarmProcessingRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.AlarmProcessingRecord)
	fc.Result = res
	return ec.marshalNAlarmProcessingRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmProcessingRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_alarm_processing_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_alarm_processing_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AlarmProcessingRecordAggregate(rctx, args["distinct_on"].([]model.AlarmProcessingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmProcessingRecordOrderBy), args["where"].(*model.AlarmProcessingRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordAggregate)
	fc.Result = res
	return ec.marshalNAlarmProcessingRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_alarm_processing_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_alarm_processing_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AlarmProcessingRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.AlarmProcessingRecord)
	fc.Result = res
	return ec.marshalNAlarmProcessingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmProcessingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_alarm_supervision_picture_upload(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_alarm_supervision_picture_upload_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AlarmSupervisionPictureUpload(rctx, args["distinct_on"].([]model.AlarmSupervisionPictureUploadSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmSupervisionPictureUploadOrderBy), args["where"].(*model.AlarmSupervisionPictureUploadBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.AlarmSupervisionPictureUpload)
	fc.Result = res
	return ec.marshalNAlarmSupervisionPictureUpload2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmSupervisionPictureUploadᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_alarm_supervision_picture_upload_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_alarm_supervision_picture_upload_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AlarmSupervisionPictureUploadAggregate(rctx, args["distinct_on"].([]model.AlarmSupervisionPictureUploadSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmSupervisionPictureUploadOrderBy), args["where"].(*model.AlarmSupervisionPictureUploadBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadAggregate)
	fc.Result = res
	return ec.marshalNAlarmSupervisionPictureUploadAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_alarm_supervision_picture_upload_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_alarm_supervision_picture_upload_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AlarmSupervisionPictureUploadByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.AlarmSupervisionPictureUpload)
	fc.Result = res
	return ec.marshalNAlarmSupervisionPictureUpload2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmSupervisionPictureUpload(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_district_alarm_content_push(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_district_alarm_content_push_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DistrictAlarmContentPush(rctx, args["distinct_on"].([]model.DistrictAlarmContentPushSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DistrictAlarmContentPushOrderBy), args["where"].(*model.DistrictAlarmContentPushBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DistrictAlarmContentPush)
	fc.Result = res
	return ec.marshalNDistrictAlarmContentPush2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐDistrictAlarmContentPushᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_district_alarm_content_push_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_district_alarm_content_push_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DistrictAlarmContentPushAggregate(rctx, args["distinct_on"].([]model.DistrictAlarmContentPushSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DistrictAlarmContentPushOrderBy), args["where"].(*model.DistrictAlarmContentPushBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushAggregate)
	fc.Result = res
	return ec.marshalNDistrictAlarmContentPushAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_district_alarm_content_push_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_district_alarm_content_push_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DistrictAlarmContentPushByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DistrictAlarmContentPush)
	fc.Result = res
	return ec.marshalNDistrictAlarmContentPush2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐDistrictAlarmContentPush(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_alarm_send_police(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_alarm_send_police_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseAlarmSendPolice(rctx, args["distinct_on"].([]model.EnterpriseAlarmSendPoliceSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseAlarmSendPoliceOrderBy), args["where"].(*model.EnterpriseAlarmSendPoliceBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseAlarmSendPolice)
	fc.Result = res
	return ec.marshalNEnterpriseAlarmSendPolice2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐEnterpriseAlarmSendPoliceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_alarm_send_police_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_alarm_send_police_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseAlarmSendPoliceAggregate(rctx, args["distinct_on"].([]model.EnterpriseAlarmSendPoliceSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseAlarmSendPoliceOrderBy), args["where"].(*model.EnterpriseAlarmSendPoliceBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceAggregate)
	fc.Result = res
	return ec.marshalNEnterpriseAlarmSendPoliceAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_alarm_send_police_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_alarm_send_police_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseAlarmSendPoliceByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseAlarmSendPolice)
	fc.Result = res
	return ec.marshalNEnterpriseAlarmSendPolice2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐEnterpriseAlarmSendPolice(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_offline_alarm_registration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_offline_alarm_registration_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OfflineAlarmRegistration(rctx, args["distinct_on"].([]model.OfflineAlarmRegistrationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OfflineAlarmRegistrationOrderBy), args["where"].(*model.OfflineAlarmRegistrationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.OfflineAlarmRegistration)
	fc.Result = res
	return ec.marshalNOfflineAlarmRegistration2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐOfflineAlarmRegistrationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_offline_alarm_registration_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_offline_alarm_registration_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OfflineAlarmRegistrationAggregate(rctx, args["distinct_on"].([]model.OfflineAlarmRegistrationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OfflineAlarmRegistrationOrderBy), args["where"].(*model.OfflineAlarmRegistrationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OfflineAlarmRegistrationAggregate)
	fc.Result = res
	return ec.marshalNOfflineAlarmRegistrationAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_offline_alarm_registration_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_offline_alarm_registration_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OfflineAlarmRegistrationByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.OfflineAlarmRegistration)
	fc.Result = res
	return ec.marshalNOfflineAlarmRegistration2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐOfflineAlarmRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_alarm_data(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_alarm_data_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleAlarmData(rctx, args["distinct_on"].([]model.VehicleAlarmDataSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmDataOrderBy), args["where"].(*model.VehicleAlarmDataBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleAlarmData)
	fc.Result = res
	return ec.marshalNVehicleAlarmData2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVehicleAlarmDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_alarm_data_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_alarm_data_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleAlarmDataAggregate(rctx, args["distinct_on"].([]model.VehicleAlarmDataSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmDataOrderBy), args["where"].(*model.VehicleAlarmDataBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataAggregate)
	fc.Result = res
	return ec.marshalNVehicleAlarmDataAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_alarm_data_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_alarm_data_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleAlarmDataByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleAlarmData)
	fc.Result = res
	return ec.marshalNVehicleAlarmData2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVehicleAlarmData(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_video_platform_alarm_type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_video_platform_alarm_type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VideoPlatformAlarmType(rctx, args["distinct_on"].([]model.VideoPlatformAlarmTypeSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VideoPlatformAlarmTypeOrderBy), args["where"].(*model.VideoPlatformAlarmTypeBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VideoPlatformAlarmType)
	fc.Result = res
	return ec.marshalNVideoPlatformAlarmType2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVideoPlatformAlarmTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_video_platform_alarm_type_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_video_platform_alarm_type_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VideoPlatformAlarmTypeAggregate(rctx, args["distinct_on"].([]model.VideoPlatformAlarmTypeSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VideoPlatformAlarmTypeOrderBy), args["where"].(*model.VideoPlatformAlarmTypeBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VideoPlatformAlarmTypeAggregate)
	fc.Result = res
	return ec.marshalNVideoPlatformAlarmTypeAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_video_platform_alarm_type_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_video_platform_alarm_type_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VideoPlatformAlarmTypeByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VideoPlatformAlarmType)
	fc.Result = res
	return ec.marshalNVideoPlatformAlarmType2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVideoPlatformAlarmType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_voice_alarm_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_voice_alarm_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VoiceAlarmRecord(rctx, args["distinct_on"].([]model.VoiceAlarmRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VoiceAlarmRecordOrderBy), args["where"].(*model.VoiceAlarmRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VoiceAlarmRecord)
	fc.Result = res
	return ec.marshalNVoiceAlarmRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVoiceAlarmRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_voice_alarm_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_voice_alarm_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VoiceAlarmRecordAggregate(rctx, args["distinct_on"].([]model.VoiceAlarmRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VoiceAlarmRecordOrderBy), args["where"].(*model.VoiceAlarmRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VoiceAlarmRecordAggregate)
	fc.Result = res
	return ec.marshalNVoiceAlarmRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_voice_alarm_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_voice_alarm_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VoiceAlarmRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VoiceAlarmRecord)
	fc.Result = res
	return ec.marshalNVoiceAlarmRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVoiceAlarmRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_vehicle_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_alarm_start_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_alarm_end_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_alarm_end_position(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmEndPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_latest_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_is_alarm_effective(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAlarmEffective, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_is_alarm_over(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAlarmOver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_is_cancel_alarm(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCancelAlarm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_alarm_source(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_processing_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_processing_method(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_processing_description(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_processor(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_processing_status(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_coordinate(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_location_description(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_duration(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_road_grade(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadGrade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_road_name(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_area_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_alarm_deal_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDealID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_pid(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_record_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_supervisor(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supervisor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_is_supervise(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSupervise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_supervision_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_supervision_note(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_is_resolve(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsResolve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_is_construction_site_handle(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsConstructionSiteHandle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_construction_site_handle_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionSiteHandleTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmData_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataAggregateFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmDataAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataAvgFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmDataAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataMaxFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmDataMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataMinFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmDataMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataStddevFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmDataStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataStddevPopFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmDataStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataStddevSampFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmDataStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataSumFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmDataSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataVarPopFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmDataVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataVarSampFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmDataVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataVarianceFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmDataVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataAvgFields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataAvgFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataAvgFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataAvgFields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataAvgFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_vehicle_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_alarm_start_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_alarm_end_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_alarm_end_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmEndPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_latest_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_is_alarm_effective(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAlarmEffective, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_is_alarm_over(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAlarmOver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_is_cancel_alarm(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCancelAlarm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_alarm_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_processing_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_processing_method(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_processing_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_processor(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_processing_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_location_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_duration(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_road_grade(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadGrade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_road_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_alarm_deal_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDealID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_pid(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_record_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_supervisor(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supervisor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_is_supervise(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSupervise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_supervision_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_supervision_note(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_is_resolve(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsResolve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_is_construction_site_handle(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsConstructionSiteHandle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_construction_site_handle_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionSiteHandleTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_vehicle_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_alarm_start_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_alarm_end_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_alarm_end_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmEndPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_latest_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_is_alarm_effective(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAlarmEffective, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_is_alarm_over(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAlarmOver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_is_cancel_alarm(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCancelAlarm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_alarm_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_processing_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_processing_method(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_processing_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_processor(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_processing_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_location_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_duration(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_road_grade(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadGrade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_road_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_alarm_deal_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDealID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_pid(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_record_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_supervisor(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supervisor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_is_supervise(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSupervise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_supervision_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_supervision_note(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_is_resolve(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsResolve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_is_construction_site_handle(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsConstructionSiteHandle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_construction_site_handle_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionSiteHandleTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleAlarmData)
	fc.Result = res
	return ec.marshalNVehicleAlarmData2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVehicleAlarmDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataStddevFields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataStddevFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataStddevFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataStddevFields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataStddevFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataStddevPopFields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataStddevPopFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataStddevPopFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataStddevPopFields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataStddevPopFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataStddevSampFields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataStddevSampFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataStddevSampFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataStddevSampFields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataStddevSampFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataSumFields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataSumFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataSumFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataSumFields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataSumFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataVarPopFields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataVarPopFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataVarPopFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataVarPopFields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataVarPopFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataVarSampFields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataVarSampFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataVarSampFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataVarSampFields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataVarSampFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataVarianceFields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataVarianceFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataVarianceFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataVarianceFields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmDataVarianceFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmDataVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmType_id(ctx context.Context, field graphql.CollectedField, obj *model1.VideoPlatformAlarmType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmType_video_platform_alarm_type_id(ctx context.Context, field graphql.CollectedField, obj *model1.VideoPlatformAlarmType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoPlatformAlarmTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmType_vehicle_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model1.VideoPlatformAlarmType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmType_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model1.VideoPlatformAlarmType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmType_alarm_source(ctx context.Context, field graphql.CollectedField, obj *model1.VideoPlatformAlarmType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmType_alarm_classify(ctx context.Context, field graphql.CollectedField, obj *model1.VideoPlatformAlarmType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmClassify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmType_alarm_code(ctx context.Context, field graphql.CollectedField, obj *model1.VideoPlatformAlarmType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmType_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.VideoPlatformAlarmType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmType_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.VideoPlatformAlarmType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmType_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.VideoPlatformAlarmType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmType_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.VideoPlatformAlarmType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmType_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.VideoPlatformAlarmType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmType_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.VideoPlatformAlarmType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmType_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.VideoPlatformAlarmType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VideoPlatformAlarmTypeAggregateFields)
	fc.Result = res
	return ec.marshalOVideoPlatformAlarmTypeAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VideoPlatformAlarmTypeAvgFields)
	fc.Result = res
	return ec.marshalOVideoPlatformAlarmTypeAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VideoPlatformAlarmTypeMaxFields)
	fc.Result = res
	return ec.marshalOVideoPlatformAlarmTypeMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VideoPlatformAlarmTypeMinFields)
	fc.Result = res
	return ec.marshalOVideoPlatformAlarmTypeMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VideoPlatformAlarmTypeStddevFields)
	fc.Result = res
	return ec.marshalOVideoPlatformAlarmTypeStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VideoPlatformAlarmTypeStddevPopFields)
	fc.Result = res
	return ec.marshalOVideoPlatformAlarmTypeStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VideoPlatformAlarmTypeStddevSampFields)
	fc.Result = res
	return ec.marshalOVideoPlatformAlarmTypeStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VideoPlatformAlarmTypeSumFields)
	fc.Result = res
	return ec.marshalOVideoPlatformAlarmTypeSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VideoPlatformAlarmTypeVarPopFields)
	fc.Result = res
	return ec.marshalOVideoPlatformAlarmTypeVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VideoPlatformAlarmTypeVarSampFields)
	fc.Result = res
	return ec.marshalOVideoPlatformAlarmTypeVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VideoPlatformAlarmTypeVarianceFields)
	fc.Result = res
	return ec.marshalOVideoPlatformAlarmTypeVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeAvgFields_vehicle_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMaxFields_video_platform_alarm_type_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoPlatformAlarmTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMaxFields_vehicle_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMaxFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMaxFields_alarm_source(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMaxFields_alarm_classify(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmClassify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMaxFields_alarm_code(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMinFields_video_platform_alarm_type_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoPlatformAlarmTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMinFields_vehicle_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMinFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMinFields_alarm_source(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMinFields_alarm_classify(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmClassify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMinFields_alarm_code(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VideoPlatformAlarmType)
	fc.Result = res
	return ec.marshalNVideoPlatformAlarmType2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVideoPlatformAlarmTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeStddevFields_vehicle_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeStddevPopFields_vehicle_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeStddevSampFields_vehicle_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeSumFields_vehicle_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeVarPopFields_vehicle_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeVarSampFields_vehicle_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VideoPlatformAlarmTypeVarianceFields_vehicle_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoPlatformAlarmTypeVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideoPlatformAlarmTypeVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecord_id(ctx context.Context, field graphql.CollectedField, obj *model1.VoiceAlarmRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecord_vioce_alarm_record_id(ctx context.Context, field graphql.CollectedField, obj *model1.VoiceAlarmRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VioceAlarmRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecord_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.VoiceAlarmRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecord_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model1.VoiceAlarmRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecord_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model1.VoiceAlarmRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecord_remind_time(ctx context.Context, field graphql.CollectedField, obj *model1.VoiceAlarmRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemindTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecord_remind_content(ctx context.Context, field graphql.CollectedField, obj *model1.VoiceAlarmRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemindContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecord_input_person(ctx context.Context, field graphql.CollectedField, obj *model1.VoiceAlarmRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecord_input_time(ctx context.Context, field graphql.CollectedField, obj *model1.VoiceAlarmRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecord_is_success(ctx context.Context, field graphql.CollectedField, obj *model1.VoiceAlarmRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSuccess, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecord_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.VoiceAlarmRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecord_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.VoiceAlarmRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecord_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.VoiceAlarmRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecord_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.VoiceAlarmRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecord_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.VoiceAlarmRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecord_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.VoiceAlarmRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VoiceAlarmRecordAggregateFields)
	fc.Result = res
	return ec.marshalOVoiceAlarmRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VoiceAlarmRecordAvgFields)
	fc.Result = res
	return ec.marshalOVoiceAlarmRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VoiceAlarmRecordMaxFields)
	fc.Result = res
	return ec.marshalOVoiceAlarmRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VoiceAlarmRecordMinFields)
	fc.Result = res
	return ec.marshalOVoiceAlarmRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VoiceAlarmRecordStddevFields)
	fc.Result = res
	return ec.marshalOVoiceAlarmRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VoiceAlarmRecordStddevPopFields)
	fc.Result = res
	return ec.marshalOVoiceAlarmRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VoiceAlarmRecordStddevSampFields)
	fc.Result = res
	return ec.marshalOVoiceAlarmRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VoiceAlarmRecordSumFields)
	fc.Result = res
	return ec.marshalOVoiceAlarmRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VoiceAlarmRecordVarPopFields)
	fc.Result = res
	return ec.marshalOVoiceAlarmRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VoiceAlarmRecordVarSampFields)
	fc.Result = res
	return ec.marshalOVoiceAlarmRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VoiceAlarmRecordVarianceFields)
	fc.Result = res
	return ec.marshalOVoiceAlarmRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMaxFields_vioce_alarm_record_id(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VioceAlarmRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMaxFields_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMaxFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMaxFields_remind_time(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemindTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMaxFields_remind_content(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemindContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMaxFields_input_person(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMaxFields_input_time(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMaxFields_is_success(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSuccess, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMinFields_vioce_alarm_record_id(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VioceAlarmRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMinFields_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMinFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMinFields_remind_time(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemindTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMinFields_remind_content(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemindContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMinFields_input_person(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMinFields_input_time(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMinFields_is_success(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSuccess, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VoiceAlarmRecord)
	fc.Result = res
	return ec.marshalNVoiceAlarmRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVoiceAlarmRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VoiceAlarmRecordVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VoiceAlarmRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VoiceAlarmRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAlarmProcessingRecordBoolExp(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordBoolExp, error) {
	var it model.AlarmProcessingRecordBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOAlarmProcessingRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOAlarmProcessingRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOAlarmProcessingRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_data_id"))
			it.AlarmDataID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_content"))
			it.ProcessingContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notify"))
			it.IsNotify, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_announce":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_announce"))
			it.IsAnnounce, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAlarmProcessingRecordIncInput(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordIncInput, error) {
	var it model.AlarmProcessingRecordIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAlarmProcessingRecordInsertInput(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordInsertInput, error) {
	var it model.AlarmProcessingRecordInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "processing_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_content"))
			it.ProcessingContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notify"))
			it.IsNotify, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_announce":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_announce"))
			it.IsAnnounce, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAlarmProcessingRecordOrderBy(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordOrderBy, error) {
	var it model.AlarmProcessingRecordOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_data_id"))
			it.AlarmDataID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_content"))
			it.ProcessingContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notify"))
			it.IsNotify, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_announce":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_announce"))
			it.IsAnnounce, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAlarmProcessingRecordSetInput(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordSetInput, error) {
	var it model.AlarmProcessingRecordSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_data_id"))
			it.AlarmDataID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_content"))
			it.ProcessingContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notify"))
			it.IsNotify, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_announce":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_announce"))
			it.IsAnnounce, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAlarmSupervisionPictureUploadBoolExp(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadBoolExp, error) {
	var it model.AlarmSupervisionPictureUploadBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOAlarmSupervisionPictureUploadBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOAlarmSupervisionPictureUploadBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOAlarmSupervisionPictureUploadBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo_condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo_condition"))
			it.PhotoCondition, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_name"))
			it.MonitoringPicName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_address"))
			it.MonitoringPicAddress, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_upload_time"))
			it.MonitoringPicUploadTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "imel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imel"))
			it.Imel, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAlarmSupervisionPictureUploadIncInput(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadIncInput, error) {
	var it model.AlarmSupervisionPictureUploadIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAlarmSupervisionPictureUploadInsertInput(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadInsertInput, error) {
	var it model.AlarmSupervisionPictureUploadInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo_condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo_condition"))
			it.PhotoCondition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_name"))
			it.MonitoringPicName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_address"))
			it.MonitoringPicAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_upload_time"))
			it.MonitoringPicUploadTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "imel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imel"))
			it.Imel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAlarmSupervisionPictureUploadOrderBy(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadOrderBy, error) {
	var it model.AlarmSupervisionPictureUploadOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo_condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo_condition"))
			it.PhotoCondition, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_name"))
			it.MonitoringPicName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_address"))
			it.MonitoringPicAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_upload_time"))
			it.MonitoringPicUploadTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "imel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imel"))
			it.Imel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAlarmSupervisionPictureUploadSetInput(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadSetInput, error) {
	var it model.AlarmSupervisionPictureUploadSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo_condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo_condition"))
			it.PhotoCondition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_name"))
			it.MonitoringPicName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_address"))
			it.MonitoringPicAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_upload_time"))
			it.MonitoringPicUploadTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "imel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imel"))
			it.Imel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBigintComparisonExp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBooleanComparisonExp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDistrictAlarmContentPushBoolExp(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushBoolExp, error) {
	var it model.DistrictAlarmContentPushBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODistrictAlarmContentPushBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODistrictAlarmContentPushBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODistrictAlarmContentPushBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_data_id"))
			it.AlarmDataID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDistrictAlarmContentPushIncInput(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushIncInput, error) {
	var it model.DistrictAlarmContentPushIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDistrictAlarmContentPushInsertInput(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushInsertInput, error) {
	var it model.DistrictAlarmContentPushInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDistrictAlarmContentPushOrderBy(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushOrderBy, error) {
	var it model.DistrictAlarmContentPushOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_data_id"))
			it.AlarmDataID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDistrictAlarmContentPushSetInput(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushSetInput, error) {
	var it model.DistrictAlarmContentPushSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_data_id"))
			it.AlarmDataID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseAlarmSendPoliceBoolExp(ctx context.Context, obj interface{}) (model.EnterpriseAlarmSendPoliceBoolExp, error) {
	var it model.EnterpriseAlarmSendPoliceBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEnterpriseAlarmSendPoliceBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEnterpriseAlarmSendPoliceBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEnterpriseAlarmSendPoliceBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_alarm_send_police_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_alarm_send_police_id"))
			it.EnterpriseAlarmSendPoliceID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_contact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_contact"))
			it.EnterpriseContact, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_phone"))
			it.EnterprisePhone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "police":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police"))
			it.Police, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_phone"))
			it.PolicePhone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "phlice_department":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phlice_department"))
			it.PhliceDepartment, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseAlarmSendPoliceIncInput(ctx context.Context, obj interface{}) (model.EnterpriseAlarmSendPoliceIncInput, error) {
	var it model.EnterpriseAlarmSendPoliceIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseAlarmSendPoliceInsertInput(ctx context.Context, obj interface{}) (model.EnterpriseAlarmSendPoliceInsertInput, error) {
	var it model.EnterpriseAlarmSendPoliceInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_contact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_contact"))
			it.EnterpriseContact, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_phone"))
			it.EnterprisePhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "police":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police"))
			it.Police, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_phone"))
			it.PolicePhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phlice_department":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phlice_department"))
			it.PhliceDepartment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseAlarmSendPoliceOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseAlarmSendPoliceOrderBy, error) {
	var it model.EnterpriseAlarmSendPoliceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_alarm_send_police_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_alarm_send_police_id"))
			it.EnterpriseAlarmSendPoliceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_contact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_contact"))
			it.EnterpriseContact, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_phone"))
			it.EnterprisePhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "police":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police"))
			it.Police, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_phone"))
			it.PolicePhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "phlice_department":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phlice_department"))
			it.PhliceDepartment, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseAlarmSendPoliceSetInput(ctx context.Context, obj interface{}) (model.EnterpriseAlarmSendPoliceSetInput, error) {
	var it model.EnterpriseAlarmSendPoliceSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_alarm_send_police_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_alarm_send_police_id"))
			it.EnterpriseAlarmSendPoliceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_contact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_contact"))
			it.EnterpriseContact, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_phone"))
			it.EnterprisePhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "police":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police"))
			it.Police, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_phone"))
			it.PolicePhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phlice_department":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phlice_department"))
			it.PhliceDepartment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatComparisonExp(ctx context.Context, obj interface{}) (model1.FloatComparisonExp, error) {
	var it model1.FloatComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntComparisonExp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJsonbComparisonExp(ctx context.Context, obj interface{}) (model2.JsonbComparisonExp, error) {
	var it model2.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNumericComparisonExp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOfflineAlarmRegistrationBoolExp(ctx context.Context, obj interface{}) (model.OfflineAlarmRegistrationBoolExp, error) {
	var it model.OfflineAlarmRegistrationBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOOfflineAlarmRegistrationBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOOfflineAlarmRegistrationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOOfflineAlarmRegistrationBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "offline_alarm_registration_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_alarm_registration_id"))
			it.OfflineAlarmRegistrationID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "offline_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_start_time"))
			it.OfflineStartTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "offline_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_end_time"))
			it.OfflineEndTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_user"))
			it.RegistrationUser, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sms_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sms_content"))
			it.SmsContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_reminder_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_reminder_content"))
			it.PhoneReminderContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sms_send_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sms_send_time"))
			it.SmsSendTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_reminder_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_reminder_time"))
			it.PhoneReminderTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "offline_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_reason"))
			it.OfflineReason, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_registration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_registration"))
			it.IsRegistration, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_end_alarm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_end_alarm"))
			it.IsEndAlarm, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send_sms"))
			it.IsSendSms, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_need_maintain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_need_maintain"))
			it.IsNeedMaintain, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOfflineAlarmRegistrationIncInput(ctx context.Context, obj interface{}) (model.OfflineAlarmRegistrationIncInput, error) {
	var it model.OfflineAlarmRegistrationIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOfflineAlarmRegistrationInsertInput(ctx context.Context, obj interface{}) (model.OfflineAlarmRegistrationInsertInput, error) {
	var it model.OfflineAlarmRegistrationInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "offline_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_start_time"))
			it.OfflineStartTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "offline_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_end_time"))
			it.OfflineEndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_user"))
			it.RegistrationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "sms_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sms_content"))
			it.SmsContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_reminder_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_reminder_content"))
			it.PhoneReminderContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sms_send_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sms_send_time"))
			it.SmsSendTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_reminder_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_reminder_time"))
			it.PhoneReminderTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "offline_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_reason"))
			it.OfflineReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_registration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_registration"))
			it.IsRegistration, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_end_alarm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_end_alarm"))
			it.IsEndAlarm, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send_sms"))
			it.IsSendSms, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_need_maintain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_need_maintain"))
			it.IsNeedMaintain, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOfflineAlarmRegistrationOrderBy(ctx context.Context, obj interface{}) (model.OfflineAlarmRegistrationOrderBy, error) {
	var it model.OfflineAlarmRegistrationOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "offline_alarm_registration_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_alarm_registration_id"))
			it.OfflineAlarmRegistrationID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "offline_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_start_time"))
			it.OfflineStartTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "offline_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_end_time"))
			it.OfflineEndTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_user"))
			it.RegistrationUser, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sms_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sms_content"))
			it.SmsContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_reminder_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_reminder_content"))
			it.PhoneReminderContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sms_send_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sms_send_time"))
			it.SmsSendTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_reminder_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_reminder_time"))
			it.PhoneReminderTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "offline_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_reason"))
			it.OfflineReason, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_registration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_registration"))
			it.IsRegistration, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_end_alarm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_end_alarm"))
			it.IsEndAlarm, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send_sms"))
			it.IsSendSms, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_need_maintain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_need_maintain"))
			it.IsNeedMaintain, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOfflineAlarmRegistrationSetInput(ctx context.Context, obj interface{}) (model.OfflineAlarmRegistrationSetInput, error) {
	var it model.OfflineAlarmRegistrationSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "offline_alarm_registration_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_alarm_registration_id"))
			it.OfflineAlarmRegistrationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "offline_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_start_time"))
			it.OfflineStartTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "offline_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_end_time"))
			it.OfflineEndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_user"))
			it.RegistrationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "sms_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sms_content"))
			it.SmsContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_reminder_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_reminder_content"))
			it.PhoneReminderContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sms_send_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sms_send_time"))
			it.SmsSendTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_reminder_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_reminder_time"))
			it.PhoneReminderTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "offline_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offline_reason"))
			it.OfflineReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_registration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_registration"))
			it.IsRegistration, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_end_alarm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_end_alarm"))
			it.IsEndAlarm, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send_sms"))
			it.IsSendSms, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_need_maintain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_need_maintain"))
			it.IsNeedMaintain, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPointComparisonExp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringComparisonExp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimestamptzComparisonExp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleAlarmDataBoolExp(ctx context.Context, obj interface{}) (model.VehicleAlarmDataBoolExp, error) {
	var it model.VehicleAlarmDataBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVehicleAlarmDataBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVehicleAlarmDataBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVehicleAlarmDataBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_data_id"))
			it.VehicleAlarmDataID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_start_time"))
			it.AlarmStartTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_time"))
			it.AlarmEndTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_position"))
			it.AlarmEndPosition, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_time"))
			it.LatestAlarmTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_alarm_effective":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_alarm_effective"))
			it.IsAlarmEffective, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_alarm_over":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_alarm_over"))
			it.IsAlarmOver, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_cancel_alarm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_cancel_alarm"))
			it.IsCancelAlarm, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_method"))
			it.ProcessingMethod, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_description"))
			it.ProcessingDescription, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processor"))
			it.Processor, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_status"))
			it.ProcessingStatus, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_grade"))
			it.RoadGrade, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_deal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_deal_id"))
			it.AlarmDealID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pid"))
			it.Pid, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisor"))
			it.Supervisor, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervise"))
			it.IsSupervise, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_time"))
			it.SupervisionTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_note"))
			it.SupervisionNote, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_resolve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_resolve"))
			it.IsResolve, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_construction_site_handle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_construction_site_handle"))
			it.IsConstructionSiteHandle, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_site_handle_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_site_handle_time"))
			it.ConstructionSiteHandleTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleAlarmDataIncInput(ctx context.Context, obj interface{}) (model.VehicleAlarmDataIncInput, error) {
	var it model.VehicleAlarmDataIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleAlarmDataInsertInput(ctx context.Context, obj interface{}) (model.VehicleAlarmDataInsertInput, error) {
	var it model.VehicleAlarmDataInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_start_time"))
			it.AlarmStartTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_time"))
			it.AlarmEndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_position"))
			it.AlarmEndPosition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_time"))
			it.LatestAlarmTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_alarm_effective":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_alarm_effective"))
			it.IsAlarmEffective, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_alarm_over":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_alarm_over"))
			it.IsAlarmOver, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_cancel_alarm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_cancel_alarm"))
			it.IsCancelAlarm, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_method"))
			it.ProcessingMethod, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_description"))
			it.ProcessingDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processor"))
			it.Processor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_status"))
			it.ProcessingStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_grade"))
			it.RoadGrade, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_deal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_deal_id"))
			it.AlarmDealID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pid"))
			it.Pid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisor"))
			it.Supervisor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervise"))
			it.IsSupervise, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_time"))
			it.SupervisionTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_note"))
			it.SupervisionNote, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_resolve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_resolve"))
			it.IsResolve, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_construction_site_handle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_construction_site_handle"))
			it.IsConstructionSiteHandle, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_site_handle_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_site_handle_time"))
			it.ConstructionSiteHandleTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleAlarmDataOrderBy(ctx context.Context, obj interface{}) (model.VehicleAlarmDataOrderBy, error) {
	var it model.VehicleAlarmDataOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_data_id"))
			it.VehicleAlarmDataID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_start_time"))
			it.AlarmStartTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_time"))
			it.AlarmEndTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_position"))
			it.AlarmEndPosition, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_time"))
			it.LatestAlarmTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_alarm_effective":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_alarm_effective"))
			it.IsAlarmEffective, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_alarm_over":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_alarm_over"))
			it.IsAlarmOver, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_cancel_alarm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_cancel_alarm"))
			it.IsCancelAlarm, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_method"))
			it.ProcessingMethod, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_description"))
			it.ProcessingDescription, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processor"))
			it.Processor, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_status"))
			it.ProcessingStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_grade"))
			it.RoadGrade, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_deal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_deal_id"))
			it.AlarmDealID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pid"))
			it.Pid, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisor"))
			it.Supervisor, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervise"))
			it.IsSupervise, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_time"))
			it.SupervisionTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_note"))
			it.SupervisionNote, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_resolve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_resolve"))
			it.IsResolve, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_construction_site_handle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_construction_site_handle"))
			it.IsConstructionSiteHandle, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_site_handle_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_site_handle_time"))
			it.ConstructionSiteHandleTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleAlarmDataSetInput(ctx context.Context, obj interface{}) (model.VehicleAlarmDataSetInput, error) {
	var it model.VehicleAlarmDataSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_data_id"))
			it.VehicleAlarmDataID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_start_time"))
			it.AlarmStartTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_time"))
			it.AlarmEndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_position"))
			it.AlarmEndPosition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_time"))
			it.LatestAlarmTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_alarm_effective":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_alarm_effective"))
			it.IsAlarmEffective, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_alarm_over":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_alarm_over"))
			it.IsAlarmOver, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_cancel_alarm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_cancel_alarm"))
			it.IsCancelAlarm, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_method"))
			it.ProcessingMethod, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_description"))
			it.ProcessingDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processor"))
			it.Processor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_status"))
			it.ProcessingStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_grade"))
			it.RoadGrade, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_deal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_deal_id"))
			it.AlarmDealID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pid"))
			it.Pid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisor"))
			it.Supervisor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervise"))
			it.IsSupervise, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_time"))
			it.SupervisionTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_note"))
			it.SupervisionNote, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_resolve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_resolve"))
			it.IsResolve, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_construction_site_handle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_construction_site_handle"))
			it.IsConstructionSiteHandle, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction_site_handle_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construction_site_handle_time"))
			it.ConstructionSiteHandleTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVideoPlatformAlarmTypeBoolExp(ctx context.Context, obj interface{}) (model.VideoPlatformAlarmTypeBoolExp, error) {
	var it model.VideoPlatformAlarmTypeBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVideoPlatformAlarmTypeBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVideoPlatformAlarmTypeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVideoPlatformAlarmTypeBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "video_platform_alarm_type_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("video_platform_alarm_type_id"))
			it.VideoPlatformAlarmTypeID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_data_id"))
			it.VehicleAlarmDataID, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_classify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_classify"))
			it.AlarmClassify, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_code"))
			it.AlarmCode, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVideoPlatformAlarmTypeIncInput(ctx context.Context, obj interface{}) (model.VideoPlatformAlarmTypeIncInput, error) {
	var it model.VideoPlatformAlarmTypeIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_data_id"))
			it.VehicleAlarmDataID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVideoPlatformAlarmTypeInsertInput(ctx context.Context, obj interface{}) (model.VideoPlatformAlarmTypeInsertInput, error) {
	var it model.VideoPlatformAlarmTypeInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "vehicle_alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_data_id"))
			it.VehicleAlarmDataID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_classify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_classify"))
			it.AlarmClassify, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_code"))
			it.AlarmCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVideoPlatformAlarmTypeOrderBy(ctx context.Context, obj interface{}) (model.VideoPlatformAlarmTypeOrderBy, error) {
	var it model.VideoPlatformAlarmTypeOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "video_platform_alarm_type_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("video_platform_alarm_type_id"))
			it.VideoPlatformAlarmTypeID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_data_id"))
			it.VehicleAlarmDataID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_classify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_classify"))
			it.AlarmClassify, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_code"))
			it.AlarmCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVideoPlatformAlarmTypeSetInput(ctx context.Context, obj interface{}) (model.VideoPlatformAlarmTypeSetInput, error) {
	var it model.VideoPlatformAlarmTypeSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "video_platform_alarm_type_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("video_platform_alarm_type_id"))
			it.VideoPlatformAlarmTypeID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_data_id"))
			it.VehicleAlarmDataID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_classify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_classify"))
			it.AlarmClassify, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_code"))
			it.AlarmCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVoiceAlarmRecordBoolExp(ctx context.Context, obj interface{}) (model.VoiceAlarmRecordBoolExp, error) {
	var it model.VoiceAlarmRecordBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVoiceAlarmRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVoiceAlarmRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVoiceAlarmRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vioce_alarm_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vioce_alarm_record_id"))
			it.VioceAlarmRecordID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_time"))
			it.AlarmTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remind_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remind_time"))
			it.RemindTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remind_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remind_content"))
			it.RemindContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_person"))
			it.InputPerson, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_time"))
			it.InputTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_success":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_success"))
			it.IsSuccess, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVoiceAlarmRecordIncInput(ctx context.Context, obj interface{}) (model.VoiceAlarmRecordIncInput, error) {
	var it model.VoiceAlarmRecordIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVoiceAlarmRecordInsertInput(ctx context.Context, obj interface{}) (model.VoiceAlarmRecordInsertInput, error) {
	var it model.VoiceAlarmRecordInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_time"))
			it.AlarmTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remind_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remind_time"))
			it.RemindTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "remind_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remind_content"))
			it.RemindContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_person"))
			it.InputPerson, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_time"))
			it.InputTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_success":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_success"))
			it.IsSuccess, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVoiceAlarmRecordOrderBy(ctx context.Context, obj interface{}) (model.VoiceAlarmRecordOrderBy, error) {
	var it model.VoiceAlarmRecordOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vioce_alarm_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vioce_alarm_record_id"))
			it.VioceAlarmRecordID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_time"))
			it.AlarmTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remind_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remind_time"))
			it.RemindTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remind_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remind_content"))
			it.RemindContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_person"))
			it.InputPerson, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_time"))
			it.InputTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_success":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_success"))
			it.IsSuccess, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVoiceAlarmRecordSetInput(ctx context.Context, obj interface{}) (model.VoiceAlarmRecordSetInput, error) {
	var it model.VoiceAlarmRecordSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vioce_alarm_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vioce_alarm_record_id"))
			it.VioceAlarmRecordID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_time"))
			it.AlarmTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remind_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remind_time"))
			it.RemindTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "remind_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remind_content"))
			it.RemindContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_person"))
			it.InputPerson, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_time"))
			it.InputTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_success":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_success"))
			it.IsSuccess, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var alarmProcessingRecordImplementors = []string{"AlarmProcessingRecord"}

func (ec *executionContext) _AlarmProcessingRecord(ctx context.Context, sel ast.SelectionSet, obj *model1.AlarmProcessingRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmProcessingRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmProcessingRecord")
		case "id":
			out.Values[i] = ec._AlarmProcessingRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "alarm_data_id":
			out.Values[i] = ec._AlarmProcessingRecord_alarm_data_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._AlarmProcessingRecord_alarm_supervision_picture_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "processing_content":
			out.Values[i] = ec._AlarmProcessingRecord_processing_content(ctx, field, obj)
		case "processing_time":
			out.Values[i] = ec._AlarmProcessingRecord_processing_time(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._AlarmProcessingRecord_processing_type(ctx, field, obj)
		case "operation_user":
			out.Values[i] = ec._AlarmProcessingRecord_operation_user(ctx, field, obj)
		case "is_sms_push":
			out.Values[i] = ec._AlarmProcessingRecord_is_sms_push(ctx, field, obj)
		case "is_notify":
			out.Values[i] = ec._AlarmProcessingRecord_is_notify(ctx, field, obj)
		case "is_announce":
			out.Values[i] = ec._AlarmProcessingRecord_is_announce(ctx, field, obj)
		case "is_app_push":
			out.Values[i] = ec._AlarmProcessingRecord_is_app_push(ctx, field, obj)
		case "notify_content":
			out.Values[i] = ec._AlarmProcessingRecord_notify_content(ctx, field, obj)
		case "announce_content":
			out.Values[i] = ec._AlarmProcessingRecord_announce_content(ctx, field, obj)
		case "app_push_content":
			out.Values[i] = ec._AlarmProcessingRecord_app_push_content(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._AlarmProcessingRecord_disposal_method(ctx, field, obj)
		case "disposal_result":
			out.Values[i] = ec._AlarmProcessingRecord_disposal_result(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._AlarmProcessingRecord_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._AlarmProcessingRecord_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._AlarmProcessingRecord_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._AlarmProcessingRecord_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._AlarmProcessingRecord_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._AlarmProcessingRecord_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._AlarmProcessingRecord_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmProcessingRecordAggregateImplementors = []string{"AlarmProcessingRecordAggregate"}

func (ec *executionContext) _AlarmProcessingRecordAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmProcessingRecordAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmProcessingRecordAggregate")
		case "aggregate":
			out.Values[i] = ec._AlarmProcessingRecordAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmProcessingRecordAggregateFieldsImplementors = []string{"AlarmProcessingRecordAggregateFields"}

func (ec *executionContext) _AlarmProcessingRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmProcessingRecordAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmProcessingRecordAggregateFields")
		case "avg":
			out.Values[i] = ec._AlarmProcessingRecordAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._AlarmProcessingRecordAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._AlarmProcessingRecordAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._AlarmProcessingRecordAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._AlarmProcessingRecordAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._AlarmProcessingRecordAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._AlarmProcessingRecordAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._AlarmProcessingRecordAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._AlarmProcessingRecordAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._AlarmProcessingRecordAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._AlarmProcessingRecordAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmProcessingRecordAvgFieldsImplementors = []string{"AlarmProcessingRecordAvgFields"}

func (ec *executionContext) _AlarmProcessingRecordAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmProcessingRecordAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmProcessingRecordAvgFields")
		case "id":
			out.Values[i] = ec._AlarmProcessingRecordAvgFields_id(ctx, field, obj)
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._AlarmProcessingRecordAvgFields_alarm_supervision_picture_id(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._AlarmProcessingRecordAvgFields_processing_type(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._AlarmProcessingRecordAvgFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmProcessingRecordMaxFieldsImplementors = []string{"AlarmProcessingRecordMaxFields"}

func (ec *executionContext) _AlarmProcessingRecordMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmProcessingRecordMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmProcessingRecordMaxFields")
		case "id":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_id(ctx, field, obj)
		case "alarm_data_id":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_alarm_data_id(ctx, field, obj)
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_alarm_supervision_picture_id(ctx, field, obj)
		case "processing_content":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_processing_content(ctx, field, obj)
		case "processing_time":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_processing_time(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_processing_type(ctx, field, obj)
		case "operation_user":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_operation_user(ctx, field, obj)
		case "is_sms_push":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_is_sms_push(ctx, field, obj)
		case "is_notify":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_is_notify(ctx, field, obj)
		case "is_announce":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_is_announce(ctx, field, obj)
		case "is_app_push":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_is_app_push(ctx, field, obj)
		case "notify_content":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_notify_content(ctx, field, obj)
		case "announce_content":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_announce_content(ctx, field, obj)
		case "app_push_content":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_app_push_content(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_disposal_method(ctx, field, obj)
		case "disposal_result":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_disposal_result(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._AlarmProcessingRecordMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmProcessingRecordMinFieldsImplementors = []string{"AlarmProcessingRecordMinFields"}

func (ec *executionContext) _AlarmProcessingRecordMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmProcessingRecordMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmProcessingRecordMinFields")
		case "id":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_id(ctx, field, obj)
		case "alarm_data_id":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_alarm_data_id(ctx, field, obj)
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_alarm_supervision_picture_id(ctx, field, obj)
		case "processing_content":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_processing_content(ctx, field, obj)
		case "processing_time":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_processing_time(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_processing_type(ctx, field, obj)
		case "operation_user":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_operation_user(ctx, field, obj)
		case "is_sms_push":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_is_sms_push(ctx, field, obj)
		case "is_notify":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_is_notify(ctx, field, obj)
		case "is_announce":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_is_announce(ctx, field, obj)
		case "is_app_push":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_is_app_push(ctx, field, obj)
		case "notify_content":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_notify_content(ctx, field, obj)
		case "announce_content":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_announce_content(ctx, field, obj)
		case "app_push_content":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_app_push_content(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_disposal_method(ctx, field, obj)
		case "disposal_result":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_disposal_result(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._AlarmProcessingRecordMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmProcessingRecordMutationResponseImplementors = []string{"AlarmProcessingRecordMutationResponse"}

func (ec *executionContext) _AlarmProcessingRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmProcessingRecordMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmProcessingRecordMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._AlarmProcessingRecordMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._AlarmProcessingRecordMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmProcessingRecordStddevFieldsImplementors = []string{"AlarmProcessingRecordStddevFields"}

func (ec *executionContext) _AlarmProcessingRecordStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmProcessingRecordStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmProcessingRecordStddevFields")
		case "id":
			out.Values[i] = ec._AlarmProcessingRecordStddevFields_id(ctx, field, obj)
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._AlarmProcessingRecordStddevFields_alarm_supervision_picture_id(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._AlarmProcessingRecordStddevFields_processing_type(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._AlarmProcessingRecordStddevFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmProcessingRecordStddevPopFieldsImplementors = []string{"AlarmProcessingRecordStddevPopFields"}

func (ec *executionContext) _AlarmProcessingRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmProcessingRecordStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmProcessingRecordStddevPopFields")
		case "id":
			out.Values[i] = ec._AlarmProcessingRecordStddevPopFields_id(ctx, field, obj)
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._AlarmProcessingRecordStddevPopFields_alarm_supervision_picture_id(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._AlarmProcessingRecordStddevPopFields_processing_type(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._AlarmProcessingRecordStddevPopFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmProcessingRecordStddevSampFieldsImplementors = []string{"AlarmProcessingRecordStddevSampFields"}

func (ec *executionContext) _AlarmProcessingRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmProcessingRecordStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmProcessingRecordStddevSampFields")
		case "id":
			out.Values[i] = ec._AlarmProcessingRecordStddevSampFields_id(ctx, field, obj)
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._AlarmProcessingRecordStddevSampFields_alarm_supervision_picture_id(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._AlarmProcessingRecordStddevSampFields_processing_type(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._AlarmProcessingRecordStddevSampFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmProcessingRecordSumFieldsImplementors = []string{"AlarmProcessingRecordSumFields"}

func (ec *executionContext) _AlarmProcessingRecordSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmProcessingRecordSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmProcessingRecordSumFields")
		case "id":
			out.Values[i] = ec._AlarmProcessingRecordSumFields_id(ctx, field, obj)
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._AlarmProcessingRecordSumFields_alarm_supervision_picture_id(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._AlarmProcessingRecordSumFields_processing_type(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._AlarmProcessingRecordSumFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmProcessingRecordVarPopFieldsImplementors = []string{"AlarmProcessingRecordVarPopFields"}

func (ec *executionContext) _AlarmProcessingRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmProcessingRecordVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmProcessingRecordVarPopFields")
		case "id":
			out.Values[i] = ec._AlarmProcessingRecordVarPopFields_id(ctx, field, obj)
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._AlarmProcessingRecordVarPopFields_alarm_supervision_picture_id(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._AlarmProcessingRecordVarPopFields_processing_type(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._AlarmProcessingRecordVarPopFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmProcessingRecordVarSampFieldsImplementors = []string{"AlarmProcessingRecordVarSampFields"}

func (ec *executionContext) _AlarmProcessingRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmProcessingRecordVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmProcessingRecordVarSampFields")
		case "id":
			out.Values[i] = ec._AlarmProcessingRecordVarSampFields_id(ctx, field, obj)
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._AlarmProcessingRecordVarSampFields_alarm_supervision_picture_id(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._AlarmProcessingRecordVarSampFields_processing_type(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._AlarmProcessingRecordVarSampFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmProcessingRecordVarianceFieldsImplementors = []string{"AlarmProcessingRecordVarianceFields"}

func (ec *executionContext) _AlarmProcessingRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmProcessingRecordVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmProcessingRecordVarianceFields")
		case "id":
			out.Values[i] = ec._AlarmProcessingRecordVarianceFields_id(ctx, field, obj)
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._AlarmProcessingRecordVarianceFields_alarm_supervision_picture_id(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._AlarmProcessingRecordVarianceFields_processing_type(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._AlarmProcessingRecordVarianceFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmSupervisionPictureUploadImplementors = []string{"AlarmSupervisionPictureUpload"}

func (ec *executionContext) _AlarmSupervisionPictureUpload(ctx context.Context, sel ast.SelectionSet, obj *model1.AlarmSupervisionPictureUpload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmSupervisionPictureUploadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmSupervisionPictureUpload")
		case "id":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_alarm_supervision_picture_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_id":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_enterprise_id(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_camera_id(ctx, field, obj)
		case "photo_condition":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_photo_condition(ctx, field, obj)
		case "update_time":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_update_time(ctx, field, obj)
		case "monitoring_pic_name":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_monitoring_pic_name(ctx, field, obj)
		case "monitoring_pic_address":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_monitoring_pic_address(ctx, field, obj)
		case "monitoring_pic_upload_time":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_monitoring_pic_upload_time(ctx, field, obj)
		case "imel":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_imel(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_sim_number(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._AlarmSupervisionPictureUpload_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmSupervisionPictureUploadAggregateImplementors = []string{"AlarmSupervisionPictureUploadAggregate"}

func (ec *executionContext) _AlarmSupervisionPictureUploadAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmSupervisionPictureUploadAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmSupervisionPictureUploadAggregate")
		case "aggregate":
			out.Values[i] = ec._AlarmSupervisionPictureUploadAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmSupervisionPictureUploadAggregateFieldsImplementors = []string{"AlarmSupervisionPictureUploadAggregateFields"}

func (ec *executionContext) _AlarmSupervisionPictureUploadAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmSupervisionPictureUploadAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmSupervisionPictureUploadAggregateFields")
		case "avg":
			out.Values[i] = ec._AlarmSupervisionPictureUploadAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._AlarmSupervisionPictureUploadAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._AlarmSupervisionPictureUploadAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._AlarmSupervisionPictureUploadAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._AlarmSupervisionPictureUploadAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._AlarmSupervisionPictureUploadAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._AlarmSupervisionPictureUploadAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._AlarmSupervisionPictureUploadAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._AlarmSupervisionPictureUploadAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._AlarmSupervisionPictureUploadAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._AlarmSupervisionPictureUploadAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmSupervisionPictureUploadAvgFieldsImplementors = []string{"AlarmSupervisionPictureUploadAvgFields"}

func (ec *executionContext) _AlarmSupervisionPictureUploadAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmSupervisionPictureUploadAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmSupervisionPictureUploadAvgFields")
		case "id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadAvgFields_id(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadAvgFields_camera_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmSupervisionPictureUploadMaxFieldsImplementors = []string{"AlarmSupervisionPictureUploadMaxFields"}

func (ec *executionContext) _AlarmSupervisionPictureUploadMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmSupervisionPictureUploadMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmSupervisionPictureUploadMaxFields")
		case "id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_id(ctx, field, obj)
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_alarm_supervision_picture_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_vehicle_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_enterprise_id(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_camera_id(ctx, field, obj)
		case "photo_condition":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_photo_condition(ctx, field, obj)
		case "update_time":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_update_time(ctx, field, obj)
		case "monitoring_pic_name":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_monitoring_pic_name(ctx, field, obj)
		case "monitoring_pic_address":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_monitoring_pic_address(ctx, field, obj)
		case "monitoring_pic_upload_time":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_monitoring_pic_upload_time(ctx, field, obj)
		case "imel":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_imel(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_sim_number(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmSupervisionPictureUploadMinFieldsImplementors = []string{"AlarmSupervisionPictureUploadMinFields"}

func (ec *executionContext) _AlarmSupervisionPictureUploadMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmSupervisionPictureUploadMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmSupervisionPictureUploadMinFields")
		case "id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_id(ctx, field, obj)
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_alarm_supervision_picture_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_vehicle_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_enterprise_id(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_camera_id(ctx, field, obj)
		case "photo_condition":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_photo_condition(ctx, field, obj)
		case "update_time":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_update_time(ctx, field, obj)
		case "monitoring_pic_name":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_monitoring_pic_name(ctx, field, obj)
		case "monitoring_pic_address":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_monitoring_pic_address(ctx, field, obj)
		case "monitoring_pic_upload_time":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_monitoring_pic_upload_time(ctx, field, obj)
		case "imel":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_imel(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_sim_number(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmSupervisionPictureUploadMutationResponseImplementors = []string{"AlarmSupervisionPictureUploadMutationResponse"}

func (ec *executionContext) _AlarmSupervisionPictureUploadMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmSupervisionPictureUploadMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmSupervisionPictureUploadMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._AlarmSupervisionPictureUploadMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmSupervisionPictureUploadStddevFieldsImplementors = []string{"AlarmSupervisionPictureUploadStddevFields"}

func (ec *executionContext) _AlarmSupervisionPictureUploadStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmSupervisionPictureUploadStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmSupervisionPictureUploadStddevFields")
		case "id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadStddevFields_id(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadStddevFields_camera_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmSupervisionPictureUploadStddevPopFieldsImplementors = []string{"AlarmSupervisionPictureUploadStddevPopFields"}

func (ec *executionContext) _AlarmSupervisionPictureUploadStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmSupervisionPictureUploadStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmSupervisionPictureUploadStddevPopFields")
		case "id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadStddevPopFields_id(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadStddevPopFields_camera_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmSupervisionPictureUploadStddevSampFieldsImplementors = []string{"AlarmSupervisionPictureUploadStddevSampFields"}

func (ec *executionContext) _AlarmSupervisionPictureUploadStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmSupervisionPictureUploadStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmSupervisionPictureUploadStddevSampFields")
		case "id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadStddevSampFields_id(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadStddevSampFields_camera_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmSupervisionPictureUploadSumFieldsImplementors = []string{"AlarmSupervisionPictureUploadSumFields"}

func (ec *executionContext) _AlarmSupervisionPictureUploadSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmSupervisionPictureUploadSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmSupervisionPictureUploadSumFields")
		case "id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadSumFields_id(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadSumFields_camera_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmSupervisionPictureUploadVarPopFieldsImplementors = []string{"AlarmSupervisionPictureUploadVarPopFields"}

func (ec *executionContext) _AlarmSupervisionPictureUploadVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmSupervisionPictureUploadVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmSupervisionPictureUploadVarPopFields")
		case "id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadVarPopFields_id(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadVarPopFields_camera_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmSupervisionPictureUploadVarSampFieldsImplementors = []string{"AlarmSupervisionPictureUploadVarSampFields"}

func (ec *executionContext) _AlarmSupervisionPictureUploadVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmSupervisionPictureUploadVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmSupervisionPictureUploadVarSampFields")
		case "id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadVarSampFields_id(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadVarSampFields_camera_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarmSupervisionPictureUploadVarianceFieldsImplementors = []string{"AlarmSupervisionPictureUploadVarianceFields"}

func (ec *executionContext) _AlarmSupervisionPictureUploadVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarmSupervisionPictureUploadVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlarmSupervisionPictureUploadVarianceFields")
		case "id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadVarianceFields_id(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._AlarmSupervisionPictureUploadVarianceFields_camera_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var districtAlarmContentPushImplementors = []string{"DistrictAlarmContentPush"}

func (ec *executionContext) _DistrictAlarmContentPush(ctx context.Context, sel ast.SelectionSet, obj *model1.DistrictAlarmContentPush) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtAlarmContentPushImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DistrictAlarmContentPush")
		case "id":
			out.Values[i] = ec._DistrictAlarmContentPush_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "alarm_data_id":
			out.Values[i] = ec._DistrictAlarmContentPush_alarm_data_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "alarm_type":
			out.Values[i] = ec._DistrictAlarmContentPush_alarm_type(ctx, field, obj)
		case "alarm_content":
			out.Values[i] = ec._DistrictAlarmContentPush_alarm_content(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._DistrictAlarmContentPush_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._DistrictAlarmContentPush_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._DistrictAlarmContentPush_district_id(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DistrictAlarmContentPush_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DistrictAlarmContentPush_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._DistrictAlarmContentPush_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._DistrictAlarmContentPush_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DistrictAlarmContentPush_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DistrictAlarmContentPush_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DistrictAlarmContentPush_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var districtAlarmContentPushAggregateImplementors = []string{"DistrictAlarmContentPushAggregate"}

func (ec *executionContext) _DistrictAlarmContentPushAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtAlarmContentPushAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DistrictAlarmContentPushAggregate")
		case "aggregate":
			out.Values[i] = ec._DistrictAlarmContentPushAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var districtAlarmContentPushAggregateFieldsImplementors = []string{"DistrictAlarmContentPushAggregateFields"}

func (ec *executionContext) _DistrictAlarmContentPushAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtAlarmContentPushAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DistrictAlarmContentPushAggregateFields")
		case "avg":
			out.Values[i] = ec._DistrictAlarmContentPushAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DistrictAlarmContentPushAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DistrictAlarmContentPushAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DistrictAlarmContentPushAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DistrictAlarmContentPushAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DistrictAlarmContentPushAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DistrictAlarmContentPushAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DistrictAlarmContentPushAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DistrictAlarmContentPushAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DistrictAlarmContentPushAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DistrictAlarmContentPushAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var districtAlarmContentPushAvgFieldsImplementors = []string{"DistrictAlarmContentPushAvgFields"}

func (ec *executionContext) _DistrictAlarmContentPushAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtAlarmContentPushAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DistrictAlarmContentPushAvgFields")
		case "id":
			out.Values[i] = ec._DistrictAlarmContentPushAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var districtAlarmContentPushMaxFieldsImplementors = []string{"DistrictAlarmContentPushMaxFields"}

func (ec *executionContext) _DistrictAlarmContentPushMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtAlarmContentPushMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DistrictAlarmContentPushMaxFields")
		case "id":
			out.Values[i] = ec._DistrictAlarmContentPushMaxFields_id(ctx, field, obj)
		case "alarm_data_id":
			out.Values[i] = ec._DistrictAlarmContentPushMaxFields_alarm_data_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._DistrictAlarmContentPushMaxFields_alarm_type(ctx, field, obj)
		case "alarm_content":
			out.Values[i] = ec._DistrictAlarmContentPushMaxFields_alarm_content(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._DistrictAlarmContentPushMaxFields_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._DistrictAlarmContentPushMaxFields_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._DistrictAlarmContentPushMaxFields_district_id(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DistrictAlarmContentPushMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DistrictAlarmContentPushMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DistrictAlarmContentPushMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DistrictAlarmContentPushMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DistrictAlarmContentPushMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DistrictAlarmContentPushMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DistrictAlarmContentPushMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var districtAlarmContentPushMinFieldsImplementors = []string{"DistrictAlarmContentPushMinFields"}

func (ec *executionContext) _DistrictAlarmContentPushMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtAlarmContentPushMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DistrictAlarmContentPushMinFields")
		case "id":
			out.Values[i] = ec._DistrictAlarmContentPushMinFields_id(ctx, field, obj)
		case "alarm_data_id":
			out.Values[i] = ec._DistrictAlarmContentPushMinFields_alarm_data_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._DistrictAlarmContentPushMinFields_alarm_type(ctx, field, obj)
		case "alarm_content":
			out.Values[i] = ec._DistrictAlarmContentPushMinFields_alarm_content(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._DistrictAlarmContentPushMinFields_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._DistrictAlarmContentPushMinFields_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._DistrictAlarmContentPushMinFields_district_id(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DistrictAlarmContentPushMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DistrictAlarmContentPushMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DistrictAlarmContentPushMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DistrictAlarmContentPushMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DistrictAlarmContentPushMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DistrictAlarmContentPushMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DistrictAlarmContentPushMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var districtAlarmContentPushMutationResponseImplementors = []string{"DistrictAlarmContentPushMutationResponse"}

func (ec *executionContext) _DistrictAlarmContentPushMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtAlarmContentPushMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DistrictAlarmContentPushMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DistrictAlarmContentPushMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DistrictAlarmContentPushMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var districtAlarmContentPushStddevFieldsImplementors = []string{"DistrictAlarmContentPushStddevFields"}

func (ec *executionContext) _DistrictAlarmContentPushStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtAlarmContentPushStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DistrictAlarmContentPushStddevFields")
		case "id":
			out.Values[i] = ec._DistrictAlarmContentPushStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var districtAlarmContentPushStddevPopFieldsImplementors = []string{"DistrictAlarmContentPushStddevPopFields"}

func (ec *executionContext) _DistrictAlarmContentPushStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtAlarmContentPushStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DistrictAlarmContentPushStddevPopFields")
		case "id":
			out.Values[i] = ec._DistrictAlarmContentPushStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var districtAlarmContentPushStddevSampFieldsImplementors = []string{"DistrictAlarmContentPushStddevSampFields"}

func (ec *executionContext) _DistrictAlarmContentPushStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtAlarmContentPushStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DistrictAlarmContentPushStddevSampFields")
		case "id":
			out.Values[i] = ec._DistrictAlarmContentPushStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var districtAlarmContentPushSumFieldsImplementors = []string{"DistrictAlarmContentPushSumFields"}

func (ec *executionContext) _DistrictAlarmContentPushSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtAlarmContentPushSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DistrictAlarmContentPushSumFields")
		case "id":
			out.Values[i] = ec._DistrictAlarmContentPushSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var districtAlarmContentPushVarPopFieldsImplementors = []string{"DistrictAlarmContentPushVarPopFields"}

func (ec *executionContext) _DistrictAlarmContentPushVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtAlarmContentPushVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DistrictAlarmContentPushVarPopFields")
		case "id":
			out.Values[i] = ec._DistrictAlarmContentPushVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var districtAlarmContentPushVarSampFieldsImplementors = []string{"DistrictAlarmContentPushVarSampFields"}

func (ec *executionContext) _DistrictAlarmContentPushVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtAlarmContentPushVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DistrictAlarmContentPushVarSampFields")
		case "id":
			out.Values[i] = ec._DistrictAlarmContentPushVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var districtAlarmContentPushVarianceFieldsImplementors = []string{"DistrictAlarmContentPushVarianceFields"}

func (ec *executionContext) _DistrictAlarmContentPushVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtAlarmContentPushVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DistrictAlarmContentPushVarianceFields")
		case "id":
			out.Values[i] = ec._DistrictAlarmContentPushVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceImplementors = []string{"EnterpriseAlarmSendPolice"}

func (ec *executionContext) _EnterpriseAlarmSendPolice(ctx context.Context, sel ast.SelectionSet, obj *model1.EnterpriseAlarmSendPolice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPolice")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_alarm_send_police_id":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_enterprise_alarm_send_police_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_enterprise_id(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_enterprise_name(ctx, field, obj)
		case "enterprise_contact":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_enterprise_contact(ctx, field, obj)
		case "enterprise_phone":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_enterprise_phone(ctx, field, obj)
		case "police":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_police(ctx, field, obj)
		case "police_phone":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_police_phone(ctx, field, obj)
		case "phlice_department":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_phlice_department(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceAggregateImplementors = []string{"EnterpriseAlarmSendPoliceAggregate"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceAggregate")
		case "aggregate":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceAggregateFieldsImplementors = []string{"EnterpriseAlarmSendPoliceAggregateFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceAggregateFields")
		case "avg":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceAvgFieldsImplementors = []string{"EnterpriseAlarmSendPoliceAvgFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceAvgFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceMaxFieldsImplementors = []string{"EnterpriseAlarmSendPoliceMaxFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceMaxFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_id(ctx, field, obj)
		case "enterprise_alarm_send_police_id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_enterprise_alarm_send_police_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_enterprise_id(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_enterprise_name(ctx, field, obj)
		case "enterprise_contact":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_enterprise_contact(ctx, field, obj)
		case "enterprise_phone":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_enterprise_phone(ctx, field, obj)
		case "police":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_police(ctx, field, obj)
		case "police_phone":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_police_phone(ctx, field, obj)
		case "phlice_department":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_phlice_department(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceMinFieldsImplementors = []string{"EnterpriseAlarmSendPoliceMinFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceMinFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_id(ctx, field, obj)
		case "enterprise_alarm_send_police_id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_enterprise_alarm_send_police_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_enterprise_id(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_enterprise_name(ctx, field, obj)
		case "enterprise_contact":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_enterprise_contact(ctx, field, obj)
		case "enterprise_phone":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_enterprise_phone(ctx, field, obj)
		case "police":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_police(ctx, field, obj)
		case "police_phone":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_police_phone(ctx, field, obj)
		case "phlice_department":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_phlice_department(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceMutationResponseImplementors = []string{"EnterpriseAlarmSendPoliceMutationResponse"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceStddevFieldsImplementors = []string{"EnterpriseAlarmSendPoliceStddevFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceStddevFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceStddevPopFieldsImplementors = []string{"EnterpriseAlarmSendPoliceStddevPopFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceStddevPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceStddevSampFieldsImplementors = []string{"EnterpriseAlarmSendPoliceStddevSampFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceStddevSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceSumFieldsImplementors = []string{"EnterpriseAlarmSendPoliceSumFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceSumFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceVarPopFieldsImplementors = []string{"EnterpriseAlarmSendPoliceVarPopFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceVarPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceVarSampFieldsImplementors = []string{"EnterpriseAlarmSendPoliceVarSampFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceVarSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceVarianceFieldsImplementors = []string{"EnterpriseAlarmSendPoliceVarianceFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceVarianceFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_alarm_processing_record":
			out.Values[i] = ec._Mutation_delete_alarm_processing_record(ctx, field)
		case "delete_alarm_processing_record_by_pk":
			out.Values[i] = ec._Mutation_delete_alarm_processing_record_by_pk(ctx, field)
		case "insert_alarm_processing_record":
			out.Values[i] = ec._Mutation_insert_alarm_processing_record(ctx, field)
		case "insert_alarm_processing_record_one":
			out.Values[i] = ec._Mutation_insert_alarm_processing_record_one(ctx, field)
		case "update_alarm_processing_record":
			out.Values[i] = ec._Mutation_update_alarm_processing_record(ctx, field)
		case "update_alarm_processing_record_by_pk":
			out.Values[i] = ec._Mutation_update_alarm_processing_record_by_pk(ctx, field)
		case "delete_alarm_supervision_picture_upload":
			out.Values[i] = ec._Mutation_delete_alarm_supervision_picture_upload(ctx, field)
		case "delete_alarm_supervision_picture_upload_by_pk":
			out.Values[i] = ec._Mutation_delete_alarm_supervision_picture_upload_by_pk(ctx, field)
		case "insert_alarm_supervision_picture_upload":
			out.Values[i] = ec._Mutation_insert_alarm_supervision_picture_upload(ctx, field)
		case "insert_alarm_supervision_picture_upload_one":
			out.Values[i] = ec._Mutation_insert_alarm_supervision_picture_upload_one(ctx, field)
		case "update_alarm_supervision_picture_upload":
			out.Values[i] = ec._Mutation_update_alarm_supervision_picture_upload(ctx, field)
		case "update_alarm_supervision_picture_upload_by_pk":
			out.Values[i] = ec._Mutation_update_alarm_supervision_picture_upload_by_pk(ctx, field)
		case "delete_district_alarm_content_push":
			out.Values[i] = ec._Mutation_delete_district_alarm_content_push(ctx, field)
		case "delete_district_alarm_content_push_by_pk":
			out.Values[i] = ec._Mutation_delete_district_alarm_content_push_by_pk(ctx, field)
		case "insert_district_alarm_content_push":
			out.Values[i] = ec._Mutation_insert_district_alarm_content_push(ctx, field)
		case "insert_district_alarm_content_push_one":
			out.Values[i] = ec._Mutation_insert_district_alarm_content_push_one(ctx, field)
		case "update_district_alarm_content_push":
			out.Values[i] = ec._Mutation_update_district_alarm_content_push(ctx, field)
		case "update_district_alarm_content_push_by_pk":
			out.Values[i] = ec._Mutation_update_district_alarm_content_push_by_pk(ctx, field)
		case "delete_enterprise_alarm_send_police":
			out.Values[i] = ec._Mutation_delete_enterprise_alarm_send_police(ctx, field)
		case "delete_enterprise_alarm_send_police_by_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_alarm_send_police_by_pk(ctx, field)
		case "insert_enterprise_alarm_send_police":
			out.Values[i] = ec._Mutation_insert_enterprise_alarm_send_police(ctx, field)
		case "insert_enterprise_alarm_send_police_one":
			out.Values[i] = ec._Mutation_insert_enterprise_alarm_send_police_one(ctx, field)
		case "update_enterprise_alarm_send_police":
			out.Values[i] = ec._Mutation_update_enterprise_alarm_send_police(ctx, field)
		case "update_enterprise_alarm_send_police_by_pk":
			out.Values[i] = ec._Mutation_update_enterprise_alarm_send_police_by_pk(ctx, field)
		case "delete_offline_alarm_registration":
			out.Values[i] = ec._Mutation_delete_offline_alarm_registration(ctx, field)
		case "delete_offline_alarm_registration_by_pk":
			out.Values[i] = ec._Mutation_delete_offline_alarm_registration_by_pk(ctx, field)
		case "insert_offline_alarm_registration":
			out.Values[i] = ec._Mutation_insert_offline_alarm_registration(ctx, field)
		case "insert_offline_alarm_registration_one":
			out.Values[i] = ec._Mutation_insert_offline_alarm_registration_one(ctx, field)
		case "update_offline_alarm_registration":
			out.Values[i] = ec._Mutation_update_offline_alarm_registration(ctx, field)
		case "update_offline_alarm_registration_by_pk":
			out.Values[i] = ec._Mutation_update_offline_alarm_registration_by_pk(ctx, field)
		case "delete_vehicle_alarm_data":
			out.Values[i] = ec._Mutation_delete_vehicle_alarm_data(ctx, field)
		case "delete_vehicle_alarm_data_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_alarm_data_by_pk(ctx, field)
		case "insert_vehicle_alarm_data":
			out.Values[i] = ec._Mutation_insert_vehicle_alarm_data(ctx, field)
		case "insert_vehicle_alarm_data_one":
			out.Values[i] = ec._Mutation_insert_vehicle_alarm_data_one(ctx, field)
		case "update_vehicle_alarm_data":
			out.Values[i] = ec._Mutation_update_vehicle_alarm_data(ctx, field)
		case "update_vehicle_alarm_data_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_alarm_data_by_pk(ctx, field)
		case "delete_video_platform_alarm_type":
			out.Values[i] = ec._Mutation_delete_video_platform_alarm_type(ctx, field)
		case "delete_video_platform_alarm_type_by_pk":
			out.Values[i] = ec._Mutation_delete_video_platform_alarm_type_by_pk(ctx, field)
		case "insert_video_platform_alarm_type":
			out.Values[i] = ec._Mutation_insert_video_platform_alarm_type(ctx, field)
		case "insert_video_platform_alarm_type_one":
			out.Values[i] = ec._Mutation_insert_video_platform_alarm_type_one(ctx, field)
		case "update_video_platform_alarm_type":
			out.Values[i] = ec._Mutation_update_video_platform_alarm_type(ctx, field)
		case "update_video_platform_alarm_type_by_pk":
			out.Values[i] = ec._Mutation_update_video_platform_alarm_type_by_pk(ctx, field)
		case "delete_voice_alarm_record":
			out.Values[i] = ec._Mutation_delete_voice_alarm_record(ctx, field)
		case "delete_voice_alarm_record_by_pk":
			out.Values[i] = ec._Mutation_delete_voice_alarm_record_by_pk(ctx, field)
		case "insert_voice_alarm_record":
			out.Values[i] = ec._Mutation_insert_voice_alarm_record(ctx, field)
		case "insert_voice_alarm_record_one":
			out.Values[i] = ec._Mutation_insert_voice_alarm_record_one(ctx, field)
		case "update_voice_alarm_record":
			out.Values[i] = ec._Mutation_update_voice_alarm_record(ctx, field)
		case "update_voice_alarm_record_by_pk":
			out.Values[i] = ec._Mutation_update_voice_alarm_record_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineAlarmRegistrationImplementors = []string{"OfflineAlarmRegistration"}

func (ec *executionContext) _OfflineAlarmRegistration(ctx context.Context, sel ast.SelectionSet, obj *model1.OfflineAlarmRegistration) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineAlarmRegistrationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineAlarmRegistration")
		case "id":
			out.Values[i] = ec._OfflineAlarmRegistration_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "offline_alarm_registration_id":
			out.Values[i] = ec._OfflineAlarmRegistration_offline_alarm_registration_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._OfflineAlarmRegistration_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "offline_start_time":
			out.Values[i] = ec._OfflineAlarmRegistration_offline_start_time(ctx, field, obj)
		case "offline_end_time":
			out.Values[i] = ec._OfflineAlarmRegistration_offline_end_time(ctx, field, obj)
		case "registration_user":
			out.Values[i] = ec._OfflineAlarmRegistration_registration_user(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._OfflineAlarmRegistration_registration_time(ctx, field, obj)
		case "sms_content":
			out.Values[i] = ec._OfflineAlarmRegistration_sms_content(ctx, field, obj)
		case "phone_reminder_content":
			out.Values[i] = ec._OfflineAlarmRegistration_phone_reminder_content(ctx, field, obj)
		case "sms_send_time":
			out.Values[i] = ec._OfflineAlarmRegistration_sms_send_time(ctx, field, obj)
		case "phone_reminder_time":
			out.Values[i] = ec._OfflineAlarmRegistration_phone_reminder_time(ctx, field, obj)
		case "offline_reason":
			out.Values[i] = ec._OfflineAlarmRegistration_offline_reason(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._OfflineAlarmRegistration_alarm_type(ctx, field, obj)
		case "is_registration":
			out.Values[i] = ec._OfflineAlarmRegistration_is_registration(ctx, field, obj)
		case "is_end_alarm":
			out.Values[i] = ec._OfflineAlarmRegistration_is_end_alarm(ctx, field, obj)
		case "is_send_sms":
			out.Values[i] = ec._OfflineAlarmRegistration_is_send_sms(ctx, field, obj)
		case "is_need_maintain":
			out.Values[i] = ec._OfflineAlarmRegistration_is_need_maintain(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._OfflineAlarmRegistration_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._OfflineAlarmRegistration_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._OfflineAlarmRegistration_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._OfflineAlarmRegistration_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._OfflineAlarmRegistration_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._OfflineAlarmRegistration_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineAlarmRegistrationAggregateImplementors = []string{"OfflineAlarmRegistrationAggregate"}

func (ec *executionContext) _OfflineAlarmRegistrationAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineAlarmRegistrationAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineAlarmRegistrationAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineAlarmRegistrationAggregate")
		case "aggregate":
			out.Values[i] = ec._OfflineAlarmRegistrationAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineAlarmRegistrationAggregateFieldsImplementors = []string{"OfflineAlarmRegistrationAggregateFields"}

func (ec *executionContext) _OfflineAlarmRegistrationAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineAlarmRegistrationAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineAlarmRegistrationAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineAlarmRegistrationAggregateFields")
		case "avg":
			out.Values[i] = ec._OfflineAlarmRegistrationAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._OfflineAlarmRegistrationAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._OfflineAlarmRegistrationAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._OfflineAlarmRegistrationAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._OfflineAlarmRegistrationAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._OfflineAlarmRegistrationAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._OfflineAlarmRegistrationAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._OfflineAlarmRegistrationAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._OfflineAlarmRegistrationAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._OfflineAlarmRegistrationAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._OfflineAlarmRegistrationAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineAlarmRegistrationAvgFieldsImplementors = []string{"OfflineAlarmRegistrationAvgFields"}

func (ec *executionContext) _OfflineAlarmRegistrationAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineAlarmRegistrationAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineAlarmRegistrationAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineAlarmRegistrationAvgFields")
		case "id":
			out.Values[i] = ec._OfflineAlarmRegistrationAvgFields_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._OfflineAlarmRegistrationAvgFields_alarm_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineAlarmRegistrationMaxFieldsImplementors = []string{"OfflineAlarmRegistrationMaxFields"}

func (ec *executionContext) _OfflineAlarmRegistrationMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineAlarmRegistrationMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineAlarmRegistrationMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineAlarmRegistrationMaxFields")
		case "id":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_id(ctx, field, obj)
		case "offline_alarm_registration_id":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_offline_alarm_registration_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_vehicle_id(ctx, field, obj)
		case "offline_start_time":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_offline_start_time(ctx, field, obj)
		case "offline_end_time":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_offline_end_time(ctx, field, obj)
		case "registration_user":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_registration_user(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_registration_time(ctx, field, obj)
		case "sms_content":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_sms_content(ctx, field, obj)
		case "phone_reminder_content":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_phone_reminder_content(ctx, field, obj)
		case "sms_send_time":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_sms_send_time(ctx, field, obj)
		case "phone_reminder_time":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_phone_reminder_time(ctx, field, obj)
		case "offline_reason":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_offline_reason(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_alarm_type(ctx, field, obj)
		case "is_registration":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_is_registration(ctx, field, obj)
		case "is_end_alarm":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_is_end_alarm(ctx, field, obj)
		case "is_send_sms":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_is_send_sms(ctx, field, obj)
		case "is_need_maintain":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_is_need_maintain(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._OfflineAlarmRegistrationMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineAlarmRegistrationMinFieldsImplementors = []string{"OfflineAlarmRegistrationMinFields"}

func (ec *executionContext) _OfflineAlarmRegistrationMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineAlarmRegistrationMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineAlarmRegistrationMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineAlarmRegistrationMinFields")
		case "id":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_id(ctx, field, obj)
		case "offline_alarm_registration_id":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_offline_alarm_registration_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_vehicle_id(ctx, field, obj)
		case "offline_start_time":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_offline_start_time(ctx, field, obj)
		case "offline_end_time":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_offline_end_time(ctx, field, obj)
		case "registration_user":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_registration_user(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_registration_time(ctx, field, obj)
		case "sms_content":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_sms_content(ctx, field, obj)
		case "phone_reminder_content":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_phone_reminder_content(ctx, field, obj)
		case "sms_send_time":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_sms_send_time(ctx, field, obj)
		case "phone_reminder_time":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_phone_reminder_time(ctx, field, obj)
		case "offline_reason":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_offline_reason(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_alarm_type(ctx, field, obj)
		case "is_registration":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_is_registration(ctx, field, obj)
		case "is_end_alarm":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_is_end_alarm(ctx, field, obj)
		case "is_send_sms":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_is_send_sms(ctx, field, obj)
		case "is_need_maintain":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_is_need_maintain(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._OfflineAlarmRegistrationMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineAlarmRegistrationMutationResponseImplementors = []string{"OfflineAlarmRegistrationMutationResponse"}

func (ec *executionContext) _OfflineAlarmRegistrationMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineAlarmRegistrationMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineAlarmRegistrationMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineAlarmRegistrationMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._OfflineAlarmRegistrationMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._OfflineAlarmRegistrationMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineAlarmRegistrationStddevFieldsImplementors = []string{"OfflineAlarmRegistrationStddevFields"}

func (ec *executionContext) _OfflineAlarmRegistrationStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineAlarmRegistrationStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineAlarmRegistrationStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineAlarmRegistrationStddevFields")
		case "id":
			out.Values[i] = ec._OfflineAlarmRegistrationStddevFields_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._OfflineAlarmRegistrationStddevFields_alarm_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineAlarmRegistrationStddevPopFieldsImplementors = []string{"OfflineAlarmRegistrationStddevPopFields"}

func (ec *executionContext) _OfflineAlarmRegistrationStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineAlarmRegistrationStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineAlarmRegistrationStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineAlarmRegistrationStddevPopFields")
		case "id":
			out.Values[i] = ec._OfflineAlarmRegistrationStddevPopFields_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._OfflineAlarmRegistrationStddevPopFields_alarm_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineAlarmRegistrationStddevSampFieldsImplementors = []string{"OfflineAlarmRegistrationStddevSampFields"}

func (ec *executionContext) _OfflineAlarmRegistrationStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineAlarmRegistrationStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineAlarmRegistrationStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineAlarmRegistrationStddevSampFields")
		case "id":
			out.Values[i] = ec._OfflineAlarmRegistrationStddevSampFields_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._OfflineAlarmRegistrationStddevSampFields_alarm_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineAlarmRegistrationSumFieldsImplementors = []string{"OfflineAlarmRegistrationSumFields"}

func (ec *executionContext) _OfflineAlarmRegistrationSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineAlarmRegistrationSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineAlarmRegistrationSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineAlarmRegistrationSumFields")
		case "id":
			out.Values[i] = ec._OfflineAlarmRegistrationSumFields_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._OfflineAlarmRegistrationSumFields_alarm_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineAlarmRegistrationVarPopFieldsImplementors = []string{"OfflineAlarmRegistrationVarPopFields"}

func (ec *executionContext) _OfflineAlarmRegistrationVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineAlarmRegistrationVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineAlarmRegistrationVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineAlarmRegistrationVarPopFields")
		case "id":
			out.Values[i] = ec._OfflineAlarmRegistrationVarPopFields_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._OfflineAlarmRegistrationVarPopFields_alarm_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineAlarmRegistrationVarSampFieldsImplementors = []string{"OfflineAlarmRegistrationVarSampFields"}

func (ec *executionContext) _OfflineAlarmRegistrationVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineAlarmRegistrationVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineAlarmRegistrationVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineAlarmRegistrationVarSampFields")
		case "id":
			out.Values[i] = ec._OfflineAlarmRegistrationVarSampFields_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._OfflineAlarmRegistrationVarSampFields_alarm_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offlineAlarmRegistrationVarianceFieldsImplementors = []string{"OfflineAlarmRegistrationVarianceFields"}

func (ec *executionContext) _OfflineAlarmRegistrationVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.OfflineAlarmRegistrationVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offlineAlarmRegistrationVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfflineAlarmRegistrationVarianceFields")
		case "id":
			out.Values[i] = ec._OfflineAlarmRegistrationVarianceFields_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._OfflineAlarmRegistrationVarianceFields_alarm_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "alarm_processing_record":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_alarm_processing_record(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "alarm_processing_record_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_alarm_processing_record_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "alarm_processing_record_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_alarm_processing_record_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "alarm_supervision_picture_upload":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_alarm_supervision_picture_upload(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "alarm_supervision_picture_upload_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_alarm_supervision_picture_upload_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "alarm_supervision_picture_upload_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_alarm_supervision_picture_upload_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "district_alarm_content_push":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_district_alarm_content_push(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "district_alarm_content_push_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_district_alarm_content_push_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "district_alarm_content_push_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_district_alarm_content_push_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_alarm_send_police":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_alarm_send_police(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_alarm_send_police_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_alarm_send_police_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_alarm_send_police_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_alarm_send_police_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "offline_alarm_registration":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_offline_alarm_registration(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "offline_alarm_registration_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_offline_alarm_registration_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "offline_alarm_registration_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_offline_alarm_registration_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_alarm_data":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_alarm_data(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_alarm_data_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_alarm_data_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_alarm_data_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_alarm_data_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "video_platform_alarm_type":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_video_platform_alarm_type(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "video_platform_alarm_type_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_video_platform_alarm_type_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "video_platform_alarm_type_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_video_platform_alarm_type_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "voice_alarm_record":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_voice_alarm_record(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "voice_alarm_record_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_voice_alarm_record_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "voice_alarm_record_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_voice_alarm_record_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmDataImplementors = []string{"VehicleAlarmData"}

func (ec *executionContext) _VehicleAlarmData(ctx context.Context, sel ast.SelectionSet, obj *model1.VehicleAlarmData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmData")
		case "id":
			out.Values[i] = ec._VehicleAlarmData_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_alarm_data_id":
			out.Values[i] = ec._VehicleAlarmData_vehicle_alarm_data_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._VehicleAlarmData_vehicle_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._VehicleAlarmData_alarm_type(ctx, field, obj)
		case "alarm_start_time":
			out.Values[i] = ec._VehicleAlarmData_alarm_start_time(ctx, field, obj)
		case "alarm_end_time":
			out.Values[i] = ec._VehicleAlarmData_alarm_end_time(ctx, field, obj)
		case "alarm_end_position":
			out.Values[i] = ec._VehicleAlarmData_alarm_end_position(ctx, field, obj)
		case "latest_alarm_time":
			out.Values[i] = ec._VehicleAlarmData_latest_alarm_time(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._VehicleAlarmData_latest_alarm_position(ctx, field, obj)
		case "is_alarm_effective":
			out.Values[i] = ec._VehicleAlarmData_is_alarm_effective(ctx, field, obj)
		case "is_alarm_over":
			out.Values[i] = ec._VehicleAlarmData_is_alarm_over(ctx, field, obj)
		case "is_cancel_alarm":
			out.Values[i] = ec._VehicleAlarmData_is_cancel_alarm(ctx, field, obj)
		case "alarm_source":
			out.Values[i] = ec._VehicleAlarmData_alarm_source(ctx, field, obj)
		case "processing_time":
			out.Values[i] = ec._VehicleAlarmData_processing_time(ctx, field, obj)
		case "processing_method":
			out.Values[i] = ec._VehicleAlarmData_processing_method(ctx, field, obj)
		case "processing_description":
			out.Values[i] = ec._VehicleAlarmData_processing_description(ctx, field, obj)
		case "processor":
			out.Values[i] = ec._VehicleAlarmData_processor(ctx, field, obj)
		case "processing_status":
			out.Values[i] = ec._VehicleAlarmData_processing_status(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleAlarmData_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleAlarmData_gps_speed(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._VehicleAlarmData_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleAlarmData_speed_limit_threshold(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._VehicleAlarmData_coordinate(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._VehicleAlarmData_location_description(ctx, field, obj)
		case "duration":
			out.Values[i] = ec._VehicleAlarmData_duration(ctx, field, obj)
		case "road_grade":
			out.Values[i] = ec._VehicleAlarmData_road_grade(ctx, field, obj)
		case "road_name":
			out.Values[i] = ec._VehicleAlarmData_road_name(ctx, field, obj)
		case "area_id":
			out.Values[i] = ec._VehicleAlarmData_area_id(ctx, field, obj)
		case "alarm_deal_id":
			out.Values[i] = ec._VehicleAlarmData_alarm_deal_id(ctx, field, obj)
		case "pid":
			out.Values[i] = ec._VehicleAlarmData_pid(ctx, field, obj)
		case "record_time":
			out.Values[i] = ec._VehicleAlarmData_record_time(ctx, field, obj)
		case "supervisor":
			out.Values[i] = ec._VehicleAlarmData_supervisor(ctx, field, obj)
		case "is_supervise":
			out.Values[i] = ec._VehicleAlarmData_is_supervise(ctx, field, obj)
		case "supervision_time":
			out.Values[i] = ec._VehicleAlarmData_supervision_time(ctx, field, obj)
		case "supervision_note":
			out.Values[i] = ec._VehicleAlarmData_supervision_note(ctx, field, obj)
		case "is_resolve":
			out.Values[i] = ec._VehicleAlarmData_is_resolve(ctx, field, obj)
		case "is_construction_site_handle":
			out.Values[i] = ec._VehicleAlarmData_is_construction_site_handle(ctx, field, obj)
		case "construction_site_handle_time":
			out.Values[i] = ec._VehicleAlarmData_construction_site_handle_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleAlarmData_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._VehicleAlarmData_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._VehicleAlarmData_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleAlarmData_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleAlarmData_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleAlarmData_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmDataAggregateImplementors = []string{"VehicleAlarmDataAggregate"}

func (ec *executionContext) _VehicleAlarmDataAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmDataAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmDataAggregate")
		case "aggregate":
			out.Values[i] = ec._VehicleAlarmDataAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmDataAggregateFieldsImplementors = []string{"VehicleAlarmDataAggregateFields"}

func (ec *executionContext) _VehicleAlarmDataAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmDataAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmDataAggregateFields")
		case "avg":
			out.Values[i] = ec._VehicleAlarmDataAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VehicleAlarmDataAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VehicleAlarmDataAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VehicleAlarmDataAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VehicleAlarmDataAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VehicleAlarmDataAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VehicleAlarmDataAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VehicleAlarmDataAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VehicleAlarmDataAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VehicleAlarmDataAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VehicleAlarmDataAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmDataAvgFieldsImplementors = []string{"VehicleAlarmDataAvgFields"}

func (ec *executionContext) _VehicleAlarmDataAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmDataAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmDataAvgFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmDataAvgFields_id(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._VehicleAlarmDataAvgFields_latest_alarm_position(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleAlarmDataAvgFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleAlarmDataAvgFields_gps_speed(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._VehicleAlarmDataAvgFields_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleAlarmDataAvgFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmDataMaxFieldsImplementors = []string{"VehicleAlarmDataMaxFields"}

func (ec *executionContext) _VehicleAlarmDataMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmDataMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmDataMaxFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_id(ctx, field, obj)
		case "vehicle_alarm_data_id":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_vehicle_alarm_data_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_vehicle_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_alarm_type(ctx, field, obj)
		case "alarm_start_time":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_alarm_start_time(ctx, field, obj)
		case "alarm_end_time":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_alarm_end_time(ctx, field, obj)
		case "alarm_end_position":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_alarm_end_position(ctx, field, obj)
		case "latest_alarm_time":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_latest_alarm_time(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_latest_alarm_position(ctx, field, obj)
		case "is_alarm_effective":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_is_alarm_effective(ctx, field, obj)
		case "is_alarm_over":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_is_alarm_over(ctx, field, obj)
		case "is_cancel_alarm":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_is_cancel_alarm(ctx, field, obj)
		case "alarm_source":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_alarm_source(ctx, field, obj)
		case "processing_time":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_processing_time(ctx, field, obj)
		case "processing_method":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_processing_method(ctx, field, obj)
		case "processing_description":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_processing_description(ctx, field, obj)
		case "processor":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_processor(ctx, field, obj)
		case "processing_status":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_processing_status(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_gps_speed(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_speed_limit_threshold(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_coordinate(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_location_description(ctx, field, obj)
		case "duration":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_duration(ctx, field, obj)
		case "road_grade":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_road_grade(ctx, field, obj)
		case "road_name":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_road_name(ctx, field, obj)
		case "area_id":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_area_id(ctx, field, obj)
		case "alarm_deal_id":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_alarm_deal_id(ctx, field, obj)
		case "pid":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_pid(ctx, field, obj)
		case "record_time":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_record_time(ctx, field, obj)
		case "supervisor":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_supervisor(ctx, field, obj)
		case "is_supervise":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_is_supervise(ctx, field, obj)
		case "supervision_time":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_supervision_time(ctx, field, obj)
		case "supervision_note":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_supervision_note(ctx, field, obj)
		case "is_resolve":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_is_resolve(ctx, field, obj)
		case "is_construction_site_handle":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_is_construction_site_handle(ctx, field, obj)
		case "construction_site_handle_time":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_construction_site_handle_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleAlarmDataMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmDataMinFieldsImplementors = []string{"VehicleAlarmDataMinFields"}

func (ec *executionContext) _VehicleAlarmDataMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmDataMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmDataMinFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmDataMinFields_id(ctx, field, obj)
		case "vehicle_alarm_data_id":
			out.Values[i] = ec._VehicleAlarmDataMinFields_vehicle_alarm_data_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleAlarmDataMinFields_vehicle_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._VehicleAlarmDataMinFields_alarm_type(ctx, field, obj)
		case "alarm_start_time":
			out.Values[i] = ec._VehicleAlarmDataMinFields_alarm_start_time(ctx, field, obj)
		case "alarm_end_time":
			out.Values[i] = ec._VehicleAlarmDataMinFields_alarm_end_time(ctx, field, obj)
		case "alarm_end_position":
			out.Values[i] = ec._VehicleAlarmDataMinFields_alarm_end_position(ctx, field, obj)
		case "latest_alarm_time":
			out.Values[i] = ec._VehicleAlarmDataMinFields_latest_alarm_time(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._VehicleAlarmDataMinFields_latest_alarm_position(ctx, field, obj)
		case "is_alarm_effective":
			out.Values[i] = ec._VehicleAlarmDataMinFields_is_alarm_effective(ctx, field, obj)
		case "is_alarm_over":
			out.Values[i] = ec._VehicleAlarmDataMinFields_is_alarm_over(ctx, field, obj)
		case "is_cancel_alarm":
			out.Values[i] = ec._VehicleAlarmDataMinFields_is_cancel_alarm(ctx, field, obj)
		case "alarm_source":
			out.Values[i] = ec._VehicleAlarmDataMinFields_alarm_source(ctx, field, obj)
		case "processing_time":
			out.Values[i] = ec._VehicleAlarmDataMinFields_processing_time(ctx, field, obj)
		case "processing_method":
			out.Values[i] = ec._VehicleAlarmDataMinFields_processing_method(ctx, field, obj)
		case "processing_description":
			out.Values[i] = ec._VehicleAlarmDataMinFields_processing_description(ctx, field, obj)
		case "processor":
			out.Values[i] = ec._VehicleAlarmDataMinFields_processor(ctx, field, obj)
		case "processing_status":
			out.Values[i] = ec._VehicleAlarmDataMinFields_processing_status(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleAlarmDataMinFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleAlarmDataMinFields_gps_speed(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._VehicleAlarmDataMinFields_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleAlarmDataMinFields_speed_limit_threshold(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._VehicleAlarmDataMinFields_coordinate(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._VehicleAlarmDataMinFields_location_description(ctx, field, obj)
		case "duration":
			out.Values[i] = ec._VehicleAlarmDataMinFields_duration(ctx, field, obj)
		case "road_grade":
			out.Values[i] = ec._VehicleAlarmDataMinFields_road_grade(ctx, field, obj)
		case "road_name":
			out.Values[i] = ec._VehicleAlarmDataMinFields_road_name(ctx, field, obj)
		case "area_id":
			out.Values[i] = ec._VehicleAlarmDataMinFields_area_id(ctx, field, obj)
		case "alarm_deal_id":
			out.Values[i] = ec._VehicleAlarmDataMinFields_alarm_deal_id(ctx, field, obj)
		case "pid":
			out.Values[i] = ec._VehicleAlarmDataMinFields_pid(ctx, field, obj)
		case "record_time":
			out.Values[i] = ec._VehicleAlarmDataMinFields_record_time(ctx, field, obj)
		case "supervisor":
			out.Values[i] = ec._VehicleAlarmDataMinFields_supervisor(ctx, field, obj)
		case "is_supervise":
			out.Values[i] = ec._VehicleAlarmDataMinFields_is_supervise(ctx, field, obj)
		case "supervision_time":
			out.Values[i] = ec._VehicleAlarmDataMinFields_supervision_time(ctx, field, obj)
		case "supervision_note":
			out.Values[i] = ec._VehicleAlarmDataMinFields_supervision_note(ctx, field, obj)
		case "is_resolve":
			out.Values[i] = ec._VehicleAlarmDataMinFields_is_resolve(ctx, field, obj)
		case "is_construction_site_handle":
			out.Values[i] = ec._VehicleAlarmDataMinFields_is_construction_site_handle(ctx, field, obj)
		case "construction_site_handle_time":
			out.Values[i] = ec._VehicleAlarmDataMinFields_construction_site_handle_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleAlarmDataMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleAlarmDataMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleAlarmDataMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleAlarmDataMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleAlarmDataMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleAlarmDataMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmDataMutationResponseImplementors = []string{"VehicleAlarmDataMutationResponse"}

func (ec *executionContext) _VehicleAlarmDataMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmDataMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmDataMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VehicleAlarmDataMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VehicleAlarmDataMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmDataStddevFieldsImplementors = []string{"VehicleAlarmDataStddevFields"}

func (ec *executionContext) _VehicleAlarmDataStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmDataStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmDataStddevFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmDataStddevFields_id(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._VehicleAlarmDataStddevFields_latest_alarm_position(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleAlarmDataStddevFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleAlarmDataStddevFields_gps_speed(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._VehicleAlarmDataStddevFields_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleAlarmDataStddevFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmDataStddevPopFieldsImplementors = []string{"VehicleAlarmDataStddevPopFields"}

func (ec *executionContext) _VehicleAlarmDataStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmDataStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmDataStddevPopFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmDataStddevPopFields_id(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._VehicleAlarmDataStddevPopFields_latest_alarm_position(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleAlarmDataStddevPopFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleAlarmDataStddevPopFields_gps_speed(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._VehicleAlarmDataStddevPopFields_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleAlarmDataStddevPopFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmDataStddevSampFieldsImplementors = []string{"VehicleAlarmDataStddevSampFields"}

func (ec *executionContext) _VehicleAlarmDataStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmDataStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmDataStddevSampFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmDataStddevSampFields_id(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._VehicleAlarmDataStddevSampFields_latest_alarm_position(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleAlarmDataStddevSampFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleAlarmDataStddevSampFields_gps_speed(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._VehicleAlarmDataStddevSampFields_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleAlarmDataStddevSampFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmDataSumFieldsImplementors = []string{"VehicleAlarmDataSumFields"}

func (ec *executionContext) _VehicleAlarmDataSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmDataSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmDataSumFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmDataSumFields_id(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._VehicleAlarmDataSumFields_latest_alarm_position(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleAlarmDataSumFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleAlarmDataSumFields_gps_speed(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._VehicleAlarmDataSumFields_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleAlarmDataSumFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmDataVarPopFieldsImplementors = []string{"VehicleAlarmDataVarPopFields"}

func (ec *executionContext) _VehicleAlarmDataVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmDataVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmDataVarPopFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmDataVarPopFields_id(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._VehicleAlarmDataVarPopFields_latest_alarm_position(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleAlarmDataVarPopFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleAlarmDataVarPopFields_gps_speed(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._VehicleAlarmDataVarPopFields_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleAlarmDataVarPopFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmDataVarSampFieldsImplementors = []string{"VehicleAlarmDataVarSampFields"}

func (ec *executionContext) _VehicleAlarmDataVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmDataVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmDataVarSampFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmDataVarSampFields_id(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._VehicleAlarmDataVarSampFields_latest_alarm_position(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleAlarmDataVarSampFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleAlarmDataVarSampFields_gps_speed(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._VehicleAlarmDataVarSampFields_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleAlarmDataVarSampFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmDataVarianceFieldsImplementors = []string{"VehicleAlarmDataVarianceFields"}

func (ec *executionContext) _VehicleAlarmDataVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmDataVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmDataVarianceFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmDataVarianceFields_id(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._VehicleAlarmDataVarianceFields_latest_alarm_position(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleAlarmDataVarianceFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleAlarmDataVarianceFields_gps_speed(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._VehicleAlarmDataVarianceFields_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleAlarmDataVarianceFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoPlatformAlarmTypeImplementors = []string{"VideoPlatformAlarmType"}

func (ec *executionContext) _VideoPlatformAlarmType(ctx context.Context, sel ast.SelectionSet, obj *model1.VideoPlatformAlarmType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoPlatformAlarmTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoPlatformAlarmType")
		case "id":
			out.Values[i] = ec._VideoPlatformAlarmType_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "video_platform_alarm_type_id":
			out.Values[i] = ec._VideoPlatformAlarmType_video_platform_alarm_type_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_alarm_data_id":
			out.Values[i] = ec._VideoPlatformAlarmType_vehicle_alarm_data_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._VideoPlatformAlarmType_alarm_type(ctx, field, obj)
		case "alarm_source":
			out.Values[i] = ec._VideoPlatformAlarmType_alarm_source(ctx, field, obj)
		case "alarm_classify":
			out.Values[i] = ec._VideoPlatformAlarmType_alarm_classify(ctx, field, obj)
		case "alarm_code":
			out.Values[i] = ec._VideoPlatformAlarmType_alarm_code(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VideoPlatformAlarmType_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VideoPlatformAlarmType_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._VideoPlatformAlarmType_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._VideoPlatformAlarmType_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VideoPlatformAlarmType_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VideoPlatformAlarmType_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VideoPlatformAlarmType_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoPlatformAlarmTypeAggregateImplementors = []string{"VideoPlatformAlarmTypeAggregate"}

func (ec *executionContext) _VideoPlatformAlarmTypeAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VideoPlatformAlarmTypeAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoPlatformAlarmTypeAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoPlatformAlarmTypeAggregate")
		case "aggregate":
			out.Values[i] = ec._VideoPlatformAlarmTypeAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoPlatformAlarmTypeAggregateFieldsImplementors = []string{"VideoPlatformAlarmTypeAggregateFields"}

func (ec *executionContext) _VideoPlatformAlarmTypeAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VideoPlatformAlarmTypeAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoPlatformAlarmTypeAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoPlatformAlarmTypeAggregateFields")
		case "avg":
			out.Values[i] = ec._VideoPlatformAlarmTypeAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VideoPlatformAlarmTypeAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VideoPlatformAlarmTypeAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VideoPlatformAlarmTypeAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VideoPlatformAlarmTypeAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VideoPlatformAlarmTypeAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VideoPlatformAlarmTypeAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VideoPlatformAlarmTypeAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VideoPlatformAlarmTypeAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VideoPlatformAlarmTypeAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VideoPlatformAlarmTypeAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoPlatformAlarmTypeAvgFieldsImplementors = []string{"VideoPlatformAlarmTypeAvgFields"}

func (ec *executionContext) _VideoPlatformAlarmTypeAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VideoPlatformAlarmTypeAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoPlatformAlarmTypeAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoPlatformAlarmTypeAvgFields")
		case "id":
			out.Values[i] = ec._VideoPlatformAlarmTypeAvgFields_id(ctx, field, obj)
		case "vehicle_alarm_data_id":
			out.Values[i] = ec._VideoPlatformAlarmTypeAvgFields_vehicle_alarm_data_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoPlatformAlarmTypeMaxFieldsImplementors = []string{"VideoPlatformAlarmTypeMaxFields"}

func (ec *executionContext) _VideoPlatformAlarmTypeMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VideoPlatformAlarmTypeMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoPlatformAlarmTypeMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoPlatformAlarmTypeMaxFields")
		case "id":
			out.Values[i] = ec._VideoPlatformAlarmTypeMaxFields_id(ctx, field, obj)
		case "video_platform_alarm_type_id":
			out.Values[i] = ec._VideoPlatformAlarmTypeMaxFields_video_platform_alarm_type_id(ctx, field, obj)
		case "vehicle_alarm_data_id":
			out.Values[i] = ec._VideoPlatformAlarmTypeMaxFields_vehicle_alarm_data_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._VideoPlatformAlarmTypeMaxFields_alarm_type(ctx, field, obj)
		case "alarm_source":
			out.Values[i] = ec._VideoPlatformAlarmTypeMaxFields_alarm_source(ctx, field, obj)
		case "alarm_classify":
			out.Values[i] = ec._VideoPlatformAlarmTypeMaxFields_alarm_classify(ctx, field, obj)
		case "alarm_code":
			out.Values[i] = ec._VideoPlatformAlarmTypeMaxFields_alarm_code(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VideoPlatformAlarmTypeMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VideoPlatformAlarmTypeMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VideoPlatformAlarmTypeMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VideoPlatformAlarmTypeMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VideoPlatformAlarmTypeMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VideoPlatformAlarmTypeMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VideoPlatformAlarmTypeMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoPlatformAlarmTypeMinFieldsImplementors = []string{"VideoPlatformAlarmTypeMinFields"}

func (ec *executionContext) _VideoPlatformAlarmTypeMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VideoPlatformAlarmTypeMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoPlatformAlarmTypeMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoPlatformAlarmTypeMinFields")
		case "id":
			out.Values[i] = ec._VideoPlatformAlarmTypeMinFields_id(ctx, field, obj)
		case "video_platform_alarm_type_id":
			out.Values[i] = ec._VideoPlatformAlarmTypeMinFields_video_platform_alarm_type_id(ctx, field, obj)
		case "vehicle_alarm_data_id":
			out.Values[i] = ec._VideoPlatformAlarmTypeMinFields_vehicle_alarm_data_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._VideoPlatformAlarmTypeMinFields_alarm_type(ctx, field, obj)
		case "alarm_source":
			out.Values[i] = ec._VideoPlatformAlarmTypeMinFields_alarm_source(ctx, field, obj)
		case "alarm_classify":
			out.Values[i] = ec._VideoPlatformAlarmTypeMinFields_alarm_classify(ctx, field, obj)
		case "alarm_code":
			out.Values[i] = ec._VideoPlatformAlarmTypeMinFields_alarm_code(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VideoPlatformAlarmTypeMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VideoPlatformAlarmTypeMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VideoPlatformAlarmTypeMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VideoPlatformAlarmTypeMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VideoPlatformAlarmTypeMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VideoPlatformAlarmTypeMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VideoPlatformAlarmTypeMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoPlatformAlarmTypeMutationResponseImplementors = []string{"VideoPlatformAlarmTypeMutationResponse"}

func (ec *executionContext) _VideoPlatformAlarmTypeMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VideoPlatformAlarmTypeMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoPlatformAlarmTypeMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoPlatformAlarmTypeMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VideoPlatformAlarmTypeMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VideoPlatformAlarmTypeMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoPlatformAlarmTypeStddevFieldsImplementors = []string{"VideoPlatformAlarmTypeStddevFields"}

func (ec *executionContext) _VideoPlatformAlarmTypeStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VideoPlatformAlarmTypeStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoPlatformAlarmTypeStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoPlatformAlarmTypeStddevFields")
		case "id":
			out.Values[i] = ec._VideoPlatformAlarmTypeStddevFields_id(ctx, field, obj)
		case "vehicle_alarm_data_id":
			out.Values[i] = ec._VideoPlatformAlarmTypeStddevFields_vehicle_alarm_data_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoPlatformAlarmTypeStddevPopFieldsImplementors = []string{"VideoPlatformAlarmTypeStddevPopFields"}

func (ec *executionContext) _VideoPlatformAlarmTypeStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VideoPlatformAlarmTypeStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoPlatformAlarmTypeStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoPlatformAlarmTypeStddevPopFields")
		case "id":
			out.Values[i] = ec._VideoPlatformAlarmTypeStddevPopFields_id(ctx, field, obj)
		case "vehicle_alarm_data_id":
			out.Values[i] = ec._VideoPlatformAlarmTypeStddevPopFields_vehicle_alarm_data_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoPlatformAlarmTypeStddevSampFieldsImplementors = []string{"VideoPlatformAlarmTypeStddevSampFields"}

func (ec *executionContext) _VideoPlatformAlarmTypeStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VideoPlatformAlarmTypeStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoPlatformAlarmTypeStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoPlatformAlarmTypeStddevSampFields")
		case "id":
			out.Values[i] = ec._VideoPlatformAlarmTypeStddevSampFields_id(ctx, field, obj)
		case "vehicle_alarm_data_id":
			out.Values[i] = ec._VideoPlatformAlarmTypeStddevSampFields_vehicle_alarm_data_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoPlatformAlarmTypeSumFieldsImplementors = []string{"VideoPlatformAlarmTypeSumFields"}

func (ec *executionContext) _VideoPlatformAlarmTypeSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VideoPlatformAlarmTypeSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoPlatformAlarmTypeSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoPlatformAlarmTypeSumFields")
		case "id":
			out.Values[i] = ec._VideoPlatformAlarmTypeSumFields_id(ctx, field, obj)
		case "vehicle_alarm_data_id":
			out.Values[i] = ec._VideoPlatformAlarmTypeSumFields_vehicle_alarm_data_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoPlatformAlarmTypeVarPopFieldsImplementors = []string{"VideoPlatformAlarmTypeVarPopFields"}

func (ec *executionContext) _VideoPlatformAlarmTypeVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VideoPlatformAlarmTypeVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoPlatformAlarmTypeVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoPlatformAlarmTypeVarPopFields")
		case "id":
			out.Values[i] = ec._VideoPlatformAlarmTypeVarPopFields_id(ctx, field, obj)
		case "vehicle_alarm_data_id":
			out.Values[i] = ec._VideoPlatformAlarmTypeVarPopFields_vehicle_alarm_data_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoPlatformAlarmTypeVarSampFieldsImplementors = []string{"VideoPlatformAlarmTypeVarSampFields"}

func (ec *executionContext) _VideoPlatformAlarmTypeVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VideoPlatformAlarmTypeVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoPlatformAlarmTypeVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoPlatformAlarmTypeVarSampFields")
		case "id":
			out.Values[i] = ec._VideoPlatformAlarmTypeVarSampFields_id(ctx, field, obj)
		case "vehicle_alarm_data_id":
			out.Values[i] = ec._VideoPlatformAlarmTypeVarSampFields_vehicle_alarm_data_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoPlatformAlarmTypeVarianceFieldsImplementors = []string{"VideoPlatformAlarmTypeVarianceFields"}

func (ec *executionContext) _VideoPlatformAlarmTypeVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VideoPlatformAlarmTypeVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoPlatformAlarmTypeVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoPlatformAlarmTypeVarianceFields")
		case "id":
			out.Values[i] = ec._VideoPlatformAlarmTypeVarianceFields_id(ctx, field, obj)
		case "vehicle_alarm_data_id":
			out.Values[i] = ec._VideoPlatformAlarmTypeVarianceFields_vehicle_alarm_data_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var voiceAlarmRecordImplementors = []string{"VoiceAlarmRecord"}

func (ec *executionContext) _VoiceAlarmRecord(ctx context.Context, sel ast.SelectionSet, obj *model1.VoiceAlarmRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, voiceAlarmRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VoiceAlarmRecord")
		case "id":
			out.Values[i] = ec._VoiceAlarmRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vioce_alarm_record_id":
			out.Values[i] = ec._VoiceAlarmRecord_vioce_alarm_record_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._VoiceAlarmRecord_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "alarm_time":
			out.Values[i] = ec._VoiceAlarmRecord_alarm_time(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._VoiceAlarmRecord_alarm_type(ctx, field, obj)
		case "remind_time":
			out.Values[i] = ec._VoiceAlarmRecord_remind_time(ctx, field, obj)
		case "remind_content":
			out.Values[i] = ec._VoiceAlarmRecord_remind_content(ctx, field, obj)
		case "input_person":
			out.Values[i] = ec._VoiceAlarmRecord_input_person(ctx, field, obj)
		case "input_time":
			out.Values[i] = ec._VoiceAlarmRecord_input_time(ctx, field, obj)
		case "is_success":
			out.Values[i] = ec._VoiceAlarmRecord_is_success(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VoiceAlarmRecord_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._VoiceAlarmRecord_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._VoiceAlarmRecord_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VoiceAlarmRecord_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VoiceAlarmRecord_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VoiceAlarmRecord_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var voiceAlarmRecordAggregateImplementors = []string{"VoiceAlarmRecordAggregate"}

func (ec *executionContext) _VoiceAlarmRecordAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VoiceAlarmRecordAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, voiceAlarmRecordAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VoiceAlarmRecordAggregate")
		case "aggregate":
			out.Values[i] = ec._VoiceAlarmRecordAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var voiceAlarmRecordAggregateFieldsImplementors = []string{"VoiceAlarmRecordAggregateFields"}

func (ec *executionContext) _VoiceAlarmRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VoiceAlarmRecordAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, voiceAlarmRecordAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VoiceAlarmRecordAggregateFields")
		case "avg":
			out.Values[i] = ec._VoiceAlarmRecordAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VoiceAlarmRecordAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VoiceAlarmRecordAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VoiceAlarmRecordAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VoiceAlarmRecordAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VoiceAlarmRecordAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VoiceAlarmRecordAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VoiceAlarmRecordAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VoiceAlarmRecordAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VoiceAlarmRecordAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VoiceAlarmRecordAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var voiceAlarmRecordAvgFieldsImplementors = []string{"VoiceAlarmRecordAvgFields"}

func (ec *executionContext) _VoiceAlarmRecordAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VoiceAlarmRecordAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, voiceAlarmRecordAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VoiceAlarmRecordAvgFields")
		case "id":
			out.Values[i] = ec._VoiceAlarmRecordAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var voiceAlarmRecordMaxFieldsImplementors = []string{"VoiceAlarmRecordMaxFields"}

func (ec *executionContext) _VoiceAlarmRecordMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VoiceAlarmRecordMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, voiceAlarmRecordMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VoiceAlarmRecordMaxFields")
		case "id":
			out.Values[i] = ec._VoiceAlarmRecordMaxFields_id(ctx, field, obj)
		case "vioce_alarm_record_id":
			out.Values[i] = ec._VoiceAlarmRecordMaxFields_vioce_alarm_record_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VoiceAlarmRecordMaxFields_vehicle_id(ctx, field, obj)
		case "alarm_time":
			out.Values[i] = ec._VoiceAlarmRecordMaxFields_alarm_time(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._VoiceAlarmRecordMaxFields_alarm_type(ctx, field, obj)
		case "remind_time":
			out.Values[i] = ec._VoiceAlarmRecordMaxFields_remind_time(ctx, field, obj)
		case "remind_content":
			out.Values[i] = ec._VoiceAlarmRecordMaxFields_remind_content(ctx, field, obj)
		case "input_person":
			out.Values[i] = ec._VoiceAlarmRecordMaxFields_input_person(ctx, field, obj)
		case "input_time":
			out.Values[i] = ec._VoiceAlarmRecordMaxFields_input_time(ctx, field, obj)
		case "is_success":
			out.Values[i] = ec._VoiceAlarmRecordMaxFields_is_success(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VoiceAlarmRecordMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VoiceAlarmRecordMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VoiceAlarmRecordMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VoiceAlarmRecordMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VoiceAlarmRecordMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VoiceAlarmRecordMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var voiceAlarmRecordMinFieldsImplementors = []string{"VoiceAlarmRecordMinFields"}

func (ec *executionContext) _VoiceAlarmRecordMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VoiceAlarmRecordMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, voiceAlarmRecordMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VoiceAlarmRecordMinFields")
		case "id":
			out.Values[i] = ec._VoiceAlarmRecordMinFields_id(ctx, field, obj)
		case "vioce_alarm_record_id":
			out.Values[i] = ec._VoiceAlarmRecordMinFields_vioce_alarm_record_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VoiceAlarmRecordMinFields_vehicle_id(ctx, field, obj)
		case "alarm_time":
			out.Values[i] = ec._VoiceAlarmRecordMinFields_alarm_time(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._VoiceAlarmRecordMinFields_alarm_type(ctx, field, obj)
		case "remind_time":
			out.Values[i] = ec._VoiceAlarmRecordMinFields_remind_time(ctx, field, obj)
		case "remind_content":
			out.Values[i] = ec._VoiceAlarmRecordMinFields_remind_content(ctx, field, obj)
		case "input_person":
			out.Values[i] = ec._VoiceAlarmRecordMinFields_input_person(ctx, field, obj)
		case "input_time":
			out.Values[i] = ec._VoiceAlarmRecordMinFields_input_time(ctx, field, obj)
		case "is_success":
			out.Values[i] = ec._VoiceAlarmRecordMinFields_is_success(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VoiceAlarmRecordMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VoiceAlarmRecordMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VoiceAlarmRecordMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VoiceAlarmRecordMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VoiceAlarmRecordMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VoiceAlarmRecordMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var voiceAlarmRecordMutationResponseImplementors = []string{"VoiceAlarmRecordMutationResponse"}

func (ec *executionContext) _VoiceAlarmRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VoiceAlarmRecordMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, voiceAlarmRecordMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VoiceAlarmRecordMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VoiceAlarmRecordMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VoiceAlarmRecordMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var voiceAlarmRecordStddevFieldsImplementors = []string{"VoiceAlarmRecordStddevFields"}

func (ec *executionContext) _VoiceAlarmRecordStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VoiceAlarmRecordStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, voiceAlarmRecordStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VoiceAlarmRecordStddevFields")
		case "id":
			out.Values[i] = ec._VoiceAlarmRecordStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var voiceAlarmRecordStddevPopFieldsImplementors = []string{"VoiceAlarmRecordStddevPopFields"}

func (ec *executionContext) _VoiceAlarmRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VoiceAlarmRecordStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, voiceAlarmRecordStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VoiceAlarmRecordStddevPopFields")
		case "id":
			out.Values[i] = ec._VoiceAlarmRecordStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var voiceAlarmRecordStddevSampFieldsImplementors = []string{"VoiceAlarmRecordStddevSampFields"}

func (ec *executionContext) _VoiceAlarmRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VoiceAlarmRecordStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, voiceAlarmRecordStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VoiceAlarmRecordStddevSampFields")
		case "id":
			out.Values[i] = ec._VoiceAlarmRecordStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var voiceAlarmRecordSumFieldsImplementors = []string{"VoiceAlarmRecordSumFields"}

func (ec *executionContext) _VoiceAlarmRecordSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VoiceAlarmRecordSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, voiceAlarmRecordSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VoiceAlarmRecordSumFields")
		case "id":
			out.Values[i] = ec._VoiceAlarmRecordSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var voiceAlarmRecordVarPopFieldsImplementors = []string{"VoiceAlarmRecordVarPopFields"}

func (ec *executionContext) _VoiceAlarmRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VoiceAlarmRecordVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, voiceAlarmRecordVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VoiceAlarmRecordVarPopFields")
		case "id":
			out.Values[i] = ec._VoiceAlarmRecordVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var voiceAlarmRecordVarSampFieldsImplementors = []string{"VoiceAlarmRecordVarSampFields"}

func (ec *executionContext) _VoiceAlarmRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VoiceAlarmRecordVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, voiceAlarmRecordVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VoiceAlarmRecordVarSampFields")
		case "id":
			out.Values[i] = ec._VoiceAlarmRecordVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var voiceAlarmRecordVarianceFieldsImplementors = []string{"VoiceAlarmRecordVarianceFields"}

func (ec *executionContext) _VoiceAlarmRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VoiceAlarmRecordVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, voiceAlarmRecordVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VoiceAlarmRecordVarianceFields")
		case "id":
			out.Values[i] = ec._VoiceAlarmRecordVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAlarmProcessingRecord2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmProcessingRecord(ctx context.Context, sel ast.SelectionSet, v model1.AlarmProcessingRecord) graphql.Marshaler {
	return ec._AlarmProcessingRecord(ctx, sel, &v)
}

func (ec *executionContext) marshalNAlarmProcessingRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmProcessingRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.AlarmProcessingRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAlarmProcessingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmProcessingRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAlarmProcessingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmProcessingRecord(ctx context.Context, sel ast.SelectionSet, v *model1.AlarmProcessingRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AlarmProcessingRecord(ctx, sel, v)
}

func (ec *executionContext) marshalNAlarmProcessingRecordAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordAggregate(ctx context.Context, sel ast.SelectionSet, v model.AlarmProcessingRecordAggregate) graphql.Marshaler {
	return ec._AlarmProcessingRecordAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNAlarmProcessingRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordAggregate(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AlarmProcessingRecordAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAlarmProcessingRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx context.Context, v interface{}) (model.AlarmProcessingRecordBoolExp, error) {
	res, err := ec.unmarshalInputAlarmProcessingRecordBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAlarmProcessingRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordInsertInput(ctx context.Context, v interface{}) (model.AlarmProcessingRecordInsertInput, error) {
	res, err := ec.unmarshalInputAlarmProcessingRecordInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAlarmProcessingRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.AlarmProcessingRecordInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AlarmProcessingRecordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAlarmProcessingRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAlarmProcessingRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordInsertInput(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordInsertInput, error) {
	res, err := ec.unmarshalInputAlarmProcessingRecordInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAlarmProcessingRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordOrderBy(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordOrderBy, error) {
	res, err := ec.unmarshalInputAlarmProcessingRecordOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAlarmProcessingRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumn(ctx context.Context, v interface{}) (model.AlarmProcessingRecordSelectColumn, error) {
	var res model.AlarmProcessingRecordSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAlarmProcessingRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.AlarmProcessingRecordSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAlarmSupervisionPictureUpload2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmSupervisionPictureUpload(ctx context.Context, sel ast.SelectionSet, v model1.AlarmSupervisionPictureUpload) graphql.Marshaler {
	return ec._AlarmSupervisionPictureUpload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAlarmSupervisionPictureUpload2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmSupervisionPictureUploadᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.AlarmSupervisionPictureUpload) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAlarmSupervisionPictureUpload2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmSupervisionPictureUpload(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAlarmSupervisionPictureUpload2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmSupervisionPictureUpload(ctx context.Context, sel ast.SelectionSet, v *model1.AlarmSupervisionPictureUpload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AlarmSupervisionPictureUpload(ctx, sel, v)
}

func (ec *executionContext) marshalNAlarmSupervisionPictureUploadAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadAggregate(ctx context.Context, sel ast.SelectionSet, v model.AlarmSupervisionPictureUploadAggregate) graphql.Marshaler {
	return ec._AlarmSupervisionPictureUploadAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNAlarmSupervisionPictureUploadAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadAggregate(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AlarmSupervisionPictureUploadAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAlarmSupervisionPictureUploadBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx context.Context, v interface{}) (model.AlarmSupervisionPictureUploadBoolExp, error) {
	res, err := ec.unmarshalInputAlarmSupervisionPictureUploadBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAlarmSupervisionPictureUploadInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadInsertInput(ctx context.Context, v interface{}) (model.AlarmSupervisionPictureUploadInsertInput, error) {
	res, err := ec.unmarshalInputAlarmSupervisionPictureUploadInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAlarmSupervisionPictureUploadInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.AlarmSupervisionPictureUploadInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AlarmSupervisionPictureUploadInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAlarmSupervisionPictureUploadInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAlarmSupervisionPictureUploadInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadInsertInput(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadInsertInput, error) {
	res, err := ec.unmarshalInputAlarmSupervisionPictureUploadInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAlarmSupervisionPictureUploadOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadOrderBy(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadOrderBy, error) {
	res, err := ec.unmarshalInputAlarmSupervisionPictureUploadOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAlarmSupervisionPictureUploadSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumn(ctx context.Context, v interface{}) (model.AlarmSupervisionPictureUploadSelectColumn, error) {
	var res model.AlarmSupervisionPictureUploadSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAlarmSupervisionPictureUploadSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.AlarmSupervisionPictureUploadSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNDistrictAlarmContentPush2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐDistrictAlarmContentPush(ctx context.Context, sel ast.SelectionSet, v model1.DistrictAlarmContentPush) graphql.Marshaler {
	return ec._DistrictAlarmContentPush(ctx, sel, &v)
}

func (ec *executionContext) marshalNDistrictAlarmContentPush2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐDistrictAlarmContentPushᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DistrictAlarmContentPush) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDistrictAlarmContentPush2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐDistrictAlarmContentPush(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDistrictAlarmContentPush2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐDistrictAlarmContentPush(ctx context.Context, sel ast.SelectionSet, v *model1.DistrictAlarmContentPush) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DistrictAlarmContentPush(ctx, sel, v)
}

func (ec *executionContext) marshalNDistrictAlarmContentPushAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushAggregate(ctx context.Context, sel ast.SelectionSet, v model.DistrictAlarmContentPushAggregate) graphql.Marshaler {
	return ec._DistrictAlarmContentPushAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDistrictAlarmContentPushAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DistrictAlarmContentPushAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDistrictAlarmContentPushBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx context.Context, v interface{}) (model.DistrictAlarmContentPushBoolExp, error) {
	res, err := ec.unmarshalInputDistrictAlarmContentPushBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDistrictAlarmContentPushInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushInsertInput(ctx context.Context, v interface{}) (model.DistrictAlarmContentPushInsertInput, error) {
	res, err := ec.unmarshalInputDistrictAlarmContentPushInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDistrictAlarmContentPushInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DistrictAlarmContentPushInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DistrictAlarmContentPushInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDistrictAlarmContentPushInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDistrictAlarmContentPushInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushInsertInput(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushInsertInput, error) {
	res, err := ec.unmarshalInputDistrictAlarmContentPushInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDistrictAlarmContentPushOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushOrderBy(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushOrderBy, error) {
	res, err := ec.unmarshalInputDistrictAlarmContentPushOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDistrictAlarmContentPushSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumn(ctx context.Context, v interface{}) (model.DistrictAlarmContentPushSelectColumn, error) {
	var res model.DistrictAlarmContentPushSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDistrictAlarmContentPushSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DistrictAlarmContentPushSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEnterpriseAlarmSendPolice2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐEnterpriseAlarmSendPolice(ctx context.Context, sel ast.SelectionSet, v model1.EnterpriseAlarmSendPolice) graphql.Marshaler {
	return ec._EnterpriseAlarmSendPolice(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseAlarmSendPolice2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐEnterpriseAlarmSendPoliceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.EnterpriseAlarmSendPolice) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseAlarmSendPolice2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐEnterpriseAlarmSendPolice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEnterpriseAlarmSendPolice2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐEnterpriseAlarmSendPolice(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseAlarmSendPolice) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPolice(ctx, sel, v)
}

func (ec *executionContext) marshalNEnterpriseAlarmSendPoliceAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceAggregate(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseAlarmSendPoliceAggregate) graphql.Marshaler {
	return ec._EnterpriseAlarmSendPoliceAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseAlarmSendPoliceAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEnterpriseAlarmSendPoliceBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx context.Context, v interface{}) (model.EnterpriseAlarmSendPoliceBoolExp, error) {
	res, err := ec.unmarshalInputEnterpriseAlarmSendPoliceBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseAlarmSendPoliceInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceInsertInput(ctx context.Context, v interface{}) (model.EnterpriseAlarmSendPoliceInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseAlarmSendPoliceInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseAlarmSendPoliceInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseAlarmSendPoliceInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseAlarmSendPoliceInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseAlarmSendPoliceInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEnterpriseAlarmSendPoliceInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceInsertInput(ctx context.Context, v interface{}) (*model.EnterpriseAlarmSendPoliceInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseAlarmSendPoliceInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseAlarmSendPoliceOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseAlarmSendPoliceOrderBy, error) {
	res, err := ec.unmarshalInputEnterpriseAlarmSendPoliceOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseAlarmSendPoliceSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSelectColumn(ctx context.Context, v interface{}) (model.EnterpriseAlarmSendPoliceSelectColumn, error) {
	var res model.EnterpriseAlarmSendPoliceSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseAlarmSendPoliceSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseAlarmSendPoliceSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNNumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNOfflineAlarmRegistration2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐOfflineAlarmRegistration(ctx context.Context, sel ast.SelectionSet, v model1.OfflineAlarmRegistration) graphql.Marshaler {
	return ec._OfflineAlarmRegistration(ctx, sel, &v)
}

func (ec *executionContext) marshalNOfflineAlarmRegistration2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐOfflineAlarmRegistrationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.OfflineAlarmRegistration) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOfflineAlarmRegistration2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐOfflineAlarmRegistration(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNOfflineAlarmRegistration2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐOfflineAlarmRegistration(ctx context.Context, sel ast.SelectionSet, v *model1.OfflineAlarmRegistration) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OfflineAlarmRegistration(ctx, sel, v)
}

func (ec *executionContext) marshalNOfflineAlarmRegistrationAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationAggregate(ctx context.Context, sel ast.SelectionSet, v model.OfflineAlarmRegistrationAggregate) graphql.Marshaler {
	return ec._OfflineAlarmRegistrationAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNOfflineAlarmRegistrationAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationAggregate(ctx context.Context, sel ast.SelectionSet, v *model.OfflineAlarmRegistrationAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OfflineAlarmRegistrationAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOfflineAlarmRegistrationBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationBoolExp(ctx context.Context, v interface{}) (model.OfflineAlarmRegistrationBoolExp, error) {
	res, err := ec.unmarshalInputOfflineAlarmRegistrationBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOfflineAlarmRegistrationInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationInsertInput(ctx context.Context, v interface{}) (model.OfflineAlarmRegistrationInsertInput, error) {
	res, err := ec.unmarshalInputOfflineAlarmRegistrationInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOfflineAlarmRegistrationInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.OfflineAlarmRegistrationInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.OfflineAlarmRegistrationInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOfflineAlarmRegistrationInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNOfflineAlarmRegistrationInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationInsertInput(ctx context.Context, v interface{}) (*model.OfflineAlarmRegistrationInsertInput, error) {
	res, err := ec.unmarshalInputOfflineAlarmRegistrationInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOfflineAlarmRegistrationOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationOrderBy(ctx context.Context, v interface{}) (*model.OfflineAlarmRegistrationOrderBy, error) {
	res, err := ec.unmarshalInputOfflineAlarmRegistrationOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOfflineAlarmRegistrationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationSelectColumn(ctx context.Context, v interface{}) (model.OfflineAlarmRegistrationSelectColumn, error) {
	var res model.OfflineAlarmRegistrationSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOfflineAlarmRegistrationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.OfflineAlarmRegistrationSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNVehicleAlarmData2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVehicleAlarmData(ctx context.Context, sel ast.SelectionSet, v model1.VehicleAlarmData) graphql.Marshaler {
	return ec._VehicleAlarmData(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleAlarmData2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVehicleAlarmDataᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VehicleAlarmData) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleAlarmData2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVehicleAlarmData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehicleAlarmData2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVehicleAlarmData(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleAlarmData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleAlarmData(ctx, sel, v)
}

func (ec *executionContext) marshalNVehicleAlarmDataAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleAlarmDataAggregate) graphql.Marshaler {
	return ec._VehicleAlarmDataAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleAlarmDataAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleAlarmDataAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehicleAlarmDataBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx context.Context, v interface{}) (model.VehicleAlarmDataBoolExp, error) {
	res, err := ec.unmarshalInputVehicleAlarmDataBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleAlarmDataInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataInsertInput(ctx context.Context, v interface{}) (model.VehicleAlarmDataInsertInput, error) {
	res, err := ec.unmarshalInputVehicleAlarmDataInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleAlarmDataInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleAlarmDataInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleAlarmDataInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleAlarmDataInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVehicleAlarmDataInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataInsertInput(ctx context.Context, v interface{}) (*model.VehicleAlarmDataInsertInput, error) {
	res, err := ec.unmarshalInputVehicleAlarmDataInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleAlarmDataOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataOrderBy(ctx context.Context, v interface{}) (*model.VehicleAlarmDataOrderBy, error) {
	res, err := ec.unmarshalInputVehicleAlarmDataOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleAlarmDataSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumn(ctx context.Context, v interface{}) (model.VehicleAlarmDataSelectColumn, error) {
	var res model.VehicleAlarmDataSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehicleAlarmDataSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleAlarmDataSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNVideoPlatformAlarmType2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVideoPlatformAlarmType(ctx context.Context, sel ast.SelectionSet, v model1.VideoPlatformAlarmType) graphql.Marshaler {
	return ec._VideoPlatformAlarmType(ctx, sel, &v)
}

func (ec *executionContext) marshalNVideoPlatformAlarmType2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVideoPlatformAlarmTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VideoPlatformAlarmType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVideoPlatformAlarmType2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVideoPlatformAlarmType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVideoPlatformAlarmType2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVideoPlatformAlarmType(ctx context.Context, sel ast.SelectionSet, v *model1.VideoPlatformAlarmType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VideoPlatformAlarmType(ctx, sel, v)
}

func (ec *executionContext) marshalNVideoPlatformAlarmTypeAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeAggregate(ctx context.Context, sel ast.SelectionSet, v model.VideoPlatformAlarmTypeAggregate) graphql.Marshaler {
	return ec._VideoPlatformAlarmTypeAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVideoPlatformAlarmTypeAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VideoPlatformAlarmTypeAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VideoPlatformAlarmTypeAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVideoPlatformAlarmTypeBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeBoolExp(ctx context.Context, v interface{}) (model.VideoPlatformAlarmTypeBoolExp, error) {
	res, err := ec.unmarshalInputVideoPlatformAlarmTypeBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVideoPlatformAlarmTypeInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeInsertInput(ctx context.Context, v interface{}) (model.VideoPlatformAlarmTypeInsertInput, error) {
	res, err := ec.unmarshalInputVideoPlatformAlarmTypeInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVideoPlatformAlarmTypeInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VideoPlatformAlarmTypeInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VideoPlatformAlarmTypeInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVideoPlatformAlarmTypeInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVideoPlatformAlarmTypeInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeInsertInput(ctx context.Context, v interface{}) (*model.VideoPlatformAlarmTypeInsertInput, error) {
	res, err := ec.unmarshalInputVideoPlatformAlarmTypeInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVideoPlatformAlarmTypeOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeOrderBy(ctx context.Context, v interface{}) (*model.VideoPlatformAlarmTypeOrderBy, error) {
	res, err := ec.unmarshalInputVideoPlatformAlarmTypeOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVideoPlatformAlarmTypeSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeSelectColumn(ctx context.Context, v interface{}) (model.VideoPlatformAlarmTypeSelectColumn, error) {
	var res model.VideoPlatformAlarmTypeSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVideoPlatformAlarmTypeSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VideoPlatformAlarmTypeSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNVoiceAlarmRecord2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVoiceAlarmRecord(ctx context.Context, sel ast.SelectionSet, v model1.VoiceAlarmRecord) graphql.Marshaler {
	return ec._VoiceAlarmRecord(ctx, sel, &v)
}

func (ec *executionContext) marshalNVoiceAlarmRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVoiceAlarmRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VoiceAlarmRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVoiceAlarmRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVoiceAlarmRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVoiceAlarmRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVoiceAlarmRecord(ctx context.Context, sel ast.SelectionSet, v *model1.VoiceAlarmRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VoiceAlarmRecord(ctx, sel, v)
}

func (ec *executionContext) marshalNVoiceAlarmRecordAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordAggregate(ctx context.Context, sel ast.SelectionSet, v model.VoiceAlarmRecordAggregate) graphql.Marshaler {
	return ec._VoiceAlarmRecordAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVoiceAlarmRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VoiceAlarmRecordAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VoiceAlarmRecordAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVoiceAlarmRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordBoolExp(ctx context.Context, v interface{}) (model.VoiceAlarmRecordBoolExp, error) {
	res, err := ec.unmarshalInputVoiceAlarmRecordBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVoiceAlarmRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordInsertInput(ctx context.Context, v interface{}) (model.VoiceAlarmRecordInsertInput, error) {
	res, err := ec.unmarshalInputVoiceAlarmRecordInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVoiceAlarmRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VoiceAlarmRecordInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VoiceAlarmRecordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVoiceAlarmRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVoiceAlarmRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordInsertInput(ctx context.Context, v interface{}) (*model.VoiceAlarmRecordInsertInput, error) {
	res, err := ec.unmarshalInputVoiceAlarmRecordInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVoiceAlarmRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordOrderBy(ctx context.Context, v interface{}) (*model.VoiceAlarmRecordOrderBy, error) {
	res, err := ec.unmarshalInputVoiceAlarmRecordOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVoiceAlarmRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordSelectColumn(ctx context.Context, v interface{}) (model.VoiceAlarmRecordSelectColumn, error) {
	var res model.VoiceAlarmRecordSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVoiceAlarmRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VoiceAlarmRecordSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOAlarmProcessingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmProcessingRecord(ctx context.Context, sel ast.SelectionSet, v *model1.AlarmProcessingRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmProcessingRecord(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmProcessingRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmProcessingRecordAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmProcessingRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmProcessingRecordAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAlarmProcessingRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx context.Context, v interface{}) ([]*model.AlarmProcessingRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AlarmProcessingRecordBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOAlarmProcessingRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAlarmProcessingRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAlarmProcessingRecordBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAlarmProcessingRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordIncInput(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAlarmProcessingRecordIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAlarmProcessingRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmProcessingRecordMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmProcessingRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMinFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmProcessingRecordMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmProcessingRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmProcessingRecordMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAlarmProcessingRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordOrderByᚄ(ctx context.Context, v interface{}) ([]*model.AlarmProcessingRecordOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AlarmProcessingRecordOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAlarmProcessingRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAlarmProcessingRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.AlarmProcessingRecordSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.AlarmProcessingRecordSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAlarmProcessingRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAlarmProcessingRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AlarmProcessingRecordSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAlarmProcessingRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOAlarmProcessingRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSetInput(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAlarmProcessingRecordSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAlarmProcessingRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmProcessingRecordStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmProcessingRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmProcessingRecordStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmProcessingRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmProcessingRecordStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmProcessingRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSumFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmProcessingRecordSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmProcessingRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmProcessingRecordVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmProcessingRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmProcessingRecordVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmProcessingRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmProcessingRecordVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmSupervisionPictureUpload2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐAlarmSupervisionPictureUpload(ctx context.Context, sel ast.SelectionSet, v *model1.AlarmSupervisionPictureUpload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmSupervisionPictureUpload(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmSupervisionPictureUploadAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmSupervisionPictureUploadAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmSupervisionPictureUploadAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmSupervisionPictureUploadAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAlarmSupervisionPictureUploadBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx context.Context, v interface{}) ([]*model.AlarmSupervisionPictureUploadBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AlarmSupervisionPictureUploadBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOAlarmSupervisionPictureUploadBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAlarmSupervisionPictureUploadBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAlarmSupervisionPictureUploadBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAlarmSupervisionPictureUploadIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadIncInput(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAlarmSupervisionPictureUploadIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAlarmSupervisionPictureUploadMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmSupervisionPictureUploadMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmSupervisionPictureUploadMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMinFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmSupervisionPictureUploadMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmSupervisionPictureUploadMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmSupervisionPictureUploadMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAlarmSupervisionPictureUploadOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadOrderByᚄ(ctx context.Context, v interface{}) ([]*model.AlarmSupervisionPictureUploadOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AlarmSupervisionPictureUploadOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAlarmSupervisionPictureUploadOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAlarmSupervisionPictureUploadSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.AlarmSupervisionPictureUploadSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.AlarmSupervisionPictureUploadSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAlarmSupervisionPictureUploadSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAlarmSupervisionPictureUploadSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AlarmSupervisionPictureUploadSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAlarmSupervisionPictureUploadSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOAlarmSupervisionPictureUploadSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSetInput(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAlarmSupervisionPictureUploadSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAlarmSupervisionPictureUploadStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmSupervisionPictureUploadStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmSupervisionPictureUploadStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmSupervisionPictureUploadStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmSupervisionPictureUploadStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmSupervisionPictureUploadStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmSupervisionPictureUploadSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSumFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmSupervisionPictureUploadSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmSupervisionPictureUploadVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmSupervisionPictureUploadVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmSupervisionPictureUploadVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmSupervisionPictureUploadVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOAlarmSupervisionPictureUploadVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlarmSupervisionPictureUploadVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBigintComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBooleanComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODistrictAlarmContentPush2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐDistrictAlarmContentPush(ctx context.Context, sel ast.SelectionSet, v *model1.DistrictAlarmContentPush) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DistrictAlarmContentPush(ctx, sel, v)
}

func (ec *executionContext) marshalODistrictAlarmContentPushAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DistrictAlarmContentPushAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODistrictAlarmContentPushAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DistrictAlarmContentPushAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODistrictAlarmContentPushBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx context.Context, v interface{}) ([]*model.DistrictAlarmContentPushBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DistrictAlarmContentPushBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODistrictAlarmContentPushBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODistrictAlarmContentPushBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDistrictAlarmContentPushBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODistrictAlarmContentPushIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushIncInput(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDistrictAlarmContentPushIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODistrictAlarmContentPushMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DistrictAlarmContentPushMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODistrictAlarmContentPushMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DistrictAlarmContentPushMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODistrictAlarmContentPushMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DistrictAlarmContentPushMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODistrictAlarmContentPushOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DistrictAlarmContentPushOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DistrictAlarmContentPushOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDistrictAlarmContentPushOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODistrictAlarmContentPushSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DistrictAlarmContentPushSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DistrictAlarmContentPushSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDistrictAlarmContentPushSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODistrictAlarmContentPushSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DistrictAlarmContentPushSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDistrictAlarmContentPushSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODistrictAlarmContentPushSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSetInput(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDistrictAlarmContentPushSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODistrictAlarmContentPushStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DistrictAlarmContentPushStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODistrictAlarmContentPushStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DistrictAlarmContentPushStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODistrictAlarmContentPushStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DistrictAlarmContentPushStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODistrictAlarmContentPushSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DistrictAlarmContentPushSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODistrictAlarmContentPushVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DistrictAlarmContentPushVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODistrictAlarmContentPushVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DistrictAlarmContentPushVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODistrictAlarmContentPushVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DistrictAlarmContentPushVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPolice2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐEnterpriseAlarmSendPolice(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseAlarmSendPolice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPolice(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseAlarmSendPoliceBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx context.Context, v interface{}) ([]*model.EnterpriseAlarmSendPoliceBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseAlarmSendPoliceBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEnterpriseAlarmSendPoliceBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseAlarmSendPoliceBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx context.Context, v interface{}) (*model.EnterpriseAlarmSendPoliceBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseAlarmSendPoliceBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEnterpriseAlarmSendPoliceIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceIncInput(ctx context.Context, v interface{}) (*model.EnterpriseAlarmSendPoliceIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseAlarmSendPoliceIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseAlarmSendPoliceOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseAlarmSendPoliceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseAlarmSendPoliceOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseAlarmSendPoliceOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseAlarmSendPoliceSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseAlarmSendPoliceSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseAlarmSendPoliceSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseAlarmSendPoliceSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseAlarmSendPoliceSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseAlarmSendPoliceSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEnterpriseAlarmSendPoliceSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSetInput(ctx context.Context, v interface{}) (*model.EnterpriseAlarmSendPoliceSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseAlarmSendPoliceSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOJsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNJsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOJsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalONumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNNumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalONumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx context.Context, v interface{}) (*model2.NumericComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNumericComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOfflineAlarmRegistration2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐOfflineAlarmRegistration(ctx context.Context, sel ast.SelectionSet, v *model1.OfflineAlarmRegistration) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineAlarmRegistration(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineAlarmRegistrationAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineAlarmRegistrationAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineAlarmRegistrationAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineAlarmRegistrationAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineAlarmRegistrationAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineAlarmRegistrationAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOfflineAlarmRegistrationBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationBoolExp(ctx context.Context, v interface{}) ([]*model.OfflineAlarmRegistrationBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.OfflineAlarmRegistrationBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOOfflineAlarmRegistrationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOfflineAlarmRegistrationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationBoolExp(ctx context.Context, v interface{}) (*model.OfflineAlarmRegistrationBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOfflineAlarmRegistrationBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOfflineAlarmRegistrationIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationIncInput(ctx context.Context, v interface{}) (*model.OfflineAlarmRegistrationIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOfflineAlarmRegistrationIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOfflineAlarmRegistrationMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineAlarmRegistrationMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineAlarmRegistrationMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineAlarmRegistrationMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationMinFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineAlarmRegistrationMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineAlarmRegistrationMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineAlarmRegistrationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.OfflineAlarmRegistrationMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineAlarmRegistrationMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOfflineAlarmRegistrationOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationOrderByᚄ(ctx context.Context, v interface{}) ([]*model.OfflineAlarmRegistrationOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.OfflineAlarmRegistrationOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOfflineAlarmRegistrationOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOfflineAlarmRegistrationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.OfflineAlarmRegistrationSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.OfflineAlarmRegistrationSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOfflineAlarmRegistrationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOOfflineAlarmRegistrationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OfflineAlarmRegistrationSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOfflineAlarmRegistrationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOOfflineAlarmRegistrationSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationSetInput(ctx context.Context, v interface{}) (*model.OfflineAlarmRegistrationSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOfflineAlarmRegistrationSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOfflineAlarmRegistrationStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineAlarmRegistrationStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineAlarmRegistrationStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineAlarmRegistrationStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineAlarmRegistrationStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineAlarmRegistrationStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineAlarmRegistrationStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineAlarmRegistrationStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineAlarmRegistrationStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineAlarmRegistrationSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationSumFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineAlarmRegistrationSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineAlarmRegistrationSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineAlarmRegistrationVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineAlarmRegistrationVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineAlarmRegistrationVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineAlarmRegistrationVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineAlarmRegistrationVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineAlarmRegistrationVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOOfflineAlarmRegistrationVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐOfflineAlarmRegistrationVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.OfflineAlarmRegistrationVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OfflineAlarmRegistrationVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNPoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOPoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx context.Context, v interface{}) (*model2.PointComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPointComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimestamptzComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleAlarmData2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVehicleAlarmData(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleAlarmData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmData(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmDataAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmDataAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmDataAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmDataAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleAlarmDataBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleAlarmDataBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleAlarmDataBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVehicleAlarmDataBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleAlarmDataBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx context.Context, v interface{}) (*model.VehicleAlarmDataBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleAlarmDataBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVehicleAlarmDataIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataIncInput(ctx context.Context, v interface{}) (*model.VehicleAlarmDataIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleAlarmDataIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleAlarmDataMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmDataMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmDataMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmDataMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmDataMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmDataMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleAlarmDataOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleAlarmDataOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleAlarmDataOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleAlarmDataOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleAlarmDataSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleAlarmDataSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleAlarmDataSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleAlarmDataSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVehicleAlarmDataSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleAlarmDataSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleAlarmDataSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVehicleAlarmDataSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSetInput(ctx context.Context, v interface{}) (*model.VehicleAlarmDataSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleAlarmDataSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleAlarmDataStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmDataStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmDataStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmDataStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmDataStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmDataStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmDataSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmDataSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmDataVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmDataVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmDataVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmDataVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmDataVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmDataVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVideoPlatformAlarmType2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVideoPlatformAlarmType(ctx context.Context, sel ast.SelectionSet, v *model1.VideoPlatformAlarmType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VideoPlatformAlarmType(ctx, sel, v)
}

func (ec *executionContext) marshalOVideoPlatformAlarmTypeAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VideoPlatformAlarmTypeAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VideoPlatformAlarmTypeAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVideoPlatformAlarmTypeAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VideoPlatformAlarmTypeAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VideoPlatformAlarmTypeAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVideoPlatformAlarmTypeBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeBoolExp(ctx context.Context, v interface{}) ([]*model.VideoPlatformAlarmTypeBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VideoPlatformAlarmTypeBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVideoPlatformAlarmTypeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVideoPlatformAlarmTypeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeBoolExp(ctx context.Context, v interface{}) (*model.VideoPlatformAlarmTypeBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVideoPlatformAlarmTypeBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVideoPlatformAlarmTypeIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeIncInput(ctx context.Context, v interface{}) (*model.VideoPlatformAlarmTypeIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVideoPlatformAlarmTypeIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVideoPlatformAlarmTypeMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VideoPlatformAlarmTypeMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VideoPlatformAlarmTypeMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVideoPlatformAlarmTypeMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VideoPlatformAlarmTypeMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VideoPlatformAlarmTypeMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVideoPlatformAlarmTypeMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VideoPlatformAlarmTypeMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VideoPlatformAlarmTypeMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVideoPlatformAlarmTypeOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VideoPlatformAlarmTypeOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VideoPlatformAlarmTypeOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVideoPlatformAlarmTypeOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVideoPlatformAlarmTypeSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VideoPlatformAlarmTypeSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VideoPlatformAlarmTypeSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVideoPlatformAlarmTypeSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVideoPlatformAlarmTypeSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VideoPlatformAlarmTypeSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVideoPlatformAlarmTypeSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVideoPlatformAlarmTypeSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeSetInput(ctx context.Context, v interface{}) (*model.VideoPlatformAlarmTypeSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVideoPlatformAlarmTypeSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVideoPlatformAlarmTypeStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VideoPlatformAlarmTypeStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VideoPlatformAlarmTypeStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVideoPlatformAlarmTypeStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VideoPlatformAlarmTypeStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VideoPlatformAlarmTypeStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVideoPlatformAlarmTypeStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VideoPlatformAlarmTypeStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VideoPlatformAlarmTypeStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVideoPlatformAlarmTypeSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VideoPlatformAlarmTypeSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VideoPlatformAlarmTypeSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVideoPlatformAlarmTypeVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VideoPlatformAlarmTypeVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VideoPlatformAlarmTypeVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVideoPlatformAlarmTypeVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VideoPlatformAlarmTypeVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VideoPlatformAlarmTypeVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVideoPlatformAlarmTypeVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVideoPlatformAlarmTypeVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VideoPlatformAlarmTypeVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VideoPlatformAlarmTypeVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVoiceAlarmRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋmodelᚐVoiceAlarmRecord(ctx context.Context, sel ast.SelectionSet, v *model1.VoiceAlarmRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VoiceAlarmRecord(ctx, sel, v)
}

func (ec *executionContext) marshalOVoiceAlarmRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VoiceAlarmRecordAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VoiceAlarmRecordAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVoiceAlarmRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VoiceAlarmRecordAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VoiceAlarmRecordAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVoiceAlarmRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordBoolExp(ctx context.Context, v interface{}) ([]*model.VoiceAlarmRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VoiceAlarmRecordBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVoiceAlarmRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVoiceAlarmRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordBoolExp(ctx context.Context, v interface{}) (*model.VoiceAlarmRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVoiceAlarmRecordBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVoiceAlarmRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordIncInput(ctx context.Context, v interface{}) (*model.VoiceAlarmRecordIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVoiceAlarmRecordIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVoiceAlarmRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VoiceAlarmRecordMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VoiceAlarmRecordMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVoiceAlarmRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VoiceAlarmRecordMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VoiceAlarmRecordMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVoiceAlarmRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VoiceAlarmRecordMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VoiceAlarmRecordMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVoiceAlarmRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VoiceAlarmRecordOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VoiceAlarmRecordOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVoiceAlarmRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVoiceAlarmRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VoiceAlarmRecordSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VoiceAlarmRecordSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVoiceAlarmRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVoiceAlarmRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VoiceAlarmRecordSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVoiceAlarmRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVoiceAlarmRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordSetInput(ctx context.Context, v interface{}) (*model.VoiceAlarmRecordSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVoiceAlarmRecordSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVoiceAlarmRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VoiceAlarmRecordStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VoiceAlarmRecordStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVoiceAlarmRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VoiceAlarmRecordStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VoiceAlarmRecordStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVoiceAlarmRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VoiceAlarmRecordStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VoiceAlarmRecordStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVoiceAlarmRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VoiceAlarmRecordSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VoiceAlarmRecordSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVoiceAlarmRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VoiceAlarmRecordVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VoiceAlarmRecordVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVoiceAlarmRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VoiceAlarmRecordVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VoiceAlarmRecordVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVoiceAlarmRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVoiceAlarmRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VoiceAlarmRecordVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VoiceAlarmRecordVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
